
Final_Graduation_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  08013260  08013260  00014260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fe0  08013fe0  000151f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013fe0  08013fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fe8  08013fe8  000151f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fe8  08013fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013fec  08013fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08013ff0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000151f0  2**0
                  CONTENTS
 10 .bss          000153ec  200001f0  200001f0  000151f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200155dc  200155dc  000151f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023a6c  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005623  00000000  00000000  00038c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002090  00000000  00000000  0003e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000192e  00000000  00000000  00040340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a93a  00000000  00000000  00041c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e40f  00000000  00000000  0006c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecfd4  00000000  00000000  0009a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018798b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f44  00000000  00000000  001879d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00191914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013248 	.word	0x08013248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08013248 	.word	0x08013248

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <word_to_byte>:
 *  Created on: Apr 22, 2025
 *      Author: ADMIN
 */
#include "main.h"

unsigned char word_to_byte(unsigned int addr, int index, int lowerfirst) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
    unsigned char value = (addr >> (8 * (index - 1))) & 0x000000FF;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	75fb      	strb	r3, [r7, #23]
    return value;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <get_crc>:

unsigned int get_crc(unsigned char* buff, int length) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    unsigned int crc = 0xFFFFFFFF;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	617b      	str	r3, [r7, #20]
    int i;

    for (i = 0; i < length; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e01f      	b.n	8001016 <get_crc+0x56>
        crc = crc ^ buff[i];
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4053      	eors	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 32; j++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e00e      	b.n	800100a <get_crc+0x4a>
            if (crc & 0x80000000) {
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da05      	bge.n	8000ffe <get_crc+0x3e>
                crc = (crc << 1) ^ 0x04C11DB7;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005a      	lsls	r2, r3, #1
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <get_crc+0x6c>)
 8000ff8:	4053      	eors	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e002      	b.n	8001004 <get_crc+0x44>
            } else {
                crc = (crc << 1);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 32; j++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b1f      	cmp	r3, #31
 800100e:	dded      	ble.n	8000fec <get_crc+0x2c>
    for (i = 0; i < length; i++) {
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	3301      	adds	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbdb      	blt.n	8000fd6 <get_crc+0x16>
            }
        }
    }

    return crc;
 800101e:	697b      	ldr	r3, [r7, #20]
}
 8001020:	4618      	mov	r0, r3
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	04c11db7 	.word	0x04c11db7

08001030 <bootloader_send_ack>:


/*This fuction sends ACK if CRC matches along with "length to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	char str[40];
	//here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8001040:	23a5      	movs	r3, #165	@ 0xa5
 8001042:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	737b      	strb	r3, [r7, #13]
	sprintf(str, "BL_ACK: 0x%X, len: %d\r\n", ack_buf[0], ack_buf[1]);
 8001048:	7b3b      	ldrb	r3, [r7, #12]
 800104a:	461a      	mov	r2, r3
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	f107 0010 	add.w	r0, r7, #16
 8001052:	490a      	ldr	r1, [pc, #40]	@ (800107c <bootloader_send_ack+0x4c>)
 8001054:	f00e fc6e 	bl	800f934 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f917 	bl	8000290 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0110 	add.w	r1, r7, #16
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <bootloader_send_ack+0x50>)
 8001070:	f005 ff1c 	bl	8006eac <HAL_UART_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	@ 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08013260 	.word	0x08013260
 8001080:	2000037c 	.word	0x2000037c

08001084 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
	char str[40];
	uint8_t nack = BL_NACK;
 800108a:	237f      	movs	r3, #127	@ 0x7f
 800108c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	sprintf(str, "BL_NACK: 0x%X\r\n", nack);
 8001090:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	490a      	ldr	r1, [pc, #40]	@ (80010c0 <bootloader_send_nack+0x3c>)
 8001098:	4618      	mov	r0, r3
 800109a:	f00e fc4b 	bl	800f934 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f8f5 	bl	8000290 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	1d39      	adds	r1, r7, #4
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <bootloader_send_nack+0x40>)
 80010b2:	f005 fefb 	bl	8006eac <HAL_UART_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	@ 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08013278 	.word	0x08013278
 80010c4:	2000037c 	.word	0x2000037c

080010c8 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 80010d4:	23ff      	movs	r3, #255	@ 0xff
 80010d6:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00f      	b.n	80010fe <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	480e      	ldr	r0, [pc, #56]	@ (800112c <bootloader_verify_crc+0x64>)
 80010f2:	f002 fc51 	bl	8003998 <HAL_CRC_Accumulate>
 80010f6:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	3301      	adds	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3eb      	bcc.n	80010de <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <bootloader_verify_crc+0x64>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <bootloader_verify_crc+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0201 	orr.w	r2, r2, #1
 8001114:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d101      	bne.n	8001122 <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8001122:	2301      	movs	r3, #1
 }
 8001124:	4618      	mov	r0, r3
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000254 	.word	0x20000254

08001130 <bl_get_version>:

uint8_t bl_get_version(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	return (uint8_t)VERSION;
 8001134:	2310      	movs	r3, #16
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <bl_get_cid>:

uint16_t bl_get_cid(){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (DBGMCU->IDCODE) & 0xFFF;
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <bl_get_cid+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	80fb      	strh	r3, [r7, #6]
	return cid;
 8001152:	88fb      	ldrh	r3, [r7, #6]
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e0042000 	.word	0xe0042000

08001164 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	@ 0x40
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t command_packet_len = *bl_rx_buffer + 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4));
 8001176:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800117a:	3b04      	subs	r3, #4
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!bootloader_verify_crc(bl_rx_buffer, 2, host_crc))
 8001184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001186:	2102      	movs	r1, #2
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff9d 	bl	80010c8 <bootloader_verify_crc>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11f      	bne.n	80011d4 <bootloader_handle_getcid_cmd+0x70>
	{
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff48 	bl	8001030 <bootloader_send_ack>
		uint16_t cid = bl_get_cid();
 80011a0:	f7ff ffce 	bl	8001140 <bl_get_cid>
 80011a4:	4603      	mov	r3, r0
 80011a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
		char str[40];
		sprintf(str, "ID of Device: 0x%X\n", cid);
 80011a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <bootloader_handle_getcid_cmd+0x7c>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00e fbbf 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f868 	bl	8000290 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f107 010c 	add.w	r1, r7, #12
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <bootloader_handle_getcid_cmd+0x80>)
 80011ce:	f005 fe6d 	bl	8006eac <HAL_UART_Transmit>
	}
	else{
		bootloader_send_nack();
	}
}
 80011d2:	e001      	b.n	80011d8 <bootloader_handle_getcid_cmd+0x74>
		bootloader_send_nack();
 80011d4:	f7ff ff56 	bl	8001084 <bootloader_send_nack>
}
 80011d8:	bf00      	nop
 80011da:	3740      	adds	r7, #64	@ 0x40
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08013288 	.word	0x08013288
 80011e4:	2000037c 	.word	0x2000037c

080011e8 <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t* bl_rx_buffer)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b090      	sub	sp, #64	@ 0x40
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint8_t command_package_len = bl_rx_buffer[0] + 1;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_package_len - 4));
 80011fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011fe:	3b04      	subs	r3, #4
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (!bootloader_verify_crc(bl_rx_buffer, command_package_len - 4, host_crc))
 8001208:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800120c:	3b04      	subs	r3, #4
 800120e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff58 	bl	80010c8 <bootloader_verify_crc>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d121      	bne.n	8001262 <bootloader_handle_getver_cmd+0x7a>
	{
		bootloader_send_ack(bl_rx_buffer[0], 1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff03 	bl	8001030 <bootloader_send_ack>
		uint8_t bl_ver = bl_get_version();
 800122a:	f7ff ff81 	bl	8001130 <bl_get_version>
 800122e:	4603      	mov	r3, r0
 8001230:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		char str[40];
		sprintf(str, "Version: 0x%X\n", bl_ver);
 8001234:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <bootloader_handle_getver_cmd+0x88>)
 800123e:	4618      	mov	r0, r3
 8001240:	f00e fb78 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f821 	bl	8000290 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 010c 	add.w	r1, r7, #12
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <bootloader_handle_getver_cmd+0x8c>)
 800125c:	f005 fe26 	bl	8006eac <HAL_UART_Transmit>
	{
		bootloader_send_nack();
	}


}
 8001260:	e001      	b.n	8001266 <bootloader_handle_getver_cmd+0x7e>
		bootloader_send_nack();
 8001262:	f7ff ff0f 	bl	8001084 <bootloader_send_nack>
}
 8001266:	bf00      	nop
 8001268:	3740      	adds	r7, #64	@ 0x40
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801329c 	.word	0x0801329c
 8001274:	2000037c 	.word	0x2000037c

08001278 <bootloader_go_to_addr>:

void bootloader_go_to_addr(uint8_t *bl_rx_buffer)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    uint32_t go_address = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t command_package_len = bl_rx_buffer[0] + 1;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_package_len - 4));
 800128e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001292:	3b04      	subs	r3, #4
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
    char *err = "CRC failed\n";
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <bootloader_go_to_addr+0xcc>)
 800129e:	613b      	str	r3, [r7, #16]
    char *err_go_addr = "Invalid go_address\n";
 80012a0:	4b29      	ldr	r3, [pc, #164]	@ (8001348 <bootloader_go_to_addr+0xd0>)
 80012a2:	60fb      	str	r3, [r7, #12]

    // Verify CRC
    if (bootloader_verify_crc(bl_rx_buffer, command_package_len - 4, host_crc)) {
 80012a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80012a8:	3b04      	subs	r3, #4
 80012aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff0a 	bl	80010c8 <bootloader_verify_crc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <bootloader_go_to_addr+0x5a>
        bootloader_send_nack();
 80012ba:	f7ff fee3 	bl	8001084 <bootloader_send_nack>
        xQueueSend(q_print, &err, portMAX_DELAY);
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <bootloader_go_to_addr+0xd4>)
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 0110 	add.w	r1, r7, #16
 80012c6:	2300      	movs	r3, #0
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	f00a ffcc 	bl	800c268 <xQueueGenericSend>
 80012d0:	e035      	b.n	800133e <bootloader_go_to_addr+0xc6>
        return;
    }

    bootloader_send_ack(bl_rx_buffer[0], 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fea9 	bl	8001030 <bootloader_send_ack>
    go_address = *((uint32_t *)&bl_rx_buffer[2]);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint32_t msp_value = *(volatile uint32_t *)go_address;
 80012e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	623b      	str	r3, [r7, #32]

    if (verify_address(go_address) == ADDR_INVALID)
 80012ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012ee:	f000 f833 	bl	8001358 <verify_address>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10a      	bne.n	800130e <bootloader_go_to_addr+0x96>
    {
    	bootloader_send_nack();
 80012f8:	f7ff fec4 	bl	8001084 <bootloader_send_nack>
    	xQueueSend(q_print, &err_go_addr, portMAX_DELAY);
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <bootloader_go_to_addr+0xd4>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	2300      	movs	r3, #0
 8001306:	f04f 32ff 	mov.w	r2, #4294967295
 800130a:	f00a ffad 	bl	800c268 <xQueueGenericSend>
    }

    uint32_t resethandler_address = *(volatile uint32_t *)(go_address + 4);
 800130e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001310:	3304      	adds	r3, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001316:	b672      	cpsid	i
}
 8001318:	bf00      	nop

    // Disable interrupts and clear pending interrupts
    __disable_irq();
    NVIC->ICPR[0] = 0xFFFFFFFF; // Clear pending interrupts (adjust for your MCU)
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <bootloader_go_to_addr+0xd8>)
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

    // Set VTOR to application’s vector table
    SCB->VTOR = go_address;
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <bootloader_go_to_addr+0xdc>)
 8001326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001328:	6093      	str	r3, [r2, #8]
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f383 8808 	msr	MSP, r3
}
 8001334:	bf00      	nop

    // Configure MSP
    __set_MSP(msp_value);

    // Jump to application
    void (*app_reset_handler)(void) = (void *)resethandler_address;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	61bb      	str	r3, [r7, #24]

    app_reset_handler();
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4798      	blx	r3
}
 800133e:	3730      	adds	r7, #48	@ 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	080132ac 	.word	0x080132ac
 8001348:	080132b8 	.word	0x080132b8
 800134c:	200004f8 	.word	0x200004f8
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <verify_address>:

//verify the address sent by the host .(check if address in range from start to end of add mem like sram1, sram2,...)
uint8_t verify_address(uint32_t go_address)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= 0x2001BFFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001366:	d305      	bcc.n	8001374 <verify_address+0x1c>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <verify_address+0x54>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d201      	bcs.n	8001374 <verify_address+0x1c>
	{
		return ADDR_VALID;
 8001370:	2300      	movs	r3, #0
 8001372:	e014      	b.n	800139e <verify_address+0x46>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= 0x2001FFFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <verify_address+0x54>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d305      	bcc.n	8001388 <verify_address+0x30>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <verify_address+0x58>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d801      	bhi.n	8001388 <verify_address+0x30>
	{
		return ADDR_VALID;
 8001384:	2300      	movs	r3, #0
 8001386:	e00a      	b.n	800139e <verify_address+0x46>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800138e:	d305      	bcc.n	800139c <verify_address+0x44>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001396:	d201      	bcs.n	800139c <verify_address+0x44>
	{
		return ADDR_VALID;
 8001398:	2300      	movs	r3, #0
 800139a:	e000      	b.n	800139e <verify_address+0x46>
//	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
//	{
//		return ADDR_VALID;
//	}
	else
		return ADDR_INVALID;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2001c000 	.word	0x2001c000
 80013b0:	2001ffff 	.word	0x2001ffff

080013b4 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 80013c4:	f002 fbfa 	bl	8003bbc <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	e014      	b.n	80013f8 <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	18d1      	adds	r1, r2, r3
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2200      	movs	r2, #0
 80013e0:	461c      	mov	r4, r3
 80013e2:	4615      	mov	r5, r2
 80013e4:	4622      	mov	r2, r4
 80013e6:	462b      	mov	r3, r5
 80013e8:	2000      	movs	r0, #0
 80013ea:	f002 fb93 	bl	8003b14 <HAL_FLASH_Program>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	3301      	adds	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3e6      	bcc.n	80013ce <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 8001400:	f002 fbfe 	bl	8003c00 <HAL_FLASH_Lock>

     return status;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001410 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
 	uint8_t write_status = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
 	uint8_t chksum =0, len=0;
 8001420:	2300      	movs	r3, #0
 8001422:	777b      	strb	r3, [r7, #29]
 8001424:	2300      	movs	r3, #0
 8001426:	773b      	strb	r3, [r7, #28]
 	len = pBuffer[0];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	773b      	strb	r3, [r7, #28]
 	uint8_t payload_len = pBuffer[6];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	799b      	ldrb	r3, [r3, #6]
 8001432:	76fb      	strb	r3, [r7, #27]

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800143a:	617b      	str	r3, [r7, #20]

 	chksum = pBuffer[len];
 800143c:	7f3b      	ldrb	r3, [r7, #28]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	777b      	strb	r3, [r7, #29]

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <bootloader_handle_mem_write_cmd+0x9c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	613b      	str	r3, [r7, #16]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3b04      	subs	r3, #4
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <bootloader_handle_mem_write_cmd+0x9c>)
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	3b04      	subs	r3, #4
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4619      	mov	r1, r3
 8001462:	4812      	ldr	r0, [pc, #72]	@ (80014ac <bootloader_handle_mem_write_cmd+0x9c>)
 8001464:	f7ff fe30 	bl	80010c8 <bootloader_verify_crc>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <bootloader_handle_mem_write_cmd+0x90>
 	{

         bootloader_send_ack(pBuffer[0],1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fddb 	bl	8001030 <bootloader_send_ack>

 		if( verify_address(mem_address) == ADDR_VALID )
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff6c 	bl	8001358 <verify_address>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <bootloader_handle_mem_write_cmd+0x8a>
 		{

             //glow the led to indicate bootloader is currently writing to memory

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3307      	adds	r3, #7
 800148a:	7efa      	ldrb	r2, [r7, #27]
 800148c:	6979      	ldr	r1, [r7, #20]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff90 	bl	80013b4 <execute_mem_write>
 8001494:	4603      	mov	r3, r0
 8001496:	77bb      	strb	r3, [r7, #30]
 	}else
 	{
         bootloader_send_nack();
 	}

 }
 8001498:	e004      	b.n	80014a4 <bootloader_handle_mem_write_cmd+0x94>
 			bootloader_send_nack();
 800149a:	f7ff fdf3 	bl	8001084 <bootloader_send_nack>
 }
 800149e:	e001      	b.n	80014a4 <bootloader_handle_mem_write_cmd+0x94>
         bootloader_send_nack();
 80014a0:	f7ff fdf0 	bl	8001084 <bootloader_send_nack>
 }
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200003dc 	.word	0x200003dc

080014b0 <bootloader_read_data>:

void bootloader_read_data(uint8_t* bl_rx_buffer)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	switch(bl_rx_buffer[1])
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	3b51      	subs	r3, #81	@ 0x51
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d821      	bhi.n	8001508 <bootloader_read_data+0x58>
 80014c4:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <bootloader_read_data+0x1c>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014e9 	.word	0x080014e9
 80014d0:	08001509 	.word	0x08001509
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	08001509 	.word	0x08001509
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001509 	.word	0x08001509
 80014e4:	08001501 	.word	0x08001501
	{
	case BL_GET_VER:
		bootloader_handle_getver_cmd(bl_rx_buffer);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe7d 	bl	80011e8 <bootloader_handle_getver_cmd>
		break;
 80014ee:	e00b      	b.n	8001508 <bootloader_read_data+0x58>
	case BL_GET_CID:
		bootloader_handle_getcid_cmd(bl_rx_buffer);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fe37 	bl	8001164 <bootloader_handle_getcid_cmd>
		break;
 80014f6:	e007      	b.n	8001508 <bootloader_read_data+0x58>
	case BL_GO_TO_ADDR:
		bootloader_go_to_addr(bl_rx_buffer);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff febd 	bl	8001278 <bootloader_go_to_addr>
		break;
 80014fe:	e003      	b.n	8001508 <bootloader_read_data+0x58>
	case BL_MEM_WRITE:
		bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff85 	bl	8001410 <bootloader_handle_mem_write_cmd>
		break;
 8001506:	bf00      	nop
	}
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f001 fd99 	bl	800304c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f8b5 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 fa4d 	bl	80019bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001522:	f000 fa21 	bl	8001968 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001526:	f000 f917 	bl	8001758 <MX_ADC1_Init>
  MX_I2C1_Init();
 800152a:	f000 f97b 	bl	8001824 <MX_I2C1_Init>
  MX_CRC_Init();
 800152e:	f000 f965 	bl	80017fc <MX_CRC_Init>
  MX_TIM1_Init();
 8001532:	f000 f9c5 	bl	80018c0 <MX_TIM1_Init>
  MX_SDIO_SD_Init();
 8001536:	f000 f9a3 	bl	8001880 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800153a:	f007 fb73 	bl	8008c24 <MX_FATFS_Init>
//  {
//    snprintf(TxBuffer, sizeof(TxBuffer), "SD Card Mounted Successfully!\r\n");
//    HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
//  }

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 800153e:	2201      	movs	r2, #1
 8001540:	4935      	ldr	r1, [pc, #212]	@ (8001618 <main+0x108>)
 8001542:	4836      	ldr	r0, [pc, #216]	@ (800161c <main+0x10c>)
 8001544:	f005 fd3d 	bl	8006fc2 <HAL_UART_Receive_IT>

  xTaskCreate(handle_cmd_task, "Handle command", 200, NULL, 2, &cmd_task);
 8001548:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <main+0x110>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	2302      	movs	r3, #2
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	22c8      	movs	r2, #200	@ 0xc8
 8001554:	4933      	ldr	r1, [pc, #204]	@ (8001624 <main+0x114>)
 8001556:	4834      	ldr	r0, [pc, #208]	@ (8001628 <main+0x118>)
 8001558:	f00b fb40 	bl	800cbdc <xTaskCreate>

  xTaskCreate(handle_measure_task, "measure qual of env ", 200, NULL, 2, &measure_task);
 800155c:	4b33      	ldr	r3, [pc, #204]	@ (800162c <main+0x11c>)
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	22c8      	movs	r2, #200	@ 0xc8
 8001568:	4931      	ldr	r1, [pc, #196]	@ (8001630 <main+0x120>)
 800156a:	4832      	ldr	r0, [pc, #200]	@ (8001634 <main+0x124>)
 800156c:	f00b fb36 	bl	800cbdc <xTaskCreate>

  xTaskCreate(printmsg, "Display menu", 200, NULL, 2, &msg_task);
 8001570:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <main+0x128>)
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	2302      	movs	r3, #2
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	22c8      	movs	r2, #200	@ 0xc8
 800157c:	492f      	ldr	r1, [pc, #188]	@ (800163c <main+0x12c>)
 800157e:	4830      	ldr	r0, [pc, #192]	@ (8001640 <main+0x130>)
 8001580:	f00b fb2c 	bl	800cbdc <xTaskCreate>

  xTaskCreate(handle_menu_task, "Menu options", 200, NULL, 2, &menu_task);
 8001584:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <main+0x134>)
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2302      	movs	r3, #2
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	22c8      	movs	r2, #200	@ 0xc8
 8001590:	492d      	ldr	r1, [pc, #180]	@ (8001648 <main+0x138>)
 8001592:	482e      	ldr	r0, [pc, #184]	@ (800164c <main+0x13c>)
 8001594:	f00b fb22 	bl	800cbdc <xTaskCreate>

  xTaskCreate(handle_led_task, "LED blinking", 200, NULL, 2, &led_task);
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <main+0x140>)
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2302      	movs	r3, #2
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	22c8      	movs	r2, #200	@ 0xc8
 80015a4:	492b      	ldr	r1, [pc, #172]	@ (8001654 <main+0x144>)
 80015a6:	482c      	ldr	r0, [pc, #176]	@ (8001658 <main+0x148>)
 80015a8:	f00b fb18 	bl	800cbdc <xTaskCreate>

  xTaskCreate(handle_bl_cmd_task, "Bootloader Command Process", 200, NULL, 2, &bl_command_task);
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <main+0x14c>)
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	22c8      	movs	r2, #200	@ 0xc8
 80015b8:	4929      	ldr	r1, [pc, #164]	@ (8001660 <main+0x150>)
 80015ba:	482a      	ldr	r0, [pc, #168]	@ (8001664 <main+0x154>)
 80015bc:	f00b fb0e 	bl	800cbdc <xTaskCreate>

  xTaskCreate(SDIO_SDCard, "read file", 512, NULL, 2, &read_file); // Increased stack size
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <main+0x158>)
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2302      	movs	r3, #2
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ce:	4927      	ldr	r1, [pc, #156]	@ (800166c <main+0x15c>)
 80015d0:	4827      	ldr	r0, [pc, #156]	@ (8001670 <main+0x160>)
 80015d2:	f00b fb03 	bl	800cbdc <xTaskCreate>

  xTimer = xTimerCreate("Timer", pdMS_TO_TICKS(500), pdTRUE, 1, vTimerCallback);
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <main+0x164>)
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015e2:	4825      	ldr	r0, [pc, #148]	@ (8001678 <main+0x168>)
 80015e4:	f00c fc2a 	bl	800de3c <xTimerCreate>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a24      	ldr	r2, [pc, #144]	@ (800167c <main+0x16c>)
 80015ec:	6013      	str	r3, [r2, #0]

  q_print = xQueueCreate(10, sizeof(size_t));
 80015ee:	2200      	movs	r2, #0
 80015f0:	2104      	movs	r1, #4
 80015f2:	200a      	movs	r0, #10
 80015f4:	f00a fdb2 	bl	800c15c <xQueueGenericCreate>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a21      	ldr	r2, [pc, #132]	@ (8001680 <main+0x170>)
 80015fc:	6013      	str	r3, [r2, #0]

  q_data = xQueueCreate(11, sizeof(uint8_t));
 80015fe:	2200      	movs	r2, #0
 8001600:	2101      	movs	r1, #1
 8001602:	200b      	movs	r0, #11
 8001604:	f00a fdaa 	bl	800c15c <xQueueGenericCreate>
 8001608:	4603      	mov	r3, r0
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <main+0x174>)
 800160c:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800160e:	f00b fc61 	bl	800ced4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <main+0x102>
 8001616:	bf00      	nop
 8001618:	200003db 	.word	0x200003db
 800161c:	2000037c 	.word	0x2000037c
 8001620:	200004dc 	.word	0x200004dc
 8001624:	080132cc 	.word	0x080132cc
 8001628:	08002af1 	.word	0x08002af1
 800162c:	200004e0 	.word	0x200004e0
 8001630:	080132dc 	.word	0x080132dc
 8001634:	08001acd 	.word	0x08001acd
 8001638:	200004e4 	.word	0x200004e4
 800163c:	080132f4 	.word	0x080132f4
 8001640:	08002cb1 	.word	0x08002cb1
 8001644:	200004e8 	.word	0x200004e8
 8001648:	08013304 	.word	0x08013304
 800164c:	08002a0d 	.word	0x08002a0d
 8001650:	200004ec 	.word	0x200004ec
 8001654:	08013314 	.word	0x08013314
 8001658:	08002bcd 	.word	0x08002bcd
 800165c:	200004f0 	.word	0x200004f0
 8001660:	08013324 	.word	0x08013324
 8001664:	08002cf1 	.word	0x08002cf1
 8001668:	200004f4 	.word	0x200004f4
 800166c:	08013340 	.word	0x08013340
 8001670:	08001ec9 	.word	0x08001ec9
 8001674:	08001ab1 	.word	0x08001ab1
 8001678:	0801334c 	.word	0x0801334c
 800167c:	20000500 	.word	0x20000500
 8001680:	200004f8 	.word	0x200004f8
 8001684:	200004fc 	.word	0x200004fc

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	@ 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	@ 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00e f9db 	bl	800fa52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <SystemClock_Config+0xc8>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	4a26      	ldr	r2, [pc, #152]	@ (8001750 <SystemClock_Config+0xc8>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <SystemClock_Config+0xc8>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <SystemClock_Config+0xcc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <SystemClock_Config+0xcc>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <SystemClock_Config+0xcc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016fc:	2348      	movs	r3, #72	@ 0x48
 80016fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fa3d 	bl	8004b8c <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001718:	f000 fdea 	bl	80022f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2102      	movs	r1, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fc9f 	bl	800507c <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001744:	f000 fdd4 	bl	80022f0 <Error_Handler>
  }
}
 8001748:	bf00      	nop
 800174a:	3750      	adds	r7, #80	@ 0x50
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <MX_ADC1_Init+0x98>)
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <MX_ADC1_Init+0x9c>)
 800176e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <MX_ADC1_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800177c:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <MX_ADC1_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <MX_ADC1_Init+0x98>)
 8001798:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <MX_ADC1_Init+0xa0>)
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_ADC1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <MX_ADC1_Init+0x98>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <MX_ADC1_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_ADC1_Init+0x98>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b6:	480e      	ldr	r0, [pc, #56]	@ (80017f0 <MX_ADC1_Init+0x98>)
 80017b8:	f001 fcae 	bl	8003118 <HAL_ADC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017c2:	f000 fd95 	bl	80022f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017c6:	2305      	movs	r3, #5
 80017c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_ADC1_Init+0x98>)
 80017d8:	f001 fdc2 	bl	8003360 <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017e2:	f000 fd85 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000020c 	.word	0x2000020c
 80017f4:	40012000 	.word	0x40012000
 80017f8:	0f000001 	.word	0x0f000001

080017fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_CRC_Init+0x20>)
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <MX_CRC_Init+0x24>)
 8001804:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_CRC_Init+0x20>)
 8001808:	f002 f8aa 	bl	8003960 <HAL_CRC_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001812:	f000 fd6d 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000254 	.word	0x20000254
 8001820:	40023000 	.word	0x40023000

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <MX_I2C1_Init+0x50>)
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <MX_I2C1_Init+0x54>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001830:	4a12      	ldr	r2, [pc, #72]	@ (800187c <MX_I2C1_Init+0x58>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <MX_I2C1_Init+0x50>)
 8001862:	f002 fcf5 	bl	8004250 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fd40 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000025c 	.word	0x2000025c
 8001878:	40005400 	.word	0x40005400
 800187c:	000186a0 	.word	0x000186a0

08001880 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 8001886:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <MX_SDIO_SD_Init+0x3c>)
 8001888:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <MX_SDIO_SD_Init+0x38>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	40012c00 	.word	0x40012c00

080018c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018de:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <MX_TIM1_Init+0xa4>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018e4:	2247      	movs	r2, #71	@ 0x47
 80018e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018f0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80018f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_TIM1_Init+0xa0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_TIM1_Init+0xa0>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001908:	4815      	ldr	r0, [pc, #84]	@ (8001960 <MX_TIM1_Init+0xa0>)
 800190a:	f004 fda1 	bl	8006450 <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001914:	f000 fcec 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4619      	mov	r1, r3
 8001924:	480e      	ldr	r0, [pc, #56]	@ (8001960 <MX_TIM1_Init+0xa0>)
 8001926:	f004 ffab 	bl	8006880 <HAL_TIM_ConfigClockSource>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001930:	f000 fcde 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4807      	ldr	r0, [pc, #28]	@ (8001960 <MX_TIM1_Init+0xa0>)
 8001942:	f005 f9d3 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800194c:	f000 fcd0 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8001950:	4803      	ldr	r0, [pc, #12]	@ (8001960 <MX_TIM1_Init+0xa0>)
 8001952:	f004 fdcd 	bl	80064f0 <HAL_TIM_Base_Start>

  /* USER CODE END TIM1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000334 	.word	0x20000334
 8001964:	40010000 	.word	0x40010000

08001968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <MX_USART2_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_USART2_UART_Init+0x4c>)
 80019a0:	f005 fa34 	bl	8006e0c <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f000 fca1 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000037c 	.word	0x2000037c
 80019b8:	40004400 	.word	0x40004400

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2140      	movs	r1, #64	@ 0x40
 8001a62:	4811      	ldr	r0, [pc, #68]	@ (8001aa8 <MX_GPIO_Init+0xec>)
 8001a64:	f002 fbc0 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a68:	2340      	movs	r3, #64	@ 0x40
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <MX_GPIO_Init+0xec>)
 8001a80:	f002 f9fe 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a84:	2302      	movs	r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_GPIO_Init+0xf0>)
 8001a98:	f002 f9f2 	bl	8003e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	@ 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020c00 	.word	0x40020c00

08001ab0 <vTimerCallback>:

/* USER CODE BEGIN 4 */

void vTimerCallback (TimerHandle_t xTimer)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <vTimerCallback+0x18>)
 8001abc:	f002 fbad 	bl	800421a <HAL_GPIO_TogglePin>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40020000 	.word	0x40020000

08001acc <handle_measure_task>:

void handle_measure_task(void *params)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	@ 0x38
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	char str[40];
	float co2_sense = 0;
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
	I2C_LCD_Init(MyI2C_LCD);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f006 ffd8 	bl	8008a90 <I2C_LCD_Init>
	while(1)
	{
		DHT_GetData(&DHT11_Data);
 8001ae0:	4832      	ldr	r0, [pc, #200]	@ (8001bac <handle_measure_task+0xe0>)
 8001ae2:	f000 f993 	bl	8001e0c <DHT_GetData>
		Temperature = DHT11_Data.Temperature;
 8001ae6:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <handle_measure_task+0xe0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a31      	ldr	r2, [pc, #196]	@ (8001bb0 <handle_measure_task+0xe4>)
 8001aec:	6013      	str	r3, [r2, #0]
		Humidity = DHT11_Data.Humidity;
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <handle_measure_task+0xe0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a30      	ldr	r2, [pc, #192]	@ (8001bb4 <handle_measure_task+0xe8>)
 8001af4:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1);
 8001af6:	4830      	ldr	r0, [pc, #192]	@ (8001bb8 <handle_measure_task+0xec>)
 8001af8:	f001 fb52 	bl	80031a0 <HAL_ADC_Start>
		co2_sense = getPPM();
 8001afc:	f000 fc4c 	bl	8002398 <getPPM>
 8001b00:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		sprintf(str, "Temperature: %.0f", Temperature);
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <handle_measure_task+0xe4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd2d 	bl	8000568 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	f107 000c 	add.w	r0, r7, #12
 8001b16:	4929      	ldr	r1, [pc, #164]	@ (8001bbc <handle_measure_task+0xf0>)
 8001b18:	f00d ff0c 	bl	800f934 <siprintf>
		I2C_LCD_Clear(MyI2C_LCD);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f007 f801 	bl	8008b24 <I2C_LCD_Clear>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f007 f80e 	bl	8008b48 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	2000      	movs	r0, #0
 8001b34:	f007 f85c 	bl	8008bf0 <I2C_LCD_WriteString>
		I2C_LCD_WriteChar(MyI2C_LCD, (char)223);
 8001b38:	21df      	movs	r1, #223	@ 0xdf
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f007 f846 	bl	8008bcc <I2C_LCD_WriteChar>
		I2C_LCD_WriteChar(MyI2C_LCD, 'C');
 8001b40:	2143      	movs	r1, #67	@ 0x43
 8001b42:	2000      	movs	r0, #0
 8001b44:	f007 f842 	bl	8008bcc <I2C_LCD_WriteChar>
		sprintf(str, "Humidity: %.0fRH", Humidity);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <handle_measure_task+0xe8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd0b 	bl	8000568 <__aeabi_f2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	f107 000c 	add.w	r0, r7, #12
 8001b5a:	4919      	ldr	r1, [pc, #100]	@ (8001bc0 <handle_measure_task+0xf4>)
 8001b5c:	f00d feea 	bl	800f934 <siprintf>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2100      	movs	r1, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f006 ffef 	bl	8008b48 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2000      	movs	r0, #0
 8001b72:	f007 f83d 	bl	8008bf0 <I2C_LCD_WriteString>
		sprintf(str, "rela_ppm: %.4f", co2_sense);
 8001b76:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b78:	f7fe fcf6 	bl	8000568 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	f107 000c 	add.w	r0, r7, #12
 8001b84:	490f      	ldr	r1, [pc, #60]	@ (8001bc4 <handle_measure_task+0xf8>)
 8001b86:	f00d fed5 	bl	800f934 <siprintf>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 2);
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f006 ffda 	bl	8008b48 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f007 f828 	bl	8008bf0 <I2C_LCD_WriteString>
//		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001ba0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ba4:	f00b f960 	bl	800ce68 <vTaskDelay>
		DHT_GetData(&DHT11_Data);
 8001ba8:	bf00      	nop
 8001baa:	e799      	b.n	8001ae0 <handle_measure_task+0x14>
 8001bac:	200003c4 	.word	0x200003c4
 8001bb0:	200003cc 	.word	0x200003cc
 8001bb4:	200003d0 	.word	0x200003d0
 8001bb8:	2000020c 	.word	0x2000020c
 8001bbc:	08013354 	.word	0x08013354
 8001bc0:	08013368 	.word	0x08013368
 8001bc4:	0801337c 	.word	0x0801337c

08001bc8 <delay_us>:

	}
}

void delay_us(volatile uint16_t us)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
//	taskENTER_CRITICAL();
	htim1.Instance->CNT = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <delay_us+0x30>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (htim1.Instance->CNT < us);
 8001bda:	bf00      	nop
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <delay_us+0x30>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	b292      	uxth	r2, r2
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d3f8      	bcc.n	8001bdc <delay_us+0x14>
//	taskEXIT_CRITICAL();
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	20000334 	.word	0x20000334

08001bfc <delay_ms>:

void delay_ms(volatile uint16_t ms)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
//	taskENTER_CRITICAL();
	while(ms > 0)
 8001c06:	e00f      	b.n	8001c28 <delay_ms+0x2c>
	{
		htim1.Instance->CNT = 0;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <delay_ms+0x44>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24
		ms--;
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	80fb      	strh	r3, [r7, #6]
		while (htim1.Instance->CNT < 1000);
 8001c1a:	bf00      	nop
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <delay_ms+0x44>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c26:	d3f9      	bcc.n	8001c1c <delay_ms+0x20>
	while(ms > 0)
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1eb      	bne.n	8001c08 <delay_ms+0xc>
	}
//	taskEXIT_CRITICAL();
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000334 	.word	0x20000334

08001c44 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <Set_Pin_Output+0x44>)
 8001c7a:	f002 f901 	bl	8003e80 <HAL_GPIO_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40020400 	.word	0x40020400

08001c8c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <Set_Pin_Input+0x40>)
 8001cbe:	f002 f8df 	bl	8003e80 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <DHT_Start>:

// DHT11 start signal
void DHT_Start(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    Set_Pin_Output(GPIOB, GPIO_PIN_15); // Set pin as output
 8001cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd8:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <DHT_Start+0x40>)
 8001cda:	f7ff ffb3 	bl	8001c44 <Set_Pin_Output>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // Pull low
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce4:	480a      	ldr	r0, [pc, #40]	@ (8001d10 <DHT_Start+0x40>)
 8001ce6:	f002 fa7f 	bl	80041e8 <HAL_GPIO_WritePin>
    delay_ms(18); // Wait 18 ms
 8001cea:	2012      	movs	r0, #18
 8001cec:	f7ff ff86 	bl	8001bfc <delay_ms>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // Pull high
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <DHT_Start+0x40>)
 8001cf8:	f002 fa76 	bl	80041e8 <HAL_GPIO_WritePin>
    delay_us(30); // Wait 20–40 µs (30 µs is a safe midpoint)
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f7ff ff63 	bl	8001bc8 <delay_us>
    Set_Pin_Input(GPIOB, GPIO_PIN_15); // Set pin as input
 8001d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d06:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <DHT_Start+0x40>)
 8001d08:	f7ff ffc0 	bl	8001c8c <Set_Pin_Input>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40020400 	.word	0x40020400

08001d14 <DHT_Check_Response>:

// Check DHT11 response
uint8_t DHT_Check_Response(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    delay_us(40); // Wait for end of 80 µs low pulse
 8001d1e:	2028      	movs	r0, #40	@ 0x28
 8001d20:	f7ff ff52 	bl	8001bc8 <delay_us>
    if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) { // Low pulse detected
 8001d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d28:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <DHT_Check_Response+0x5c>)
 8001d2a:	f002 fa45 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <DHT_Check_Response+0x40>
        delay_us(80); // Wait for 80 µs high pulse
 8001d34:	2050      	movs	r0, #80	@ 0x50
 8001d36:	f7ff ff47 	bl	8001bc8 <delay_us>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) { // High pulse detected
 8001d3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d3e:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <DHT_Check_Response+0x5c>)
 8001d40:	f002 fa3a 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <DHT_Check_Response+0x3c>
            Response = 1; // Valid response
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e001      	b.n	8001d54 <DHT_Check_Response+0x40>
        } else {
            Response = 0; // No high pulse
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
        }
    }
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8001d54:	bf00      	nop
 8001d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <DHT_Check_Response+0x5c>)
 8001d5c:	f002 fa2c 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f7      	bne.n	8001d56 <DHT_Check_Response+0x42>
    return Response;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40020400 	.word	0x40020400

08001d74 <DHT_Read>:

// Read one byte from DHT11
uint8_t DHT_Read(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	e03a      	b.n	8001df6 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait for the pin to go high
 8001d80:	bf00      	nop
 8001d82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d86:	4820      	ldr	r0, [pc, #128]	@ (8001e08 <DHT_Read+0x94>)
 8001d88:	f002 fa16 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f7      	beq.n	8001d82 <DHT_Read+0xe>
		delay_us(40);   // wait for 40 us
 8001d92:	2028      	movs	r0, #40	@ 0x28
 8001d94:	f7ff ff18 	bl	8001bc8 <delay_us>
		if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the pin is low
 8001d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9c:	481a      	ldr	r0, [pc, #104]	@ (8001e08 <DHT_Read+0x94>)
 8001d9e:	f002 fa0b 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10e      	bne.n	8001dc6 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2201      	movs	r2, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	b25a      	sxtb	r2, r3
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	e00b      	b.n	8001dde <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
 8001dc8:	f1c3 0307 	rsb	r3, r3, #7
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));  // wait for the pin to go low
 8001dde:	bf00      	nop
 8001de0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001de4:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <DHT_Read+0x94>)
 8001de6:	f002 f9e7 	bl	80041b8 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f7      	bne.n	8001de0 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	3301      	adds	r3, #1
 8001df4:	71bb      	strb	r3, [r7, #6]
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	d9c1      	bls.n	8001d80 <DHT_Read+0xc>
	}
	return i;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40020400 	.word	0x40020400

08001e0c <DHT_GetData>:
void DHT_GetData(DHT_DataTypedef *DHT_Data)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	DHT_Start();
 8001e14:	f7ff ff5c 	bl	8001cd0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001e18:	f7ff ff7c 	bl	8001d14 <DHT_Check_Response>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <DHT_GetData+0xa4>)
 8001e22:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001e24:	f7ff ffa6 	bl	8001d74 <DHT_Read>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <DHT_GetData+0xa8>)
 8001e2e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001e30:	f7ff ffa0 	bl	8001d74 <DHT_Read>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <DHT_GetData+0xac>)
 8001e3a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001e3c:	f7ff ff9a 	bl	8001d74 <DHT_Read>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <DHT_GetData+0xb0>)
 8001e46:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001e48:	f7ff ff94 	bl	8001d74 <DHT_Read>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <DHT_GetData+0xb4>)
 8001e52:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001e54:	f7ff ff8e 	bl	8001d74 <DHT_Read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <DHT_GetData+0xb8>)
 8001e5e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <DHT_GetData+0xb8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <DHT_GetData+0xa8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <DHT_GetData+0xac>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <DHT_GetData+0xb0>)
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a11      	ldr	r2, [pc, #68]	@ (8001ec0 <DHT_GetData+0xb4>)
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4299      	cmp	r1, r3
 8001e80:	d111      	bne.n	8001ea6 <DHT_GetData+0x9a>
	{
			DHT_Data->Temperature = Temp_byte1;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <DHT_GetData+0xb0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <DHT_GetData+0xa8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edc3 7a01 	vstr	s15, [r3, #4]

	}
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200003da 	.word	0x200003da
 8001eb4:	200003d4 	.word	0x200003d4
 8001eb8:	200003d5 	.word	0x200003d5
 8001ebc:	200003d6 	.word	0x200003d6
 8001ec0:	200003d7 	.word	0x200003d7
 8001ec4:	200003d8 	.word	0x200003d8

08001ec8 <SDIO_SDCard>:

void SDIO_SDCard(void *params)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b091      	sub	sp, #68	@ 0x44
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
	UINT WWC, bytesRead;
	uint32_t mem_address;
	while(1){
		// Ensure SD card is mounted
	xTaskNotifyWait(0,0,&mem_address,portMAX_DELAY);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f00b fca8 	bl	800d834 <xTaskGenericNotifyWait>
	vTaskSuspendAll();
 8001ee4:	f00b f848 	bl	800cf78 <vTaskSuspendAll>
	FR_Status = f_mount(&FatFs, SDPath, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	495c      	ldr	r1, [pc, #368]	@ (800205c <SDIO_SDCard+0x194>)
 8001eec:	485c      	ldr	r0, [pc, #368]	@ (8002060 <SDIO_SDCard+0x198>)
 8001eee:	f009 fa03 	bl	800b2f8 <f_mount>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <SDIO_SDCard+0x19c>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	if (FR_Status != FR_OK)
 8001efa:	4b5a      	ldr	r3, [pc, #360]	@ (8002064 <SDIO_SDCard+0x19c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <SDIO_SDCard+0x60>
	{
		sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8001f02:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <SDIO_SDCard+0x19c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4957      	ldr	r1, [pc, #348]	@ (8002068 <SDIO_SDCard+0x1a0>)
 8001f0a:	4858      	ldr	r0, [pc, #352]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f0c:	f00d fd12 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8001f10:	4856      	ldr	r0, [pc, #344]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f12:	f7fe f9bd 	bl	8000290 <strlen>
 8001f16:	4603      	mov	r3, r0
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	4953      	ldr	r1, [pc, #332]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f20:	4853      	ldr	r0, [pc, #332]	@ (8002070 <SDIO_SDCard+0x1a8>)
 8001f22:	f004 ffc3 	bl	8006eac <HAL_UART_Transmit>
 8001f26:	e00e      	b.n	8001f46 <SDIO_SDCard+0x7e>
	}
	else
	{
		sprintf(TxBuffer, "SD Card Mounted Successfully!\r\n");
 8001f28:	4952      	ldr	r1, [pc, #328]	@ (8002074 <SDIO_SDCard+0x1ac>)
 8001f2a:	4850      	ldr	r0, [pc, #320]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f2c:	f00d fd02 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8001f30:	484e      	ldr	r0, [pc, #312]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f32:	f7fe f9ad 	bl	8000290 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	494b      	ldr	r1, [pc, #300]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001f40:	484b      	ldr	r0, [pc, #300]	@ (8002070 <SDIO_SDCard+0x1a8>)
 8001f42:	f004 ffb3 	bl	8006eac <HAL_UART_Transmit>
	}
		FATFS *FS_Ptr;
		DWORD FreeClusters;
		uint32_t TotalSize, FreeSpace;
		volatile uint32_t bytes_remaining = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
		volatile uint32_t bytes_so_far_sent = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
		volatile uint32_t len_to_read = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
		bl_rx_buffer[1] = BL_MEM_WRITE;
 8001f52:	4b49      	ldr	r3, [pc, #292]	@ (8002078 <SDIO_SDCard+0x1b0>)
 8001f54:	2257      	movs	r2, #87	@ 0x57
 8001f56:	705a      	strb	r2, [r3, #1]

		// Get & Print SD Card Size & Free Space
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001f58:	f107 0218 	add.w	r2, r7, #24
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4846      	ldr	r0, [pc, #280]	@ (800207c <SDIO_SDCard+0x1b4>)
 8001f64:	f009 fded 	bl	800bb42 <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	3b02      	subs	r3, #2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	8952      	ldrh	r2, [r2, #10]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fad4 	bl	8000524 <__aeabi_ui2d>
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <SDIO_SDCard+0x1b8>)
 8001f82:	f7fe fb49 	bl	8000618 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe1b 	bl	8000bc8 <__aeabi_d2uiz>
 8001f92:	4603      	mov	r3, r0
 8001f94:	637b      	str	r3, [r7, #52]	@ 0x34
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	895b      	ldrh	r3, [r3, #10]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_ui2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <SDIO_SDCard+0x1b8>)
 8001fae:	f7fe fb33 	bl	8000618 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fe05 	bl	8000bc8 <__aeabi_d2uiz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
		sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8001fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fc4:	492f      	ldr	r1, [pc, #188]	@ (8002084 <SDIO_SDCard+0x1bc>)
 8001fc6:	4829      	ldr	r0, [pc, #164]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001fc8:	f00d fcb4 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8001fcc:	4827      	ldr	r0, [pc, #156]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001fce:	f7fe f95f 	bl	8000290 <strlen>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	4924      	ldr	r1, [pc, #144]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001fdc:	4824      	ldr	r0, [pc, #144]	@ (8002070 <SDIO_SDCard+0x1a8>)
 8001fde:	f004 ff65 	bl	8006eac <HAL_UART_Transmit>
		sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8001fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fe4:	4928      	ldr	r1, [pc, #160]	@ (8002088 <SDIO_SDCard+0x1c0>)
 8001fe6:	4821      	ldr	r0, [pc, #132]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001fe8:	f00d fca4 	bl	800f934 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8001fec:	481f      	ldr	r0, [pc, #124]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001fee:	f7fe f94f 	bl	8000290 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	491c      	ldr	r1, [pc, #112]	@ (800206c <SDIO_SDCard+0x1a4>)
 8001ffc:	481c      	ldr	r0, [pc, #112]	@ (8002070 <SDIO_SDCard+0x1a8>)
 8001ffe:	f004 ff55 	bl	8006eac <HAL_UART_Transmit>

		// Open a Text File for Write & Write Data
		FR_Status = f_open(&Fil, "Update_Final_Graduation_Project.bin", FA_READ);
 8002002:	2201      	movs	r2, #1
 8002004:	4921      	ldr	r1, [pc, #132]	@ (800208c <SDIO_SDCard+0x1c4>)
 8002006:	4822      	ldr	r0, [pc, #136]	@ (8002090 <SDIO_SDCard+0x1c8>)
 8002008:	f009 f9bc 	bl	800b384 <f_open>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <SDIO_SDCard+0x19c>)
 8002012:	701a      	strb	r2, [r3, #0]
		if (FR_Status != FR_OK)
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <SDIO_SDCard+0x19c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d011      	beq.n	8002040 <SDIO_SDCard+0x178>
		{
		  sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <SDIO_SDCard+0x19c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	491c      	ldr	r1, [pc, #112]	@ (8002094 <SDIO_SDCard+0x1cc>)
 8002024:	4811      	ldr	r0, [pc, #68]	@ (800206c <SDIO_SDCard+0x1a4>)
 8002026:	f00d fc85 	bl	800f934 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 800202a:	4810      	ldr	r0, [pc, #64]	@ (800206c <SDIO_SDCard+0x1a4>)
 800202c:	f7fe f930 	bl	8000290 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	490c      	ldr	r1, [pc, #48]	@ (800206c <SDIO_SDCard+0x1a4>)
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <SDIO_SDCard+0x1a8>)
 800203c:	f004 ff36 	bl	8006eac <HAL_UART_Transmit>
		}

	    // Get file size
	    uint32_t fileSize = f_size(&Fil);
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <SDIO_SDCard+0x1c8>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    bytes_remaining = fileSize - bytes_so_far_sent;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	613b      	str	r3, [r7, #16]
	    while(bytes_remaining)
 800204e:	e0d8      	b.n	8002202 <SDIO_SDCard+0x33a>
	    {
	    	if (bytes_remaining >= 128)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b7f      	cmp	r3, #127	@ 0x7f
 8002054:	d920      	bls.n	8002098 <SDIO_SDCard+0x1d0>
	    	{
	    		len_to_read = 128;
 8002056:	2380      	movs	r3, #128	@ 0x80
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	e01f      	b.n	800209c <SDIO_SDCard+0x1d4>
 800205c:	200026ac 	.word	0x200026ac
 8002060:	20000508 	.word	0x20000508
 8002064:	20002570 	.word	0x20002570
 8002068:	0801338c 	.word	0x0801338c
 800206c:	20002574 	.word	0x20002574
 8002070:	2000037c 	.word	0x2000037c
 8002074:	080133c0 	.word	0x080133c0
 8002078:	200003dc 	.word	0x200003dc
 800207c:	080133e0 	.word	0x080133e0
 8002080:	3fe00000 	.word	0x3fe00000
 8002084:	080133e4 	.word	0x080133e4
 8002088:	08013404 	.word	0x08013404
 800208c:	08013428 	.word	0x08013428
 8002090:	20001540 	.word	0x20001540
 8002094:	0801344c 	.word	0x0801344c
	    	}
	    	else
	    	{
	    		len_to_read = bytes_remaining;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	60bb      	str	r3, [r7, #8]
	    	}
		    FR_Status = f_read(&Fil, &bl_rx_buffer[7], len_to_read, &bytesRead);
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	495d      	ldr	r1, [pc, #372]	@ (8002218 <SDIO_SDCard+0x350>)
 80020a4:	485d      	ldr	r0, [pc, #372]	@ (800221c <SDIO_SDCard+0x354>)
 80020a6:	f009 fb45 	bl	800b734 <f_read>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <SDIO_SDCard+0x358>)
 80020b0:	701a      	strb	r2, [r3, #0]
		    sprintf(TxBuffer, "\n   base mem address = %#.8x\n", mem_address);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	461a      	mov	r2, r3
 80020b6:	495b      	ldr	r1, [pc, #364]	@ (8002224 <SDIO_SDCard+0x35c>)
 80020b8:	485b      	ldr	r0, [pc, #364]	@ (8002228 <SDIO_SDCard+0x360>)
 80020ba:	f00d fc3b 	bl	800f934 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 80020be:	485a      	ldr	r0, [pc, #360]	@ (8002228 <SDIO_SDCard+0x360>)
 80020c0:	f7fe f8e6 	bl	8000290 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
 80020cc:	4956      	ldr	r1, [pc, #344]	@ (8002228 <SDIO_SDCard+0x360>)
 80020ce:	4857      	ldr	r0, [pc, #348]	@ (800222c <SDIO_SDCard+0x364>)
 80020d0:	f004 feec 	bl	8006eac <HAL_UART_Transmit>
		    if (FR_Status != FR_OK) {
 80020d4:	4b52      	ldr	r3, [pc, #328]	@ (8002220 <SDIO_SDCard+0x358>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <SDIO_SDCard+0x224>
		        f_close(&Fil);
 80020dc:	484f      	ldr	r0, [pc, #316]	@ (800221c <SDIO_SDCard+0x354>)
 80020de:	f009 fd06 	bl	800baee <f_close>
		        f_mount(NULL, "", 0); // Unmount
 80020e2:	2200      	movs	r2, #0
 80020e4:	4952      	ldr	r1, [pc, #328]	@ (8002230 <SDIO_SDCard+0x368>)
 80020e6:	2000      	movs	r0, #0
 80020e8:	f009 f906 	bl	800b2f8 <f_mount>
		    }
		    bl_rx_buffer[2] = word_to_byte(mem_address, 1, 1);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2201      	movs	r2, #1
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ff50 	bl	8000f98 <word_to_byte>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <SDIO_SDCard+0x36c>)
 80020fe:	709a      	strb	r2, [r3, #2]
		    bl_rx_buffer[3] = word_to_byte(mem_address, 2, 1);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2201      	movs	r2, #1
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff46 	bl	8000f98 <word_to_byte>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	4b48      	ldr	r3, [pc, #288]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002112:	70da      	strb	r2, [r3, #3]
		    bl_rx_buffer[4] = word_to_byte(mem_address, 3, 1);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2201      	movs	r2, #1
 8002118:	2103      	movs	r1, #3
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe ff3c 	bl	8000f98 <word_to_byte>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002126:	711a      	strb	r2, [r3, #4]
		    bl_rx_buffer[5] = word_to_byte(mem_address, 4, 1);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2201      	movs	r2, #1
 800212c:	2104      	movs	r1, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ff32 	bl	8000f98 <word_to_byte>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <SDIO_SDCard+0x36c>)
 800213a:	715a      	strb	r2, [r3, #5]
		    bl_rx_buffer[6] = len_to_read;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b3c      	ldr	r3, [pc, #240]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002142:	719a      	strb	r2, [r3, #6]

		    uint32_t mem_write_cmd_total_len = COMMAND_BL_MEM_WRITE_LEN + len_to_read;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	330b      	adds	r3, #11
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28

		    bl_rx_buffer[0] = mem_write_cmd_total_len - 1;
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b38      	ldr	r3, [pc, #224]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002154:	701a      	strb	r2, [r3, #0]
		    uint32_t crc32 = get_crc(bl_rx_buffer, mem_write_cmd_total_len-4);
 8002156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002158:	3b04      	subs	r3, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4835      	ldr	r0, [pc, #212]	@ (8002234 <SDIO_SDCard+0x36c>)
 800215e:	f7fe ff2f 	bl	8000fc0 <get_crc>
 8002162:	6278      	str	r0, [r7, #36]	@ 0x24
		    bl_rx_buffer[7+len_to_read] = word_to_byte(crc32, 1, 1);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1ddc      	adds	r4, r3, #7
 8002168:	2201      	movs	r2, #1
 800216a:	2101      	movs	r1, #1
 800216c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800216e:	f7fe ff13 	bl	8000f98 <word_to_byte>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002178:	551a      	strb	r2, [r3, r4]
		    bl_rx_buffer[8+len_to_read] = word_to_byte(crc32, 2, 1);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f103 0408 	add.w	r4, r3, #8
 8002180:	2201      	movs	r2, #1
 8002182:	2102      	movs	r1, #2
 8002184:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002186:	f7fe ff07 	bl	8000f98 <word_to_byte>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <SDIO_SDCard+0x36c>)
 8002190:	551a      	strb	r2, [r3, r4]
		    bl_rx_buffer[9+len_to_read] = word_to_byte(crc32, 3, 1);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f103 0409 	add.w	r4, r3, #9
 8002198:	2201      	movs	r2, #1
 800219a:	2103      	movs	r1, #3
 800219c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800219e:	f7fe fefb 	bl	8000f98 <word_to_byte>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <SDIO_SDCard+0x36c>)
 80021a8:	551a      	strb	r2, [r3, r4]
		    bl_rx_buffer[10+len_to_read] = word_to_byte(crc32, 4, 1);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f103 040a 	add.w	r4, r3, #10
 80021b0:	2201      	movs	r2, #1
 80021b2:	2104      	movs	r1, #4
 80021b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021b6:	f7fe feef 	bl	8000f98 <word_to_byte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <SDIO_SDCard+0x36c>)
 80021c0:	551a      	strb	r2, [r3, r4]
		    mem_address+= len_to_read;
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
		    bytes_so_far_sent+=len_to_read;
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
		    bytes_remaining = fileSize - bytes_so_far_sent;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	613b      	str	r3, [r7, #16]
		    sprintf(TxBuffer,"\n\n    bytes_so_far_sent:%d -- bytes_remaining:%d\n",bytes_so_far_sent,bytes_remaining);
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4916      	ldr	r1, [pc, #88]	@ (8002238 <SDIO_SDCard+0x370>)
 80021e0:	4811      	ldr	r0, [pc, #68]	@ (8002228 <SDIO_SDCard+0x360>)
 80021e2:	f00d fba7 	bl	800f934 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 80021e6:	4810      	ldr	r0, [pc, #64]	@ (8002228 <SDIO_SDCard+0x360>)
 80021e8:	f7fe f852 	bl	8000290 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <SDIO_SDCard+0x360>)
 80021f6:	480d      	ldr	r0, [pc, #52]	@ (800222c <SDIO_SDCard+0x364>)
 80021f8:	f004 fe58 	bl	8006eac <HAL_UART_Transmit>
		    bootloader_read_data(bl_rx_buffer);
 80021fc:	480d      	ldr	r0, [pc, #52]	@ (8002234 <SDIO_SDCard+0x36c>)
 80021fe:	f7ff f957 	bl	80014b0 <bootloader_read_data>
	    while(bytes_remaining)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f af23 	bne.w	8002050 <SDIO_SDCard+0x188>

	    }
	    // Read file contents into buffer
	    f_close(&Fil);
 800220a:	4804      	ldr	r0, [pc, #16]	@ (800221c <SDIO_SDCard+0x354>)
 800220c:	f009 fc6f 	bl	800baee <f_close>
		xTaskResumeAll();
 8002210:	f00a fec0 	bl	800cf94 <xTaskResumeAll>
	while(1){
 8002214:	e65c      	b.n	8001ed0 <SDIO_SDCard+0x8>
 8002216:	bf00      	nop
 8002218:	200003e3 	.word	0x200003e3
 800221c:	20001540 	.word	0x20001540
 8002220:	20002570 	.word	0x20002570
 8002224:	08013490 	.word	0x08013490
 8002228:	20002574 	.word	0x20002574
 800222c:	2000037c 	.word	0x2000037c
 8002230:	080133e0 	.word	0x080133e0
 8002234:	200003dc 	.word	0x200003dc
 8002238:	080134b0 	.word	0x080134b0

0800223c <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(xQueueIsQueueFullFromISR(q_data) == pdFALSE)
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_UART_RxCpltCallback+0x80>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f00a fc41 	bl	800cad0 <xQueueIsQueueFullFromISR>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_UART_RxCpltCallback+0x28>
	{
		xQueueSendFromISR(q_data, &data, NULL);
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_UART_RxCpltCallback+0x80>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	2200      	movs	r2, #0
 800225c:	4918      	ldr	r1, [pc, #96]	@ (80022c0 <HAL_UART_RxCpltCallback+0x84>)
 800225e:	f00a f905 	bl	800c46c <xQueueGenericSendFromISR>
 8002262:	e012      	b.n	800228a <HAL_UART_RxCpltCallback+0x4e>
	}
	else
	{
		if (data == '\n')
 8002264:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_UART_RxCpltCallback+0x84>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b0a      	cmp	r3, #10
 800226a:	d10e      	bne.n	800228a <HAL_UART_RxCpltCallback+0x4e>
		{
			xQueueReceiveFromISR(q_data, &dummy, NULL);
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_UART_RxCpltCallback+0x80>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f107 010f 	add.w	r1, r7, #15
 8002274:	2200      	movs	r2, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f00a fa88 	bl	800c78c <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, &data, NULL);
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <HAL_UART_RxCpltCallback+0x80>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	2300      	movs	r3, #0
 8002282:	2200      	movs	r2, #0
 8002284:	490e      	ldr	r1, [pc, #56]	@ (80022c0 <HAL_UART_RxCpltCallback+0x84>)
 8002286:	f00a f8f1 	bl	800c46c <xQueueGenericSendFromISR>
		}

	}
	if (data == '\n')
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_UART_RxCpltCallback+0x84>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b0a      	cmp	r3, #10
 8002290:	d10a      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x6c>
	{
		xTaskNotifyFromISR(cmd_task, 0, eNoAction, NULL);
 8002292:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_UART_RxCpltCallback+0x88>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2300      	movs	r3, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	f00b fc2a 	bl	800dafc <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 80022a8:	2201      	movs	r2, #1
 80022aa:	4905      	ldr	r1, [pc, #20]	@ (80022c0 <HAL_UART_RxCpltCallback+0x84>)
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <HAL_UART_RxCpltCallback+0x8c>)
 80022ae:	f004 fe88 	bl	8006fc2 <HAL_UART_Receive_IT>
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200004fc 	.word	0x200004fc
 80022c0:	200003db 	.word	0x200003db
 80022c4:	200004dc 	.word	0x200004dc
 80022c8:	2000037c 	.word	0x2000037c

080022cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022de:	f000 fed7 	bl	8003090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40001000 	.word	0x40001000

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <Error_Handler+0x8>
 80022fc:	0000      	movs	r0, r0
	...

08002300 <getResistance>:
@brief  Get the resistance of the sensor, ie. the measurement value

@return The sensor resistance in kOhm
*/
/**************************************************************************/
float getResistance() {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  size_t val = HAL_ADC_GetValue(&hadc1);
 8002306:	4820      	ldr	r0, [pc, #128]	@ (8002388 <getResistance+0x88>)
 8002308:	f001 f81c 	bl	8003344 <HAL_ADC_GetValue>
 800230c:	6078      	str	r0, [r7, #4]
  return ((1023./(float)val) * 5. - 1.)*RLOAD;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	ee17 0a90 	vmov	r0, s15
 800231c:	f7fe f924 	bl	8000568 <__aeabi_f2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	a116      	add	r1, pc, #88	@ (adr r1, 8002380 <getResistance+0x80>)
 8002326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800232a:	f7fe fa9f 	bl	800086c <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <getResistance+0x8c>)
 800233c:	f7fe f96c 	bl	8000618 <__aeabi_dmul>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <getResistance+0x90>)
 800234e:	f7fd ffab 	bl	80002a8 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <getResistance+0x94>)
 8002360:	f7fe f95a 	bl	8000618 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fc4c 	bl	8000c08 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	ee07 3a90 	vmov	s15, r3
}
 8002376:	eeb0 0a67 	vmov.f32	s0, s15
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	00000000 	.word	0x00000000
 8002384:	408ff800 	.word	0x408ff800
 8002388:	2000020c 	.word	0x2000020c
 800238c:	40140000 	.word	0x40140000
 8002390:	3ff00000 	.word	0x3ff00000
 8002394:	40240000 	.word	0x40240000

08002398 <getPPM>:
@brief  Get the ppm of CO2 sensed (assuming only CO2 in the air)

@return The ppm of CO2 in the air
*/
/**************************************************************************/
float getPPM() {
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  return PARA * pow((getResistance()/RZERO), -PARB);
 800239c:	f7ff ffb0 	bl	8002300 <getResistance>
 80023a0:	ee10 3a10 	vmov	r3, s0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8df 	bl	8000568 <__aeabi_f2d>
 80023aa:	a315      	add	r3, pc, #84	@ (adr r3, 8002400 <getPPM+0x68>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe fa5c 	bl	800086c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	ec43 2b17 	vmov	d7, r2, r3
 80023bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 80023f8 <getPPM+0x60>
 80023c0:	eeb0 0a47 	vmov.f32	s0, s14
 80023c4:	eef0 0a67 	vmov.f32	s1, s15
 80023c8:	f00f ffd0 	bl	801236c <pow>
 80023cc:	ec51 0b10 	vmov	r0, r1, d0
 80023d0:	a30d      	add	r3, pc, #52	@ (adr r3, 8002408 <getPPM+0x70>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f91f 	bl	8000618 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fc11 	bl	8000c08 <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	ee07 3a90 	vmov	s15, r3
}
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	f3af 8000 	nop.w
 80023f8:	bf42646d 	.word	0xbf42646d
 80023fc:	c00626fb 	.word	0xc00626fb
 8002400:	eb851eb8 	.word	0xeb851eb8
 8002404:	40532851 	.word	0x40532851
 8002408:	490f3d8b 	.word	0x490f3d8b
 800240c:	405d2688 	.word	0x405d2688

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_MspInit+0x4c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <HAL_MspInit+0x4c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_MspInit+0x4c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_MspInit+0x4c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a08      	ldr	r2, [pc, #32]	@ (800245c <HAL_MspInit+0x4c>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_MspInit+0x4c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <HAL_ADC_MspInit+0x7c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d127      	bne.n	80024d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4a15      	ldr	r2, [pc, #84]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6453      	str	r3, [r2, #68]	@ 0x44
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_ADC_MspInit+0x80>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ba:	2320      	movs	r3, #32
 80024bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024be:	2303      	movs	r3, #3
 80024c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <HAL_ADC_MspInit+0x84>)
 80024ce:	f001 fcd7 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	@ 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40012000 	.word	0x40012000
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <HAL_CRC_MspInit+0x3c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10d      	bne.n	8002516 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 8002504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023000 	.word	0x40023000
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_I2C_MspInit+0x84>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12b      	bne.n	80025a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800256a:	23c0      	movs	r3, #192	@ 0xc0
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256e:	2312      	movs	r3, #18
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257a:	2304      	movs	r3, #4
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HAL_I2C_MspInit+0x8c>)
 8002586:	f001 fc7b 	bl	8003e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 8002594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002598:	6413      	str	r3, [r2, #64]	@ 0x40
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_I2C_MspInit+0x88>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	@ 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40005400 	.word	0x40005400
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020400 	.word	0x40020400

080025bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <HAL_SD_MspInit+0xc0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d14a      	bne.n	8002674 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 80025e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_SD_MspInit+0xc4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002632:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002644:	230c      	movs	r3, #12
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_SD_MspInit+0xc8>)
 8002650:	f001 fc16 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002654:	2304      	movs	r3, #4
 8002656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002664:	230c      	movs	r3, #12
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4806      	ldr	r0, [pc, #24]	@ (8002688 <HAL_SD_MspInit+0xcc>)
 8002670:	f001 fc06 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40023800 	.word	0x40023800
 8002684:	40020800 	.word	0x40020800
 8002688:	40020c00 	.word	0x40020c00

0800268c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_TIM_Base_MspInit+0x3c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10d      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	4a09      	ldr	r2, [pc, #36]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_UART_MspInit+0x94>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d133      	bne.n	800275a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <HAL_UART_MspInit+0x98>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_UART_MspInit+0x98>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	6413      	str	r3, [r2, #64]	@ 0x40
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_UART_MspInit+0x98>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_UART_MspInit+0x98>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <HAL_UART_MspInit+0x98>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_UART_MspInit+0x98>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800272a:	230c      	movs	r3, #12
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800273a:	2307      	movs	r3, #7
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4809      	ldr	r0, [pc, #36]	@ (800276c <HAL_UART_MspInit+0x9c>)
 8002746:	f001 fb9b 	bl	8003e80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2106      	movs	r1, #6
 800274e:	2026      	movs	r0, #38	@ 0x26
 8002750:	f001 f8dc 	bl	800390c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002754:	2026      	movs	r0, #38	@ 0x26
 8002756:	f001 f8f5 	bl	8003944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	@ 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_InitTick+0xe4>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	4a32      	ldr	r2, [pc, #200]	@ (8002854 <HAL_InitTick+0xe4>)
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002790:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_InitTick+0xe4>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800279c:	f107 0210 	add.w	r2, r7, #16
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fe88 	bl	80054bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027b6:	f002 fe59 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80027ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80027bc:	e004      	b.n	80027c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027be:	f002 fe55 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80027c2:	4603      	mov	r3, r0
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ca:	4a23      	ldr	r2, [pc, #140]	@ (8002858 <HAL_InitTick+0xe8>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	3b01      	subs	r3, #1
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027d6:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_InitTick+0xec>)
 80027d8:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <HAL_InitTick+0xf0>)
 80027da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027dc:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_InitTick+0xec>)
 80027de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027e4:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_InitTick+0xec>)
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <HAL_InitTick+0xec>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_InitTick+0xec>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_InitTick+0xec>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80027fc:	4817      	ldr	r0, [pc, #92]	@ (800285c <HAL_InitTick+0xec>)
 80027fe:	f003 fe27 	bl	8006450 <HAL_TIM_Base_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002808:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11b      	bne.n	8002848 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002810:	4812      	ldr	r0, [pc, #72]	@ (800285c <HAL_InitTick+0xec>)
 8002812:	f003 fed5 	bl	80065c0 <HAL_TIM_Base_Start_IT>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800281c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002824:	2036      	movs	r0, #54	@ 0x36
 8002826:	f001 f88d 	bl	8003944 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d808      	bhi.n	8002842 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	2036      	movs	r0, #54	@ 0x36
 8002836:	f001 f869 	bl	800390c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800283a:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <HAL_InitTick+0xf4>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e002      	b.n	8002848 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800284c:	4618      	mov	r0, r3
 800284e:	3738      	adds	r7, #56	@ 0x38
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	431bde83 	.word	0x431bde83
 800285c:	2000263c 	.word	0x2000263c
 8002860:	40001000 	.word	0x40001000
 8002864:	20000008 	.word	0x20000008

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <NMI_Handler+0x4>

08002870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <HardFault_Handler+0x4>

08002878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <MemManage_Handler+0x4>

08002880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <UsageFault_Handler+0x4>

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <USART2_IRQHandler+0x10>)
 80028a6:	f004 fbb1 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000037c 	.word	0x2000037c

080028b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <TIM6_DAC_IRQHandler+0x10>)
 80028ba:	f003 fef1 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000263c 	.word	0x2000263c

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028e2:	f00d f919 	bl	800fb18 <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
  return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <_exit+0x12>

0800290e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e00a      	b.n	8002936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002920:	f3af 8000 	nop.w
 8002924:	4601      	mov	r1, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	60ba      	str	r2, [r7, #8]
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	dbf0      	blt.n	8002920 <_read+0x12>
  }

  return len;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e009      	b.n	800296e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	60ba      	str	r2, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	dbf1      	blt.n	800295a <_write+0x12>
  }
  return len;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_close>:

int _close(int file)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a8:	605a      	str	r2, [r3, #4]
  return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_isatty>:

int _isatty(int file)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029c0:	2301      	movs	r3, #1
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <SystemInit+0x20>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <SystemInit+0x20>)
 80029f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <handle_menu_task>:
volatile float vin = 0;
volatile uint32_t AD_RES = 0;

const char *msg_err = "====== Invalid command ======\n";
void handle_menu_task(void *params)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
	const char* menu = "=========================\n"
 8002a14:	4b30      	ldr	r3, [pc, #192]	@ (8002ad8 <handle_menu_task+0xcc>)
 8002a16:	613b      	str	r3, [r7, #16]
						"Enter your choice here	: ";
	uint32_t addr_cmd;
	command_t *cmd;
	while(1)
	{
		xQueueSend(q_print, &menu, portMAX_DELAY);
 8002a18:	4b30      	ldr	r3, [pc, #192]	@ (8002adc <handle_menu_task+0xd0>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	f107 0110 	add.w	r1, r7, #16
 8002a20:	2300      	movs	r3, #0
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
 8002a26:	f009 fc1f 	bl	800c268 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&addr_cmd,portMAX_DELAY);
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a32:	9200      	str	r2, [sp, #0]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f00a fefb 	bl	800d834 <xTaskGenericNotifyWait>
		cmd = ((command_t*) addr_cmd);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	617b      	str	r3, [r7, #20]
		if (cmd->len == 1)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	7a9b      	ldrb	r3, [r3, #10]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d12e      	bne.n	8002aa8 <handle_menu_task+0x9c>
 		{
			if (cmd->buf[0] == '0')
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b30      	cmp	r3, #48	@ 0x30
 8002a50:	d10c      	bne.n	8002a6c <handle_menu_task+0x60>
			{
				curr_state = sLed;
 8002a52:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <handle_menu_task+0xd4>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task, 0, eNoAction);
 8002a58:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <handle_menu_task+0xd8>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	f00a ff65 	bl	800d934 <xTaskGenericNotify>
 8002a6a:	e026      	b.n	8002aba <handle_menu_task+0xae>
			}

			else if (cmd->buf[0] == '1')
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b31      	cmp	r3, #49	@ 0x31
 8002a72:	d10c      	bne.n	8002a8e <handle_menu_task+0x82>
			{
				curr_state = sBlcmd;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <handle_menu_task+0xd4>)
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
				xTaskNotify(bl_command_task, 0, eNoAction);
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <handle_menu_task+0xdc>)
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	f00a ff54 	bl	800d934 <xTaskGenericNotify>
 8002a8c:	e015      	b.n	8002aba <handle_menu_task+0xae>
			}
			else if (cmd->buf[0] == '2')
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b32      	cmp	r3, #50	@ 0x32
 8002a94:	d01b      	beq.n	8002ace <handle_menu_task+0xc2>
			{
				break;
			}
			else{
				xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <handle_menu_task+0xd0>)
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	4912      	ldr	r1, [pc, #72]	@ (8002aec <handle_menu_task+0xe0>)
 8002aa2:	f009 fbe1 	bl	800c268 <xQueueGenericSend>
				continue;
 8002aa6:	e011      	b.n	8002acc <handle_menu_task+0xc0>

		}

		else
		{
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <handle_menu_task+0xd0>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	2300      	movs	r3, #0
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	490e      	ldr	r1, [pc, #56]	@ (8002aec <handle_menu_task+0xe0>)
 8002ab4:	f009 fbd8 	bl	800c268 <xQueueGenericSend>
			continue;
 8002ab8:	e008      	b.n	8002acc <handle_menu_task+0xc0>
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f00a feb4 	bl	800d834 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu, portMAX_DELAY);
 8002acc:	e7a4      	b.n	8002a18 <handle_menu_task+0xc>
				break;
 8002ace:	bf00      	nop

	}
}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08013504 	.word	0x08013504
 8002adc:	200004f8 	.word	0x200004f8
 8002ae0:	20000504 	.word	0x20000504
 8002ae4:	200004ec 	.word	0x200004ec
 8002ae8:	200004f0 	.word	0x200004f0
 8002aec:	20000004 	.word	0x20000004

08002af0 <handle_cmd_task>:

void handle_cmd_task(void *params)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
	command_t cmd;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	2200      	movs	r2, #0
 8002b02:	2100      	movs	r1, #0
 8002b04:	2000      	movs	r0, #0
 8002b06:	f00a fe95 	bl	800d834 <xTaskGenericNotifyWait>
		process_command(&cmd);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f802 	bl	8002b18 <process_command>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002b14:	bf00      	nop
 8002b16:	e7ef      	b.n	8002af8 <handle_cmd_task+0x8>

08002b18 <process_command>:
	}
}

void process_command(command_t *cmd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
	uint8_t temp;
	do{
		xQueueReceive(q_data, &temp, portMAX_DELAY);
 8002b24:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <process_command+0xa0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f107 010b 	add.w	r1, r7, #11
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	4618      	mov	r0, r3
 8002b32:	f009 fd49 	bl	800c5c8 <xQueueReceive>
		cmd->buf[i++] = temp;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	7af9      	ldrb	r1, [r7, #11]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	54d1      	strb	r1, [r2, r3]
	}while(temp != '\n');
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d1ed      	bne.n	8002b24 <process_command+0xc>
	cmd->len = i-1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	729a      	strb	r2, [r3, #10]
	cmd->buf[i-1] = '\0';
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	54d1      	strb	r1, [r2, r3]
	switch(curr_state)
 8002b5e:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <process_command+0xa4>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d01a      	beq.n	8002b9c <process_command+0x84>
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	dc22      	bgt.n	8002bb0 <process_command+0x98>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <process_command+0x5c>
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d00a      	beq.n	8002b88 <process_command+0x70>
		break;
	case sBlcmd:
		xTaskNotify(bl_command_task, cmd, eSetValueWithOverwrite);
		break;
	}
}
 8002b72:	e01d      	b.n	8002bb0 <process_command+0x98>
		xTaskNotify(menu_task, cmd, eSetValueWithOverwrite);
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <process_command+0xa8>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2303      	movs	r3, #3
 8002b80:	2100      	movs	r1, #0
 8002b82:	f00a fed7 	bl	800d934 <xTaskGenericNotify>
		break;
 8002b86:	e013      	b.n	8002bb0 <process_command+0x98>
		xTaskNotify(led_task, cmd, eSetValueWithOverwrite);
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <process_command+0xac>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2303      	movs	r3, #3
 8002b94:	2100      	movs	r1, #0
 8002b96:	f00a fecd 	bl	800d934 <xTaskGenericNotify>
		break;
 8002b9a:	e009      	b.n	8002bb0 <process_command+0x98>
		xTaskNotify(bl_command_task, cmd, eSetValueWithOverwrite);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <process_command+0xb0>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	f00a fec3 	bl	800d934 <xTaskGenericNotify>
		break;
 8002bae:	bf00      	nop
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200004fc 	.word	0x200004fc
 8002bbc:	20000504 	.word	0x20000504
 8002bc0:	200004e8 	.word	0x200004e8
 8002bc4:	200004ec 	.word	0x200004ec
 8002bc8:	200004f0 	.word	0x200004f0

08002bcc <handle_led_task>:

void handle_led_task(void *params)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
	const char *led_effect = "Start blinking	----> e1\n"
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <handle_led_task+0xc4>)
 8002bd6:	613b      	str	r3, [r7, #16]
						"Enter your choice here: ";
	uint32_t addr_buf;
	command_t *addr;
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f00a fe25 	bl	800d834 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &led_effect, portMAX_DELAY);
 8002bea:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <handle_led_task+0xc8>)
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	f107 0110 	add.w	r1, r7, #16
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	f009 fb36 	bl	800c268 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&addr_buf,portMAX_DELAY);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f00a fe12 	bl	800d834 <xTaskGenericNotifyWait>
		addr = ((command_t*)addr_buf);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	617b      	str	r3, [r7, #20]
		if (!strcmp((char*)addr->buf, "e1"))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	4920      	ldr	r1, [pc, #128]	@ (8002c98 <handle_led_task+0xcc>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fad9 	bl	80001d0 <strcmp>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <handle_led_task+0x74>
			xTimerStart(xTimer, portMAX_DELAY);
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <handle_led_task+0xd0>)
 8002c26:	681c      	ldr	r4, [r3, #0]
 8002c28:	f00a fa52 	bl	800d0d0 <xTaskGetTickCount>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f00b f95d 	bl	800def8 <xTimerGenericCommand>
 8002c3e:	e01a      	b.n	8002c76 <handle_led_task+0xaa>
		else if (!strcmp((char*)addr->buf, "e2"))
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4917      	ldr	r1, [pc, #92]	@ (8002ca0 <handle_led_task+0xd4>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fac3 	bl	80001d0 <strcmp>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <handle_led_task+0x9a>
			xTimerStop(xTimer, portMAX_DELAY);
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <handle_led_task+0xd0>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2103      	movs	r1, #3
 8002c60:	f00b f94a 	bl	800def8 <xTimerGenericCommand>
 8002c64:	e007      	b.n	8002c76 <handle_led_task+0xaa>
		else
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <handle_led_task+0xc8>)
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	490c      	ldr	r1, [pc, #48]	@ (8002ca4 <handle_led_task+0xd8>)
 8002c72:	f009 faf9 	bl	800c268 <xQueueGenericSend>
		curr_state = sMenu;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <handle_led_task+0xdc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_task, 0, eNoAction);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <handle_led_task+0xe0>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f00a fe53 	bl	800d934 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002c8e:	e7a3      	b.n	8002bd8 <handle_led_task+0xc>
 8002c90:	0801359c 	.word	0x0801359c
 8002c94:	200004f8 	.word	0x200004f8
 8002c98:	080135e4 	.word	0x080135e4
 8002c9c:	20000500 	.word	0x20000500
 8002ca0:	080135e8 	.word	0x080135e8
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	20000504 	.word	0x20000504
 8002cac:	200004e8 	.word	0x200004e8

08002cb0 <printmsg>:
	}
}

void printmsg(void *params)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	while(1){
		char *str;
		xQueueReceive(q_print, &str, portMAX_DELAY);
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <printmsg+0x38>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f107 010c 	add.w	r1, r7, #12
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f009 fc7f 	bl	800c5c8 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002cca:	68fc      	ldr	r4, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fade 	bl	8000290 <strlen>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4803      	ldr	r0, [pc, #12]	@ (8002cec <printmsg+0x3c>)
 8002ce0:	f004 f8e4 	bl	8006eac <HAL_UART_Transmit>
	while(1){
 8002ce4:	bf00      	nop
 8002ce6:	e7e7      	b.n	8002cb8 <printmsg+0x8>
 8002ce8:	200004f8 	.word	0x200004f8
 8002cec:	2000037c 	.word	0x2000037c

08002cf0 <handle_bl_cmd_task>:
	}
}

void handle_bl_cmd_task(void *params)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b098      	sub	sp, #96	@ 0x60
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
	const char *bl_cmds = "=================================\n"
 8002cf8:	4bb4      	ldr	r3, [pc, #720]	@ (8002fcc <handle_bl_cmd_task+0x2dc>)
 8002cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
							"BL_GET_VER		--> 1\n"
							"BL_GET_CID		--> 2\n"
							"BL_GO_TO_ADDR		--> 3\n"
							"BL_MEM_WRITE		--> 4\n"
							"Enter your choice: ";
	const char *go_to_addr = "Enter 4 bytes go address in hex: ";
 8002cfc:	4bb4      	ldr	r3, [pc, #720]	@ (8002fd0 <handle_bl_cmd_task+0x2e0>)
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *mem_write = "Enter the memory write address here :";
 8002d00:	4bb4      	ldr	r3, [pc, #720]	@ (8002fd4 <handle_bl_cmd_task+0x2e4>)
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t addr_cmd;
	command_t * cmd;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2000      	movs	r0, #0
 8002d12:	f00a fd8f 	bl	800d834 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &bl_cmds, portMAX_DELAY);
 8002d16:	4bb0      	ldr	r3, [pc, #704]	@ (8002fd8 <handle_bl_cmd_task+0x2e8>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	f009 faa0 	bl	800c268 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, &addr_cmd, portMAX_DELAY);
 8002d28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	2000      	movs	r0, #0
 8002d38:	f00a fd7c 	bl	800d834 <xTaskGenericNotifyWait>
		cmd = (command_t*)addr_cmd;
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	657b      	str	r3, [r7, #84]	@ 0x54
		if (cmd->buf[0] == '1')
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b31      	cmp	r3, #49	@ 0x31
 8002d46:	d136      	bne.n	8002db6 <handle_bl_cmd_task+0xc6>
		{
			uint8_t len_to_follow = COMMAND_BL_GET_VER_LEN - 1;
 8002d48:	2305      	movs	r3, #5
 8002d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			bl_rx_buffer[0] = len_to_follow;
 8002d4e:	4aa3      	ldr	r2, [pc, #652]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d54:	7013      	strb	r3, [r2, #0]
			bl_rx_buffer[1] = BL_GET_VER;
 8002d56:	4ba1      	ldr	r3, [pc, #644]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d58:	2251      	movs	r2, #81	@ 0x51
 8002d5a:	705a      	strb	r2, [r3, #1]
			unsigned int crc32 = get_crc(&bl_rx_buffer[0], 2);
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	489f      	ldr	r0, [pc, #636]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d60:	f7fe f92e 	bl	8000fc0 <get_crc>
 8002d64:	63f8      	str	r0, [r7, #60]	@ 0x3c
			crc32 = crc32 & 0xffffffff;
			bl_rx_buffer[2] = word_to_byte(crc32, 1, 1);
 8002d66:	2201      	movs	r2, #1
 8002d68:	2101      	movs	r1, #1
 8002d6a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d6c:	f7fe f914 	bl	8000f98 <word_to_byte>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b99      	ldr	r3, [pc, #612]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d76:	709a      	strb	r2, [r3, #2]
			bl_rx_buffer[3] = word_to_byte(crc32, 2, 1);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d7e:	f7fe f90b 	bl	8000f98 <word_to_byte>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b95      	ldr	r3, [pc, #596]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d88:	70da      	strb	r2, [r3, #3]
			bl_rx_buffer[4] = word_to_byte(crc32, 3, 1);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d90:	f7fe f902 	bl	8000f98 <word_to_byte>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b90      	ldr	r3, [pc, #576]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002d9a:	711a      	strb	r2, [r3, #4]
			bl_rx_buffer[5] = word_to_byte(crc32, 4, 1);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2104      	movs	r1, #4
 8002da0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002da2:	f7fe f8f9 	bl	8000f98 <word_to_byte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b8c      	ldr	r3, [pc, #560]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dac:	715a      	strb	r2, [r3, #5]
			bootloader_read_data(bl_rx_buffer);
 8002dae:	488b      	ldr	r0, [pc, #556]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002db0:	f7fe fb7e 	bl	80014b0 <bootloader_read_data>
 8002db4:	e0fc      	b.n	8002fb0 <handle_bl_cmd_task+0x2c0>
		}
		else if (cmd->buf[0] == '2')
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b32      	cmp	r3, #50	@ 0x32
 8002dbc:	d136      	bne.n	8002e2c <handle_bl_cmd_task+0x13c>
		{
			uint8_t len_to_follow = COMMAND_BL_GET_CID_LEN - 1;
 8002dbe:	2305      	movs	r3, #5
 8002dc0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			bl_rx_buffer[0] = len_to_follow;
 8002dc4:	4a85      	ldr	r2, [pc, #532]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dc6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002dca:	7013      	strb	r3, [r2, #0]
			bl_rx_buffer[1] = BL_GET_CID;
 8002dcc:	4b83      	ldr	r3, [pc, #524]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dce:	2253      	movs	r2, #83	@ 0x53
 8002dd0:	705a      	strb	r2, [r3, #1]
			unsigned int crc32 = get_crc(&bl_rx_buffer[0], 2);
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4881      	ldr	r0, [pc, #516]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dd6:	f7fe f8f3 	bl	8000fc0 <get_crc>
 8002dda:	6478      	str	r0, [r7, #68]	@ 0x44
			crc32 = crc32 & 0xffffffff;
			bl_rx_buffer[2] = word_to_byte(crc32, 1, 1);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2101      	movs	r1, #1
 8002de0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002de2:	f7fe f8d9 	bl	8000f98 <word_to_byte>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dec:	709a      	strb	r2, [r3, #2]
			bl_rx_buffer[3] = word_to_byte(crc32, 2, 1);
 8002dee:	2201      	movs	r2, #1
 8002df0:	2102      	movs	r1, #2
 8002df2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002df4:	f7fe f8d0 	bl	8000f98 <word_to_byte>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b77      	ldr	r3, [pc, #476]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002dfe:	70da      	strb	r2, [r3, #3]
			bl_rx_buffer[4] = word_to_byte(crc32, 3, 1);
 8002e00:	2201      	movs	r2, #1
 8002e02:	2103      	movs	r1, #3
 8002e04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e06:	f7fe f8c7 	bl	8000f98 <word_to_byte>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002e10:	711a      	strb	r2, [r3, #4]
			bl_rx_buffer[5] = word_to_byte(crc32, 4, 1);
 8002e12:	2201      	movs	r2, #1
 8002e14:	2104      	movs	r1, #4
 8002e16:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e18:	f7fe f8be 	bl	8000f98 <word_to_byte>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b6e      	ldr	r3, [pc, #440]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002e22:	715a      	strb	r2, [r3, #5]
			bootloader_read_data(bl_rx_buffer);
 8002e24:	486d      	ldr	r0, [pc, #436]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002e26:	f7fe fb43 	bl	80014b0 <bootloader_read_data>
 8002e2a:	e0c1      	b.n	8002fb0 <handle_bl_cmd_task+0x2c0>
		}
		else if (cmd->buf[0] == '3')
 8002e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b33      	cmp	r3, #51	@ 0x33
 8002e32:	f040 8083 	bne.w	8002f3c <handle_bl_cmd_task+0x24c>
		{
			char go_address_str[11];
			xQueueSend(q_print, &go_to_addr, portMAX_DELAY);
 8002e36:	4b68      	ldr	r3, [pc, #416]	@ (8002fd8 <handle_bl_cmd_task+0x2e8>)
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	f009 fa10 	bl	800c268 <xQueueGenericSend>
			xTaskNotifyWait(0,0,&addr_cmd, portMAX_DELAY);
 8002e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	2000      	movs	r0, #0
 8002e58:	f00a fcec 	bl	800d834 <xTaskGenericNotifyWait>
			cmd = (command_t*)addr_cmd;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	657b      	str	r3, [r7, #84]	@ 0x54
			sprintf(go_address_str, "%s", cmd->buf);
 8002e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	495e      	ldr	r1, [pc, #376]	@ (8002fe0 <handle_bl_cmd_task+0x2f0>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f00c fd63 	bl	800f934 <siprintf>
			uint32_t hex_value;
			sscanf(go_address_str, "%x", &hex_value);
 8002e6e:	f107 021c 	add.w	r2, r7, #28
 8002e72:	f107 0320 	add.w	r3, r7, #32
 8002e76:	495b      	ldr	r1, [pc, #364]	@ (8002fe4 <handle_bl_cmd_task+0x2f4>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f00c fd7b 	bl	800f974 <siscanf>
			uint8_t len_to_follow = COMMAND_BL_GO_TO_ADDR_LEN - 1;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			bl_rx_buffer[0] = len_to_follow;
 8002e84:	4a55      	ldr	r2, [pc, #340]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002e86:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002e8a:	7013      	strb	r3, [r2, #0]
			bl_rx_buffer[1] = BL_GO_TO_ADDR;
 8002e8c:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002e8e:	2255      	movs	r2, #85	@ 0x55
 8002e90:	705a      	strb	r2, [r3, #1]
			bl_rx_buffer[2] = word_to_byte(hex_value, 1, 1);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2201      	movs	r2, #1
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe f87d 	bl	8000f98 <word_to_byte>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002ea4:	709a      	strb	r2, [r3, #2]
			bl_rx_buffer[3] = word_to_byte(hex_value, 2, 1);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2102      	movs	r1, #2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe f873 	bl	8000f98 <word_to_byte>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002eb8:	70da      	strb	r2, [r3, #3]
			bl_rx_buffer[4] = word_to_byte(hex_value, 3, 1);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe f869 	bl	8000f98 <word_to_byte>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002ecc:	711a      	strb	r2, [r3, #4]
			bl_rx_buffer[5] = word_to_byte(hex_value, 4, 1);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f85f 	bl	8000f98 <word_to_byte>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b3f      	ldr	r3, [pc, #252]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002ee0:	715a      	strb	r2, [r3, #5]
			unsigned int crc32 = get_crc(&bl_rx_buffer[0], COMMAND_BL_GO_TO_ADDR_LEN-4);
 8002ee2:	2106      	movs	r1, #6
 8002ee4:	483d      	ldr	r0, [pc, #244]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002ee6:	f7fe f86b 	bl	8000fc0 <get_crc>
 8002eea:	64f8      	str	r0, [r7, #76]	@ 0x4c
			crc32 = crc32 & 0xffffffff;
			bl_rx_buffer[6] = word_to_byte(crc32, 1, 1);
 8002eec:	2201      	movs	r2, #1
 8002eee:	2101      	movs	r1, #1
 8002ef0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002ef2:	f7fe f851 	bl	8000f98 <word_to_byte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002efc:	719a      	strb	r2, [r3, #6]
			bl_rx_buffer[7] = word_to_byte(crc32, 2, 1);
 8002efe:	2201      	movs	r2, #1
 8002f00:	2102      	movs	r1, #2
 8002f02:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002f04:	f7fe f848 	bl	8000f98 <word_to_byte>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002f0e:	71da      	strb	r2, [r3, #7]
			bl_rx_buffer[8] = word_to_byte(crc32, 3, 1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	2103      	movs	r1, #3
 8002f14:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002f16:	f7fe f83f 	bl	8000f98 <word_to_byte>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002f20:	721a      	strb	r2, [r3, #8]
			bl_rx_buffer[9] = word_to_byte(crc32, 4, 1);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2104      	movs	r1, #4
 8002f26:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002f28:	f7fe f836 	bl	8000f98 <word_to_byte>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002f32:	725a      	strb	r2, [r3, #9]
			bootloader_read_data(bl_rx_buffer);
 8002f34:	4829      	ldr	r0, [pc, #164]	@ (8002fdc <handle_bl_cmd_task+0x2ec>)
 8002f36:	f7fe fabb 	bl	80014b0 <bootloader_read_data>
 8002f3a:	e039      	b.n	8002fb0 <handle_bl_cmd_task+0x2c0>

		}
		else if (cmd->buf[0] == '4')
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b34      	cmp	r3, #52	@ 0x34
 8002f42:	d12d      	bne.n	8002fa0 <handle_bl_cmd_task+0x2b0>
		{
			char mem_address_str[11];
			xQueueSend(q_print, &mem_write, portMAX_DELAY);
 8002f44:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <handle_bl_cmd_task+0x2e8>)
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f52:	f009 f989 	bl	800c268 <xQueueGenericSend>
			xTaskNotifyWait(0,0,&addr_cmd, portMAX_DELAY);
 8002f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5e:	9200      	str	r2, [sp, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	2000      	movs	r0, #0
 8002f66:	f00a fc65 	bl	800d834 <xTaskGenericNotifyWait>
			cmd = (command_t*)addr_cmd;
 8002f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6c:	657b      	str	r3, [r7, #84]	@ 0x54
			sprintf(mem_address_str, "%s", cmd->buf);
 8002f6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	491a      	ldr	r1, [pc, #104]	@ (8002fe0 <handle_bl_cmd_task+0x2f0>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00c fcdc 	bl	800f934 <siprintf>
			uint32_t mem_address;
			sscanf(mem_address_str, "%x", &mem_address);
 8002f7c:	f107 020c 	add.w	r2, r7, #12
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	4917      	ldr	r1, [pc, #92]	@ (8002fe4 <handle_bl_cmd_task+0x2f4>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f00c fcf4 	bl	800f974 <siscanf>
			xTaskNotify(read_file, mem_address, eSetValueWithOverwrite);
 8002f8c:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <handle_bl_cmd_task+0x2f8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2303      	movs	r3, #3
 8002f98:	2100      	movs	r1, #0
 8002f9a:	f00a fccb 	bl	800d934 <xTaskGenericNotify>
 8002f9e:	e007      	b.n	8002fb0 <handle_bl_cmd_task+0x2c0>
		}
		else{
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <handle_bl_cmd_task+0x2e8>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002faa:	4910      	ldr	r1, [pc, #64]	@ (8002fec <handle_bl_cmd_task+0x2fc>)
 8002fac:	f009 f95c 	bl	800c268 <xQueueGenericSend>
		}
		curr_state = sMenu;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <handle_bl_cmd_task+0x300>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_task, 0, eNoAction);
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <handle_bl_cmd_task+0x304>)
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f00a fcb6 	bl	800d934 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002fc8:	e69c      	b.n	8002d04 <handle_bl_cmd_task+0x14>
 8002fca:	bf00      	nop
 8002fcc:	080135ec 	.word	0x080135ec
 8002fd0:	080136dc 	.word	0x080136dc
 8002fd4:	08013700 	.word	0x08013700
 8002fd8:	200004f8 	.word	0x200004f8
 8002fdc:	200003dc 	.word	0x200003dc
 8002fe0:	08013728 	.word	0x08013728
 8002fe4:	0801372c 	.word	0x0801372c
 8002fe8:	200004f4 	.word	0x200004f4
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	20000504 	.word	0x20000504
 8002ff4:	200004e8 	.word	0x200004e8

08002ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003030 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ffc:	f7ff fcf4 	bl	80029e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003000:	480c      	ldr	r0, [pc, #48]	@ (8003034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003002:	490d      	ldr	r1, [pc, #52]	@ (8003038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003018:	4c0a      	ldr	r4, [pc, #40]	@ (8003044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003026:	f00c fd7d 	bl	800fb24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800302a:	f7fe fa71 	bl	8001510 <main>
  bx  lr    
 800302e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003038:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800303c:	08013ff0 	.word	0x08013ff0
  ldr r2, =_sbss
 8003040:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003044:	200155dc 	.word	0x200155dc

08003048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC_IRQHandler>
	...

0800304c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <HAL_Init+0x40>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <HAL_Init+0x40>)
 8003062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <HAL_Init+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a07      	ldr	r2, [pc, #28]	@ (800308c <HAL_Init+0x40>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003074:	2003      	movs	r0, #3
 8003076:	f000 fc3e 	bl	80038f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307a:	200f      	movs	r0, #15
 800307c:	f7ff fb78 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003080:	f7ff f9c6 	bl	8002410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00

08003090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_IncTick+0x20>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x24>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <HAL_IncTick+0x24>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c
 80030b4:	20002684 	.word	0x20002684

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_GetTick+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20002684 	.word	0x20002684

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff ffee 	bl	80030b8 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000000c 	.word	0x2000000c

08003118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e033      	b.n	8003196 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f992 	bl	8002460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800315e:	f023 0302 	bic.w	r3, r3, #2
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa1a 	bl	80035a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40
 8003186:	e001      	b.n	800318c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Start+0x1a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e0b2      	b.n	8003320 <HAL_ADC_Start+0x180>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d018      	beq.n	8003202 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031e0:	4b52      	ldr	r3, [pc, #328]	@ (800332c <HAL_ADC_Start+0x18c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_ADC_Start+0x190>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0c9a      	lsrs	r2, r3, #18
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031f4:	e002      	b.n	80031fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d17a      	bne.n	8003306 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800323a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d106      	bne.n	800325e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	f023 0206 	bic.w	r2, r3, #6
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
 800325c:	e002      	b.n	8003264 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800326c:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <HAL_ADC_Start+0x194>)
 800326e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003278:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2b00      	cmp	r3, #0
 8003284:	d12a      	bne.n	80032dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2b      	ldr	r2, [pc, #172]	@ (8003338 <HAL_ADC_Start+0x198>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d015      	beq.n	80032bc <HAL_ADC_Start+0x11c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a29      	ldr	r2, [pc, #164]	@ (800333c <HAL_ADC_Start+0x19c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_Start+0x106>
 800329a:	4b26      	ldr	r3, [pc, #152]	@ (8003334 <HAL_ADC_Start+0x194>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a25      	ldr	r2, [pc, #148]	@ (8003340 <HAL_ADC_Start+0x1a0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d136      	bne.n	800331e <HAL_ADC_Start+0x17e>
 80032b0:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_ADC_Start+0x194>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d130      	bne.n	800331e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d129      	bne.n	800331e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e020      	b.n	800331e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <HAL_ADC_Start+0x198>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11b      	bne.n	800331e <HAL_ADC_Start+0x17e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d114      	bne.n	800331e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e00b      	b.n	800331e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	20000000 	.word	0x20000000
 8003330:	431bde83 	.word	0x431bde83
 8003334:	40012300 	.word	0x40012300
 8003338:	40012000 	.word	0x40012000
 800333c:	40012100 	.word	0x40012100
 8003340:	40012200 	.word	0x40012200

08003344 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x1c>
 8003378:	2302      	movs	r3, #2
 800337a:	e105      	b.n	8003588 <HAL_ADC_ConfigChannel+0x228>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b09      	cmp	r3, #9
 800338a:	d925      	bls.n	80033d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68d9      	ldr	r1, [r3, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	3b1e      	subs	r3, #30
 80033a2:	2207      	movs	r2, #7
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43da      	mvns	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	400a      	ands	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	4603      	mov	r3, r0
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4403      	add	r3, r0
 80033ca:	3b1e      	subs	r3, #30
 80033cc:	409a      	lsls	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e022      	b.n	800341e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	2207      	movs	r2, #7
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	400a      	ands	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	4603      	mov	r3, r0
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4403      	add	r3, r0
 8003414:	409a      	lsls	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d824      	bhi.n	8003470 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b05      	subs	r3, #5
 8003438:	221f      	movs	r2, #31
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	400a      	ands	r2, r1
 8003446:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b05      	subs	r3, #5
 8003462:	fa00 f203 	lsl.w	r2, r0, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34
 800346e:	e04c      	b.n	800350a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d824      	bhi.n	80034c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b23      	subs	r3, #35	@ 0x23
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b23      	subs	r3, #35	@ 0x23
 80034b4:	fa00 f203 	lsl.w	r2, r0, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c0:	e023      	b.n	800350a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b41      	subs	r3, #65	@ 0x41
 80034d4:	221f      	movs	r2, #31
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	3b41      	subs	r3, #65	@ 0x41
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800350a:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <HAL_ADC_ConfigChannel+0x234>)
 800350c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a21      	ldr	r2, [pc, #132]	@ (8003598 <HAL_ADC_ConfigChannel+0x238>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d109      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1cc>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b12      	cmp	r3, #18
 800351e:	d105      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_ADC_ConfigChannel+0x238>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d123      	bne.n	800357e <HAL_ADC_ConfigChannel+0x21e>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d003      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x1e6>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b11      	cmp	r3, #17
 8003544:	d11b      	bne.n	800357e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b10      	cmp	r3, #16
 8003558:	d111      	bne.n	800357e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_ADC_ConfigChannel+0x23c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <HAL_ADC_ConfigChannel+0x240>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	0c9a      	lsrs	r2, r3, #18
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003570:	e002      	b.n	8003578 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40012300 	.word	0x40012300
 8003598:	40012000 	.word	0x40012000
 800359c:	20000000 	.word	0x20000000
 80035a0:	431bde83 	.word	0x431bde83

080035a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ac:	4b79      	ldr	r3, [pc, #484]	@ (8003794 <ADC_Init+0x1f0>)
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	4a58      	ldr	r2, [pc, #352]	@ (8003798 <ADC_Init+0x1f4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800364a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800366c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e00f      	b.n	80036a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0202 	bic.w	r2, r2, #2
 80036b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e1b      	ldrb	r3, [r3, #24]
 80036bc:	005a      	lsls	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	3b01      	subs	r3, #1
 80036fc:	035a      	lsls	r2, r3, #13
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e007      	b.n	8003718 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	3b01      	subs	r3, #1
 8003734:	051a      	lsls	r2, r3, #20
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800374c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800375a:	025a      	lsls	r2, r3, #9
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	029a      	lsls	r2, r3, #10
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012300 	.word	0x40012300
 8003798:	0f000001 	.word	0x0f000001

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	@ (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	@ (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	@ (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	@ 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	4313      	orrs	r3, r2
         );
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff4c 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800391e:	f7ff ff61 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003922:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6978      	ldr	r0, [r7, #20]
 800392a:	f7ff ffb1 	bl	8003890 <NVIC_EncodePriority>
 800392e:	4602      	mov	r2, r0
 8003930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff80 	bl	800383c <__NVIC_SetPriority>
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff54 	bl	8003800 <__NVIC_EnableIRQ>
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e00e      	b.n	8003990 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	795b      	ldrb	r3, [r3, #5]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe fdb0 	bl	80024e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2202      	movs	r2, #2
 80039ac:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e00a      	b.n	80039ca <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3f0      	bcc.n	80039b4 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80039e0:	693b      	ldr	r3, [r7, #16]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff fb5c 	bl	80030b8 <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d008      	beq.n	8003a20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2280      	movs	r2, #128	@ 0x80
 8003a12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e052      	b.n	8003ac6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0216 	bic.w	r2, r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <HAL_DMA_Abort+0x62>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0208 	bic.w	r2, r2, #8
 8003a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	e013      	b.n	8003a9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a72:	f7ff fb21 	bl	80030b8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d90c      	bls.n	8003a9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e015      	b.n	8003ac6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	223f      	movs	r2, #63	@ 0x3f
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00c      	b.n	8003b06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2205      	movs	r2, #5
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b26:	4b23      	ldr	r3, [pc, #140]	@ (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003b28:	7e1b      	ldrb	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_FLASH_Program+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e03b      	b.n	8003baa <HAL_FLASH_Program+0x96>
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003b3c:	f000 f870 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d12b      	bne.n	8003ba2 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003b50:	783b      	ldrb	r3, [r7, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	68b8      	ldr	r0, [r7, #8]
 8003b56:	f000 f91b 	bl	8003d90 <FLASH_Program_Byte>
 8003b5a:	e016      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003b62:	883b      	ldrh	r3, [r7, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f000 f8ee 	bl	8003d48 <FLASH_Program_HalfWord>
 8003b6c:	e00d      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d105      	bne.n	8003b80 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	f000 f8c3 	bl	8003d04 <FLASH_Program_Word>
 8003b7e:	e004      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f000 f88b 	bl	8003ca0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b8a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003b8e:	f000 f847 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003b96:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <HAL_FLASH_Program+0xa4>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	@ (8003bb8 <HAL_FLASH_Program+0xa4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ba2:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	761a      	strb	r2, [r3, #24]

  return status;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20002688 	.word	0x20002688
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da0b      	bge.n	8003be6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bd0:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <HAL_FLASH_Unlock+0x3c>)
 8003bd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003bd4:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_FLASH_Unlock+0x40>)
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da01      	bge.n	8003be6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	45670123 	.word	0x45670123
 8003bfc:	cdef89ab 	.word	0xcdef89ab

08003c00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c0e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <FLASH_WaitForLastOperation+0x78>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c32:	f7ff fa41 	bl	80030b8 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003c38:	e010      	b.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d00c      	beq.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <FLASH_WaitForLastOperation+0x38>
 8003c48:	f7ff fa36 	bl	80030b8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d201      	bcs.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e019      	b.n	8003c90 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e8      	bne.n	8003c3a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c7a:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c86:	f000 f8a5 	bl	8003dd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0

}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20002688 	.word	0x20002688
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cac:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a10      	ldr	r2, [pc, #64]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003cd6:	f3bf 8f6f 	isb	sy
}
 8003cda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	000a      	movs	r2, r1
 8003cea:	2300      	movs	r3, #0
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	3104      	adds	r1, #4
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d26:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <FLASH_Program_Word+0x40>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40023c00 	.word	0x40023c00

08003d48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d54:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4a06      	ldr	r2, [pc, #24]	@ (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	801a      	strh	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00

08003d90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003daa:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a06      	ldr	r2, [pc, #24]	@ (8003dd0 <FLASH_Program_Byte+0x40>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	701a      	strb	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003de4:	4b25      	ldr	r3, [pc, #148]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f043 0310 	orr.w	r3, r3, #16
 8003dec:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003dee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003df0:	4b21      	ldr	r3, [pc, #132]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003df2:	2210      	movs	r2, #16
 8003df4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003df6:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e0c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e10:	2220      	movs	r2, #32
 8003e12:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003e14:	4b18      	ldr	r3, [pc, #96]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003e20:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e2a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e2e:	2240      	movs	r2, #64	@ 0x40
 8003e30:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003e32:	4b11      	ldr	r3, [pc, #68]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e48:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e4c:	2280      	movs	r2, #128	@ 0x80
 8003e4e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f043 0320 	orr.w	r3, r3, #32
 8003e64:	4a05      	ldr	r2, [pc, #20]	@ (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e66:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e68:	4b03      	ldr	r3, [pc, #12]	@ (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	60da      	str	r2, [r3, #12]
  }
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40023c00 	.word	0x40023c00
 8003e7c:	20002688 	.word	0x20002688

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	@ 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	e16b      	b.n	8004174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f040 815a 	bne.w	800416e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d005      	beq.n	8003ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d130      	bne.n	8003f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d017      	beq.n	8003f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d123      	bne.n	8003fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80b4 	beq.w	800416e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b60      	ldr	r3, [pc, #384]	@ (800418c <HAL_GPIO_Init+0x30c>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	4a5f      	ldr	r2, [pc, #380]	@ (800418c <HAL_GPIO_Init+0x30c>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004014:	6453      	str	r3, [r2, #68]	@ 0x44
 8004016:	4b5d      	ldr	r3, [pc, #372]	@ (800418c <HAL_GPIO_Init+0x30c>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004022:	4a5b      	ldr	r2, [pc, #364]	@ (8004190 <HAL_GPIO_Init+0x310>)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a52      	ldr	r2, [pc, #328]	@ (8004194 <HAL_GPIO_Init+0x314>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <HAL_GPIO_Init+0x226>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a51      	ldr	r2, [pc, #324]	@ (8004198 <HAL_GPIO_Init+0x318>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x222>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a50      	ldr	r2, [pc, #320]	@ (800419c <HAL_GPIO_Init+0x31c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x21e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4f      	ldr	r2, [pc, #316]	@ (80041a0 <HAL_GPIO_Init+0x320>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x21a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4e      	ldr	r2, [pc, #312]	@ (80041a4 <HAL_GPIO_Init+0x324>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x216>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4d      	ldr	r2, [pc, #308]	@ (80041a8 <HAL_GPIO_Init+0x328>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x212>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	@ (80041ac <HAL_GPIO_Init+0x32c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x20e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4b      	ldr	r2, [pc, #300]	@ (80041b0 <HAL_GPIO_Init+0x330>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x20a>
 8004086:	2307      	movs	r3, #7
 8004088:	e00e      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 800408a:	2308      	movs	r3, #8
 800408c:	e00c      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 800408e:	2306      	movs	r3, #6
 8004090:	e00a      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 8004092:	2305      	movs	r3, #5
 8004094:	e008      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 8004096:	2304      	movs	r3, #4
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 800409a:	2303      	movs	r3, #3
 800409c:	e004      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 800409e:	2302      	movs	r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_GPIO_Init+0x228>
 80040a6:	2300      	movs	r3, #0
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4093      	lsls	r3, r2
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b8:	4935      	ldr	r1, [pc, #212]	@ (8004190 <HAL_GPIO_Init+0x310>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	3302      	adds	r3, #2
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c6:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ea:	4a32      	ldr	r2, [pc, #200]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f0:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004114:	4a27      	ldr	r2, [pc, #156]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411a:	4b26      	ldr	r3, [pc, #152]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413e:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004168:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <HAL_GPIO_Init+0x334>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	f67f ae90 	bls.w	8003e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	@ 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800
 80041b0:	40021c00 	.word	0x40021c00
 80041b4:	40013c00 	.word	0x40013c00

080041b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e001      	b.n	80041da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004204:	e003      	b.n	800420e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	041a      	lsls	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	619a      	str	r2, [r3, #24]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	041a      	lsls	r2, r3, #16
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43d9      	mvns	r1, r3
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	400b      	ands	r3, r1
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	619a      	str	r2, [r3, #24]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e12b      	b.n	80044ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe f958 	bl	800252c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	@ 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b4:	f001 f8da 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a81      	ldr	r2, [pc, #516]	@ (80044c4 <HAL_I2C_Init+0x274>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d807      	bhi.n	80042d4 <HAL_I2C_Init+0x84>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a80      	ldr	r2, [pc, #512]	@ (80044c8 <HAL_I2C_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e006      	b.n	80042e2 <HAL_I2C_Init+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	@ (80044cc <HAL_I2C_Init+0x27c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e7      	b.n	80044ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a78      	ldr	r2, [pc, #480]	@ (80044d0 <HAL_I2C_Init+0x280>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a6a      	ldr	r2, [pc, #424]	@ (80044c4 <HAL_I2C_Init+0x274>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <HAL_I2C_Init+0xd4>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	e009      	b.n	8004338 <HAL_I2C_Init+0xe8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a69      	ldr	r2, [pc, #420]	@ (80044d4 <HAL_I2C_Init+0x284>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800434a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	495c      	ldr	r1, [pc, #368]	@ (80044c4 <HAL_I2C_Init+0x274>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d819      	bhi.n	800438c <HAL_I2C_Init+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e59      	subs	r1, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800436c:	400b      	ands	r3, r1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_I2C_Init+0x138>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e59      	subs	r1, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	e051      	b.n	800442c <HAL_I2C_Init+0x1dc>
 8004388:	2304      	movs	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x168>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x18e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x196>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7fe fde4 	bl	80030b8 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 80e0 	bne.w	80046c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	4970      	ldr	r1, [pc, #448]	@ (80046cc <HAL_I2C_Master_Transmit+0x1f4>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f964 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	e0d3      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_Master_Transmit+0x50>
 8004524:	2302      	movs	r3, #2
 8004526:	e0cc      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d007      	beq.n	800454e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	@ 0x21
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2210      	movs	r2, #16
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	893a      	ldrh	r2, [r7, #8]
 800457e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a50      	ldr	r2, [pc, #320]	@ (80046d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800458e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f89c 	bl	80046d4 <I2C_MasterRequestWrite>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e08d      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045bc:	e066      	b.n	800468c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa22 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06b      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11b      	bne.n	8004660 <HAL_I2C_Master_Transmit+0x188>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6a39      	ldr	r1, [r7, #32]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa19 	bl	8004a9c <I2C_WaitOnBTFFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2b04      	cmp	r3, #4
 8004676:	d107      	bne.n	8004688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e01a      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d194      	bne.n	80045be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	00100002 	.word	0x00100002
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	460b      	mov	r3, r1
 80046e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d006      	beq.n	80046fe <I2C_MasterRequestWrite+0x2a>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d003      	beq.n	80046fe <I2C_MasterRequestWrite+0x2a>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fc:	d108      	bne.n	8004710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e00b      	b.n	8004728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	2b12      	cmp	r3, #18
 8004716:	d107      	bne.n	8004728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f84f 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474e:	d103      	bne.n	8004758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e035      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004764:	d108      	bne.n	8004778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004774:	611a      	str	r2, [r3, #16]
 8004776:	e01b      	b.n	80047b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004778:	897b      	ldrh	r3, [r7, #10]
 800477a:	11db      	asrs	r3, r3, #7
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0306 	and.w	r3, r3, #6
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f063 030f 	orn	r3, r3, #15
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	490e      	ldr	r1, [pc, #56]	@ (80047d0 <I2C_MasterRequestWrite+0xfc>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f898 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e010      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4907      	ldr	r1, [pc, #28]	@ (80047d4 <I2C_MasterRequestWrite+0x100>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f888 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00010008 	.word	0x00010008
 80047d4:	00010002 	.word	0x00010002

080047d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e8:	e048      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d044      	beq.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fe fc61 	bl	80030b8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d139      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d116      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e023      	b.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	e00c      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d093      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048da:	e071      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ea:	d123      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f043 0204 	orr.w	r2, r3, #4
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e067      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d041      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fe fbbc 	bl	80030b8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d136      	bne.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e00b      	b.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e021      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10c      	bne.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e00b      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f47f af6d 	bne.w	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a18:	e034      	b.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f886 	bl	8004b2c <I2C_IsAcknowledgeFailed>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e034      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d028      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a32:	f7fe fb41 	bl	80030b8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11d      	bne.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d016      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d1c3      	bne.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa8:	e034      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f83e 	bl	8004b2c <I2C_IsAcknowledgeFailed>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e034      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d028      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fe faf9 	bl	80030b8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11d      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d1c3      	bne.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b42:	d11b      	bne.n	8004b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	f043 0204 	orr.w	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e267      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d075      	beq.n	8004c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004baa:	4b88      	ldr	r3, [pc, #544]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb6:	4b85      	ldr	r3, [pc, #532]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d112      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc2:	4b82      	ldr	r3, [pc, #520]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05b      	beq.n	8004c94 <HAL_RCC_OscConfig+0x108>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d157      	bne.n	8004c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e242      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x74>
 8004bf2:	4b76      	ldr	r3, [pc, #472]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a75      	ldr	r2, [pc, #468]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e01d      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x98>
 8004c0a:	4b70      	ldr	r3, [pc, #448]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4b6d      	ldr	r3, [pc, #436]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c24:	4b69      	ldr	r3, [pc, #420]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a68      	ldr	r2, [pc, #416]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b66      	ldr	r3, [pc, #408]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a65      	ldr	r2, [pc, #404]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe fa38 	bl	80030b8 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fe fa34 	bl	80030b8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	@ 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e207      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0xc0>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fa24 	bl	80030b8 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fe fa20 	bl	80030b8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	@ 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e1f3      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	4b51      	ldr	r3, [pc, #324]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0xe8>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cae:	4b47      	ldr	r3, [pc, #284]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d11c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cba:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d116      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	4b41      	ldr	r3, [pc, #260]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e1c7      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cde:	4b3b      	ldr	r3, [pc, #236]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4937      	ldr	r1, [pc, #220]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	e03a      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fe f9d9 	bl	80030b8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fe f9d5 	bl	80030b8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1a8      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4925      	ldr	r1, [pc, #148]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	e015      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe f9b8 	bl	80030b8 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7fe f9b4 	bl	80030b8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e187      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d036      	beq.n	8004de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fe f998 	bl	80030b8 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fe f994 	bl	80030b8 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e167      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x200>
 8004daa:	e01b      	b.n	8004de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fe f981 	bl	80030b8 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	e00e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dba:	f7fe f97d 	bl	80030b8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d907      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e150      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	42470000 	.word	0x42470000
 8004dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b88      	ldr	r3, [pc, #544]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ea      	bne.n	8004dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8097 	beq.w	8004f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b81      	ldr	r3, [pc, #516]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	4b7d      	ldr	r3, [pc, #500]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e12:	4b7a      	ldr	r3, [pc, #488]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b77      	ldr	r3, [pc, #476]	@ (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d118      	bne.n	8004e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2e:	4b74      	ldr	r3, [pc, #464]	@ (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a73      	ldr	r2, [pc, #460]	@ (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3a:	f7fe f93d 	bl	80030b8 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e42:	f7fe f939 	bl	80030b8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e10c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	4b6a      	ldr	r3, [pc, #424]	@ (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2ea>
 8004e68:	4b64      	ldr	r3, [pc, #400]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6c:	4a63      	ldr	r2, [pc, #396]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e74:	e01c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x30c>
 8004e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	4a5e      	ldr	r2, [pc, #376]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e98:	4b58      	ldr	r3, [pc, #352]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4a57      	ldr	r2, [pc, #348]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea4:	4b55      	ldr	r3, [pc, #340]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	4a54      	ldr	r2, [pc, #336]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 0304 	bic.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe f8fe 	bl	80030b8 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe f8fa 	bl	80030b8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0cb      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ee      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x334>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee4:	f7fe f8e8 	bl	80030b8 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fe f8e4 	bl	80030b8 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0b5      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f02:	4b3e      	ldr	r3, [pc, #248]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ee      	bne.n	8004eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f14:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	4a38      	ldr	r2, [pc, #224]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a1 	beq.w	800506c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2a:	4b34      	ldr	r3, [pc, #208]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d05c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d141      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b31      	ldr	r3, [pc, #196]	@ (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe f8b8 	bl	80030b8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe f8b4 	bl	80030b8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e087      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b27      	ldr	r3, [pc, #156]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	491b      	ldr	r1, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe f88d 	bl	80030b8 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe f889 	bl	80030b8 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e05c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x416>
 8004fc0:	e054      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_RCC_OscConfig+0x478>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f876 	bl	80030b8 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe f872 	bl	80030b8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e045      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x444>
 8004fee:	e03d      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e038      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
 8005004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <HAL_RCC_OscConfig+0x4ec>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d028      	beq.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d121      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800503e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800

0800507c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0cc      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b68      	ldr	r3, [pc, #416]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d90c      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b65      	ldr	r3, [pc, #404]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b63      	ldr	r3, [pc, #396]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0b8      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d0:	4b59      	ldr	r3, [pc, #356]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a58      	ldr	r2, [pc, #352]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e8:	4b53      	ldr	r3, [pc, #332]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a52      	ldr	r2, [pc, #328]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f4:	4b50      	ldr	r3, [pc, #320]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	494d      	ldr	r1, [pc, #308]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d044      	beq.n	800519c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	4b47      	ldr	r3, [pc, #284]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d119      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e07f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d003      	beq.n	800513a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005136:	2b03      	cmp	r3, #3
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b3f      	ldr	r3, [pc, #252]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e06f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514a:	4b3b      	ldr	r3, [pc, #236]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e067      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b37      	ldr	r3, [pc, #220]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4934      	ldr	r1, [pc, #208]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800516c:	f7fd ffa4 	bl	80030b8 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fd ffa0 	bl	80030b8 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e04f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d20c      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b22      	ldr	r3, [pc, #136]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b20      	ldr	r3, [pc, #128]	@ (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e032      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d0:	4b19      	ldr	r3, [pc, #100]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4916      	ldr	r1, [pc, #88]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ee:	4b12      	ldr	r3, [pc, #72]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	490e      	ldr	r1, [pc, #56]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005202:	f000 f821 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005206:	4602      	mov	r2, r0
 8005208:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	490a      	ldr	r1, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd faa4 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40023c00 	.word	0x40023c00
 8005238:	40023800 	.word	0x40023800
 800523c:	080137ac 	.word	0x080137ac
 8005240:	20000000 	.word	0x20000000
 8005244:	20000008 	.word	0x20000008

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b094      	sub	sp, #80	@ 0x50
 800524e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005260:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d00d      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x40>
 800526c:	2b08      	cmp	r3, #8
 800526e:	f200 80e1 	bhi.w	8005434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x34>
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x3a>
 800527a:	e0db      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800527c:	4b73      	ldr	r3, [pc, #460]	@ (800544c <HAL_RCC_GetSysClockFreq+0x204>)
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005280:	e0db      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005282:	4b73      	ldr	r3, [pc, #460]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x208>)
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005286:	e0d8      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005288:	4b6f      	ldr	r3, [pc, #444]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005290:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005292:	4b6d      	ldr	r3, [pc, #436]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d063      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b6a      	ldr	r3, [pc, #424]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	2200      	movs	r2, #0
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052ba:	4622      	mov	r2, r4
 80052bc:	462b      	mov	r3, r5
 80052be:	f04f 0000 	mov.w	r0, #0
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	0159      	lsls	r1, r3, #5
 80052c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052cc:	0150      	lsls	r0, r2, #5
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4621      	mov	r1, r4
 80052d4:	1a51      	subs	r1, r2, r1
 80052d6:	6139      	str	r1, [r7, #16]
 80052d8:	4629      	mov	r1, r5
 80052da:	eb63 0301 	sbc.w	r3, r3, r1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052ec:	4659      	mov	r1, fp
 80052ee:	018b      	lsls	r3, r1, #6
 80052f0:	4651      	mov	r1, sl
 80052f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052f6:	4651      	mov	r1, sl
 80052f8:	018a      	lsls	r2, r1, #6
 80052fa:	4651      	mov	r1, sl
 80052fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005300:	4659      	mov	r1, fp
 8005302:	eb63 0901 	sbc.w	r9, r3, r1
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531a:	4690      	mov	r8, r2
 800531c:	4699      	mov	r9, r3
 800531e:	4623      	mov	r3, r4
 8005320:	eb18 0303 	adds.w	r3, r8, r3
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	462b      	mov	r3, r5
 8005328:	eb49 0303 	adc.w	r3, r9, r3
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800533a:	4629      	mov	r1, r5
 800533c:	024b      	lsls	r3, r1, #9
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005344:	4621      	mov	r1, r4
 8005346:	024a      	lsls	r2, r1, #9
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534e:	2200      	movs	r2, #0
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005358:	f7fb fca6 	bl	8000ca8 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4613      	mov	r3, r2
 8005362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005364:	e058      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005366:	4b38      	ldr	r3, [pc, #224]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	2200      	movs	r2, #0
 800536e:	4618      	mov	r0, r3
 8005370:	4611      	mov	r1, r2
 8005372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
 800537c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	0159      	lsls	r1, r3, #5
 800538e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005392:	0150      	lsls	r0, r2, #5
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4641      	mov	r1, r8
 800539a:	ebb2 0a01 	subs.w	sl, r2, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053b8:	ebb2 040a 	subs.w	r4, r2, sl
 80053bc:	eb63 050b 	sbc.w	r5, r3, fp
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	00eb      	lsls	r3, r5, #3
 80053ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ce:	00e2      	lsls	r2, r4, #3
 80053d0:	4614      	mov	r4, r2
 80053d2:	461d      	mov	r5, r3
 80053d4:	4643      	mov	r3, r8
 80053d6:	18e3      	adds	r3, r4, r3
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	464b      	mov	r3, r9
 80053dc:	eb45 0303 	adc.w	r3, r5, r3
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ee:	4629      	mov	r1, r5
 80053f0:	028b      	lsls	r3, r1, #10
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f8:	4621      	mov	r1, r4
 80053fa:	028a      	lsls	r2, r1, #10
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005402:	2200      	movs	r2, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	61fa      	str	r2, [r7, #28]
 8005408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800540c:	f7fb fc4c 	bl	8000ca8 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005418:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800542a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005432:	e002      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_GetSysClockFreq+0x204>)
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800543c:	4618      	mov	r0, r3
 800543e:	3750      	adds	r7, #80	@ 0x50
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	00f42400 	.word	0x00f42400
 8005450:	007a1200 	.word	0x007a1200

08005454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005470:	f7ff fff0 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0a9b      	lsrs	r3, r3, #10
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	@ (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	080137bc 	.word	0x080137bc

08005494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005498:	f7ff ffdc 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0b5b      	lsrs	r3, r3, #13
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4903      	ldr	r1, [pc, #12]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40023800 	.word	0x40023800
 80054b8:	080137bc 	.word	0x080137bc

080054bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	220f      	movs	r2, #15
 80054ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054cc:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <HAL_RCC_GetClockConfig+0x5c>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0203 	and.w	r2, r3, #3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <HAL_RCC_GetClockConfig+0x5c>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_RCC_GetClockConfig+0x5c>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_GetClockConfig+0x5c>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	08db      	lsrs	r3, r3, #3
 80054f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054fe:	4b07      	ldr	r3, [pc, #28]	@ (800551c <HAL_RCC_GetClockConfig+0x60>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0207 	and.w	r2, r3, #7
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	40023c00 	.word	0x40023c00

08005520 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e022      	b.n	8005578 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fd f839 	bl	80025bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f814 	bl	8005580 <HAL_SD_InitCard>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e00a      	b.n	8005578 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005580:	b5b0      	push	{r4, r5, r7, lr}
 8005582:	b08e      	sub	sp, #56	@ 0x38
 8005584:	af04      	add	r7, sp, #16
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800559c:	2376      	movs	r3, #118	@ 0x76
 800559e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681d      	ldr	r5, [r3, #0]
 80055a4:	466c      	mov	r4, sp
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b8:	4628      	mov	r0, r5
 80055ba:	f002 fc7d 	bl	8007eb8 <SDIO_Init>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80055c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e04f      	b.n	8005670 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <HAL_SD_InitCard+0xf8>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f002 fcb5 	bl	8007f4a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <HAL_SD_InitCard+0xf8>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80055e6:	2002      	movs	r0, #2
 80055e8:	f7fd fd72 	bl	80030d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fe79 	bl	80062e4 <SD_PowerON>
 80055f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02e      	b.n	8005670 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fd98 	bl	8006148 <SD_InitCard>
 8005618:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e01b      	b.n	8005670 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005640:	4618      	mov	r0, r3
 8005642:	f002 fd14 	bl	800806e <SDMMC_CmdBlockLength>
 8005646:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00f      	beq.n	800566e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <HAL_SD_InitCard+0xfc>)
 8005654:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3728      	adds	r7, #40	@ 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}
 8005678:	422580a0 	.word	0x422580a0
 800567c:	004005ff 	.word	0x004005ff

08005680 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b092      	sub	sp, #72	@ 0x48
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800568e:	f7fd fd13 	bl	80030b8 <HAL_GetTick>
 8005692:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1c5      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	f040 81b8 	bne.w	8005a30 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80056c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d907      	bls.n	80056e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e1ac      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2203      	movs	r2, #3
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d002      	beq.n	8005702 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	025b      	lsls	r3, r3, #9
 8005700:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	025b      	lsls	r3, r3, #9
 800570c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800570e:	2390      	movs	r3, #144	@ 0x90
 8005710:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005712:	2302      	movs	r3, #2
 8005714:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005716:	2300      	movs	r3, #0
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800571a:	2301      	movs	r3, #1
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f107 0214 	add.w	r2, r7, #20
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f002 fc74 	bl	8008016 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d90a      	bls.n	800574a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2202      	movs	r2, #2
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005740:	4618      	mov	r0, r3
 8005742:	f002 fcd8 	bl	80080f6 <SDMMC_CmdReadMultiBlock>
 8005746:	6478      	str	r0, [r7, #68]	@ 0x44
 8005748:	e009      	b.n	800575e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005756:	4618      	mov	r0, r3
 8005758:	f002 fcab 	bl	80080b2 <SDMMC_CmdReadSingleBlock>
 800575c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800575e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a7e      	ldr	r2, [pc, #504]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005772:	431a      	orrs	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e159      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800578e:	e061      	b.n	8005854 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03c      	beq.n	8005818 <HAL_SD_ReadBlocks+0x198>
 800579e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d039      	beq.n	8005818 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80057a4:	2300      	movs	r3, #0
 80057a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a8:	e033      	b.n	8005812 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 fbad 	bl	8007f0e <SDIO_ReadFIFO>
 80057b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	3301      	adds	r3, #1
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c6:	3b01      	subs	r3, #1
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	3301      	adds	r3, #1
 80057d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057dc:	3b01      	subs	r3, #1
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	0c1b      	lsrs	r3, r3, #16
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ec:	3301      	adds	r3, #1
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f2:	3b01      	subs	r3, #1
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	3301      	adds	r3, #1
 8005804:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005808:	3b01      	subs	r3, #1
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800580c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800580e:	3301      	adds	r3, #1
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
 8005812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005814:	2b07      	cmp	r3, #7
 8005816:	d9c8      	bls.n	80057aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005818:	f7fd fc4e 	bl	80030b8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005824:	429a      	cmp	r2, r3
 8005826:	d902      	bls.n	800582e <HAL_SD_ReadBlocks+0x1ae>
 8005828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d112      	bne.n	8005854 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a4c      	ldr	r2, [pc, #304]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0f4      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800585a:	f240 332a 	movw	r3, #810	@ 0x32a
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d095      	beq.n	8005790 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d022      	beq.n	80058b8 <HAL_SD_ReadBlocks+0x238>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d91f      	bls.n	80058b8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587c:	2b03      	cmp	r3, #3
 800587e:	d01b      	beq.n	80058b8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f002 fc9d 	bl	80081c4 <SDMMC_CmdStopTransfer>
 800588a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a33      	ldr	r2, [pc, #204]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0c2      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_SD_ReadBlocks+0x254>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a22      	ldr	r2, [pc, #136]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	f043 0208 	orr.w	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e0a1      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d012      	beq.n	800592e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	f043 0202 	orr.w	r2, r3, #2
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e087      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d064      	beq.n	8005a06 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <HAL_SD_ReadBlocks+0x2e4>)
 8005942:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06d      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
 8005962:	bf00      	nop
 8005964:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f002 face 	bl	8007f0e <SDIO_ReadFIFO>
 8005972:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	b2da      	uxtb	r2, r3
 8005978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	3301      	adds	r3, #1
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005984:	3b01      	subs	r3, #1
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	3301      	adds	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	3b01      	subs	r3, #1
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80059a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059aa:	3301      	adds	r3, #1
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80059ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b0:	3b01      	subs	r3, #1
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	0e1b      	lsrs	r3, r3, #24
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80059be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c0:	3301      	adds	r3, #1
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80059c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c6:	3b01      	subs	r3, #1
 80059c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80059ca:	f7fd fb75 	bl	80030b8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d902      	bls.n	80059e0 <HAL_SD_ReadBlocks+0x360>
 80059da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d112      	bne.n	8005a06 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	@ (8005a48 <HAL_SD_ReadBlocks+0x3c8>)
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e01b      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_SD_ReadBlocks+0x39a>
 8005a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1a6      	bne.n	8005968 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005a22:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e006      	b.n	8005a3e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3748      	adds	r7, #72	@ 0x48
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	004005ff 	.word	0x004005ff

08005a4c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b092      	sub	sp, #72	@ 0x48
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a5a:	f7fd fb2d 	bl	80030b8 <HAL_GetTick>
 8005a5e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d107      	bne.n	8005a7e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e16d      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	f040 8160 	bne.w	8005d4c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	441a      	add	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d907      	bls.n	8005ab0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e154      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d002      	beq.n	8005ace <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	025b      	lsls	r3, r3, #9
 8005acc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	025b      	lsls	r3, r3, #9
 8005ad8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005ada:	2390      	movs	r3, #144	@ 0x90
 8005adc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f107 0218 	add.w	r2, r7, #24
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 fa8e 	bl	8008016 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d90a      	bls.n	8005b16 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f002 fb36 	bl	800817e <SDMMC_CmdWriteMultiBlock>
 8005b12:	6478      	str	r0, [r7, #68]	@ 0x44
 8005b14:	e009      	b.n	8005b2a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 fb09 	bl	800813a <SDMMC_CmdWriteSingleBlock>
 8005b28:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a8b      	ldr	r2, [pc, #556]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005b36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e101      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b5a:	e065      	b.n	8005c28 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d040      	beq.n	8005bec <HAL_SD_WriteBlocks+0x1a0>
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03d      	beq.n	8005bec <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b74:	e037      	b.n	8005be6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7e:	3301      	adds	r3, #1
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	3b01      	subs	r3, #1
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	021a      	lsls	r2, r3, #8
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	3301      	adds	r3, #1
 8005b98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	041a      	lsls	r2, r3, #16
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bae:	3301      	adds	r3, #1
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	061a      	lsls	r2, r3, #24
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f107 0214 	add.w	r2, r7, #20
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f002 f9a4 	bl	8007f28 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be2:	3301      	adds	r3, #1
 8005be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d9c4      	bls.n	8005b76 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bec:	f7fd fa64 	bl	80030b8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d902      	bls.n	8005c02 <HAL_SD_WriteBlocks+0x1b6>
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d112      	bne.n	8005c28 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a57      	ldr	r2, [pc, #348]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e098      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c2e:	f240 331a 	movw	r3, #794	@ 0x31a
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d091      	beq.n	8005b5c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d022      	beq.n	8005c8c <HAL_SD_WriteBlocks+0x240>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d91f      	bls.n	8005c8c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d01b      	beq.n	8005c8c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f002 fab3 	bl	80081c4 <SDMMC_CmdStopTransfer>
 8005c5e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d012      	beq.n	8005c8c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e066      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SD_WriteBlocks+0x25c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	f043 0208 	orr.w	r2, r3, #8
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e045      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	f043 0202 	orr.w	r2, r3, #2
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e02b      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a13      	ldr	r2, [pc, #76]	@ (8005d64 <HAL_SD_WriteBlocks+0x318>)
 8005d16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	f043 0210 	orr.w	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e011      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005d3e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e006      	b.n	8005d5a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3748      	adds	r7, #72	@ 0x48
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	004005ff 	.word	0x004005ff

08005d68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d76:	0f9b      	lsrs	r3, r3, #30
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d82:	0e9b      	lsrs	r3, r3, #26
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d94:	0e1b      	lsrs	r3, r3, #24
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc8:	0d1b      	lsrs	r3, r3, #20
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005de6:	0bdb      	lsrs	r3, r3, #15
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df8:	0b9b      	lsrs	r3, r3, #14
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0a:	0b5b      	lsrs	r3, r3, #13
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e1c:	0b1b      	lsrs	r3, r3, #12
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d163      	bne.n	8005f00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e3c:	009a      	lsls	r2, r3, #2
 8005e3e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e42:	4013      	ands	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005e48:	0f92      	lsrs	r2, r2, #30
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e54:	0edb      	lsrs	r3, r3, #27
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e66:	0e1b      	lsrs	r3, r3, #24
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e78:	0d5b      	lsrs	r3, r3, #21
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8a:	0c9b      	lsrs	r3, r3, #18
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9c:	0bdb      	lsrs	r3, r3, #15
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	7e1b      	ldrb	r3, [r3, #24]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005eca:	fb03 f202 	mul.w	r2, r3, r2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	7a1b      	ldrb	r3, [r3, #8]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005eec:	0a52      	lsrs	r2, r2, #9
 8005eee:	fb03 f202 	mul.w	r2, r3, r2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005efc:	661a      	str	r2, [r3, #96]	@ 0x60
 8005efe:	e031      	b.n	8005f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d11d      	bne.n	8005f44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	3301      	adds	r3, #1
 8005f24:	029a      	lsls	r2, r3, #10
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f38:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f42:	e00f      	b.n	8005f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a58      	ldr	r2, [pc, #352]	@ (80060ac <HAL_SD_GetCardCSD+0x344>)
 8005f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e09d      	b.n	80060a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f68:	0b9b      	lsrs	r3, r3, #14
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9c:	0fdb      	lsrs	r3, r3, #31
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa8:	0f5b      	lsrs	r3, r3, #29
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fba:	0e9b      	lsrs	r3, r3, #26
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	0d9b      	lsrs	r3, r3, #22
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fde:	0d5b      	lsrs	r3, r3, #21
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffa:	0c1b      	lsrs	r3, r3, #16
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	0bdb      	lsrs	r3, r3, #15
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006022:	0b9b      	lsrs	r3, r3, #14
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	b2da      	uxtb	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	0b5b      	lsrs	r3, r3, #13
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	0b1b      	lsrs	r3, r3, #12
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605e:	0a9b      	lsrs	r3, r3, #10
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	b2da      	uxtb	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	b2da      	uxtb	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	004005ff 	.word	0x004005ff

080060b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f970 	bl	8006400 <SD_SendStatus>
 8006120:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	0a5b      	lsrs	r3, r3, #9
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800613e:	693b      	ldr	r3, [r7, #16]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006148:	b5b0      	push	{r4, r5, r7, lr}
 800614a:	b094      	sub	sp, #80	@ 0x50
 800614c:	af04      	add	r7, sp, #16
 800614e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006150:	2301      	movs	r3, #1
 8006152:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f001 ff04 	bl	8007f66 <SDIO_GetPowerState>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006164:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006168:	e0b8      	b.n	80062dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	2b03      	cmp	r3, #3
 8006170:	d02f      	beq.n	80061d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f002 f8eb 	bl	8008352 <SDMMC_CmdSendCID>
 800617c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800617e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <SD_InitCard+0x40>
    {
      return errorstate;
 8006184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006186:	e0a9      	b.n	80062dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f001 ff2e 	bl	8007ff0 <SDIO_GetResponse>
 8006194:	4602      	mov	r2, r0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2104      	movs	r1, #4
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 ff25 	bl	8007ff0 <SDIO_GetResponse>
 80061a6:	4602      	mov	r2, r0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2108      	movs	r1, #8
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 ff1c 	bl	8007ff0 <SDIO_GetResponse>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	210c      	movs	r1, #12
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 ff13 	bl	8007ff0 <SDIO_GetResponse>
 80061ca:	4602      	mov	r2, r0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d00d      	beq.n	80061f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f107 020e 	add.w	r2, r7, #14
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 f8f1 	bl	80083cc <SDMMC_CmdSetRelAdd>
 80061ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	e072      	b.n	80062dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d036      	beq.n	800626c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f002 f8bb 	bl	800838e <SDMMC_CmdSendCSD>
 8006218:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006222:	e05b      	b.n	80062dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fee0 	bl	8007ff0 <SDIO_GetResponse>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2104      	movs	r1, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fed7 	bl	8007ff0 <SDIO_GetResponse>
 8006242:	4602      	mov	r2, r0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2108      	movs	r1, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fece 	bl	8007ff0 <SDIO_GetResponse>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	210c      	movs	r1, #12
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fec5 	bl	8007ff0 <SDIO_GetResponse>
 8006266:	4602      	mov	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2104      	movs	r1, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f001 febc 	bl	8007ff0 <SDIO_GetResponse>
 8006278:	4603      	mov	r3, r0
 800627a:	0d1a      	lsrs	r2, r3, #20
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fd6e 	bl	8005d68 <HAL_SD_GetCardCSD>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006292:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006296:	e021      	b.n	80062dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	2200      	movs	r2, #0
 80062a4:	461c      	mov	r4, r3
 80062a6:	4615      	mov	r5, r2
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	4608      	mov	r0, r1
 80062ae:	f001 ffab 	bl	8008208 <SDMMC_CmdSelDesel>
 80062b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <SD_InitCard+0x176>
  {
    return errorstate;
 80062ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062bc:	e00e      	b.n	80062dc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	466c      	mov	r4, sp
 80062c6:	f103 0210 	add.w	r2, r3, #16
 80062ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80062cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062d0:	3304      	adds	r3, #4
 80062d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062d4:	4628      	mov	r0, r5
 80062d6:	f001 fdef 	bl	8007eb8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3740      	adds	r7, #64	@ 0x40
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bdb0      	pop	{r4, r5, r7, pc}

080062e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 ffa6 	bl	800824e <SDMMC_CmdGoIdleState>
 8006302:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <SD_PowerON+0x2a>
  {
    return errorstate;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	e072      	b.n	80063f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f001 ffb9 	bl	800828a <SDMMC_CmdOperCond>
 8006318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f001 ff8f 	bl	800824e <SDMMC_CmdGoIdleState>
 8006330:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	e05b      	b.n	80063f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006346:	2b01      	cmp	r3, #1
 8006348:	d137      	bne.n	80063ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f001 ffb9 	bl	80082c8 <SDMMC_CmdAppCommand>
 8006356:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d02d      	beq.n	80063ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800635e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006362:	e047      	b.n	80063f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f001 ffac 	bl	80082c8 <SDMMC_CmdAppCommand>
 8006370:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <SD_PowerON+0x98>
    {
      return errorstate;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	e03b      	b.n	80063f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	491e      	ldr	r1, [pc, #120]	@ (80063fc <SD_PowerON+0x118>)
 8006382:	4618      	mov	r0, r3
 8006384:	f001 ffc2 	bl	800830c <SDMMC_CmdAppOperCommand>
 8006388:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006390:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006394:	e02e      	b.n	80063f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fe27 	bl	8007ff0 <SDIO_GetResponse>
 80063a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	0fdb      	lsrs	r3, r3, #31
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <SD_PowerON+0xcc>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <SD_PowerON+0xce>
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]

    count++;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d802      	bhi.n	80063ca <SD_PowerON+0xe6>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0cc      	beq.n	8006364 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d902      	bls.n	80063da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80063d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063d8:	e00c      	b.n	80063f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80063ea:	e002      	b.n	80063f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	c1100000 	.word	0xc1100000

08006400 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006410:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006414:	e018      	b.n	8006448 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f001 fff3 	bl	800840e <SDMMC_CmdSendStatus>
 8006428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	e009      	b.n	8006448 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fdd8 	bl	8007ff0 <SDIO_GetResponse>
 8006440:	4602      	mov	r2, r0
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e041      	b.n	80064e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc f908 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fae6 	bl	8006a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e046      	b.n	8006596 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a23      	ldr	r2, [pc, #140]	@ (80065a4 <HAL_TIM_Base_Start+0xb4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006522:	d01d      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1f      	ldr	r2, [pc, #124]	@ (80065a8 <HAL_TIM_Base_Start+0xb8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <HAL_TIM_Base_Start+0xbc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1c      	ldr	r2, [pc, #112]	@ (80065b0 <HAL_TIM_Base_Start+0xc0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1b      	ldr	r2, [pc, #108]	@ (80065b4 <HAL_TIM_Base_Start+0xc4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a19      	ldr	r2, [pc, #100]	@ (80065b8 <HAL_TIM_Base_Start+0xc8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <HAL_TIM_Base_Start+0xcc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d111      	bne.n	8006584 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b06      	cmp	r3, #6
 8006570:	d010      	beq.n	8006594 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	e007      	b.n	8006594 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40010400 	.word	0x40010400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40001800 	.word	0x40001800

080065c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e04e      	b.n	8006676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a23      	ldr	r2, [pc, #140]	@ (8006684 <HAL_TIM_Base_Start_IT+0xc4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d022      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006602:	d01d      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1f      	ldr	r2, [pc, #124]	@ (8006688 <HAL_TIM_Base_Start_IT+0xc8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1e      	ldr	r2, [pc, #120]	@ (800668c <HAL_TIM_Base_Start_IT+0xcc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1c      	ldr	r2, [pc, #112]	@ (8006690 <HAL_TIM_Base_Start_IT+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1b      	ldr	r2, [pc, #108]	@ (8006694 <HAL_TIM_Base_Start_IT+0xd4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <HAL_TIM_Base_Start_IT+0xd8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x80>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a18      	ldr	r2, [pc, #96]	@ (800669c <HAL_TIM_Base_Start_IT+0xdc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d111      	bne.n	8006664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b06      	cmp	r3, #6
 8006650:	d010      	beq.n	8006674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0201 	orr.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006662:	e007      	b.n	8006674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40010400 	.word	0x40010400
 8006698:	40014000 	.word	0x40014000
 800669c:	40001800 	.word	0x40001800

080066a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d020      	beq.n	8006704 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0202 	mvn.w	r2, #2
 80066d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f999 	bl	8006a22 <HAL_TIM_IC_CaptureCallback>
 80066f0:	e005      	b.n	80066fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f98b 	bl	8006a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f99c 	bl	8006a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d020      	beq.n	8006750 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01b      	beq.n	8006750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0204 	mvn.w	r2, #4
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2202      	movs	r2, #2
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f973 	bl	8006a22 <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f965 	bl	8006a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f976 	bl	8006a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d020      	beq.n	800679c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01b      	beq.n	800679c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0208 	mvn.w	r2, #8
 800676c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2204      	movs	r2, #4
 8006772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f94d 	bl	8006a22 <HAL_TIM_IC_CaptureCallback>
 8006788:	e005      	b.n	8006796 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f93f 	bl	8006a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f950 	bl	8006a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d020      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01b      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0210 	mvn.w	r2, #16
 80067b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2208      	movs	r2, #8
 80067be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f927 	bl	8006a22 <HAL_TIM_IC_CaptureCallback>
 80067d4:	e005      	b.n	80067e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f919 	bl	8006a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f92a 	bl	8006a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0201 	mvn.w	r2, #1
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fb fd60 	bl	80022cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fae4 	bl	8006df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8fb 	bl	8006a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00c      	beq.n	8006878 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0220 	mvn.w	r2, #32
 8006870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fab6 	bl	8006de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_TIM_ConfigClockSource+0x1c>
 8006898:	2302      	movs	r3, #2
 800689a:	e0b4      	b.n	8006a06 <HAL_TIM_ConfigClockSource+0x186>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d4:	d03e      	beq.n	8006954 <HAL_TIM_ConfigClockSource+0xd4>
 80068d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068da:	f200 8087 	bhi.w	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e2:	f000 8086 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x172>
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ea:	d87f      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b70      	cmp	r3, #112	@ 0x70
 80068ee:	d01a      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0xa6>
 80068f0:	2b70      	cmp	r3, #112	@ 0x70
 80068f2:	d87b      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b60      	cmp	r3, #96	@ 0x60
 80068f6:	d050      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x11a>
 80068f8:	2b60      	cmp	r3, #96	@ 0x60
 80068fa:	d877      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b50      	cmp	r3, #80	@ 0x50
 80068fe:	d03c      	beq.n	800697a <HAL_TIM_ConfigClockSource+0xfa>
 8006900:	2b50      	cmp	r3, #80	@ 0x50
 8006902:	d873      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b40      	cmp	r3, #64	@ 0x40
 8006906:	d058      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x13a>
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d86f      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b30      	cmp	r3, #48	@ 0x30
 800690e:	d064      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x15a>
 8006910:	2b30      	cmp	r3, #48	@ 0x30
 8006912:	d86b      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d060      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d867      	bhi.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d05c      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x15a>
 8006920:	2b10      	cmp	r3, #16
 8006922:	d05a      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x15a>
 8006924:	e062      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006936:	f000 f9b9 	bl	8006cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	609a      	str	r2, [r3, #8]
      break;
 8006952:	e04f      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006964:	f000 f9a2 	bl	8006cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006976:	609a      	str	r2, [r3, #8]
      break;
 8006978:	e03c      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	461a      	mov	r2, r3
 8006988:	f000 f916 	bl	8006bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2150      	movs	r1, #80	@ 0x50
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f96f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 8006998:	e02c      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 f935 	bl	8006c16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2160      	movs	r1, #96	@ 0x60
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f95f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80069b8:	e01c      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c6:	461a      	mov	r2, r3
 80069c8:	f000 f8f6 	bl	8006bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2140      	movs	r1, #64	@ 0x40
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 f94f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80069d8:	e00c      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f000 f946 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80069ea:	e003      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
      break;
 80069f0:	e000      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a46      	ldr	r2, [pc, #280]	@ (8006b8c <TIM_Base_SetConfig+0x12c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <TIM_Base_SetConfig+0x40>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7e:	d00f      	beq.n	8006aa0 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a43      	ldr	r2, [pc, #268]	@ (8006b90 <TIM_Base_SetConfig+0x130>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a42      	ldr	r2, [pc, #264]	@ (8006b94 <TIM_Base_SetConfig+0x134>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a41      	ldr	r2, [pc, #260]	@ (8006b98 <TIM_Base_SetConfig+0x138>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a40      	ldr	r2, [pc, #256]	@ (8006b9c <TIM_Base_SetConfig+0x13c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d108      	bne.n	8006ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a35      	ldr	r2, [pc, #212]	@ (8006b8c <TIM_Base_SetConfig+0x12c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d02b      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac0:	d027      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a32      	ldr	r2, [pc, #200]	@ (8006b90 <TIM_Base_SetConfig+0x130>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d023      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a31      	ldr	r2, [pc, #196]	@ (8006b94 <TIM_Base_SetConfig+0x134>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01f      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a30      	ldr	r2, [pc, #192]	@ (8006b98 <TIM_Base_SetConfig+0x138>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01b      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	@ (8006b9c <TIM_Base_SetConfig+0x13c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d017      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8006ba0 <TIM_Base_SetConfig+0x140>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba4 <TIM_Base_SetConfig+0x144>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00f      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba8 <TIM_Base_SetConfig+0x148>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00b      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2b      	ldr	r2, [pc, #172]	@ (8006bac <TIM_Base_SetConfig+0x14c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d007      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb0 <TIM_Base_SetConfig+0x150>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a29      	ldr	r2, [pc, #164]	@ (8006bb4 <TIM_Base_SetConfig+0x154>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d108      	bne.n	8006b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a10      	ldr	r2, [pc, #64]	@ (8006b8c <TIM_Base_SetConfig+0x12c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_Base_SetConfig+0xf8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a12      	ldr	r2, [pc, #72]	@ (8006b9c <TIM_Base_SetConfig+0x13c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d103      	bne.n	8006b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d105      	bne.n	8006b7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f023 0201 	bic.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	611a      	str	r2, [r3, #16]
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800
 8006bac:	40001800 	.word	0x40001800
 8006bb0:	40001c00 	.word	0x40001c00
 8006bb4:	40002000 	.word	0x40002000

08006bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0201 	bic.w	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f023 030a 	bic.w	r3, r3, #10
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f023 0210 	bic.w	r2, r3, #16
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f043 0307 	orr.w	r3, r3, #7
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e05a      	b.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a21      	ldr	r2, [pc, #132]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d50:	d01d      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1d      	ldr	r2, [pc, #116]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d018      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a18      	ldr	r2, [pc, #96]	@ (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a15      	ldr	r2, [pc, #84]	@ (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d10c      	bne.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40001800 	.word	0x40001800

08006de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e042      	b.n	8006ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb fc4c 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fdbd 	bl	80079d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	@ 0x28
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d175      	bne.n	8006fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_UART_Transmit+0x2c>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e06e      	b.n	8006fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2221      	movs	r2, #33	@ 0x21
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eea:	f7fc f8e5 	bl	80030b8 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	d108      	bne.n	8006f18 <HAL_UART_Transmit+0x6c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e003      	b.n	8006f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f20:	e02e      	b.n	8006f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	@ 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fb1f 	bl	8007570 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e03a      	b.n	8006fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e007      	b.n	8006f72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1cb      	bne.n	8006f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2140      	movs	r1, #64	@ 0x40
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 faeb 	bl	8007570 <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e006      	b.n	8006fba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d112      	bne.n	8007002 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_UART_Receive_IT+0x26>
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e00b      	b.n	8007004 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fb12 	bl	8007622 <UART_Start_Receive_IT>
 8006ffe:	4603      	mov	r3, r0
 8007000:	e000      	b.n	8007004 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ba      	sub	sp, #232	@ 0xe8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800703e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800704a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10f      	bne.n	8007072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_UART_IRQHandler+0x66>
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fbf2 	bl	8007854 <UART_Receive_IT>
      return;
 8007070:	e25b      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80de 	beq.w	8007238 <HAL_UART_IRQHandler+0x22c>
 800707c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80d1 	beq.w	8007238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <HAL_UART_IRQHandler+0xae>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <HAL_UART_IRQHandler+0xd2>
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	f043 0202 	orr.w	r2, r3, #2
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_UART_IRQHandler+0xf6>
 80070ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fa:	f043 0204 	orr.w	r2, r3, #4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d011      	beq.n	8007132 <HAL_UART_IRQHandler+0x126>
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800711a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	f043 0208 	orr.w	r2, r3, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 81f2 	beq.w	8007520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_UART_IRQHandler+0x14e>
 8007148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb7d 	bl	8007854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <HAL_UART_IRQHandler+0x17a>
 800717e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d04f      	beq.n	8007226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa85 	bl	8007696 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d141      	bne.n	800721e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d9      	bne.n	800719a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d013      	beq.n	8007216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f2:	4a7e      	ldr	r2, [pc, #504]	@ (80073ec <HAL_UART_IRQHandler+0x3e0>)
 80071f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fc fc67 	bl	8003ace <HAL_DMA_Abort_IT>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007214:	e00e      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f994 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e00a      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f990 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	e006      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f98c 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007232:	e175      	b.n	8007520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	bf00      	nop
    return;
 8007236:	e173      	b.n	8007520 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	2b01      	cmp	r3, #1
 800723e:	f040 814f 	bne.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8148 	beq.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8141 	beq.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	f040 80b6 	bne.w	80073f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8145 	beq.w	8007524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800729e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072a2:	429a      	cmp	r2, r3
 80072a4:	f080 813e 	bcs.w	8007524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ba:	f000 8088 	beq.w	80073ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80072ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1d9      	bne.n	80072be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800731a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800732e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e1      	bne.n	800730a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800736a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800736c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e3      	bne.n	8007346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800739c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739e:	f023 0310 	bic.w	r3, r3, #16
 80073a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e3      	bne.n	800738c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fc fb10 	bl	80039ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8b7 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073ea:	e09b      	b.n	8007524 <HAL_UART_IRQHandler+0x518>
 80073ec:	0800775d 	.word	0x0800775d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 808e 	beq.w	8007528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800740c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8089 	beq.w	8007528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800743a:	647a      	str	r2, [r7, #68]	@ 0x44
 800743c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	623b      	str	r3, [r7, #32]
   return(result);
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007472:	633a      	str	r2, [r7, #48]	@ 0x30
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074b8:	61fa      	str	r2, [r7, #28]
 80074ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	617b      	str	r3, [r7, #20]
   return(result);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e3      	bne.n	8007494 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f83d 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074de:	e023      	b.n	8007528 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <HAL_UART_IRQHandler+0x4f4>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f943 	bl	8007784 <UART_Transmit_IT>
    return;
 80074fe:	e014      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <HAL_UART_IRQHandler+0x51e>
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f983 	bl	8007824 <UART_EndTransmit_IT>
    return;
 800751e:	e004      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
    return;
 8007520:	bf00      	nop
 8007522:	e002      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
      return;
 8007524:	bf00      	nop
 8007526:	e000      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
      return;
 8007528:	bf00      	nop
  }
}
 800752a:	37e8      	adds	r7, #232	@ 0xe8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007580:	e03b      	b.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d037      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800758a:	f7fb fd95 	bl	80030b8 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	429a      	cmp	r2, r3
 8007598:	d302      	bcc.n	80075a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e03a      	b.n	800761a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d023      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b80      	cmp	r3, #128	@ 0x80
 80075b6:	d020      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d01d      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d116      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f857 	bl	8007696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2208      	movs	r2, #8
 80075ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e00f      	b.n	800761a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4013      	ands	r3, r2
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	bf0c      	ite	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	2300      	movne	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	429a      	cmp	r2, r3
 8007616:	d0b4      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	4613      	mov	r3, r2
 800762e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2222      	movs	r2, #34	@ 0x22
 800764c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007666:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695a      	ldr	r2, [r3, #20]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0220 	orr.w	r2, r2, #32
 8007686:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007696:	b480      	push	{r7}
 8007698:	b095      	sub	sp, #84	@ 0x54
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076be:	643a      	str	r2, [r7, #64]	@ 0x40
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3314      	adds	r3, #20
 80076d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e5      	bne.n	80076d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	2b01      	cmp	r3, #1
 800770c:	d119      	bne.n	8007742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	60bb      	str	r3, [r7, #8]
   return(result);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f023 0310 	bic.w	r3, r3, #16
 8007724:	647b      	str	r3, [r7, #68]	@ 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800772e:	61ba      	str	r2, [r7, #24]
 8007730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	613b      	str	r3, [r7, #16]
   return(result);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e5      	bne.n	800770e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007750:	bf00      	nop
 8007752:	3754      	adds	r7, #84	@ 0x54
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fee4 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b21      	cmp	r3, #33	@ 0x21
 8007796:	d13e      	bne.n	8007816 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a0:	d114      	bne.n	80077cc <UART_Transmit_IT+0x48>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d110      	bne.n	80077cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	1c9a      	adds	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	621a      	str	r2, [r3, #32]
 80077ca:	e008      	b.n	80077de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	1c59      	adds	r1, r3, #1
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6211      	str	r1, [r2, #32]
 80077d6:	781a      	ldrb	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
  }
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800783a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fe73 	bl	8007530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	@ 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b22      	cmp	r3, #34	@ 0x22
 8007866:	f040 80ae 	bne.w	80079c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007872:	d117      	bne.n	80078a4 <UART_Receive_IT+0x50>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d113      	bne.n	80078a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800787c:	2300      	movs	r3, #0
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	b29a      	uxth	r2, r3
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	1c9a      	adds	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80078a2:	e026      	b.n	80078f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b6:	d007      	beq.n	80078c8 <UART_Receive_IT+0x74>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <UART_Receive_IT+0x82>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e008      	b.n	80078e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4619      	mov	r1, r3
 8007900:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007902:	2b00      	cmp	r3, #0
 8007904:	d15d      	bne.n	80079c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0220 	bic.w	r2, r2, #32
 8007914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695a      	ldr	r2, [r3, #20]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0201 	bic.w	r2, r2, #1
 8007934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007948:	2b01      	cmp	r3, #1
 800794a:	d135      	bne.n	80079b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330c      	adds	r3, #12
 8007958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	613b      	str	r3, [r7, #16]
   return(result);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f023 0310 	bic.w	r3, r3, #16
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	330c      	adds	r3, #12
 8007970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007972:	623a      	str	r2, [r7, #32]
 8007974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	69f9      	ldr	r1, [r7, #28]
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b10      	cmp	r3, #16
 8007992:	d10a      	bne.n	80079aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fdd1 	bl	8007558 <HAL_UARTEx_RxEventCallback>
 80079b6:	e002      	b.n	80079be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fa fc3f 	bl	800223c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e002      	b.n	80079c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079c6:	2302      	movs	r3, #2
  }
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3730      	adds	r7, #48	@ 0x30
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d4:	b0c0      	sub	sp, #256	@ 0x100
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ec:	68d9      	ldr	r1, [r3, #12]
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	ea40 0301 	orr.w	r3, r0, r1
 80079f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a28:	f021 010c 	bic.w	r1, r1, #12
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a36:	430b      	orrs	r3, r1
 8007a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4a:	6999      	ldr	r1, [r3, #24]
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	ea40 0301 	orr.w	r3, r0, r1
 8007a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8007c9c <UART_SetConfig+0x2cc>)
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d005      	beq.n	8007a70 <UART_SetConfig+0xa0>
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ca0 <UART_SetConfig+0x2d0>)
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d104      	bne.n	8007a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a70:	f7fd fd10 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 8007a74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a78:	e003      	b.n	8007a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a7a:	f7fd fcf7 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8007a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a8c:	f040 810c 	bne.w	8007ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	1891      	adds	r1, r2, r2
 8007aa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007aaa:	415b      	adcs	r3, r3
 8007aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	eb12 0801 	adds.w	r8, r2, r1
 8007ab8:	4629      	mov	r1, r5
 8007aba:	eb43 0901 	adc.w	r9, r3, r1
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ad2:	4690      	mov	r8, r2
 8007ad4:	4699      	mov	r9, r3
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	eb18 0303 	adds.w	r3, r8, r3
 8007adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	eb49 0303 	adc.w	r3, r9, r3
 8007ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007af6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007afe:	460b      	mov	r3, r1
 8007b00:	18db      	adds	r3, r3, r3
 8007b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b04:	4613      	mov	r3, r2
 8007b06:	eb42 0303 	adc.w	r3, r2, r3
 8007b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b14:	f7f9 f8c8 	bl	8000ca8 <__aeabi_uldivmod>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4b61      	ldr	r3, [pc, #388]	@ (8007ca4 <UART_SetConfig+0x2d4>)
 8007b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	011c      	lsls	r4, r3, #4
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b40:	415b      	adcs	r3, r3
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b48:	4641      	mov	r1, r8
 8007b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8007b4e:	4649      	mov	r1, r9
 8007b50:	eb43 0b01 	adc.w	fp, r3, r1
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b68:	4692      	mov	sl, r2
 8007b6a:	469b      	mov	fp, r3
 8007b6c:	4643      	mov	r3, r8
 8007b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8007b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b76:	464b      	mov	r3, r9
 8007b78:	eb4b 0303 	adc.w	r3, fp, r3
 8007b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b94:	460b      	mov	r3, r1
 8007b96:	18db      	adds	r3, r3, r3
 8007b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007baa:	f7f9 f87d 	bl	8000ca8 <__aeabi_uldivmod>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca4 <UART_SetConfig+0x2d4>)
 8007bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	2264      	movs	r2, #100	@ 0x64
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	1acb      	subs	r3, r1, r3
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bca:	4b36      	ldr	r3, [pc, #216]	@ (8007ca4 <UART_SetConfig+0x2d4>)
 8007bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007bd8:	441c      	add	r4, r3
 8007bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007be4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007bec:	4642      	mov	r2, r8
 8007bee:	464b      	mov	r3, r9
 8007bf0:	1891      	adds	r1, r2, r2
 8007bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007bf4:	415b      	adcs	r3, r3
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	1851      	adds	r1, r2, r1
 8007c00:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c02:	4649      	mov	r1, r9
 8007c04:	414b      	adcs	r3, r1
 8007c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c14:	4659      	mov	r1, fp
 8007c16:	00cb      	lsls	r3, r1, #3
 8007c18:	4651      	mov	r1, sl
 8007c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c1e:	4651      	mov	r1, sl
 8007c20:	00ca      	lsls	r2, r1, #3
 8007c22:	4610      	mov	r0, r2
 8007c24:	4619      	mov	r1, r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	4642      	mov	r2, r8
 8007c2a:	189b      	adds	r3, r3, r2
 8007c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c30:	464b      	mov	r3, r9
 8007c32:	460a      	mov	r2, r1
 8007c34:	eb42 0303 	adc.w	r3, r2, r3
 8007c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c50:	460b      	mov	r3, r1
 8007c52:	18db      	adds	r3, r3, r3
 8007c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c56:	4613      	mov	r3, r2
 8007c58:	eb42 0303 	adc.w	r3, r2, r3
 8007c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c66:	f7f9 f81f 	bl	8000ca8 <__aeabi_uldivmod>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <UART_SetConfig+0x2d4>)
 8007c70:	fba3 1302 	umull	r1, r3, r3, r2
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	2164      	movs	r1, #100	@ 0x64
 8007c78:	fb01 f303 	mul.w	r3, r1, r3
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	3332      	adds	r3, #50	@ 0x32
 8007c82:	4a08      	ldr	r2, [pc, #32]	@ (8007ca4 <UART_SetConfig+0x2d4>)
 8007c84:	fba2 2303 	umull	r2, r3, r2, r3
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	f003 0207 	and.w	r2, r3, #7
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4422      	add	r2, r4
 8007c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c98:	e106      	b.n	8007ea8 <UART_SetConfig+0x4d8>
 8007c9a:	bf00      	nop
 8007c9c:	40011000 	.word	0x40011000
 8007ca0:	40011400 	.word	0x40011400
 8007ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007cba:	4642      	mov	r2, r8
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	1891      	adds	r1, r2, r2
 8007cc0:	6239      	str	r1, [r7, #32]
 8007cc2:	415b      	adcs	r3, r3
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cca:	4641      	mov	r1, r8
 8007ccc:	1854      	adds	r4, r2, r1
 8007cce:	4649      	mov	r1, r9
 8007cd0:	eb43 0501 	adc.w	r5, r3, r1
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	00eb      	lsls	r3, r5, #3
 8007cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ce2:	00e2      	lsls	r2, r4, #3
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	461d      	mov	r5, r3
 8007ce8:	4643      	mov	r3, r8
 8007cea:	18e3      	adds	r3, r4, r3
 8007cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cf0:	464b      	mov	r3, r9
 8007cf2:	eb45 0303 	adc.w	r3, r5, r3
 8007cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d16:	4629      	mov	r1, r5
 8007d18:	008b      	lsls	r3, r1, #2
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d20:	4621      	mov	r1, r4
 8007d22:	008a      	lsls	r2, r1, #2
 8007d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d28:	f7f8 ffbe 	bl	8000ca8 <__aeabi_uldivmod>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4b60      	ldr	r3, [pc, #384]	@ (8007eb4 <UART_SetConfig+0x4e4>)
 8007d32:	fba3 2302 	umull	r2, r3, r3, r2
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	011c      	lsls	r4, r3, #4
 8007d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	1891      	adds	r1, r2, r2
 8007d52:	61b9      	str	r1, [r7, #24]
 8007d54:	415b      	adcs	r3, r3
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	1851      	adds	r1, r2, r1
 8007d60:	6139      	str	r1, [r7, #16]
 8007d62:	4649      	mov	r1, r9
 8007d64:	414b      	adcs	r3, r1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d74:	4659      	mov	r1, fp
 8007d76:	00cb      	lsls	r3, r1, #3
 8007d78:	4651      	mov	r1, sl
 8007d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d7e:	4651      	mov	r1, sl
 8007d80:	00ca      	lsls	r2, r1, #3
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	4603      	mov	r3, r0
 8007d88:	4642      	mov	r2, r8
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d90:	464b      	mov	r3, r9
 8007d92:	460a      	mov	r2, r1
 8007d94:	eb42 0303 	adc.w	r3, r2, r3
 8007d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007db4:	4649      	mov	r1, r9
 8007db6:	008b      	lsls	r3, r1, #2
 8007db8:	4641      	mov	r1, r8
 8007dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbe:	4641      	mov	r1, r8
 8007dc0:	008a      	lsls	r2, r1, #2
 8007dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007dc6:	f7f8 ff6f 	bl	8000ca8 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4b38      	ldr	r3, [pc, #224]	@ (8007eb4 <UART_SetConfig+0x4e4>)
 8007dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2264      	movs	r2, #100	@ 0x64
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	1acb      	subs	r3, r1, r3
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	3332      	adds	r3, #50	@ 0x32
 8007de4:	4a33      	ldr	r2, [pc, #204]	@ (8007eb4 <UART_SetConfig+0x4e4>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007df0:	441c      	add	r4, r3
 8007df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df6:	2200      	movs	r2, #0
 8007df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8007dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e10:	4641      	mov	r1, r8
 8007e12:	1851      	adds	r1, r2, r1
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	4649      	mov	r1, r9
 8007e18:	414b      	adcs	r3, r1
 8007e1a:	607b      	str	r3, [r7, #4]
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e28:	4659      	mov	r1, fp
 8007e2a:	00cb      	lsls	r3, r1, #3
 8007e2c:	4651      	mov	r1, sl
 8007e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e32:	4651      	mov	r1, sl
 8007e34:	00ca      	lsls	r2, r1, #3
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e42:	464b      	mov	r3, r9
 8007e44:	460a      	mov	r2, r1
 8007e46:	eb42 0303 	adc.w	r3, r2, r3
 8007e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e56:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e64:	4649      	mov	r1, r9
 8007e66:	008b      	lsls	r3, r1, #2
 8007e68:	4641      	mov	r1, r8
 8007e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e6e:	4641      	mov	r1, r8
 8007e70:	008a      	lsls	r2, r1, #2
 8007e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e76:	f7f8 ff17 	bl	8000ca8 <__aeabi_uldivmod>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <UART_SetConfig+0x4e4>)
 8007e80:	fba3 1302 	umull	r1, r3, r3, r2
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	2164      	movs	r1, #100	@ 0x64
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	3332      	adds	r3, #50	@ 0x32
 8007e92:	4a08      	ldr	r2, [pc, #32]	@ (8007eb4 <UART_SetConfig+0x4e4>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	f003 020f 	and.w	r2, r3, #15
 8007e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4422      	add	r2, r4
 8007ea6:	609a      	str	r2, [r3, #8]
}
 8007ea8:	bf00      	nop
 8007eaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb4:	51eb851f 	.word	0x51eb851f

08007eb8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007eb8:	b084      	sub	sp, #16
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	f107 001c 	add.w	r0, r7, #28
 8007ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007ece:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ed2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8007ed6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007eda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007ede:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007ee2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007ef2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	b004      	add	sp, #16
 8007f0c:	4770      	bx	lr

08007f0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2203      	movs	r2, #3
 8007f56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0303 	and.w	r3, r3, #3
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fa0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007fa6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007fac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007fbc:	f023 030f 	bic.w	r3, r3, #15
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	b2db      	uxtb	r3, r3
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3314      	adds	r3, #20
 8007ffe:	461a      	mov	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4413      	add	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
}  
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800803c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008042:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008048:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008054:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008060:	2300      	movs	r3, #0

}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800807c:	2310      	movs	r3, #16
 800807e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008080:	2340      	movs	r3, #64	@ 0x40
 8008082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800808c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff74 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800809a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800809e:	2110      	movs	r1, #16
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9d7 	bl	8008454 <SDMMC_GetCmdResp1>
 80080a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080a8:	69fb      	ldr	r3, [r7, #28]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80080c0:	2311      	movs	r3, #17
 80080c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080c4:	2340      	movs	r3, #64	@ 0x40
 80080c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080c8:	2300      	movs	r3, #0
 80080ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080d2:	f107 0308 	add.w	r3, r7, #8
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff52 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80080de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e2:	2111      	movs	r1, #17
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9b5 	bl	8008454 <SDMMC_GetCmdResp1>
 80080ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ec:	69fb      	ldr	r3, [r7, #28]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008104:	2312      	movs	r3, #18
 8008106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008108:	2340      	movs	r3, #64	@ 0x40
 800810a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008114:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff ff30 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008126:	2112      	movs	r1, #18
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f993 	bl	8008454 <SDMMC_GetCmdResp1>
 800812e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008130:	69fb      	ldr	r3, [r7, #28]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b088      	sub	sp, #32
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008148:	2318      	movs	r3, #24
 800814a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800814c:	2340      	movs	r3, #64	@ 0x40
 800814e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008158:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815a:	f107 0308 	add.w	r3, r7, #8
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ff0e 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800816a:	2118      	movs	r1, #24
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f971 	bl	8008454 <SDMMC_GetCmdResp1>
 8008172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008174:	69fb      	ldr	r3, [r7, #28]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b088      	sub	sp, #32
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800818c:	2319      	movs	r3, #25
 800818e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008190:	2340      	movs	r3, #64	@ 0x40
 8008192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800819c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff feec 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80081aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ae:	2119      	movs	r1, #25
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f94f 	bl	8008454 <SDMMC_GetCmdResp1>
 80081b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081b8:	69fb      	ldr	r3, [r7, #28]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80081d0:	230c      	movs	r3, #12
 80081d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081d4:	2340      	movs	r3, #64	@ 0x40
 80081d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081d8:	2300      	movs	r3, #0
 80081da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081e2:	f107 0308 	add.w	r3, r7, #8
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff feca 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80081ee:	4a05      	ldr	r2, [pc, #20]	@ (8008204 <SDMMC_CmdStopTransfer+0x40>)
 80081f0:	210c      	movs	r1, #12
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f92e 	bl	8008454 <SDMMC_GetCmdResp1>
 80081f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081fa:	69fb      	ldr	r3, [r7, #28]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3720      	adds	r7, #32
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	05f5e100 	.word	0x05f5e100

08008208 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	@ 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008218:	2307      	movs	r3, #7
 800821a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800821c:	2340      	movs	r3, #64	@ 0x40
 800821e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008228:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fea6 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823a:	2107      	movs	r1, #7
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f909 	bl	8008454 <SDMMC_GetCmdResp1>
 8008242:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	@ 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b088      	sub	sp, #32
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800826a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800826c:	f107 0308 	add.w	r3, r7, #8
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe85 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fb23 	bl	80088c4 <SDMMC_GetCmdError>
 800827e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008280:	69fb      	ldr	r3, [r7, #28]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b088      	sub	sp, #32
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008292:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008298:	2308      	movs	r3, #8
 800829a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800829c:	2340      	movs	r3, #64	@ 0x40
 800829e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082aa:	f107 0308 	add.w	r3, r7, #8
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fe66 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fab6 	bl	8008828 <SDMMC_GetCmdResp7>
 80082bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082d6:	2337      	movs	r3, #55	@ 0x37
 80082d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082da:	2340      	movs	r3, #64	@ 0x40
 80082dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fe47 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80082f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082f8:	2137      	movs	r1, #55	@ 0x37
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f8aa 	bl	8008454 <SDMMC_GetCmdResp1>
 8008300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008302:	69fb      	ldr	r3, [r7, #28]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800831c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008322:	2329      	movs	r3, #41	@ 0x29
 8008324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008326:	2340      	movs	r3, #64	@ 0x40
 8008328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800832e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008332:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fe21 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f9bd 	bl	80086c0 <SDMMC_GetCmdResp3>
 8008346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008348:	69fb      	ldr	r3, [r7, #28]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3720      	adds	r7, #32
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b088      	sub	sp, #32
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800835e:	2302      	movs	r3, #2
 8008360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008362:	23c0      	movs	r3, #192	@ 0xc0
 8008364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800836a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800836e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fe03 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f957 	bl	8008630 <SDMMC_GetCmdResp2>
 8008382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008384:	69fb      	ldr	r3, [r7, #28]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b088      	sub	sp, #32
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800839c:	2309      	movs	r3, #9
 800839e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80083a0:	23c0      	movs	r3, #192	@ 0xc0
 80083a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff fde4 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f938 	bl	8008630 <SDMMC_GetCmdResp2>
 80083c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083c2:	69fb      	ldr	r3, [r7, #28]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80083da:	2303      	movs	r3, #3
 80083dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083de:	2340      	movs	r3, #64	@ 0x40
 80083e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fdc5 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	2103      	movs	r1, #3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f99d 	bl	800873c <SDMMC_GetCmdResp6>
 8008402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008404:	69fb      	ldr	r3, [r7, #28]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b088      	sub	sp, #32
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800841c:	230d      	movs	r3, #13
 800841e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008420:	2340      	movs	r3, #64	@ 0x40
 8008422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fda4 	bl	8007f82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800843a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843e:	210d      	movs	r1, #13
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f807 	bl	8008454 <SDMMC_GetCmdResp1>
 8008446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008448:	69fb      	ldr	r3, [r7, #28]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	460b      	mov	r3, r1
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008462:	4b70      	ldr	r3, [pc, #448]	@ (8008624 <SDMMC_GetCmdResp1+0x1d0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a70      	ldr	r2, [pc, #448]	@ (8008628 <SDMMC_GetCmdResp1+0x1d4>)
 8008468:	fba2 2303 	umull	r2, r3, r2, r3
 800846c:	0a5a      	lsrs	r2, r3, #9
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	fb02 f303 	mul.w	r3, r2, r3
 8008474:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	1e5a      	subs	r2, r3, #1
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008484:	e0c9      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0ef      	beq.n	8008476 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1ea      	bne.n	8008476 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2204      	movs	r2, #4
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084b2:	2304      	movs	r3, #4
 80084b4:	e0b1      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0a6      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	22c5      	movs	r2, #197	@ 0xc5
 80084d0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff fd7f 	bl	8007fd6 <SDIO_GetCommandResponse>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	4293      	cmp	r3, r2
 80084e0:	d001      	beq.n	80084e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e099      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80084e6:	2100      	movs	r1, #0
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff fd81 	bl	8007ff0 <SDIO_GetResponse>
 80084ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	4b4e      	ldr	r3, [pc, #312]	@ (800862c <SDMMC_GetCmdResp1+0x1d8>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e08d      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da02      	bge.n	800850a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008508:	e087      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008514:	2340      	movs	r3, #64	@ 0x40
 8008516:	e080      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008522:	2380      	movs	r3, #128	@ 0x80
 8008524:	e079      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008534:	e071      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008544:	e069      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008554:	e061      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008560:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008564:	e059      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008574:	e051      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008584:	e049      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008590:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008594:	e041      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80085a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085a4:	e039      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80085b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80085b4:	e031      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80085c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80085c4:	e029      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80085d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085d4:	e021      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80085e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80085e4:	e019      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80085f4:	e011      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008600:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008604:	e009      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008610:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008614:	e001      	b.n	800861a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000000 	.word	0x20000000
 8008628:	10624dd3 	.word	0x10624dd3
 800862c:	fdffe008 	.word	0xfdffe008

08008630 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008638:	4b1f      	ldr	r3, [pc, #124]	@ (80086b8 <SDMMC_GetCmdResp2+0x88>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	@ (80086bc <SDMMC_GetCmdResp2+0x8c>)
 800863e:	fba2 2303 	umull	r2, r3, r2, r3
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1e5a      	subs	r2, r3, #1
 8008652:	60fa      	str	r2, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008658:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800865c:	e026      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008662:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0ef      	beq.n	800864e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ea      	bne.n	800864e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2204      	movs	r2, #4
 8008688:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800868a:	2304      	movs	r3, #4
 800868c:	e00e      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e003      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	22c5      	movs	r2, #197	@ 0xc5
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	20000000 	.word	0x20000000
 80086bc:	10624dd3 	.word	0x10624dd3

080086c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008734 <SDMMC_GetCmdResp3+0x74>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008738 <SDMMC_GetCmdResp3+0x78>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	0a5b      	lsrs	r3, r3, #9
 80086d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d8:	fb02 f303 	mul.w	r3, r2, r3
 80086dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1e5a      	subs	r2, r3, #1
 80086e2:	60fa      	str	r2, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80086ec:	e01b      	b.n	8008726 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0ef      	beq.n	80086de <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1ea      	bne.n	80086de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2204      	movs	r2, #4
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800871a:	2304      	movs	r3, #4
 800871c:	e003      	b.n	8008726 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	22c5      	movs	r2, #197	@ 0xc5
 8008722:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000000 	.word	0x20000000
 8008738:	10624dd3 	.word	0x10624dd3

0800873c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	460b      	mov	r3, r1
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800874a:	4b35      	ldr	r3, [pc, #212]	@ (8008820 <SDMMC_GetCmdResp6+0xe4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <SDMMC_GetCmdResp6+0xe8>)
 8008750:	fba2 2303 	umull	r2, r3, r2, r3
 8008754:	0a5b      	lsrs	r3, r3, #9
 8008756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	61fa      	str	r2, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800876a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800876e:	e052      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008774:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0ef      	beq.n	8008760 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1ea      	bne.n	8008760 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2204      	movs	r2, #4
 800879a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800879c:	2304      	movs	r3, #4
 800879e:	e03a      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e02f      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff fc0d 	bl	8007fd6 <SDIO_GetCommandResponse>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d001      	beq.n	80087ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e025      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	22c5      	movs	r2, #197	@ 0xc5
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80087d0:	2100      	movs	r1, #0
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fc0c 	bl	8007ff0 <SDIO_GetResponse>
 80087d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e011      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008800:	e009      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800880c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008810:	e001      	b.n	8008816 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008816:	4618      	mov	r0, r3
 8008818:	3720      	adds	r7, #32
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000000 	.word	0x20000000
 8008824:	10624dd3 	.word	0x10624dd3

08008828 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008830:	4b22      	ldr	r3, [pc, #136]	@ (80088bc <SDMMC_GetCmdResp7+0x94>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a22      	ldr	r2, [pc, #136]	@ (80088c0 <SDMMC_GetCmdResp7+0x98>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	0a5b      	lsrs	r3, r3, #9
 800883c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008840:	fb02 f303 	mul.w	r3, r2, r3
 8008844:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	1e5a      	subs	r2, r3, #1
 800884a:	60fa      	str	r2, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008850:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008854:	e02c      	b.n	80088b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0ef      	beq.n	8008846 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ea      	bne.n	8008846 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008882:	2304      	movs	r3, #4
 8008884:	e014      	b.n	80088b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008898:	2301      	movs	r3, #1
 800889a:	e009      	b.n	80088b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80088ae:	2300      	movs	r3, #0
  
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	20000000 	.word	0x20000000
 80088c0:	10624dd3 	.word	0x10624dd3

080088c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088cc:	4b11      	ldr	r3, [pc, #68]	@ (8008914 <SDMMC_GetCmdError+0x50>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a11      	ldr	r2, [pc, #68]	@ (8008918 <SDMMC_GetCmdError+0x54>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	0a5b      	lsrs	r3, r3, #9
 80088d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088dc:	fb02 f303 	mul.w	r3, r2, r3
 80088e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	60fa      	str	r2, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088f0:	e009      	b.n	8008906 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f1      	beq.n	80088e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	22c5      	movs	r2, #197	@ 0xc5
 8008902:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	20000000 	.word	0x20000000
 8008918:	10624dd3 	.word	0x10624dd3

0800891c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af02      	add	r7, sp, #8
 8008922:	4603      	mov	r3, r0
 8008924:	460a      	mov	r2, r1
 8008926:	71fb      	strb	r3, [r7, #7]
 8008928:	4613      	mov	r3, r2
 800892a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	4a13      	ldr	r2, [pc, #76]	@ (800897c <I2C_LCD_ExpanderWrite+0x60>)
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	785a      	ldrb	r2, [r3, #1]
 8008936:	79bb      	ldrb	r3, [r7, #6]
 8008938:	4313      	orrs	r3, r2
 800893a:	b2db      	uxtb	r3, r3
 800893c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800893e:	79fa      	ldrb	r2, [r7, #7]
 8008940:	490f      	ldr	r1, [pc, #60]	@ (8008980 <I2C_LCD_ExpanderWrite+0x64>)
 8008942:	4613      	mov	r3, r2
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	3304      	adds	r3, #4
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	490b      	ldr	r1, [pc, #44]	@ (8008980 <I2C_LCD_ExpanderWrite+0x64>)
 8008954:	4613      	mov	r3, r2
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	3308      	adds	r3, #8
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	b299      	uxth	r1, r3
 8008966:	f107 020f 	add.w	r2, r7, #15
 800896a:	2364      	movs	r3, #100	@ 0x64
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	2301      	movs	r3, #1
 8008970:	f7fb fdb2 	bl	80044d8 <HAL_I2C_Master_Transmit>
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200026a8 	.word	0x200026a8
 8008980:	080137c4 	.word	0x080137c4

08008984 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	460a      	mov	r2, r1
 800898e:	71fb      	strb	r3, [r7, #7]
 8008990:	4613      	mov	r3, r2
 8008992:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8008994:	79bb      	ldrb	r3, [r7, #6]
 8008996:	f043 0304 	orr.w	r3, r3, #4
 800899a:	b2da      	uxtb	r2, r3
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff ffbb 	bl	800891c <I2C_LCD_ExpanderWrite>
	delay_us(2); // enable pulse must be >450ns
 80089a6:	2002      	movs	r0, #2
 80089a8:	f7f9 f90e 	bl	8001bc8 <delay_us>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 80089ac:	79bb      	ldrb	r3, [r7, #6]
 80089ae:	f023 0304 	bic.w	r3, r3, #4
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff ffaf 	bl	800891c <I2C_LCD_ExpanderWrite>
    delay_us(50); // commands need > 37us to settle
 80089be:	2032      	movs	r0, #50	@ 0x32
 80089c0:	f7f9 f902 	bl	8001bc8 <delay_us>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	460a      	mov	r2, r1
 80089d6:	71fb      	strb	r3, [r7, #7]
 80089d8:	4613      	mov	r3, r2
 80089da:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80089dc:	79ba      	ldrb	r2, [r7, #6]
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff ff9a 	bl	800891c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80089e8:	79ba      	ldrb	r2, [r7, #6]
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ffc8 	bl	8008984 <I2C_LCD_EnPulse>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
 8008a06:	460b      	mov	r3, r1
 8008a08:	71bb      	strb	r3, [r7, #6]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8008a0e:	79bb      	ldrb	r3, [r7, #6]
 8008a10:	f023 030f 	bic.w	r3, r3, #15
 8008a14:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8008a16:	79bb      	ldrb	r3, [r7, #6]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	797b      	ldrb	r3, [r7, #5]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ffcf 	bl	80089cc <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8008a2e:	7bba      	ldrb	r2, [r7, #14]
 8008a30:	797b      	ldrb	r3, [r7, #5]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff ffc6 	bl	80089cc <I2C_LCD_Write4Bits>
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	460a      	mov	r2, r1
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	4613      	mov	r3, r2
 8008a56:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8008a58:	79b9      	ldrb	r1, [r7, #6]
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff ffcc 	bl	80089fc <I2C_LCD_Send>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	460a      	mov	r2, r1
 8008a76:	71fb      	strb	r3, [r7, #7]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8008a7c:	79b9      	ldrb	r1, [r7, #6]
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	2201      	movs	r2, #1
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff ffba 	bl	80089fc <I2C_LCD_Send>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	delay_ms(50);
 8008a9a:	2032      	movs	r0, #50	@ 0x32
 8008a9c:	f7f9 f8ae 	bl	8001bfc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	2130      	movs	r1, #48	@ 0x30
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff ffcf 	bl	8008a48 <I2C_LCD_Cmd>
    delay_ms(5); // Delay > 4.1ms
 8008aaa:	2005      	movs	r0, #5
 8008aac:	f7f9 f8a6 	bl	8001bfc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2130      	movs	r1, #48	@ 0x30
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff ffc7 	bl	8008a48 <I2C_LCD_Cmd>
    delay_ms(5); // Delay > 4.1ms
 8008aba:	2005      	movs	r0, #5
 8008abc:	f7f9 f89e 	bl	8001bfc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	2130      	movs	r1, #48	@ 0x30
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff ffbf 	bl	8008a48 <I2C_LCD_Cmd>
    delay_us(150);  // Delay > 100μs
 8008aca:	2096      	movs	r0, #150	@ 0x96
 8008acc:	f7f9 f87c 	bl	8001bc8 <delay_us>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ffb7 	bl	8008a48 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2128      	movs	r1, #40	@ 0x28
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff ffb2 	bl	8008a48 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	210c      	movs	r1, #12
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ffad 	bl	8008a48 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	2106      	movs	r1, #6
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff ffa8 	bl	8008a48 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	4a09      	ldr	r2, [pc, #36]	@ (8008b20 <I2C_LCD_Init+0x90>)
 8008afc:	2104      	movs	r1, #4
 8008afe:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	4a06      	ldr	r2, [pc, #24]	@ (8008b20 <I2C_LCD_Init+0x90>)
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	4413      	add	r3, r2
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f807 	bl	8008b24 <I2C_LCD_Clear>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200026a8 	.word	0x200026a8

08008b24 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	2101      	movs	r1, #1
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff ff88 	bl	8008a48 <I2C_LCD_Cmd>
    delay_ms(2);
 8008b38:	2002      	movs	r0, #2
 8008b3a:	f7f9 f85f 	bl	8001bfc <delay_ms>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    delay_ms(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8008b48:	b590      	push	{r4, r7, lr}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
 8008b52:	460b      	mov	r3, r1
 8008b54:	71bb      	strb	r3, [r7, #6]
 8008b56:	4613      	mov	r3, r2
 8008b58:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8008b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <I2C_LCD_SetCursor+0x7c>)
 8008b5c:	f107 0408 	add.w	r4, r7, #8
 8008b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8008b66:	79fa      	ldrb	r2, [r7, #7]
 8008b68:	4917      	ldr	r1, [pc, #92]	@ (8008bc8 <I2C_LCD_SetCursor+0x80>)
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	440b      	add	r3, r1
 8008b74:	330a      	adds	r3, #10
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	797a      	ldrb	r2, [r7, #5]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d90a      	bls.n	8008b94 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8008b7e:	79fa      	ldrb	r2, [r7, #7]
 8008b80:	4911      	ldr	r1, [pc, #68]	@ (8008bc8 <I2C_LCD_SetCursor+0x80>)
 8008b82:	4613      	mov	r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	330a      	adds	r3, #10
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8008b94:	797b      	ldrb	r3, [r7, #5]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	3318      	adds	r3, #24
 8008b9a:	443b      	add	r3, r7
 8008b9c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	79bb      	ldrb	r3, [r7, #6]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	b25b      	sxtb	r3, r3
 8008baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff ff46 	bl	8008a48 <I2C_LCD_Cmd>
}
 8008bbc:	bf00      	nop
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd90      	pop	{r4, r7, pc}
 8008bc4:	08013730 	.word	0x08013730
 8008bc8:	080137c4 	.word	0x080137c4

08008bcc <I2C_LCD_WriteChar>:

void I2C_LCD_WriteChar(uint8_t I2C_LCD_InstanceIndex, char Ch)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
 8008bdc:	79ba      	ldrb	r2, [r7, #6]
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ff42 	bl	8008a6c <I2C_LCD_Data>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8008bfc:	e008      	b.n	8008c10 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	603a      	str	r2, [r7, #0]
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff2e 	bl	8008a6c <I2C_LCD_Data>
    while (*Str)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f2      	bne.n	8008bfe <I2C_LCD_WriteString+0xe>
    }
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008c28:	4904      	ldr	r1, [pc, #16]	@ (8008c3c <MX_FATFS_Init+0x18>)
 8008c2a:	4805      	ldr	r0, [pc, #20]	@ (8008c40 <MX_FATFS_Init+0x1c>)
 8008c2c:	f003 f88a 	bl	800bd44 <FATFS_LinkDriver>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b03      	ldr	r3, [pc, #12]	@ (8008c44 <MX_FATFS_Init+0x20>)
 8008c36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c38:	bf00      	nop
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200026ac 	.word	0x200026ac
 8008c40:	080137d0 	.word	0x080137d0
 8008c44:	200026aa 	.word	0x200026aa

08008c48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008c4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008c62:	f000 f86b 	bl	8008d3c <BSP_SD_IsDetected>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d001      	beq.n	8008c70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e005      	b.n	8008c7c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008c70:	4804      	ldr	r0, [pc, #16]	@ (8008c84 <BSP_SD_Init+0x2c>)
 8008c72:	f7fc fc55 	bl	8005520 <HAL_SD_Init>
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	200002b0 	.word	0x200002b0

08008c88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	4806      	ldr	r0, [pc, #24]	@ (8008cc0 <BSP_SD_ReadBlocks+0x38>)
 8008ca6:	f7fc fceb 	bl	8005680 <HAL_SD_ReadBlocks>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	200002b0 	.word	0x200002b0

08008cc4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	4806      	ldr	r0, [pc, #24]	@ (8008cfc <BSP_SD_WriteBlocks+0x38>)
 8008ce2:	f7fc feb3 	bl	8005a4c <HAL_SD_WriteBlocks>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200002b0 	.word	0x200002b0

08008d00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008d04:	4805      	ldr	r0, [pc, #20]	@ (8008d1c <BSP_SD_GetCardState+0x1c>)
 8008d06:	f7fd f9ff 	bl	8006108 <HAL_SD_GetCardState>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	bf14      	ite	ne
 8008d10:	2301      	movne	r3, #1
 8008d12:	2300      	moveq	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200002b0 	.word	0x200002b0

08008d20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4803      	ldr	r0, [pc, #12]	@ (8008d38 <BSP_SD_GetCardInfo+0x18>)
 8008d2c:	f7fd f9c0 	bl	80060b0 <HAL_SD_GetCardInfo>
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200002b0 	.word	0x200002b0

08008d3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008d42:	2301      	movs	r3, #1
 8008d44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008d46:	f000 f80b 	bl	8008d60 <BSP_PlatformIsDetected>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008d50:	2300      	movs	r3, #0
 8008d52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	b2db      	uxtb	r3, r3
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008d66:	2301      	movs	r3, #1
 8008d68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4806      	ldr	r0, [pc, #24]	@ (8008d88 <BSP_PlatformIsDetected+0x28>)
 8008d6e:	f7fb fa23 	bl	80041b8 <HAL_GPIO_ReadPin>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40020c00 	.word	0x40020c00

08008d8c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008d96:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <SD_CheckStatus+0x38>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008d9c:	f7ff ffb0 	bl	8008d00 <BSP_SD_GetCardState>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d107      	bne.n	8008db6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008da6:	4b07      	ldr	r3, [pc, #28]	@ (8008dc4 <SD_CheckStatus+0x38>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	4b04      	ldr	r3, [pc, #16]	@ (8008dc4 <SD_CheckStatus+0x38>)
 8008db4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008db6:	4b03      	ldr	r3, [pc, #12]	@ (8008dc4 <SD_CheckStatus+0x38>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b2db      	uxtb	r3, r3
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	2000000d 	.word	0x2000000d

08008dc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <SD_initialize+0x38>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008dd8:	f7ff ff3e 	bl	8008c58 <BSP_SD_Init>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff ffd1 	bl	8008d8c <SD_CheckStatus>
 8008dea:	4603      	mov	r3, r0
 8008dec:	461a      	mov	r2, r3
 8008dee:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <SD_initialize+0x38>)
 8008df0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008df2:	4b03      	ldr	r3, [pc, #12]	@ (8008e00 <SD_initialize+0x38>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	b2db      	uxtb	r3, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	2000000d 	.word	0x2000000d

08008e04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff ffbb 	bl	8008d8c <SD_CheckStatus>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68b8      	ldr	r0, [r7, #8]
 8008e3e:	f7ff ff23 	bl	8008c88 <BSP_SD_ReadBlocks>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d107      	bne.n	8008e58 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008e48:	bf00      	nop
 8008e4a:	f7ff ff59 	bl	8008d00 <BSP_SD_GetCardState>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1fa      	bne.n	8008e4a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	68b8      	ldr	r0, [r7, #8]
 8008e80:	f7ff ff20 	bl	8008cc4 <BSP_SD_WriteBlocks>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008e8a:	bf00      	nop
 8008e8c:	f7ff ff38 	bl	8008d00 <BSP_SD_GetCardState>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1fa      	bne.n	8008e8c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08c      	sub	sp, #48	@ 0x30
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	603a      	str	r2, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008eba:	4b25      	ldr	r3, [pc, #148]	@ (8008f50 <SD_ioctl+0xac>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <SD_ioctl+0x28>
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e03c      	b.n	8008f46 <SD_ioctl+0xa2>

  switch (cmd)
 8008ecc:	79bb      	ldrb	r3, [r7, #6]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d834      	bhi.n	8008f3c <SD_ioctl+0x98>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <SD_ioctl+0x34>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008ef1 	.word	0x08008ef1
 8008ee0:	08008f09 	.word	0x08008f09
 8008ee4:	08008f23 	.word	0x08008f23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008eee:	e028      	b.n	8008f42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ef0:	f107 030c 	add.w	r3, r7, #12
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff ff13 	bl	8008d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008f06:	e01c      	b.n	8008f42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f08:	f107 030c 	add.w	r3, r7, #12
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7ff ff07 	bl	8008d20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008f20:	e00f      	b.n	8008f42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f22:	f107 030c 	add.w	r3, r7, #12
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fefa 	bl	8008d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	0a5a      	lsrs	r2, r3, #9
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008f3a:	e002      	b.n	8008f42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3730      	adds	r7, #48	@ 0x30
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	2000000d 	.word	0x2000000d

08008f54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	4a08      	ldr	r2, [pc, #32]	@ (8008f84 <disk_status+0x30>)
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	79fa      	ldrb	r2, [r7, #7]
 8008f6c:	4905      	ldr	r1, [pc, #20]	@ (8008f84 <disk_status+0x30>)
 8008f6e:	440a      	add	r2, r1
 8008f70:	7a12      	ldrb	r2, [r2, #8]
 8008f72:	4610      	mov	r0, r2
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	200026d8 	.word	0x200026d8

08008f88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4a0e      	ldr	r2, [pc, #56]	@ (8008fd4 <disk_initialize+0x4c>)
 8008f9a:	5cd3      	ldrb	r3, [r2, r3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d114      	bne.n	8008fca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8008fd4 <disk_initialize+0x4c>)
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	79fa      	ldrb	r2, [r7, #7]
 8008fae:	4909      	ldr	r1, [pc, #36]	@ (8008fd4 <disk_initialize+0x4c>)
 8008fb0:	440a      	add	r2, r1
 8008fb2:	7a12      	ldrb	r2, [r2, #8]
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	4a03      	ldr	r2, [pc, #12]	@ (8008fd4 <disk_initialize+0x4c>)
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200026d8 	.word	0x200026d8

08008fd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008fd8:	b590      	push	{r4, r7, lr}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	4a0a      	ldr	r2, [pc, #40]	@ (8009014 <disk_read+0x3c>)
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	689c      	ldr	r4, [r3, #8]
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4a07      	ldr	r2, [pc, #28]	@ (8009014 <disk_read+0x3c>)
 8008ff8:	4413      	add	r3, r2
 8008ffa:	7a18      	ldrb	r0, [r3, #8]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	47a0      	blx	r4
 8009004:	4603      	mov	r3, r0
 8009006:	75fb      	strb	r3, [r7, #23]
  return res;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	bd90      	pop	{r4, r7, pc}
 8009012:	bf00      	nop
 8009014:	200026d8 	.word	0x200026d8

08009018 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	4a0a      	ldr	r2, [pc, #40]	@ (8009054 <disk_write+0x3c>)
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	68dc      	ldr	r4, [r3, #12]
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	4a07      	ldr	r2, [pc, #28]	@ (8009054 <disk_write+0x3c>)
 8009038:	4413      	add	r3, r2
 800903a:	7a18      	ldrb	r0, [r3, #8]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	47a0      	blx	r4
 8009044:	4603      	mov	r3, r0
 8009046:	75fb      	strb	r3, [r7, #23]
  return res;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
}
 800904a:	4618      	mov	r0, r3
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	bd90      	pop	{r4, r7, pc}
 8009052:	bf00      	nop
 8009054:	200026d8 	.word	0x200026d8

08009058 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	603a      	str	r2, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
 8009064:	460b      	mov	r3, r1
 8009066:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	4a09      	ldr	r2, [pc, #36]	@ (8009090 <disk_ioctl+0x38>)
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	79fa      	ldrb	r2, [r7, #7]
 8009076:	4906      	ldr	r1, [pc, #24]	@ (8009090 <disk_ioctl+0x38>)
 8009078:	440a      	add	r2, r1
 800907a:	7a10      	ldrb	r0, [r2, #8]
 800907c:	79b9      	ldrb	r1, [r7, #6]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
  return res;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200026d8 	.word	0x200026d8

08009094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3301      	adds	r3, #1
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	b21a      	sxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b21b      	sxth	r3, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	b21b      	sxth	r3, r3
 80090b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80090b6:	89fb      	ldrh	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3303      	adds	r3, #3
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	021b      	lsls	r3, r3, #8
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	3202      	adds	r2, #2
 80090dc:	7812      	ldrb	r2, [r2, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	3201      	adds	r2, #1
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	021b      	lsls	r3, r3, #8
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7812      	ldrb	r2, [r2, #0]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80090fc:	68fb      	ldr	r3, [r7, #12]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	887a      	ldrh	r2, [r7, #2]
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	887b      	ldrh	r3, [r7, #2]
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	701a      	strb	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	0a1b      	lsrs	r3, r3, #8
 800915a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	1c53      	adds	r3, r2, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	1c59      	adds	r1, r3, #1
 80091bc:	6179      	str	r1, [r7, #20]
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	607b      	str	r3, [r7, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1f1      	bne.n	80091b2 <mem_cpy+0x1a>
	}
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80091da:	b480      	push	{r7}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	617a      	str	r2, [r7, #20]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	b2d2      	uxtb	r2, r2
 80091f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	607b      	str	r3, [r7, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f3      	bne.n	80091ea <mem_set+0x10>
}
 8009202:	bf00      	nop
 8009204:	bf00      	nop
 8009206:	371c      	adds	r7, #28
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009210:	b480      	push	{r7}
 8009212:	b089      	sub	sp, #36	@ 0x24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	61fb      	str	r3, [r7, #28]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	61fa      	str	r2, [r7, #28]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	61ba      	str	r2, [r7, #24]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	1acb      	subs	r3, r1, r3
 800923c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3b01      	subs	r3, #1
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <mem_cmp+0x40>
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0eb      	beq.n	8009228 <mem_cmp+0x18>

	return r;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3724      	adds	r7, #36	@ 0x24
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009268:	e002      	b.n	8009270 <chk_chr+0x12>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3301      	adds	r3, #1
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <chk_chr+0x26>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	4293      	cmp	r3, r2
 8009282:	d1f2      	bne.n	800926a <chk_chr+0xc>
	return *str;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	781b      	ldrb	r3, [r3, #0]
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	e029      	b.n	80092fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80092a8:	4a27      	ldr	r2, [pc, #156]	@ (8009348 <chk_lock+0xb4>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	4413      	add	r3, r2
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01d      	beq.n	80092f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80092b6:	4a24      	ldr	r2, [pc, #144]	@ (8009348 <chk_lock+0xb4>)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	4413      	add	r3, r2
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d116      	bne.n	80092f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80092c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009348 <chk_lock+0xb4>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	4413      	add	r3, r2
 80092d0:	3304      	adds	r3, #4
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80092d8:	429a      	cmp	r2, r3
 80092da:	d10c      	bne.n	80092f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009348 <chk_lock+0xb4>)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	4413      	add	r3, r2
 80092e4:	3308      	adds	r3, #8
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d102      	bne.n	80092f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092f0:	e007      	b.n	8009302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80092f2:	2301      	movs	r3, #1
 80092f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d9d2      	bls.n	80092a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d109      	bne.n	800931c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <chk_lock+0x80>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d101      	bne.n	8009318 <chk_lock+0x84>
 8009314:	2300      	movs	r3, #0
 8009316:	e010      	b.n	800933a <chk_lock+0xa6>
 8009318:	2312      	movs	r3, #18
 800931a:	e00e      	b.n	800933a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d108      	bne.n	8009334 <chk_lock+0xa0>
 8009322:	4a09      	ldr	r2, [pc, #36]	@ (8009348 <chk_lock+0xb4>)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	4413      	add	r3, r2
 800932a:	330c      	adds	r3, #12
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009332:	d101      	bne.n	8009338 <chk_lock+0xa4>
 8009334:	2310      	movs	r3, #16
 8009336:	e000      	b.n	800933a <chk_lock+0xa6>
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	200026b8 	.word	0x200026b8

0800934c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009352:	2300      	movs	r3, #0
 8009354:	607b      	str	r3, [r7, #4]
 8009356:	e002      	b.n	800935e <enq_lock+0x12>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3301      	adds	r3, #1
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d806      	bhi.n	8009372 <enq_lock+0x26>
 8009364:	4a09      	ldr	r2, [pc, #36]	@ (800938c <enq_lock+0x40>)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	4413      	add	r3, r2
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f2      	bne.n	8009358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b02      	cmp	r3, #2
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	200026b8 	.word	0x200026b8

08009390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e01f      	b.n	80093e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80093a0:	4a41      	ldr	r2, [pc, #260]	@ (80094a8 <inc_lock+0x118>)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	4413      	add	r3, r2
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d113      	bne.n	80093da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80093b2:	4a3d      	ldr	r2, [pc, #244]	@ (80094a8 <inc_lock+0x118>)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	011b      	lsls	r3, r3, #4
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d109      	bne.n	80093da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80093c6:	4a38      	ldr	r2, [pc, #224]	@ (80094a8 <inc_lock+0x118>)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	4413      	add	r3, r2
 80093ce:	3308      	adds	r3, #8
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d006      	beq.n	80093e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d9dc      	bls.n	80093a0 <inc_lock+0x10>
 80093e6:	e000      	b.n	80093ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80093e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d132      	bne.n	8009456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e002      	b.n	80093fc <inc_lock+0x6c>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d806      	bhi.n	8009410 <inc_lock+0x80>
 8009402:	4a29      	ldr	r2, [pc, #164]	@ (80094a8 <inc_lock+0x118>)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	4413      	add	r3, r2
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f2      	bne.n	80093f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d101      	bne.n	800941a <inc_lock+0x8a>
 8009416:	2300      	movs	r3, #0
 8009418:	e040      	b.n	800949c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4922      	ldr	r1, [pc, #136]	@ (80094a8 <inc_lock+0x118>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	440b      	add	r3, r1
 8009426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	491e      	ldr	r1, [pc, #120]	@ (80094a8 <inc_lock+0x118>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	440b      	add	r3, r1
 8009434:	3304      	adds	r3, #4
 8009436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	695a      	ldr	r2, [r3, #20]
 800943c:	491a      	ldr	r1, [pc, #104]	@ (80094a8 <inc_lock+0x118>)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	440b      	add	r3, r1
 8009444:	3308      	adds	r3, #8
 8009446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009448:	4a17      	ldr	r2, [pc, #92]	@ (80094a8 <inc_lock+0x118>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	4413      	add	r3, r2
 8009450:	330c      	adds	r3, #12
 8009452:	2200      	movs	r2, #0
 8009454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d009      	beq.n	8009470 <inc_lock+0xe0>
 800945c:	4a12      	ldr	r2, [pc, #72]	@ (80094a8 <inc_lock+0x118>)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	4413      	add	r3, r2
 8009464:	330c      	adds	r3, #12
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <inc_lock+0xe0>
 800946c:	2300      	movs	r3, #0
 800946e:	e015      	b.n	800949c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d108      	bne.n	8009488 <inc_lock+0xf8>
 8009476:	4a0c      	ldr	r2, [pc, #48]	@ (80094a8 <inc_lock+0x118>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	4413      	add	r3, r2
 800947e:	330c      	adds	r3, #12
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	e001      	b.n	800948c <inc_lock+0xfc>
 8009488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800948c:	4906      	ldr	r1, [pc, #24]	@ (80094a8 <inc_lock+0x118>)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	440b      	add	r3, r1
 8009494:	330c      	adds	r3, #12
 8009496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3301      	adds	r3, #1
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	200026b8 	.word	0x200026b8

080094ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	607b      	str	r3, [r7, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d825      	bhi.n	800950c <dec_lock+0x60>
		n = Files[i].ctr;
 80094c0:	4a17      	ldr	r2, [pc, #92]	@ (8009520 <dec_lock+0x74>)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	4413      	add	r3, r2
 80094c8:	330c      	adds	r3, #12
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80094ce:	89fb      	ldrh	r3, [r7, #14]
 80094d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094d4:	d101      	bne.n	80094da <dec_lock+0x2e>
 80094d6:	2300      	movs	r3, #0
 80094d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80094da:	89fb      	ldrh	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <dec_lock+0x3a>
 80094e0:	89fb      	ldrh	r3, [r7, #14]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80094e6:	4a0e      	ldr	r2, [pc, #56]	@ (8009520 <dec_lock+0x74>)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	4413      	add	r3, r2
 80094ee:	330c      	adds	r3, #12
 80094f0:	89fa      	ldrh	r2, [r7, #14]
 80094f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80094f4:	89fb      	ldrh	r3, [r7, #14]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <dec_lock+0x5a>
 80094fa:	4a09      	ldr	r2, [pc, #36]	@ (8009520 <dec_lock+0x74>)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	4413      	add	r3, r2
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	737b      	strb	r3, [r7, #13]
 800950a:	e001      	b.n	8009510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800950c:	2302      	movs	r3, #2
 800950e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009510:	7b7b      	ldrb	r3, [r7, #13]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	200026b8 	.word	0x200026b8

08009524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e010      	b.n	8009554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009532:	4a0d      	ldr	r2, [pc, #52]	@ (8009568 <clear_lock+0x44>)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	4413      	add	r3, r2
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d105      	bne.n	800954e <clear_lock+0x2a>
 8009542:	4a09      	ldr	r2, [pc, #36]	@ (8009568 <clear_lock+0x44>)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	4413      	add	r3, r2
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d9eb      	bls.n	8009532 <clear_lock+0xe>
	}
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	200026b8 	.word	0x200026b8

0800956c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	78db      	ldrb	r3, [r3, #3]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d034      	beq.n	80095ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7858      	ldrb	r0, [r3, #1]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009590:	2301      	movs	r3, #1
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	f7ff fd40 	bl	8009018 <disk_write>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800959e:	2301      	movs	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]
 80095a2:	e022      	b.n	80095ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	1ad2      	subs	r2, r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d217      	bcs.n	80095ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	789b      	ldrb	r3, [r3, #2]
 80095be:	613b      	str	r3, [r7, #16]
 80095c0:	e010      	b.n	80095e4 <sync_window+0x78>
					wsect += fs->fsize;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7858      	ldrb	r0, [r3, #1]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80095d6:	2301      	movs	r3, #1
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	f7ff fd1d 	bl	8009018 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d8eb      	bhi.n	80095c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d01b      	beq.n	8009644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ffad 	bl	800956c <sync_window>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7858      	ldrb	r0, [r3, #1]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009626:	2301      	movs	r3, #1
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	f7ff fcd5 	bl	8008fd8 <disk_read>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009634:	f04f 33ff 	mov.w	r3, #4294967295
 8009638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800963a:	2301      	movs	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff ff87 	bl	800956c <sync_window>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d159      	bne.n	800971c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d149      	bne.n	8009704 <sync_fs+0xb4>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	791b      	ldrb	r3, [r3, #4]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d145      	bne.n	8009704 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	899b      	ldrh	r3, [r3, #12]
 8009682:	461a      	mov	r2, r3
 8009684:	2100      	movs	r1, #0
 8009686:	f7ff fda8 	bl	80091da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3338      	adds	r3, #56	@ 0x38
 800968e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009692:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff fd37 	bl	800910a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3338      	adds	r3, #56	@ 0x38
 80096a0:	4921      	ldr	r1, [pc, #132]	@ (8009728 <sync_fs+0xd8>)
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fd4c 	bl	8009140 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3338      	adds	r3, #56	@ 0x38
 80096ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80096b0:	491e      	ldr	r1, [pc, #120]	@ (800972c <sync_fs+0xdc>)
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff fd44 	bl	8009140 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3338      	adds	r3, #56	@ 0x38
 80096bc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	f7ff fd3a 	bl	8009140 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3338      	adds	r3, #56	@ 0x38
 80096d0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f7ff fd30 	bl	8009140 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7858      	ldrb	r0, [r3, #1]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096f8:	2301      	movs	r3, #1
 80096fa:	f7ff fc8d 	bl	8009018 <disk_write>
			fs->fsi_flag = 0;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2200      	movs	r2, #0
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff fca3 	bl	8009058 <disk_ioctl>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <sync_fs+0xcc>
 8009718:	2301      	movs	r3, #1
 800971a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	41615252 	.word	0x41615252
 800972c:	61417272 	.word	0x61417272

08009730 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3b02      	subs	r3, #2
 800973e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	3b02      	subs	r3, #2
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d301      	bcc.n	8009750 <clust2sect+0x20>
 800974c:	2300      	movs	r3, #0
 800974e:	e008      	b.n	8009762 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	895b      	ldrh	r3, [r3, #10]
 8009754:	461a      	mov	r2, r3
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	fb03 f202 	mul.w	r2, r3, r2
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	4413      	add	r3, r2
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b086      	sub	sp, #24
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d904      	bls.n	800978e <get_fat+0x20>
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d302      	bcc.n	8009794 <get_fat+0x26>
		val = 1;	/* Internal error */
 800978e:	2301      	movs	r3, #1
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e0ba      	b.n	800990a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009794:	f04f 33ff 	mov.w	r3, #4294967295
 8009798:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b03      	cmp	r3, #3
 80097a0:	f000 8082 	beq.w	80098a8 <get_fat+0x13a>
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	f300 80a6 	bgt.w	80098f6 <get_fat+0x188>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d002      	beq.n	80097b4 <get_fat+0x46>
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d055      	beq.n	800985e <get_fat+0xf0>
 80097b2:	e0a0      	b.n	80098f6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4413      	add	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	899b      	ldrh	r3, [r3, #12]
 80097ca:	4619      	mov	r1, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80097d2:	4413      	add	r3, r2
 80097d4:	4619      	mov	r1, r3
 80097d6:	6938      	ldr	r0, [r7, #16]
 80097d8:	f7ff ff0c 	bl	80095f4 <move_window>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f040 808c 	bne.w	80098fc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	60fa      	str	r2, [r7, #12]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	8992      	ldrh	r2, [r2, #12]
 80097ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80097f2:	fb01 f202 	mul.w	r2, r1, r2
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009800:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	899b      	ldrh	r3, [r3, #12]
 800980a:	4619      	mov	r1, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009812:	4413      	add	r3, r2
 8009814:	4619      	mov	r1, r3
 8009816:	6938      	ldr	r0, [r7, #16]
 8009818:	f7ff feec 	bl	80095f4 <move_window>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d16e      	bne.n	8009900 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	fbb3 f1f2 	udiv	r1, r3, r2
 800982e:	fb01 f202 	mul.w	r2, r1, r2
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	4413      	add	r3, r2
 8009838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <get_fat+0xe6>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	091b      	lsrs	r3, r3, #4
 8009852:	e002      	b.n	800985a <get_fat+0xec>
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800985a:	617b      	str	r3, [r7, #20]
			break;
 800985c:	e055      	b.n	800990a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	899b      	ldrh	r3, [r3, #12]
 8009866:	085b      	lsrs	r3, r3, #1
 8009868:	b29b      	uxth	r3, r3
 800986a:	4619      	mov	r1, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009872:	4413      	add	r3, r2
 8009874:	4619      	mov	r1, r3
 8009876:	6938      	ldr	r0, [r7, #16]
 8009878:	f7ff febc 	bl	80095f4 <move_window>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d140      	bne.n	8009904 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	8992      	ldrh	r2, [r2, #12]
 8009890:	fbb3 f0f2 	udiv	r0, r3, r2
 8009894:	fb00 f202 	mul.w	r2, r0, r2
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	440b      	add	r3, r1
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fbf9 	bl	8009094 <ld_word>
 80098a2:	4603      	mov	r3, r0
 80098a4:	617b      	str	r3, [r7, #20]
			break;
 80098a6:	e030      	b.n	800990a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	899b      	ldrh	r3, [r3, #12]
 80098b0:	089b      	lsrs	r3, r3, #2
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80098bc:	4413      	add	r3, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	6938      	ldr	r0, [r7, #16]
 80098c2:	f7ff fe97 	bl	80095f4 <move_window>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11d      	bne.n	8009908 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	8992      	ldrh	r2, [r2, #12]
 80098da:	fbb3 f0f2 	udiv	r0, r3, r2
 80098de:	fb00 f202 	mul.w	r2, r0, r2
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	440b      	add	r3, r1
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fbec 	bl	80090c4 <ld_dword>
 80098ec:	4603      	mov	r3, r0
 80098ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80098f2:	617b      	str	r3, [r7, #20]
			break;
 80098f4:	e009      	b.n	800990a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80098f6:	2301      	movs	r3, #1
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e006      	b.n	800990a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098fc:	bf00      	nop
 80098fe:	e004      	b.n	800990a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009900:	bf00      	nop
 8009902:	e002      	b.n	800990a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009908:	bf00      	nop
		}
	}

	return val;
 800990a:	697b      	ldr	r3, [r7, #20]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b089      	sub	sp, #36	@ 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009920:	2302      	movs	r3, #2
 8009922:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b01      	cmp	r3, #1
 8009928:	f240 8109 	bls.w	8009b3e <put_fat+0x22a>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	429a      	cmp	r2, r3
 8009934:	f080 8103 	bcs.w	8009b3e <put_fat+0x22a>
		switch (fs->fs_type) {
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b03      	cmp	r3, #3
 800993e:	f000 80b6 	beq.w	8009aae <put_fat+0x19a>
 8009942:	2b03      	cmp	r3, #3
 8009944:	f300 80fb 	bgt.w	8009b3e <put_fat+0x22a>
 8009948:	2b01      	cmp	r3, #1
 800994a:	d003      	beq.n	8009954 <put_fat+0x40>
 800994c:	2b02      	cmp	r3, #2
 800994e:	f000 8083 	beq.w	8009a58 <put_fat+0x144>
 8009952:	e0f4      	b.n	8009b3e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	4413      	add	r3, r2
 8009960:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	899b      	ldrh	r3, [r3, #12]
 800996a:	4619      	mov	r1, r3
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009972:	4413      	add	r3, r2
 8009974:	4619      	mov	r1, r3
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff fe3c 	bl	80095f4 <move_window>
 800997c:	4603      	mov	r3, r0
 800997e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009980:	7ffb      	ldrb	r3, [r7, #31]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 80d4 	bne.w	8009b30 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	61ba      	str	r2, [r7, #24]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	8992      	ldrh	r2, [r2, #12]
 8009998:	fbb3 f0f2 	udiv	r0, r3, r2
 800999c:	fb00 f202 	mul.w	r2, r0, r2
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	440b      	add	r3, r1
 80099a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00d      	beq.n	80099cc <put_fat+0xb8>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	f003 030f 	and.w	r3, r3, #15
 80099ba:	b25a      	sxtb	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b25b      	sxtb	r3, r3
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	e001      	b.n	80099d0 <put_fat+0xbc>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	899b      	ldrh	r3, [r3, #12]
 80099e2:	4619      	mov	r1, r3
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80099ea:	4413      	add	r3, r2
 80099ec:	4619      	mov	r1, r3
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7ff fe00 	bl	80095f4 <move_window>
 80099f4:	4603      	mov	r3, r0
 80099f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099f8:	7ffb      	ldrb	r3, [r7, #31]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f040 809a 	bne.w	8009b34 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a12:	fb00 f202 	mul.w	r2, r0, r2
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	440b      	add	r3, r1
 8009a1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <put_fat+0x11a>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	091b      	lsrs	r3, r3, #4
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	e00e      	b.n	8009a4c <put_fat+0x138>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	b25b      	sxtb	r3, r3
 8009a34:	f023 030f 	bic.w	r3, r3, #15
 8009a38:	b25a      	sxtb	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	0a1b      	lsrs	r3, r3, #8
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	b25b      	sxtb	r3, r3
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	70da      	strb	r2, [r3, #3]
			break;
 8009a56:	e072      	b.n	8009b3e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	899b      	ldrh	r3, [r3, #12]
 8009a60:	085b      	lsrs	r3, r3, #1
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	4619      	mov	r1, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a6c:	4413      	add	r3, r2
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff fdbf 	bl	80095f4 <move_window>
 8009a76:	4603      	mov	r3, r0
 8009a78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a7a:	7ffb      	ldrb	r3, [r7, #31]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d15b      	bne.n	8009b38 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	8992      	ldrh	r2, [r2, #12]
 8009a8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a92:	fb00 f202 	mul.w	r2, r0, r2
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	440b      	add	r3, r1
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	b292      	uxth	r2, r2
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff fb32 	bl	800910a <st_word>
			fs->wflag = 1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	70da      	strb	r2, [r3, #3]
			break;
 8009aac:	e047      	b.n	8009b3e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	899b      	ldrh	r3, [r3, #12]
 8009ab6:	089b      	lsrs	r3, r3, #2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4619      	mov	r1, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7ff fd94 	bl	80095f4 <move_window>
 8009acc:	4603      	mov	r3, r0
 8009ace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d132      	bne.n	8009b3c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	8992      	ldrh	r2, [r2, #12]
 8009aea:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aee:	fb00 f202 	mul.w	r2, r0, r2
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	440b      	add	r3, r1
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fae4 	bl	80090c4 <ld_dword>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009b02:	4323      	orrs	r3, r4
 8009b04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	8992      	ldrh	r2, [r2, #12]
 8009b14:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b18:	fb00 f202 	mul.w	r2, r0, r2
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	440b      	add	r3, r1
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fb0c 	bl	8009140 <st_dword>
			fs->wflag = 1;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	70da      	strb	r2, [r3, #3]
			break;
 8009b2e:	e006      	b.n	8009b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009b30:	bf00      	nop
 8009b32:	e004      	b.n	8009b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009b34:	bf00      	nop
 8009b36:	e002      	b.n	8009b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009b38:	bf00      	nop
 8009b3a:	e000      	b.n	8009b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009b3c:	bf00      	nop
		}
	}
	return res;
 8009b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3724      	adds	r7, #36	@ 0x24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}

08009b48 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d904      	bls.n	8009b6e <remove_chain+0x26>
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d301      	bcc.n	8009b72 <remove_chain+0x2a>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e04b      	b.n	8009c0a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00c      	beq.n	8009b92 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	69b8      	ldr	r0, [r7, #24]
 8009b80:	f7ff fec8 	bl	8009914 <put_fat>
 8009b84:	4603      	mov	r3, r0
 8009b86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b88:	7ffb      	ldrb	r3, [r7, #31]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <remove_chain+0x4a>
 8009b8e:	7ffb      	ldrb	r3, [r7, #31]
 8009b90:	e03b      	b.n	8009c0a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fdea 	bl	800976e <get_fat>
 8009b9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d031      	beq.n	8009c06 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <remove_chain+0x64>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e02e      	b.n	8009c0a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb2:	d101      	bne.n	8009bb8 <remove_chain+0x70>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e028      	b.n	8009c0a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009bb8:	2200      	movs	r2, #0
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	69b8      	ldr	r0, [r7, #24]
 8009bbe:	f7ff fea9 	bl	8009914 <put_fat>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <remove_chain+0x88>
 8009bcc:	7ffb      	ldrb	r3, [r7, #31]
 8009bce:	e01c      	b.n	8009c0a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	3b02      	subs	r3, #2
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d20b      	bcs.n	8009bf6 <remove_chain+0xae>
			fs->free_clst++;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	791b      	ldrb	r3, [r3, #4]
 8009bec:	f043 0301 	orr.w	r3, r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d3c6      	bcc.n	8009b92 <remove_chain+0x4a>
 8009c04:	e000      	b.n	8009c08 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c06:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b088      	sub	sp, #32
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10d      	bne.n	8009c44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <create_chain+0x2c>
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d31b      	bcc.n	8009c76 <create_chain+0x64>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	e018      	b.n	8009c76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fd91 	bl	800976e <get_fat>
 8009c4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d801      	bhi.n	8009c58 <create_chain+0x46>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e070      	b.n	8009d3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5e:	d101      	bne.n	8009c64 <create_chain+0x52>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	e06a      	b.n	8009d3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d201      	bcs.n	8009c72 <create_chain+0x60>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	e063      	b.n	8009d3a <create_chain+0x128>
		scl = clst;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d307      	bcc.n	8009c9a <create_chain+0x88>
				ncl = 2;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d901      	bls.n	8009c9a <create_chain+0x88>
 8009c96:	2300      	movs	r3, #0
 8009c98:	e04f      	b.n	8009d3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c9a:	69f9      	ldr	r1, [r7, #28]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fd66 	bl	800976e <get_fat>
 8009ca2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d003      	beq.n	8009cb8 <create_chain+0xa6>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d101      	bne.n	8009cbc <create_chain+0xaa>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	e03e      	b.n	8009d3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d1da      	bne.n	8009c7a <create_chain+0x68>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e038      	b.n	8009d3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009cc8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009cca:	f04f 32ff 	mov.w	r2, #4294967295
 8009cce:	69f9      	ldr	r1, [r7, #28]
 8009cd0:	6938      	ldr	r0, [r7, #16]
 8009cd2:	f7ff fe1f 	bl	8009914 <put_fat>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <create_chain+0xe2>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d006      	beq.n	8009cf4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6938      	ldr	r0, [r7, #16]
 8009cec:	f7ff fe12 	bl	8009914 <put_fat>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d116      	bne.n	8009d28 <create_chain+0x116>
		fs->last_clst = ncl;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	3b02      	subs	r3, #2
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d804      	bhi.n	8009d18 <create_chain+0x106>
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	1e5a      	subs	r2, r3, #1
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	791b      	ldrb	r3, [r3, #4]
 8009d1c:	f043 0301 	orr.w	r3, r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	711a      	strb	r2, [r3, #4]
 8009d26:	e007      	b.n	8009d38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d102      	bne.n	8009d34 <create_chain+0x122>
 8009d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d32:	e000      	b.n	8009d36 <create_chain+0x124>
 8009d34:	2301      	movs	r3, #1
 8009d36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b087      	sub	sp, #28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	3304      	adds	r3, #4
 8009d58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	899b      	ldrh	r3, [r3, #12]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	8952      	ldrh	r2, [r2, #10]
 8009d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	613a      	str	r2, [r7, #16]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <clmt_clust+0x42>
 8009d80:	2300      	movs	r3, #0
 8009d82:	e010      	b.n	8009da6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d307      	bcc.n	8009d9c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	3304      	adds	r3, #4
 8009d98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d9a:	e7e9      	b.n	8009d70 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009d9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	4413      	add	r3, r2
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dc8:	d204      	bcs.n	8009dd4 <dir_sdi+0x22>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	f003 031f 	and.w	r3, r3, #31
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e071      	b.n	8009ebc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <dir_sdi+0x46>
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d902      	bls.n	8009df8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10c      	bne.n	8009e18 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	095b      	lsrs	r3, r3, #5
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	8912      	ldrh	r2, [r2, #8]
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d301      	bcc.n	8009e0e <dir_sdi+0x5c>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e056      	b.n	8009ebc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	61da      	str	r2, [r3, #28]
 8009e16:	e02d      	b.n	8009e74 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	895b      	ldrh	r3, [r3, #10]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	899b      	ldrh	r3, [r3, #12]
 8009e22:	fb02 f303 	mul.w	r3, r2, r3
 8009e26:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e28:	e019      	b.n	8009e5e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6979      	ldr	r1, [r7, #20]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fc9d 	bl	800976e <get_fat>
 8009e34:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3c:	d101      	bne.n	8009e42 <dir_sdi+0x90>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e03c      	b.n	8009ebc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d904      	bls.n	8009e52 <dir_sdi+0xa0>
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d301      	bcc.n	8009e56 <dir_sdi+0xa4>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e032      	b.n	8009ebc <dir_sdi+0x10a>
			ofs -= csz;
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d2e1      	bcs.n	8009e2a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009e66:	6979      	ldr	r1, [r7, #20]
 8009e68:	6938      	ldr	r0, [r7, #16]
 8009e6a:	f7ff fc61 	bl	8009730 <clust2sect>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <dir_sdi+0xd4>
 8009e82:	2302      	movs	r3, #2
 8009e84:	e01a      	b.n	8009ebc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69da      	ldr	r2, [r3, #28]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	899b      	ldrh	r3, [r3, #12]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e96:	441a      	add	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	899b      	ldrh	r3, [r3, #12]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8009eae:	fb00 f202 	mul.w	r2, r0, r2
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	18ca      	adds	r2, r1, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	3320      	adds	r3, #32
 8009eda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <dir_next+0x28>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eea:	d301      	bcc.n	8009ef0 <dir_next+0x2c>
 8009eec:	2304      	movs	r3, #4
 8009eee:	e0bb      	b.n	800a068 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	899b      	ldrh	r3, [r3, #12]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009efc:	fb01 f202 	mul.w	r2, r1, r2
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 809d 	bne.w	800a042 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10b      	bne.n	8009f32 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	095b      	lsrs	r3, r3, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	8912      	ldrh	r2, [r2, #8]
 8009f22:	4293      	cmp	r3, r2
 8009f24:	f0c0 808d 	bcc.w	800a042 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	61da      	str	r2, [r3, #28]
 8009f2e:	2304      	movs	r3, #4
 8009f30:	e09a      	b.n	800a068 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	899b      	ldrh	r3, [r3, #12]
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	8952      	ldrh	r2, [r2, #10]
 8009f42:	3a01      	subs	r2, #1
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d17b      	bne.n	800a042 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f7ff fc0b 	bl	800976e <get_fat>
 8009f58:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d801      	bhi.n	8009f64 <dir_next+0xa0>
 8009f60:	2302      	movs	r3, #2
 8009f62:	e081      	b.n	800a068 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d101      	bne.n	8009f70 <dir_next+0xac>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e07b      	b.n	800a068 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d359      	bcc.n	800a02e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d104      	bne.n	8009f8a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	61da      	str	r2, [r3, #28]
 8009f86:	2304      	movs	r3, #4
 8009f88:	e06e      	b.n	800a068 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7ff fe3d 	bl	8009c12 <create_chain>
 8009f98:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <dir_next+0xe0>
 8009fa0:	2307      	movs	r3, #7
 8009fa2:	e061      	b.n	800a068 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <dir_next+0xea>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e05c      	b.n	800a068 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb4:	d101      	bne.n	8009fba <dir_next+0xf6>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e056      	b.n	800a068 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fad6 	bl	800956c <sync_window>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <dir_next+0x106>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e04e      	b.n	800a068 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	899b      	ldrh	r3, [r3, #12]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	f7ff f8ff 	bl	80091da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	6979      	ldr	r1, [r7, #20]
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff fba4 	bl	8009730 <clust2sect>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8009fee:	e012      	b.n	800a016 <dir_next+0x152>
						fs->wflag = 1;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fab8 	bl	800956c <sync_window>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <dir_next+0x142>
 800a002:	2301      	movs	r3, #1
 800a004:	e030      	b.n	800a068 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3301      	adds	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	635a      	str	r2, [r3, #52]	@ 0x34
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	895b      	ldrh	r3, [r3, #10]
 800a01a:	461a      	mov	r2, r3
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	4293      	cmp	r3, r2
 800a020:	d3e6      	bcc.n	8009ff0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fb7a 	bl	8009730 <clust2sect>
 800a03c:	4602      	mov	r2, r0
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	461a      	mov	r2, r3
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	fbb3 f0f2 	udiv	r0, r3, r2
 800a05a:	fb00 f202 	mul.w	r2, r0, r2
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	18ca      	adds	r2, r1, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a080:	2100      	movs	r1, #0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff fe95 	bl	8009db2 <dir_sdi>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d12b      	bne.n	800a0ea <dir_alloc+0x7a>
		n = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7ff faa9 	bl	80095f4 <move_window>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d11d      	bne.n	800a0e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2be5      	cmp	r3, #229	@ 0xe5
 800a0b4:	d004      	beq.n	800a0c0 <dir_alloc+0x50>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d107      	bne.n	800a0d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	613b      	str	r3, [r7, #16]
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d102      	bne.n	800a0d4 <dir_alloc+0x64>
 800a0ce:	e00c      	b.n	800a0ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff fef4 	bl	8009ec4 <dir_next>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0d7      	beq.n	800a096 <dir_alloc+0x26>
 800a0e6:	e000      	b.n	800a0ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a0e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d101      	bne.n	800a0f4 <dir_alloc+0x84>
 800a0f0:	2307      	movs	r3, #7
 800a0f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	331a      	adds	r3, #26
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe ffc1 	bl	8009094 <ld_word>
 800a112:	4603      	mov	r3, r0
 800a114:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d109      	bne.n	800a132 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	3314      	adds	r3, #20
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe ffb6 	bl	8009094 <ld_word>
 800a128:	4603      	mov	r3, r0
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a132:	68fb      	ldr	r3, [r7, #12]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	331a      	adds	r3, #26
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	b292      	uxth	r2, r2
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe ffd9 	bl	800910a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d109      	bne.n	800a174 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f103 0214 	add.w	r2, r3, #20
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe ffcb 	bl	800910a <st_word>
	}
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	331a      	adds	r3, #26
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe ff82 	bl	8009094 <ld_word>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <cmp_lfn+0x1e>
 800a196:	2300      	movs	r3, #0
 800a198:	e059      	b.n	800a24e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1a2:	1e5a      	subs	r2, r3, #1
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	81fb      	strh	r3, [r7, #14]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	e033      	b.n	800a222 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a1ba:	4a27      	ldr	r2, [pc, #156]	@ (800a258 <cmp_lfn+0xdc>)
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe ff63 	bl	8009094 <ld_word>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01a      	beq.n	800a20e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2bfe      	cmp	r3, #254	@ 0xfe
 800a1dc:	d812      	bhi.n	800a204 <cmp_lfn+0x88>
 800a1de:	89bb      	ldrh	r3, [r7, #12]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 fdfb 	bl	800bddc <ff_wtoupper>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461c      	mov	r4, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	617a      	str	r2, [r7, #20]
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fdef 	bl	800bddc <ff_wtoupper>
 800a1fe:	4603      	mov	r3, r0
 800a200:	429c      	cmp	r4, r3
 800a202:	d001      	beq.n	800a208 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a204:	2300      	movs	r3, #0
 800a206:	e022      	b.n	800a24e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a208:	89bb      	ldrh	r3, [r7, #12]
 800a20a:	81fb      	strh	r3, [r7, #14]
 800a20c:	e006      	b.n	800a21c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a20e:	89bb      	ldrh	r3, [r7, #12]
 800a210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a214:	4293      	cmp	r3, r2
 800a216:	d001      	beq.n	800a21c <cmp_lfn+0xa0>
 800a218:	2300      	movs	r3, #0
 800a21a:	e018      	b.n	800a24e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3301      	adds	r3, #1
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b0c      	cmp	r3, #12
 800a226:	d9c8      	bls.n	800a1ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <cmp_lfn+0xd0>
 800a234:	89fb      	ldrh	r3, [r7, #14]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d008      	beq.n	800a24c <cmp_lfn+0xd0>
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <cmp_lfn+0xd0>
 800a248:	2300      	movs	r3, #0
 800a24a:	e000      	b.n	800a24e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a24c:	2301      	movs	r3, #1
}
 800a24e:	4618      	mov	r0, r3
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	bd90      	pop	{r4, r7, pc}
 800a256:	bf00      	nop
 800a258:	08013864 	.word	0x08013864

0800a25c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4611      	mov	r1, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	460b      	mov	r3, r1
 800a26c:	71fb      	strb	r3, [r7, #7]
 800a26e:	4613      	mov	r3, r2
 800a270:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	330d      	adds	r3, #13
 800a276:	79ba      	ldrb	r2, [r7, #6]
 800a278:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	330b      	adds	r3, #11
 800a27e:	220f      	movs	r2, #15
 800a280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	330c      	adds	r3, #12
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	331a      	adds	r3, #26
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe ff3a 	bl	800910a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	1e5a      	subs	r2, r3, #1
 800a29a:	4613      	mov	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	82fb      	strh	r3, [r7, #22]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a2ae:	8afb      	ldrh	r3, [r7, #22]
 800a2b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d007      	beq.n	800a2c8 <put_lfn+0x6c>
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	61fa      	str	r2, [r7, #28]
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a2c8:	4a17      	ldr	r2, [pc, #92]	@ (800a328 <put_lfn+0xcc>)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	8afa      	ldrh	r2, [r7, #22]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe ff15 	bl	800910a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a2e0:	8afb      	ldrh	r3, [r7, #22]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <put_lfn+0x90>
 800a2e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b0c      	cmp	r3, #12
 800a2f6:	d9da      	bls.n	800a2ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a2f8:	8afb      	ldrh	r3, [r7, #22]
 800a2fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d006      	beq.n	800a310 <put_lfn+0xb4>
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d103      	bne.n	800a318 <put_lfn+0xbc>
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a316:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	79fa      	ldrb	r2, [r7, #7]
 800a31c:	701a      	strb	r2, [r3, #0]
}
 800a31e:	bf00      	nop
 800a320:	3720      	adds	r7, #32
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	08013864 	.word	0x08013864

0800a32c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a33a:	220b      	movs	r2, #11
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7fe ff2a 	bl	8009198 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b05      	cmp	r3, #5
 800a348:	d92b      	bls.n	800a3a2 <gen_numname+0x76>
		sr = seq;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a34e:	e022      	b.n	800a396 <gen_numname+0x6a>
			wc = *lfn++;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	1c9a      	adds	r2, r3, #2
 800a354:	607a      	str	r2, [r7, #4]
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a35a:	2300      	movs	r3, #0
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a35e:	e017      	b.n	800a390 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	005a      	lsls	r2, r3, #1
 800a364:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	4413      	add	r3, r2
 800a36c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a36e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <gen_numname+0x5e>
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a384:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a388:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	3301      	adds	r3, #1
 800a38e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a392:	2b0f      	cmp	r3, #15
 800a394:	d9e4      	bls.n	800a360 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1d8      	bne.n	800a350 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a3a2:	2307      	movs	r3, #7
 800a3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	3330      	adds	r3, #48	@ 0x30
 800a3b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3ba:	2b39      	cmp	r3, #57	@ 0x39
 800a3bc:	d904      	bls.n	800a3c8 <gen_numname+0x9c>
 800a3be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3c2:	3307      	adds	r3, #7
 800a3c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	1e5a      	subs	r2, r3, #1
 800a3cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a3ce:	3330      	adds	r3, #48	@ 0x30
 800a3d0:	443b      	add	r3, r7
 800a3d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a3d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1df      	bne.n	800a3a6 <gen_numname+0x7a>
	ns[i] = '~';
 800a3e6:	f107 0214 	add.w	r2, r7, #20
 800a3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ec:	4413      	add	r3, r2
 800a3ee:	227e      	movs	r2, #126	@ 0x7e
 800a3f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f6:	e002      	b.n	800a3fe <gen_numname+0xd2>
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	429a      	cmp	r2, r3
 800a404:	d205      	bcs.n	800a412 <gen_numname+0xe6>
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	4413      	add	r3, r2
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b20      	cmp	r3, #32
 800a410:	d1f2      	bne.n	800a3f8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a414:	2b07      	cmp	r3, #7
 800a416:	d807      	bhi.n	800a428 <gen_numname+0xfc>
 800a418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a41e:	3330      	adds	r3, #48	@ 0x30
 800a420:	443b      	add	r3, r7
 800a422:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a426:	e000      	b.n	800a42a <gen_numname+0xfe>
 800a428:	2120      	movs	r1, #32
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	1c5a      	adds	r2, r3, #1
 800a42e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	460a      	mov	r2, r1
 800a436:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	2b07      	cmp	r3, #7
 800a43c:	d9e9      	bls.n	800a412 <gen_numname+0xe6>
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	3730      	adds	r7, #48	@ 0x30
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a454:	230b      	movs	r3, #11
 800a456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	0852      	lsrs	r2, r2, #1
 800a45e:	01db      	lsls	r3, r3, #7
 800a460:	4313      	orrs	r3, r2
 800a462:	b2da      	uxtb	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	6079      	str	r1, [r7, #4]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	4413      	add	r3, r2
 800a46e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	60bb      	str	r3, [r7, #8]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1ed      	bne.n	800a458 <sum_sfn+0x10>
	return sum;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b086      	sub	sp, #24
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a498:	2100      	movs	r1, #0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fc89 	bl	8009db2 <dir_sdi>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <dir_find+0x24>
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	e0a9      	b.n	800a602 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a4ae:	23ff      	movs	r3, #255	@ 0xff
 800a4b0:	753b      	strb	r3, [r7, #20]
 800a4b2:	7d3b      	ldrb	r3, [r7, #20]
 800a4b4:	757b      	strb	r3, [r7, #21]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6938      	ldr	r0, [r7, #16]
 800a4c6:	f7ff f895 	bl	80095f4 <move_window>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 8090 	bne.w	800a5f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a4de:	7dbb      	ldrb	r3, [r7, #22]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <dir_find+0x60>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	75fb      	strb	r3, [r7, #23]
 800a4e8:	e08a      	b.n	800a600 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	330b      	adds	r3, #11
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4f6:	73fb      	strb	r3, [r7, #15]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7bfa      	ldrb	r2, [r7, #15]
 800a4fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a4fe:	7dbb      	ldrb	r3, [r7, #22]
 800a500:	2be5      	cmp	r3, #229	@ 0xe5
 800a502:	d007      	beq.n	800a514 <dir_find+0x8a>
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <dir_find+0x98>
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	2b0f      	cmp	r3, #15
 800a512:	d006      	beq.n	800a522 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a514:	23ff      	movs	r3, #255	@ 0xff
 800a516:	757b      	strb	r3, [r7, #21]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f04f 32ff 	mov.w	r2, #4294967295
 800a51e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a520:	e05e      	b.n	800a5e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	2b0f      	cmp	r3, #15
 800a526:	d136      	bne.n	800a596 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d154      	bne.n	800a5e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a536:	7dbb      	ldrb	r3, [r7, #22]
 800a538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00d      	beq.n	800a55c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	7b5b      	ldrb	r3, [r3, #13]
 800a546:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a548:	7dbb      	ldrb	r3, [r7, #22]
 800a54a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a54e:	75bb      	strb	r3, [r7, #22]
 800a550:	7dbb      	ldrb	r3, [r7, #22]
 800a552:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	695a      	ldr	r2, [r3, #20]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a55c:	7dba      	ldrb	r2, [r7, #22]
 800a55e:	7d7b      	ldrb	r3, [r7, #21]
 800a560:	429a      	cmp	r2, r3
 800a562:	d115      	bne.n	800a590 <dir_find+0x106>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	330d      	adds	r3, #13
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	7d3a      	ldrb	r2, [r7, #20]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d10e      	bne.n	800a590 <dir_find+0x106>
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7ff fdfd 	bl	800a17c <cmp_lfn>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <dir_find+0x106>
 800a588:	7d7b      	ldrb	r3, [r7, #21]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	e000      	b.n	800a592 <dir_find+0x108>
 800a590:	23ff      	movs	r3, #255	@ 0xff
 800a592:	757b      	strb	r3, [r7, #21]
 800a594:	e024      	b.n	800a5e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a596:	7d7b      	ldrb	r3, [r7, #21]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <dir_find+0x126>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff ff51 	bl	800a448 <sum_sfn>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	7d3b      	ldrb	r3, [r7, #20]
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d024      	beq.n	800a5fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <dir_find+0x14a>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a18      	ldr	r0, [r3, #32]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3324      	adds	r3, #36	@ 0x24
 800a5c6:	220b      	movs	r2, #11
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	f7fe fe21 	bl	8009210 <mem_cmp>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d014      	beq.n	800a5fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a5d4:	23ff      	movs	r3, #255	@ 0xff
 800a5d6:	757b      	strb	r3, [r7, #21]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295
 800a5de:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fc6e 	bl	8009ec4 <dir_next>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f43f af65 	beq.w	800a4be <dir_find+0x34>
 800a5f4:	e004      	b.n	800a600 <dir_find+0x176>
		if (res != FR_OK) break;
 800a5f6:	bf00      	nop
 800a5f8:	e002      	b.n	800a600 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a5fe:	bf00      	nop

	return res;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	@ 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a620:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <dir_register+0x20>
 800a628:	2306      	movs	r3, #6
 800a62a:	e0e0      	b.n	800a7ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a62c:	2300      	movs	r3, #0
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a630:	e002      	b.n	800a638 <dir_register+0x2c>
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	3301      	adds	r3, #1
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	4413      	add	r3, r2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f4      	bne.n	800a632 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	220c      	movs	r2, #12
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fd9f 	bl	8009198 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d032      	beq.n	800a6ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2240      	movs	r2, #64	@ 0x40
 800a668:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800a66c:	2301      	movs	r3, #1
 800a66e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a670:	e016      	b.n	800a6a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	691a      	ldr	r2, [r3, #16]
 800a67c:	f107 010c 	add.w	r1, r7, #12
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	f7ff fe53 	bl	800a32c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff feff 	bl	800a48a <dir_find>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800a692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a696:	2b00      	cmp	r3, #0
 800a698:	d106      	bne.n	800a6a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	3301      	adds	r3, #1
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	2b63      	cmp	r3, #99	@ 0x63
 800a6a4:	d9e5      	bls.n	800a672 <dir_register+0x66>
 800a6a6:	e000      	b.n	800a6aa <dir_register+0x9e>
			if (res != FR_OK) break;
 800a6a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	2b64      	cmp	r3, #100	@ 0x64
 800a6ae:	d101      	bne.n	800a6b4 <dir_register+0xa8>
 800a6b0:	2307      	movs	r3, #7
 800a6b2:	e09c      	b.n	800a7ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a6b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d002      	beq.n	800a6c2 <dir_register+0xb6>
 800a6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6c0:	e095      	b.n	800a7ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a6c2:	7dfa      	ldrb	r2, [r7, #23]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <dir_register+0xd8>
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	330c      	adds	r3, #12
 800a6d8:	4a47      	ldr	r2, [pc, #284]	@ (800a7f8 <dir_register+0x1ec>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	089b      	lsrs	r3, r3, #2
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <dir_register+0xda>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a6e8:	6a39      	ldr	r1, [r7, #32]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff fcc0 	bl	800a070 <dir_alloc>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d148      	bne.n	800a790 <dir_register+0x184>
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	3b01      	subs	r3, #1
 800a702:	623b      	str	r3, [r7, #32]
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d042      	beq.n	800a790 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695a      	ldr	r2, [r3, #20]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	015b      	lsls	r3, r3, #5
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fb4b 	bl	8009db2 <dir_sdi>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a726:	2b00      	cmp	r3, #0
 800a728:	d132      	bne.n	800a790 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3324      	adds	r3, #36	@ 0x24
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fe8a 	bl	800a448 <sum_sfn>
 800a734:	4603      	mov	r3, r0
 800a736:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	4619      	mov	r1, r3
 800a73e:	69f8      	ldr	r0, [r7, #28]
 800a740:	f7fe ff58 	bl	80095f4 <move_window>
 800a744:	4603      	mov	r3, r0
 800a746:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800a74a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d11d      	bne.n	800a78e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	6918      	ldr	r0, [r3, #16]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a19      	ldr	r1, [r3, #32]
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	7efb      	ldrb	r3, [r7, #27]
 800a760:	f7ff fd7c 	bl	800a25c <put_lfn>
				fs->wflag = 1;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	2201      	movs	r2, #1
 800a768:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a76a:	2100      	movs	r1, #0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff fba9 	bl	8009ec4 <dir_next>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800a778:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d107      	bne.n	800a790 <dir_register+0x184>
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	3b01      	subs	r3, #1
 800a784:	623b      	str	r3, [r7, #32]
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1d5      	bne.n	800a738 <dir_register+0x12c>
 800a78c:	e000      	b.n	800a790 <dir_register+0x184>
				if (res != FR_OK) break;
 800a78e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a790:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a794:	2b00      	cmp	r3, #0
 800a796:	d128      	bne.n	800a7ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	4619      	mov	r1, r3
 800a79e:	69f8      	ldr	r0, [r7, #28]
 800a7a0:	f7fe ff28 	bl	80095f4 <move_window>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d11b      	bne.n	800a7ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fd0d 	bl	80091da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a18      	ldr	r0, [r3, #32]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3324      	adds	r3, #36	@ 0x24
 800a7c8:	220b      	movs	r2, #11
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f7fe fce4 	bl	8009198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	330c      	adds	r3, #12
 800a7dc:	f002 0218 	and.w	r2, r2, #24
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3730      	adds	r7, #48	@ 0x30
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	4ec4ec4f 	.word	0x4ec4ec4f

0800a7fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08a      	sub	sp, #40	@ 0x28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	2300      	movs	r3, #0
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	61ba      	str	r2, [r7, #24]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4413      	add	r3, r2
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a82a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a82c:	2b1f      	cmp	r3, #31
 800a82e:	d940      	bls.n	800a8b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a830:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a832:	2b2f      	cmp	r3, #47	@ 0x2f
 800a834:	d006      	beq.n	800a844 <create_name+0x48>
 800a836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a838:	2b5c      	cmp	r3, #92	@ 0x5c
 800a83a:	d110      	bne.n	800a85e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a83c:	e002      	b.n	800a844 <create_name+0x48>
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	3301      	adds	r3, #1
 800a842:	61bb      	str	r3, [r7, #24]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	4413      	add	r3, r2
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a84e:	d0f6      	beq.n	800a83e <create_name+0x42>
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b5c      	cmp	r3, #92	@ 0x5c
 800a85a:	d0f0      	beq.n	800a83e <create_name+0x42>
			break;
 800a85c:	e02a      	b.n	800a8b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2bfe      	cmp	r3, #254	@ 0xfe
 800a862:	d901      	bls.n	800a868 <create_name+0x6c>
 800a864:	2306      	movs	r3, #6
 800a866:	e17d      	b.n	800ab64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a86e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a870:	2101      	movs	r1, #1
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fa76 	bl	800bd64 <ff_convert>
 800a878:	4603      	mov	r3, r0
 800a87a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a87c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <create_name+0x8a>
 800a882:	2306      	movs	r3, #6
 800a884:	e16e      	b.n	800ab64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a888:	2b7f      	cmp	r3, #127	@ 0x7f
 800a88a:	d809      	bhi.n	800a8a0 <create_name+0xa4>
 800a88c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a88e:	4619      	mov	r1, r3
 800a890:	488d      	ldr	r0, [pc, #564]	@ (800aac8 <create_name+0x2cc>)
 800a892:	f7fe fce4 	bl	800925e <chk_chr>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <create_name+0xa4>
 800a89c:	2306      	movs	r3, #6
 800a89e:	e161      	b.n	800ab64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	617a      	str	r2, [r7, #20]
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a8b0:	e7b4      	b.n	800a81c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a8b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	441a      	add	r2, r3
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a8be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8c0:	2b1f      	cmp	r3, #31
 800a8c2:	d801      	bhi.n	800a8c8 <create_name+0xcc>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	e000      	b.n	800a8ca <create_name+0xce>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a8ce:	e011      	b.n	800a8f4 <create_name+0xf8>
		w = lfn[di - 1];
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4413      	add	r3, r2
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a8e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	d002      	beq.n	800a8ee <create_name+0xf2>
 800a8e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ec:	d106      	bne.n	800a8fc <create_name+0x100>
		di--;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1ea      	bne.n	800a8d0 <create_name+0xd4>
 800a8fa:	e000      	b.n	800a8fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a8fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4413      	add	r3, r2
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <create_name+0x118>
 800a910:	2306      	movs	r3, #6
 800a912:	e127      	b.n	800ab64 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3324      	adds	r3, #36	@ 0x24
 800a918:	220b      	movs	r2, #11
 800a91a:	2120      	movs	r1, #32
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe fc5c 	bl	80091da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a922:	2300      	movs	r3, #0
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	e002      	b.n	800a92e <create_name+0x132>
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	3301      	adds	r3, #1
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d0f5      	beq.n	800a928 <create_name+0x12c>
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	2b2e      	cmp	r3, #46	@ 0x2e
 800a948:	d0ee      	beq.n	800a928 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d009      	beq.n	800a964 <create_name+0x168>
 800a950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a954:	f043 0303 	orr.w	r3, r3, #3
 800a958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a95c:	e002      	b.n	800a964 <create_name+0x168>
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	3b01      	subs	r3, #1
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d009      	beq.n	800a97e <create_name+0x182>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a970:	3b01      	subs	r3, #1
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a97c:	d1ef      	bne.n	800a95e <create_name+0x162>

	i = b = 0; ni = 8;
 800a97e:	2300      	movs	r3, #0
 800a980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a984:	2300      	movs	r3, #0
 800a986:	623b      	str	r3, [r7, #32]
 800a988:	2308      	movs	r3, #8
 800a98a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	61ba      	str	r2, [r7, #24]
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a99c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 8090 	beq.w	800aac4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a9a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	d006      	beq.n	800a9b8 <create_name+0x1bc>
 800a9aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9ae:	d10a      	bne.n	800a9c6 <create_name+0x1ca>
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d006      	beq.n	800a9c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9bc:	f043 0303 	orr.w	r3, r3, #3
 800a9c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9c4:	e07d      	b.n	800aac2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d203      	bcs.n	800a9d6 <create_name+0x1da>
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d123      	bne.n	800aa1e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	2b0b      	cmp	r3, #11
 800a9da:	d106      	bne.n	800a9ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9e0:	f043 0303 	orr.w	r3, r3, #3
 800a9e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9e8:	e075      	b.n	800aad6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d005      	beq.n	800a9fe <create_name+0x202>
 800a9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9f6:	f043 0303 	orr.w	r3, r3, #3
 800a9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d866      	bhi.n	800aad4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	623b      	str	r3, [r7, #32]
 800aa0e:	230b      	movs	r3, #11
 800aa10:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800aa12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aa1c:	e051      	b.n	800aac2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800aa1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa20:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa22:	d914      	bls.n	800aa4e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800aa24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f001 f99b 	bl	800bd64 <ff_convert>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aa32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d004      	beq.n	800aa42 <create_name+0x246>
 800aa38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa3a:	3b80      	subs	r3, #128	@ 0x80
 800aa3c:	4a23      	ldr	r2, [pc, #140]	@ (800aacc <create_name+0x2d0>)
 800aa3e:	5cd3      	ldrb	r3, [r2, r3]
 800aa40:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800aa42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa46:	f043 0302 	orr.w	r3, r3, #2
 800aa4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800aa4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <create_name+0x268>
 800aa54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa56:	4619      	mov	r1, r3
 800aa58:	481d      	ldr	r0, [pc, #116]	@ (800aad0 <create_name+0x2d4>)
 800aa5a:	f7fe fc00 	bl	800925e <chk_chr>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800aa64:	235f      	movs	r3, #95	@ 0x5f
 800aa66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6c:	f043 0303 	orr.w	r3, r3, #3
 800aa70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa74:	e01b      	b.n	800aaae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aa76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa78:	2b40      	cmp	r3, #64	@ 0x40
 800aa7a:	d909      	bls.n	800aa90 <create_name+0x294>
 800aa7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa7e:	2b5a      	cmp	r3, #90	@ 0x5a
 800aa80:	d806      	bhi.n	800aa90 <create_name+0x294>
					b |= 2;
 800aa82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aa8e:	e00e      	b.n	800aaae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aa90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa92:	2b60      	cmp	r3, #96	@ 0x60
 800aa94:	d90b      	bls.n	800aaae <create_name+0x2b2>
 800aa96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa98:	2b7a      	cmp	r3, #122	@ 0x7a
 800aa9a:	d808      	bhi.n	800aaae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800aa9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aaa0:	f043 0301 	orr.w	r3, r3, #1
 800aaa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aaa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaaa:	3b20      	subs	r3, #32
 800aaac:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	623a      	str	r2, [r7, #32]
 800aab4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aab6:	b2d1      	uxtb	r1, r2
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	460a      	mov	r2, r1
 800aabe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aac2:	e763      	b.n	800a98c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aac4:	bf00      	nop
 800aac6:	e006      	b.n	800aad6 <create_name+0x2da>
 800aac8:	08013740 	.word	0x08013740
 800aacc:	080137e4 	.word	0x080137e4
 800aad0:	0801374c 	.word	0x0801374c
			if (si > di) break;			/* No extension */
 800aad4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aadc:	2be5      	cmp	r3, #229	@ 0xe5
 800aade:	d103      	bne.n	800aae8 <create_name+0x2ec>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2205      	movs	r2, #5
 800aae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b08      	cmp	r3, #8
 800aaec:	d104      	bne.n	800aaf8 <create_name+0x2fc>
 800aaee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aaf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aafc:	f003 030c 	and.w	r3, r3, #12
 800ab00:	2b0c      	cmp	r3, #12
 800ab02:	d005      	beq.n	800ab10 <create_name+0x314>
 800ab04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab08:	f003 0303 	and.w	r3, r3, #3
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d105      	bne.n	800ab1c <create_name+0x320>
 800ab10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab14:	f043 0302 	orr.w	r3, r3, #2
 800ab18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ab1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d117      	bne.n	800ab58 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ab28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab2c:	f003 0303 	and.w	r3, r3, #3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d105      	bne.n	800ab40 <create_name+0x344>
 800ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab38:	f043 0310 	orr.w	r3, r3, #16
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ab40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab44:	f003 030c 	and.w	r3, r3, #12
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d105      	bne.n	800ab58 <create_name+0x35c>
 800ab4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab50:	f043 0308 	orr.w	r3, r3, #8
 800ab54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ab5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ab62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3728      	adds	r7, #40	@ 0x28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ab80:	e002      	b.n	800ab88 <follow_path+0x1c>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	3301      	adds	r3, #1
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab8e:	d0f8      	beq.n	800ab82 <follow_path+0x16>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab96:	d0f4      	beq.n	800ab82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b1f      	cmp	r3, #31
 800aba4:	d80a      	bhi.n	800abbc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2280      	movs	r2, #128	@ 0x80
 800abaa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800abae:	2100      	movs	r1, #0
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff f8fe 	bl	8009db2 <dir_sdi>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]
 800abba:	e048      	b.n	800ac4e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abbc:	463b      	mov	r3, r7
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff fe1b 	bl	800a7fc <create_name>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d139      	bne.n	800ac44 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fc5a 	bl	800a48a <dir_find>
 800abd6:	4603      	mov	r3, r0
 800abd8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800abe0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	2b04      	cmp	r3, #4
 800abec:	d12c      	bne.n	800ac48 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d127      	bne.n	800ac48 <follow_path+0xdc>
 800abf8:	2305      	movs	r3, #5
 800abfa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800abfc:	e024      	b.n	800ac48 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800abfe:	7afb      	ldrb	r3, [r7, #11]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d121      	bne.n	800ac4c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	799b      	ldrb	r3, [r3, #6]
 800ac0c:	f003 0310 	and.w	r3, r3, #16
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac14:	2305      	movs	r3, #5
 800ac16:	75fb      	strb	r3, [r7, #23]
 800ac18:	e019      	b.n	800ac4e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	8992      	ldrh	r2, [r2, #12]
 800ac28:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac2c:	fb00 f202 	mul.w	r2, r0, r2
 800ac30:	1a9b      	subs	r3, r3, r2
 800ac32:	440b      	add	r3, r1
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7ff fa61 	bl	800a0fe <ld_clust>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac42:	e7bb      	b.n	800abbc <follow_path+0x50>
			if (res != FR_OK) break;
 800ac44:	bf00      	nop
 800ac46:	e002      	b.n	800ac4e <follow_path+0xe2>
				break;
 800ac48:	bf00      	nop
 800ac4a:	e000      	b.n	800ac4e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac4c:	bf00      	nop
			}
		}
	}

	return res;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d031      	beq.n	800acd2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	e002      	b.n	800ac7c <get_ldnumber+0x24>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b1f      	cmp	r3, #31
 800ac82:	d903      	bls.n	800ac8c <get_ldnumber+0x34>
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b3a      	cmp	r3, #58	@ 0x3a
 800ac8a:	d1f4      	bne.n	800ac76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b3a      	cmp	r3, #58	@ 0x3a
 800ac92:	d11c      	bne.n	800acce <get_ldnumber+0x76>
			tp = *path;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	60fa      	str	r2, [r7, #12]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	3b30      	subs	r3, #48	@ 0x30
 800aca4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b09      	cmp	r3, #9
 800acaa:	d80e      	bhi.n	800acca <get_ldnumber+0x72>
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d10a      	bne.n	800acca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d107      	bne.n	800acca <get_ldnumber+0x72>
					vol = (int)i;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	3301      	adds	r3, #1
 800acc2:	617b      	str	r3, [r7, #20]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	e002      	b.n	800acd4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800acce:	2300      	movs	r3, #0
 800acd0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800acd2:	693b      	ldr	r3, [r7, #16]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	70da      	strb	r2, [r3, #3]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295
 800acf6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7fe fc7a 	bl	80095f4 <move_window>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <check_fs+0x2a>
 800ad06:	2304      	movs	r3, #4
 800ad08:	e038      	b.n	800ad7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3338      	adds	r3, #56	@ 0x38
 800ad0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe f9be 	bl	8009094 <ld_word>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d001      	beq.n	800ad28 <check_fs+0x48>
 800ad24:	2303      	movs	r3, #3
 800ad26:	e029      	b.n	800ad7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ad2e:	2be9      	cmp	r3, #233	@ 0xe9
 800ad30:	d009      	beq.n	800ad46 <check_fs+0x66>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ad38:	2beb      	cmp	r3, #235	@ 0xeb
 800ad3a:	d11e      	bne.n	800ad7a <check_fs+0x9a>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ad42:	2b90      	cmp	r3, #144	@ 0x90
 800ad44:	d119      	bne.n	800ad7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3338      	adds	r3, #56	@ 0x38
 800ad4a:	3336      	adds	r3, #54	@ 0x36
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe f9b9 	bl	80090c4 <ld_dword>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad58:	4a0a      	ldr	r2, [pc, #40]	@ (800ad84 <check_fs+0xa4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d101      	bne.n	800ad62 <check_fs+0x82>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e00c      	b.n	800ad7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3338      	adds	r3, #56	@ 0x38
 800ad66:	3352      	adds	r3, #82	@ 0x52
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe f9ab 	bl	80090c4 <ld_dword>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4a05      	ldr	r2, [pc, #20]	@ (800ad88 <check_fs+0xa8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d101      	bne.n	800ad7a <check_fs+0x9a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	e000      	b.n	800ad7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ad7a:	2302      	movs	r3, #2
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	00544146 	.word	0x00544146
 800ad88:	33544146 	.word	0x33544146

0800ad8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b096      	sub	sp, #88	@ 0x58
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7ff ff59 	bl	800ac58 <get_ldnumber>
 800ada6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ada8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da01      	bge.n	800adb2 <find_volume+0x26>
 800adae:	230b      	movs	r3, #11
 800adb0:	e262      	b.n	800b278 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800adb2:	4a9f      	ldr	r2, [pc, #636]	@ (800b030 <find_volume+0x2a4>)
 800adb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <find_volume+0x3a>
 800adc2:	230c      	movs	r3, #12
 800adc4:	e258      	b.n	800b278 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01a      	beq.n	800ae12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	785b      	ldrb	r3, [r3, #1]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe f8b7 	bl	8008f54 <disk_status>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800adec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10c      	bne.n	800ae12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <find_volume+0x82>
 800adfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ae0a:	230a      	movs	r3, #10
 800ae0c:	e234      	b.n	800b278 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e232      	b.n	800b278 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe f8af 	bl	8008f88 <disk_initialize>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e21b      	b.n	800b278 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <find_volume+0xca>
 800ae46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ae52:	230a      	movs	r3, #10
 800ae54:	e210      	b.n	800b278 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae58:	7858      	ldrb	r0, [r3, #1]
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	330c      	adds	r3, #12
 800ae5e:	461a      	mov	r2, r3
 800ae60:	2102      	movs	r1, #2
 800ae62:	f7fe f8f9 	bl	8009058 <disk_ioctl>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <find_volume+0xe4>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e203      	b.n	800b278 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	899b      	ldrh	r3, [r3, #12]
 800ae74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae78:	d80d      	bhi.n	800ae96 <find_volume+0x10a>
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	899b      	ldrh	r3, [r3, #12]
 800ae7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae82:	d308      	bcc.n	800ae96 <find_volume+0x10a>
 800ae84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae86:	899b      	ldrh	r3, [r3, #12]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	899b      	ldrh	r3, [r3, #12]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	4013      	ands	r3, r2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <find_volume+0x10e>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e1ee      	b.n	800b278 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aea2:	f7ff ff1d 	bl	800ace0 <check_fs>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aeac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d149      	bne.n	800af48 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeb8:	e01e      	b.n	800aef8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800aec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800aec8:	4413      	add	r3, r2
 800aeca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	3304      	adds	r3, #4
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d006      	beq.n	800aee4 <find_volume+0x158>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed8:	3308      	adds	r3, #8
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f8f2 	bl	80090c4 <ld_dword>
 800aee0:	4602      	mov	r2, r0
 800aee2:	e000      	b.n	800aee6 <find_volume+0x15a>
 800aee4:	2200      	movs	r2, #0
 800aee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	3358      	adds	r3, #88	@ 0x58
 800aeec:	443b      	add	r3, r7
 800aeee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef4:	3301      	adds	r3, #1
 800aef6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d9dd      	bls.n	800aeba <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aefe:	2300      	movs	r3, #0
 800af00:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800af02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <find_volume+0x182>
 800af08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af0a:	3b01      	subs	r3, #1
 800af0c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	3358      	adds	r3, #88	@ 0x58
 800af14:	443b      	add	r3, r7
 800af16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af1a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <find_volume+0x1a2>
 800af22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af26:	f7ff fedb 	bl	800ace0 <check_fs>
 800af2a:	4603      	mov	r3, r0
 800af2c:	e000      	b.n	800af30 <find_volume+0x1a4>
 800af2e:	2303      	movs	r3, #3
 800af30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d905      	bls.n	800af48 <find_volume+0x1bc>
 800af3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af3e:	3301      	adds	r3, #1
 800af40:	643b      	str	r3, [r7, #64]	@ 0x40
 800af42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af44:	2b03      	cmp	r3, #3
 800af46:	d9e2      	bls.n	800af0e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d101      	bne.n	800af54 <find_volume+0x1c8>
 800af50:	2301      	movs	r3, #1
 800af52:	e191      	b.n	800b278 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d901      	bls.n	800af60 <find_volume+0x1d4>
 800af5c:	230d      	movs	r3, #13
 800af5e:	e18b      	b.n	800b278 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af62:	3338      	adds	r3, #56	@ 0x38
 800af64:	330b      	adds	r3, #11
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe f894 	bl	8009094 <ld_word>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af72:	899b      	ldrh	r3, [r3, #12]
 800af74:	429a      	cmp	r2, r3
 800af76:	d001      	beq.n	800af7c <find_volume+0x1f0>
 800af78:	230d      	movs	r3, #13
 800af7a:	e17d      	b.n	800b278 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7e:	3338      	adds	r3, #56	@ 0x38
 800af80:	3316      	adds	r3, #22
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe f886 	bl	8009094 <ld_word>
 800af88:	4603      	mov	r3, r0
 800af8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <find_volume+0x214>
 800af92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af94:	3338      	adds	r3, #56	@ 0x38
 800af96:	3324      	adds	r3, #36	@ 0x24
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe f893 	bl	80090c4 <ld_dword>
 800af9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afa4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800afac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	789b      	ldrb	r3, [r3, #2]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d005      	beq.n	800afc4 <find_volume+0x238>
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	789b      	ldrb	r3, [r3, #2]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d001      	beq.n	800afc4 <find_volume+0x238>
 800afc0:	230d      	movs	r3, #13
 800afc2:	e159      	b.n	800b278 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	789b      	ldrb	r3, [r3, #2]
 800afc8:	461a      	mov	r2, r3
 800afca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afd8:	461a      	mov	r2, r3
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	895b      	ldrh	r3, [r3, #10]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d008      	beq.n	800aff8 <find_volume+0x26c>
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	895b      	ldrh	r3, [r3, #10]
 800afea:	461a      	mov	r2, r3
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	895b      	ldrh	r3, [r3, #10]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	4013      	ands	r3, r2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <find_volume+0x270>
 800aff8:	230d      	movs	r3, #13
 800affa:	e13d      	b.n	800b278 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	3338      	adds	r3, #56	@ 0x38
 800b000:	3311      	adds	r3, #17
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe f846 	bl	8009094 <ld_word>
 800b008:	4603      	mov	r3, r0
 800b00a:	461a      	mov	r2, r3
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	891b      	ldrh	r3, [r3, #8]
 800b014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b016:	8992      	ldrh	r2, [r2, #12]
 800b018:	0952      	lsrs	r2, r2, #5
 800b01a:	b292      	uxth	r2, r2
 800b01c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b020:	fb01 f202 	mul.w	r2, r1, r2
 800b024:	1a9b      	subs	r3, r3, r2
 800b026:	b29b      	uxth	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <find_volume+0x2a8>
 800b02c:	230d      	movs	r3, #13
 800b02e:	e123      	b.n	800b278 <find_volume+0x4ec>
 800b030:	200026b0 	.word	0x200026b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b036:	3338      	adds	r3, #56	@ 0x38
 800b038:	3313      	adds	r3, #19
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe f82a 	bl	8009094 <ld_word>
 800b040:	4603      	mov	r3, r0
 800b042:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <find_volume+0x2cc>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	3338      	adds	r3, #56	@ 0x38
 800b04e:	3320      	adds	r3, #32
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe f837 	bl	80090c4 <ld_dword>
 800b056:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05a:	3338      	adds	r3, #56	@ 0x38
 800b05c:	330e      	adds	r3, #14
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fe f818 	bl	8009094 <ld_word>
 800b064:	4603      	mov	r3, r0
 800b066:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b068:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <find_volume+0x2e6>
 800b06e:	230d      	movs	r3, #13
 800b070:	e102      	b.n	800b278 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b072:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b076:	4413      	add	r3, r2
 800b078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b07a:	8911      	ldrh	r1, [r2, #8]
 800b07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b07e:	8992      	ldrh	r2, [r2, #12]
 800b080:	0952      	lsrs	r2, r2, #5
 800b082:	b292      	uxth	r2, r2
 800b084:	fbb1 f2f2 	udiv	r2, r1, r2
 800b088:	b292      	uxth	r2, r2
 800b08a:	4413      	add	r3, r2
 800b08c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b08e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	429a      	cmp	r2, r3
 800b094:	d201      	bcs.n	800b09a <find_volume+0x30e>
 800b096:	230d      	movs	r3, #13
 800b098:	e0ee      	b.n	800b278 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b09a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a2:	8952      	ldrh	r2, [r2, #10]
 800b0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <find_volume+0x328>
 800b0b0:	230d      	movs	r3, #13
 800b0b2:	e0e1      	b.n	800b278 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0bc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d802      	bhi.n	800b0ca <find_volume+0x33e>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d802      	bhi.n	800b0da <find_volume+0x34e>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	1c9a      	adds	r2, r3, #2
 800b0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0e6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ec:	441a      	add	r2, r3
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b0f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f6:	441a      	add	r2, r3
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b100:	2b03      	cmp	r3, #3
 800b102:	d11e      	bne.n	800b142 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	3338      	adds	r3, #56	@ 0x38
 800b108:	332a      	adds	r3, #42	@ 0x2a
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fd ffc2 	bl	8009094 <ld_word>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <find_volume+0x38e>
 800b116:	230d      	movs	r3, #13
 800b118:	e0ae      	b.n	800b278 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11c:	891b      	ldrh	r3, [r3, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <find_volume+0x39a>
 800b122:	230d      	movs	r3, #13
 800b124:	e0a8      	b.n	800b278 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b128:	3338      	adds	r3, #56	@ 0x38
 800b12a:	332c      	adds	r3, #44	@ 0x2c
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd ffc9 	bl	80090c4 <ld_dword>
 800b132:	4602      	mov	r2, r0
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b140:	e01f      	b.n	800b182 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b144:	891b      	ldrh	r3, [r3, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <find_volume+0x3c2>
 800b14a:	230d      	movs	r3, #13
 800b14c:	e094      	b.n	800b278 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b154:	441a      	add	r2, r3
 800b156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b158:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b15a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d103      	bne.n	800b16a <find_volume+0x3de>
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	e00a      	b.n	800b180 <find_volume+0x3f4>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	69da      	ldr	r2, [r3, #28]
 800b16e:	4613      	mov	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	4413      	add	r3, r2
 800b174:	085a      	lsrs	r2, r3, #1
 800b176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b180:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b184:	6a1a      	ldr	r2, [r3, #32]
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	899b      	ldrh	r3, [r3, #12]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b18e:	440b      	add	r3, r1
 800b190:	3b01      	subs	r3, #1
 800b192:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b194:	8989      	ldrh	r1, [r1, #12]
 800b196:	fbb3 f3f1 	udiv	r3, r3, r1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d201      	bcs.n	800b1a2 <find_volume+0x416>
 800b19e:	230d      	movs	r3, #13
 800b1a0:	e06a      	b.n	800b278 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a8:	619a      	str	r2, [r3, #24]
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ac:	699a      	ldr	r2, [r3, #24]
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b4:	2280      	movs	r2, #128	@ 0x80
 800b1b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d149      	bne.n	800b254 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c2:	3338      	adds	r3, #56	@ 0x38
 800b1c4:	3330      	adds	r3, #48	@ 0x30
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd ff64 	bl	8009094 <ld_word>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d140      	bne.n	800b254 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b1d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1da:	f7fe fa0b 	bl	80095f4 <move_window>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d137      	bne.n	800b254 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	3338      	adds	r3, #56	@ 0x38
 800b1ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fd ff4e 	bl	8009094 <ld_word>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b200:	429a      	cmp	r2, r3
 800b202:	d127      	bne.n	800b254 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b206:	3338      	adds	r3, #56	@ 0x38
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fd ff5b 	bl	80090c4 <ld_dword>
 800b20e:	4603      	mov	r3, r0
 800b210:	4a1b      	ldr	r2, [pc, #108]	@ (800b280 <find_volume+0x4f4>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d11e      	bne.n	800b254 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	3338      	adds	r3, #56	@ 0x38
 800b21a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fd ff50 	bl	80090c4 <ld_dword>
 800b224:	4603      	mov	r3, r0
 800b226:	4a17      	ldr	r2, [pc, #92]	@ (800b284 <find_volume+0x4f8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d113      	bne.n	800b254 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	3338      	adds	r3, #56	@ 0x38
 800b230:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd ff45 	bl	80090c4 <ld_dword>
 800b23a:	4602      	mov	r2, r0
 800b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	3338      	adds	r3, #56	@ 0x38
 800b244:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b248:	4618      	mov	r0, r3
 800b24a:	f7fd ff3b 	bl	80090c4 <ld_dword>
 800b24e:	4602      	mov	r2, r0
 800b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b252:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b256:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b25a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b25c:	4b0a      	ldr	r3, [pc, #40]	@ (800b288 <find_volume+0x4fc>)
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	3301      	adds	r3, #1
 800b262:	b29a      	uxth	r2, r3
 800b264:	4b08      	ldr	r3, [pc, #32]	@ (800b288 <find_volume+0x4fc>)
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	4b07      	ldr	r3, [pc, #28]	@ (800b288 <find_volume+0x4fc>)
 800b26a:	881a      	ldrh	r2, [r3, #0]
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b270:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b272:	f7fe f957 	bl	8009524 <clear_lock>
#endif
	return FR_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3758      	adds	r7, #88	@ 0x58
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	41615252 	.word	0x41615252
 800b284:	61417272 	.word	0x61417272
 800b288:	200026b4 	.word	0x200026b4

0800b28c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b296:	2309      	movs	r3, #9
 800b298:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01c      	beq.n	800b2da <validate+0x4e>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d018      	beq.n	800b2da <validate+0x4e>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d013      	beq.n	800b2da <validate+0x4e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	889a      	ldrh	r2, [r3, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	88db      	ldrh	r3, [r3, #6]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d10c      	bne.n	800b2da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	785b      	ldrb	r3, [r3, #1]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fd fe44 	bl	8008f54 <disk_status>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <validate+0x4e>
			res = FR_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <validate+0x5a>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	e000      	b.n	800b2e8 <validate+0x5c>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	6013      	str	r3, [r2, #0]
	return res;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b30a:	f107 0310 	add.w	r3, r7, #16
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff fca2 	bl	800ac58 <get_ldnumber>
 800b314:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	da01      	bge.n	800b320 <f_mount+0x28>
 800b31c:	230b      	movs	r3, #11
 800b31e:	e02b      	b.n	800b378 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b320:	4a17      	ldr	r2, [pc, #92]	@ (800b380 <f_mount+0x88>)
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b328:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b330:	69b8      	ldr	r0, [r7, #24]
 800b332:	f7fe f8f7 	bl	8009524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	490d      	ldr	r1, [pc, #52]	@ (800b380 <f_mount+0x88>)
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <f_mount+0x66>
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d001      	beq.n	800b362 <f_mount+0x6a>
 800b35e:	2300      	movs	r3, #0
 800b360:	e00a      	b.n	800b378 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b362:	f107 010c 	add.w	r1, r7, #12
 800b366:	f107 0308 	add.w	r3, r7, #8
 800b36a:	2200      	movs	r2, #0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff fd0d 	bl	800ad8c <find_volume>
 800b372:	4603      	mov	r3, r0
 800b374:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b376:	7dfb      	ldrb	r3, [r7, #23]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	200026b0 	.word	0x200026b0

0800b384 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b09a      	sub	sp, #104	@ 0x68
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <f_open+0x18>
 800b398:	2309      	movs	r3, #9
 800b39a:	e1c7      	b.n	800b72c <f_open+0x3a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b3a4:	79fa      	ldrb	r2, [r7, #7]
 800b3a6:	f107 0110 	add.w	r1, r7, #16
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fcec 	bl	800ad8c <find_volume>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b3ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 81ab 	bne.w	800b71a <f_open+0x396>
		dj.obj.fs = fs;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800b3c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b3cc:	f000 fd90 	bl	800bef0 <ff_memalloc>
 800b3d0:	65b8      	str	r0, [r7, #88]	@ 0x58
 800b3d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <f_open+0x58>
 800b3d8:	2311      	movs	r3, #17
 800b3da:	e1a7      	b.n	800b72c <f_open+0x3a8>
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3e0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	f107 0314 	add.w	r3, r7, #20
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff fbbe 	bl	800ab6c <follow_path>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b3f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d118      	bne.n	800b430 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b3fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b402:	b25b      	sxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	da03      	bge.n	800b410 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800b408:	2306      	movs	r3, #6
 800b40a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b40e:	e00f      	b.n	800b430 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	2b01      	cmp	r3, #1
 800b414:	bf8c      	ite	hi
 800b416:	2301      	movhi	r3, #1
 800b418:	2300      	movls	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	f107 0314 	add.w	r3, r7, #20
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7fd ff35 	bl	8009294 <chk_lock>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	f003 031c 	and.w	r3, r3, #28
 800b436:	2b00      	cmp	r3, #0
 800b438:	d07f      	beq.n	800b53a <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800b43a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d017      	beq.n	800b472 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b442:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b446:	2b04      	cmp	r3, #4
 800b448:	d10e      	bne.n	800b468 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b44a:	f7fd ff7f 	bl	800934c <enq_lock>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <f_open+0xde>
 800b454:	f107 0314 	add.w	r3, r7, #20
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff f8d7 	bl	800a60c <dir_register>
 800b45e:	4603      	mov	r3, r0
 800b460:	e000      	b.n	800b464 <f_open+0xe0>
 800b462:	2312      	movs	r3, #18
 800b464:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	f043 0308 	orr.w	r3, r3, #8
 800b46e:	71fb      	strb	r3, [r7, #7]
 800b470:	e010      	b.n	800b494 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b472:	7ebb      	ldrb	r3, [r7, #26]
 800b474:	f003 0311 	and.w	r3, r3, #17
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <f_open+0x100>
					res = FR_DENIED;
 800b47c:	2307      	movs	r3, #7
 800b47e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b482:	e007      	b.n	800b494 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <f_open+0x110>
 800b48e:	2308      	movs	r3, #8
 800b490:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b494:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d168      	bne.n	800b56e <f_open+0x1ea>
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d063      	beq.n	800b56e <f_open+0x1ea>
				dw = GET_FATTIME();
 800b4a6:	f7fd fbcf 	bl	8008c48 <get_fattime>
 800b4aa:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ae:	330e      	adds	r3, #14
 800b4b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fd fe44 	bl	8009140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ba:	3316      	adds	r3, #22
 800b4bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fd fe3e 	bl	8009140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c6:	330b      	adds	r3, #11
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fe13 	bl	800a0fe <ld_clust>
 800b4d8:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fe2b 	bl	800a13c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e8:	331c      	adds	r3, #28
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fd fe27 	bl	8009140 <st_dword>
					fs->wflag = 1;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d037      	beq.n	800b56e <f_open+0x1ea>
						dw = fs->winsect;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b502:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800b504:	f107 0314 	add.w	r3, r7, #20
 800b508:	2200      	movs	r2, #0
 800b50a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe fb1b 	bl	8009b48 <remove_chain>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d126      	bne.n	800b56e <f_open+0x1ea>
							res = move_window(fs, dw);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe f865 	bl	80095f4 <move_window>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b534:	3a01      	subs	r2, #1
 800b536:	615a      	str	r2, [r3, #20]
 800b538:	e019      	b.n	800b56e <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b53a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d115      	bne.n	800b56e <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b542:	7ebb      	ldrb	r3, [r7, #26]
 800b544:	f003 0310 	and.w	r3, r3, #16
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <f_open+0x1d0>
					res = FR_NO_FILE;
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b552:	e00c      	b.n	800b56e <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d007      	beq.n	800b56e <f_open+0x1ea>
 800b55e:	7ebb      	ldrb	r3, [r7, #26]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <f_open+0x1ea>
						res = FR_DENIED;
 800b568:	2307      	movs	r3, #7
 800b56a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b56e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b572:	2b00      	cmp	r3, #0
 800b574:	d126      	bne.n	800b5c4 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <f_open+0x204>
				mode |= FA_MODIFIED;
 800b580:	79fb      	ldrb	r3, [r7, #7]
 800b582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b586:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	bf8c      	ite	hi
 800b59c:	2301      	movhi	r3, #1
 800b59e:	2300      	movls	r3, #0
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fd fef0 	bl	8009390 <inc_lock>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <f_open+0x240>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b5c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f040 80a3 	bne.w	800b714 <f_open+0x390>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fe fd92 	bl	800a0fe <ld_clust>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e2:	331c      	adds	r3, #28
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd fd6d 	bl	80090c4 <ld_dword>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	88da      	ldrh	r2, [r3, #6]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	79fa      	ldrb	r2, [r7, #7]
 800b608:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3330      	adds	r3, #48	@ 0x30
 800b620:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b624:	2100      	movs	r1, #0
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd fdd7 	bl	80091da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	f003 0320 	and.w	r3, r3, #32
 800b632:	2b00      	cmp	r3, #0
 800b634:	d06e      	beq.n	800b714 <f_open+0x390>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d06a      	beq.n	800b714 <f_open+0x390>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	68da      	ldr	r2, [r3, #12]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	895b      	ldrh	r3, [r3, #10]
 800b64a:	461a      	mov	r2, r3
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	899b      	ldrh	r3, [r3, #12]
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b662:	e016      	b.n	800b692 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe f880 	bl	800976e <get_fat>
 800b66e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b672:	2b01      	cmp	r3, #1
 800b674:	d802      	bhi.n	800b67c <f_open+0x2f8>
 800b676:	2302      	movs	r3, #2
 800b678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b67c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d102      	bne.n	800b68a <f_open+0x306>
 800b684:	2301      	movs	r3, #1
 800b686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b68a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b696:	2b00      	cmp	r3, #0
 800b698:	d103      	bne.n	800b6a2 <f_open+0x31e>
 800b69a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b69c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d8e0      	bhi.n	800b664 <f_open+0x2e0>
				}
				fp->clust = clst;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b6a6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b6a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d131      	bne.n	800b714 <f_open+0x390>
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	899b      	ldrh	r3, [r3, #12]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6bc:	fb01 f202 	mul.w	r2, r1, r2
 800b6c0:	1a9b      	subs	r3, r3, r2
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d026      	beq.n	800b714 <f_open+0x390>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe f830 	bl	8009730 <clust2sect>
 800b6d0:	64b8      	str	r0, [r7, #72]	@ 0x48
 800b6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d103      	bne.n	800b6e0 <f_open+0x35c>
						res = FR_INT_ERR;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b6de:	e019      	b.n	800b714 <f_open+0x390>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	899b      	ldrh	r3, [r3, #12]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	7858      	ldrb	r0, [r3, #1]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a1a      	ldr	r2, [r3, #32]
 800b702:	2301      	movs	r3, #1
 800b704:	f7fd fc68 	bl	8008fd8 <disk_read>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <f_open+0x390>
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800b714:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b716:	f000 fbf7 	bl	800bf08 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b71a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <f_open+0x3a4>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b728:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3768      	adds	r7, #104	@ 0x68
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b08e      	sub	sp, #56	@ 0x38
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f107 0214 	add.w	r2, r7, #20
 800b752:	4611      	mov	r1, r2
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fd99 	bl	800b28c <validate>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b764:	2b00      	cmp	r3, #0
 800b766:	d107      	bne.n	800b778 <f_read+0x44>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	7d5b      	ldrb	r3, [r3, #21]
 800b76c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <f_read+0x4a>
 800b778:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b77c:	e135      	b.n	800b9ea <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	7d1b      	ldrb	r3, [r3, #20]
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <f_read+0x5a>
 800b78a:	2307      	movs	r3, #7
 800b78c:	e12d      	b.n	800b9ea <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	f240 811e 	bls.w	800b9e0 <f_read+0x2ac>
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b7a8:	e11a      	b.n	800b9e0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	8992      	ldrh	r2, [r2, #12]
 800b7b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7b6:	fb01 f202 	mul.w	r2, r1, r2
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f040 80d5 	bne.w	800b96c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	8992      	ldrh	r2, [r2, #12]
 800b7ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	8952      	ldrh	r2, [r2, #10]
 800b7d2:	3a01      	subs	r2, #1
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d12f      	bne.n	800b83e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d103      	bne.n	800b7ee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7ec:	e013      	b.n	800b816 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7fe faa0 	bl	8009d42 <clmt_clust>
 800b802:	6338      	str	r0, [r7, #48]	@ 0x30
 800b804:	e007      	b.n	800b816 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f7fd ffad 	bl	800976e <get_fat>
 800b814:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d804      	bhi.n	800b826 <f_read+0xf2>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2202      	movs	r2, #2
 800b820:	755a      	strb	r2, [r3, #21]
 800b822:	2302      	movs	r3, #2
 800b824:	e0e1      	b.n	800b9ea <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d104      	bne.n	800b838 <f_read+0x104>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	755a      	strb	r2, [r3, #21]
 800b834:	2301      	movs	r3, #1
 800b836:	e0d8      	b.n	800b9ea <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b83c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7fd ff72 	bl	8009730 <clust2sect>
 800b84c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <f_read+0x12a>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2202      	movs	r2, #2
 800b858:	755a      	strb	r2, [r3, #21]
 800b85a:	2302      	movs	r3, #2
 800b85c:	e0c5      	b.n	800b9ea <f_read+0x2b6>
			sect += csect;
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4413      	add	r3, r2
 800b864:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	899b      	ldrh	r3, [r3, #12]
 800b86a:	461a      	mov	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b872:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d041      	beq.n	800b8fe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87e:	4413      	add	r3, r2
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	8952      	ldrh	r2, [r2, #10]
 800b884:	4293      	cmp	r3, r2
 800b886:	d905      	bls.n	800b894 <f_read+0x160>
					cc = fs->csize - csect;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	895b      	ldrh	r3, [r3, #10]
 800b88c:	461a      	mov	r2, r3
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	7858      	ldrb	r0, [r3, #1]
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b89e:	f7fd fb9b 	bl	8008fd8 <disk_read>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d004      	beq.n	800b8b2 <f_read+0x17e>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	755a      	strb	r2, [r3, #21]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e09b      	b.n	800b9ea <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	7d1b      	ldrb	r3, [r3, #20]
 800b8b6:	b25b      	sxtb	r3, r3
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	da18      	bge.n	800b8ee <f_read+0x1ba>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6a1a      	ldr	r2, [r3, #32]
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d911      	bls.n	800b8ee <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6a1a      	ldr	r2, [r3, #32]
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	8992      	ldrh	r2, [r2, #12]
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
 800b8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8dc:	18d0      	adds	r0, r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f7fd fc55 	bl	8009198 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	899b      	ldrh	r3, [r3, #12]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	fb02 f303 	mul.w	r3, r2, r3
 800b8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b8fc:	e05c      	b.n	800b9b8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	69ba      	ldr	r2, [r7, #24]
 800b904:	429a      	cmp	r2, r3
 800b906:	d02e      	beq.n	800b966 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	7d1b      	ldrb	r3, [r3, #20]
 800b90c:	b25b      	sxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da18      	bge.n	800b944 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	7858      	ldrb	r0, [r3, #1]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6a1a      	ldr	r2, [r3, #32]
 800b920:	2301      	movs	r3, #1
 800b922:	f7fd fb79 	bl	8009018 <disk_write>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <f_read+0x202>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	755a      	strb	r2, [r3, #21]
 800b932:	2301      	movs	r3, #1
 800b934:	e059      	b.n	800b9ea <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	7d1b      	ldrb	r3, [r3, #20]
 800b93a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	7858      	ldrb	r0, [r3, #1]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b94e:	2301      	movs	r3, #1
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	f7fd fb41 	bl	8008fd8 <disk_read>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d004      	beq.n	800b966 <f_read+0x232>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	755a      	strb	r2, [r3, #21]
 800b962:	2301      	movs	r3, #1
 800b964:	e041      	b.n	800b9ea <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	899b      	ldrh	r3, [r3, #12]
 800b970:	4618      	mov	r0, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	8992      	ldrh	r2, [r2, #12]
 800b97a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b97e:	fb01 f202 	mul.w	r2, r1, r2
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	1ac3      	subs	r3, r0, r3
 800b986:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d901      	bls.n	800b994 <f_read+0x260>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	8992      	ldrh	r2, [r2, #12]
 800b9a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9a6:	fb00 f202 	mul.w	r2, r0, r2
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	440b      	add	r3, r1
 800b9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9b4:	f7fd fbf0 	bl	8009198 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9bc:	4413      	add	r3, r2
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	699a      	ldr	r2, [r3, #24]
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	441a      	add	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	619a      	str	r2, [r3, #24]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	441a      	add	r2, r3
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f47f aee1 	bne.w	800b7aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3738      	adds	r7, #56	@ 0x38
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f107 0208 	add.w	r2, r7, #8
 800ba00:	4611      	mov	r1, r2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff fc42 	bl	800b28c <validate>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d168      	bne.n	800bae4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	7d1b      	ldrb	r3, [r3, #20]
 800ba16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d062      	beq.n	800bae4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	7d1b      	ldrb	r3, [r3, #20]
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	da15      	bge.n	800ba54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	7858      	ldrb	r0, [r3, #1]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1a      	ldr	r2, [r3, #32]
 800ba36:	2301      	movs	r3, #1
 800ba38:	f7fd faee 	bl	8009018 <disk_write>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <f_sync+0x54>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e04f      	b.n	800bae6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7d1b      	ldrb	r3, [r3, #20]
 800ba4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ba54:	f7fd f8f8 	bl	8008c48 <get_fattime>
 800ba58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7fd fdc6 	bl	80095f4 <move_window>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d138      	bne.n	800bae4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	330b      	adds	r3, #11
 800ba7c:	781a      	ldrb	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	330b      	adds	r3, #11
 800ba82:	f042 0220 	orr.w	r2, r2, #32
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	461a      	mov	r2, r3
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	f7fe fb51 	bl	800a13c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f103 021c 	add.w	r2, r3, #28
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fd fb4a 	bl	8009140 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3316      	adds	r3, #22
 800bab0:	6939      	ldr	r1, [r7, #16]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fd fb44 	bl	8009140 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3312      	adds	r3, #18
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd fb23 	bl	800910a <st_word>
					fs->wflag = 1;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2201      	movs	r2, #1
 800bac8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fd fdbf 	bl	8009650 <sync_fs>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	7d1b      	ldrb	r3, [r3, #20]
 800bada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff ff7b 	bl	800b9f2 <f_sync>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d118      	bne.n	800bb38 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f107 0208 	add.w	r2, r7, #8
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fbbc 	bl	800b28c <validate>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10c      	bne.n	800bb38 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd fcc2 	bl	80094ac <dec_lock>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b092      	sub	sp, #72	@ 0x48
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bb4e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bb52:	f107 030c 	add.w	r3, r7, #12
 800bb56:	2200      	movs	r2, #0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff f917 	bl	800ad8c <find_volume>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800bb64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f040 8099 	bne.w	800bca0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bb6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb76:	699a      	ldr	r2, [r3, #24]
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	3b02      	subs	r3, #2
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d804      	bhi.n	800bb8c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb84:	699a      	ldr	r2, [r3, #24]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	e089      	b.n	800bca0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d128      	bne.n	800bbea <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bba0:	f107 0314 	add.w	r3, r7, #20
 800bba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd fde1 	bl	800976e <get_fat>
 800bbac:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d103      	bne.n	800bbbe <f_getfree+0x7c>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bbbc:	e063      	b.n	800bc86 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d103      	bne.n	800bbcc <f_getfree+0x8a>
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bbca:	e05c      	b.n	800bc86 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <f_getfree+0x96>
 800bbd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbda:	3301      	adds	r3, #1
 800bbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d3db      	bcc.n	800bba0 <f_getfree+0x5e>
 800bbe8:	e04d      	b.n	800bc86 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf4:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d113      	bne.n	800bc2c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bc04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	f7fd fcf1 	bl	80095f4 <move_window>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800bc18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d131      	bne.n	800bc84 <f_getfree+0x142>
							p = fs->win;
 800bc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc22:	3338      	adds	r3, #56	@ 0x38
 800bc24:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	899b      	ldrh	r3, [r3, #12]
 800bc2a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d10f      	bne.n	800bc54 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bc34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc36:	f7fd fa2d 	bl	8009094 <ld_word>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <f_getfree+0x104>
 800bc40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc42:	3301      	adds	r3, #1
 800bc44:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	3302      	adds	r3, #2
 800bc4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4e:	3b02      	subs	r3, #2
 800bc50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc52:	e010      	b.n	800bc76 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bc54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc56:	f7fd fa35 	bl	80090c4 <ld_dword>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <f_getfree+0x128>
 800bc64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc66:	3301      	adds	r3, #1
 800bc68:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc72:	3b04      	subs	r3, #4
 800bc74:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800bc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1bd      	bne.n	800bbfe <f_getfree+0xbc>
 800bc82:	e000      	b.n	800bc86 <f_getfree+0x144>
							if (res != FR_OK) break;
 800bc84:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc8a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc90:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc94:	791a      	ldrb	r2, [r3, #4]
 800bc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc98:	f042 0201 	orr.w	r2, r2, #1
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bca0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3748      	adds	r7, #72	@ 0x48
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bcc2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcc4:	7a5b      	ldrb	r3, [r3, #9]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d131      	bne.n	800bd30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bccc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcce:	7a5b      	ldrb	r3, [r3, #9]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcda:	4b19      	ldr	r3, [pc, #100]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcdc:	7a5b      	ldrb	r3, [r3, #9]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	4a17      	ldr	r2, [pc, #92]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bcea:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcec:	7a5b      	ldrb	r3, [r3, #9]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b13      	ldr	r3, [pc, #76]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcf4:	4413      	add	r3, r2
 800bcf6:	79fa      	ldrb	r2, [r7, #7]
 800bcf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcfa:	4b11      	ldr	r3, [pc, #68]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bcfc:	7a5b      	ldrb	r3, [r3, #9]
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	1c5a      	adds	r2, r3, #1
 800bd02:	b2d1      	uxtb	r1, r2
 800bd04:	4a0e      	ldr	r2, [pc, #56]	@ (800bd40 <FATFS_LinkDriverEx+0x94>)
 800bd06:	7251      	strb	r1, [r2, #9]
 800bd08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd0a:	7dbb      	ldrb	r3, [r7, #22]
 800bd0c:	3330      	adds	r3, #48	@ 0x30
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3301      	adds	r3, #1
 800bd18:	223a      	movs	r2, #58	@ 0x3a
 800bd1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	3302      	adds	r3, #2
 800bd20:	222f      	movs	r2, #47	@ 0x2f
 800bd22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	3303      	adds	r3, #3
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	200026d8 	.word	0x200026d8

0800bd44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd4e:	2200      	movs	r2, #0
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff ffaa 	bl	800bcac <FATFS_LinkDriverEx>
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd74:	d802      	bhi.n	800bd7c <ff_convert+0x18>
		c = chr;
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	81fb      	strh	r3, [r7, #14]
 800bd7a:	e025      	b.n	800bdc8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00b      	beq.n	800bd9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bd82:	88fb      	ldrh	r3, [r7, #6]
 800bd84:	2bff      	cmp	r3, #255	@ 0xff
 800bd86:	d805      	bhi.n	800bd94 <ff_convert+0x30>
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	3b80      	subs	r3, #128	@ 0x80
 800bd8c:	4a12      	ldr	r2, [pc, #72]	@ (800bdd8 <ff_convert+0x74>)
 800bd8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd92:	e000      	b.n	800bd96 <ff_convert+0x32>
 800bd94:	2300      	movs	r3, #0
 800bd96:	81fb      	strh	r3, [r7, #14]
 800bd98:	e016      	b.n	800bdc8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	81fb      	strh	r3, [r7, #14]
 800bd9e:	e009      	b.n	800bdb4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bda0:	89fb      	ldrh	r3, [r7, #14]
 800bda2:	4a0d      	ldr	r2, [pc, #52]	@ (800bdd8 <ff_convert+0x74>)
 800bda4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bda8:	88fa      	ldrh	r2, [r7, #6]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d006      	beq.n	800bdbc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bdae:	89fb      	ldrh	r3, [r7, #14]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	81fb      	strh	r3, [r7, #14]
 800bdb4:	89fb      	ldrh	r3, [r7, #14]
 800bdb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdb8:	d9f2      	bls.n	800bda0 <ff_convert+0x3c>
 800bdba:	e000      	b.n	800bdbe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bdbc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bdbe:	89fb      	ldrh	r3, [r7, #14]
 800bdc0:	3380      	adds	r3, #128	@ 0x80
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	08013874 	.word	0x08013874

0800bddc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bde6:	88fb      	ldrh	r3, [r7, #6]
 800bde8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdec:	d201      	bcs.n	800bdf2 <ff_wtoupper+0x16>
 800bdee:	4b3e      	ldr	r3, [pc, #248]	@ (800bee8 <ff_wtoupper+0x10c>)
 800bdf0:	e000      	b.n	800bdf4 <ff_wtoupper+0x18>
 800bdf2:	4b3e      	ldr	r3, [pc, #248]	@ (800beec <ff_wtoupper+0x110>)
 800bdf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	617a      	str	r2, [r7, #20]
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800be00:	8a7b      	ldrh	r3, [r7, #18]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d068      	beq.n	800bed8 <ff_wtoupper+0xfc>
 800be06:	88fa      	ldrh	r2, [r7, #6]
 800be08:	8a7b      	ldrh	r3, [r7, #18]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d364      	bcc.n	800bed8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	1c9a      	adds	r2, r3, #2
 800be12:	617a      	str	r2, [r7, #20]
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	823b      	strh	r3, [r7, #16]
 800be18:	8a3b      	ldrh	r3, [r7, #16]
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	81fb      	strh	r3, [r7, #14]
 800be1e:	8a3b      	ldrh	r3, [r7, #16]
 800be20:	b2db      	uxtb	r3, r3
 800be22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800be24:	88fa      	ldrh	r2, [r7, #6]
 800be26:	8a79      	ldrh	r1, [r7, #18]
 800be28:	8a3b      	ldrh	r3, [r7, #16]
 800be2a:	440b      	add	r3, r1
 800be2c:	429a      	cmp	r2, r3
 800be2e:	da49      	bge.n	800bec4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800be30:	89fb      	ldrh	r3, [r7, #14]
 800be32:	2b08      	cmp	r3, #8
 800be34:	d84f      	bhi.n	800bed6 <ff_wtoupper+0xfa>
 800be36:	a201      	add	r2, pc, #4	@ (adr r2, 800be3c <ff_wtoupper+0x60>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be61 	.word	0x0800be61
 800be40:	0800be73 	.word	0x0800be73
 800be44:	0800be89 	.word	0x0800be89
 800be48:	0800be91 	.word	0x0800be91
 800be4c:	0800be99 	.word	0x0800be99
 800be50:	0800bea1 	.word	0x0800bea1
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800beb1 	.word	0x0800beb1
 800be5c:	0800beb9 	.word	0x0800beb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800be60:	88fa      	ldrh	r2, [r7, #6]
 800be62:	8a7b      	ldrh	r3, [r7, #18]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4413      	add	r3, r2
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	80fb      	strh	r3, [r7, #6]
 800be70:	e027      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800be72:	88fa      	ldrh	r2, [r7, #6]
 800be74:	8a7b      	ldrh	r3, [r7, #18]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	b29b      	uxth	r3, r3
 800be80:	88fa      	ldrh	r2, [r7, #6]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	80fb      	strh	r3, [r7, #6]
 800be86:	e01c      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	3b10      	subs	r3, #16
 800be8c:	80fb      	strh	r3, [r7, #6]
 800be8e:	e018      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800be90:	88fb      	ldrh	r3, [r7, #6]
 800be92:	3b20      	subs	r3, #32
 800be94:	80fb      	strh	r3, [r7, #6]
 800be96:	e014      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800be98:	88fb      	ldrh	r3, [r7, #6]
 800be9a:	3b30      	subs	r3, #48	@ 0x30
 800be9c:	80fb      	strh	r3, [r7, #6]
 800be9e:	e010      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	3b1a      	subs	r3, #26
 800bea4:	80fb      	strh	r3, [r7, #6]
 800bea6:	e00c      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	3308      	adds	r3, #8
 800beac:	80fb      	strh	r3, [r7, #6]
 800beae:	e008      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	3b50      	subs	r3, #80	@ 0x50
 800beb4:	80fb      	strh	r3, [r7, #6]
 800beb6:	e004      	b.n	800bec2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800bebe:	80fb      	strh	r3, [r7, #6]
 800bec0:	bf00      	nop
			}
			break;
 800bec2:	e008      	b.n	800bed6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bec4:	89fb      	ldrh	r3, [r7, #14]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d195      	bne.n	800bdf6 <ff_wtoupper+0x1a>
 800beca:	8a3b      	ldrh	r3, [r7, #16]
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4413      	add	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bed4:	e78f      	b.n	800bdf6 <ff_wtoupper+0x1a>
			break;
 800bed6:	bf00      	nop
	}

	return chr;
 800bed8:	88fb      	ldrh	r3, [r7, #6]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	08013974 	.word	0x08013974
 800beec:	08013b68 	.word	0x08013b68

0800bef0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f002 ff43 	bl	800ed84 <malloc>
 800befe:	4603      	mov	r3, r0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f002 ff3f 	bl	800ed94 <free>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f103 0208 	add.w	r2, r3, #8
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295
 800bf36:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f103 0208 	add.w	r2, r3, #8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f103 0208 	add.w	r2, r3, #8
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	689a      	ldr	r2, [r3, #8]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	601a      	str	r2, [r3, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd6:	d103      	bne.n	800bfe0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	60fb      	str	r3, [r7, #12]
 800bfde:	e00c      	b.n	800bffa <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e002      	b.n	800bfee <vListInsert+0x2e>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d2f6      	bcs.n	800bfe8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	685a      	ldr	r2, [r3, #4]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	601a      	str	r2, [r3, #0]
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6892      	ldr	r2, [r2, #8]
 800c048:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	6852      	ldr	r2, [r2, #4]
 800c052:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d103      	bne.n	800c066 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1e5a      	subs	r2, r3, #1
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	e7fd      	b.n	800c0b0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800c0b4:	f002 fb3a 	bl	800e72c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c0:	68f9      	ldr	r1, [r7, #12]
 800c0c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0c4:	fb01 f303 	mul.w	r3, r1, r3
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	68f9      	ldr	r1, [r7, #12]
 800c0e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0ea:	fb01 f303 	mul.w	r3, r1, r3
 800c0ee:	441a      	add	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	22ff      	movs	r2, #255	@ 0xff
 800c0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	22ff      	movs	r2, #255	@ 0xff
 800c100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d114      	bne.n	800c134 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d01a      	beq.n	800c148 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3310      	adds	r3, #16
 800c116:	4618      	mov	r0, r3
 800c118:	f001 f952 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d012      	beq.n	800c148 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800c122:	4b0d      	ldr	r3, [pc, #52]	@ (800c158 <xQueueGenericReset+0xd0>)
 800c124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	e009      	b.n	800c148 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3310      	adds	r3, #16
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff fef0 	bl	800bf1e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3324      	adds	r3, #36	@ 0x24
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff feeb 	bl	800bf1e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800c148:	f002 fb22 	bl	800e790 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800c14c:	2301      	movs	r3, #1
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08c      	sub	sp, #48	@ 0x30
 800c160:	af02      	add	r7, sp, #8
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	4613      	mov	r3, r2
 800c168:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10b      	bne.n	800c188 <xQueueGenericCreate+0x2c>
        __asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	61bb      	str	r3, [r7, #24]
    }
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	fb02 f303 	mul.w	r3, r2, r3
 800c190:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d006      	beq.n	800c1a6 <xQueueGenericCreate+0x4a>
 800c198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d101      	bne.n	800c1aa <xQueueGenericCreate+0x4e>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <xQueueGenericCreate+0x50>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10b      	bne.n	800c1c8 <xQueueGenericCreate+0x6c>
        __asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	617b      	str	r3, [r7, #20]
    }
 800c1c2:	bf00      	nop
 800c1c4:	bf00      	nop
 800c1c6:	e7fd      	b.n	800c1c4 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ca:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c1ce:	d90b      	bls.n	800c1e8 <xQueueGenericCreate+0x8c>
        __asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	613b      	str	r3, [r7, #16]
    }
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	e7fd      	b.n	800c1e4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ea:	3350      	adds	r3, #80	@ 0x50
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f002 fbc7 	bl	800e980 <pvPortMalloc>
 800c1f2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00d      	beq.n	800c216 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	3350      	adds	r3, #80	@ 0x50
 800c202:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c204:	79fa      	ldrb	r2, [r7, #7]
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	4613      	mov	r3, r2
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 f805 	bl	800c220 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c216:	6a3b      	ldr	r3, [r7, #32]
    }
 800c218:	4618      	mov	r0, r3
 800c21a:	3728      	adds	r7, #40	@ 0x28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d103      	bne.n	800c23c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e002      	b.n	800c242 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c24e:	2101      	movs	r1, #1
 800c250:	69b8      	ldr	r0, [r7, #24]
 800c252:	f7ff ff19 	bl	800c088 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	78fa      	ldrb	r2, [r7, #3]
 800c25a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c25e:	bf00      	nop
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	@ 0x38
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c276:	2300      	movs	r3, #0
 800c278:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800c27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10b      	bne.n	800c29c <xQueueGenericSend+0x34>
        __asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800c296:	bf00      	nop
 800c298:	bf00      	nop
 800c29a:	e7fd      	b.n	800c298 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d103      	bne.n	800c2aa <xQueueGenericSend+0x42>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <xQueueGenericSend+0x46>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <xQueueGenericSend+0x48>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10b      	bne.n	800c2cc <xQueueGenericSend+0x64>
        __asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800c2c6:	bf00      	nop
 800c2c8:	bf00      	nop
 800c2ca:	e7fd      	b.n	800c2c8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d103      	bne.n	800c2da <xQueueGenericSend+0x72>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d101      	bne.n	800c2de <xQueueGenericSend+0x76>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e000      	b.n	800c2e0 <xQueueGenericSend+0x78>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10b      	bne.n	800c2fc <xQueueGenericSend+0x94>
        __asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	623b      	str	r3, [r7, #32]
    }
 800c2f6:	bf00      	nop
 800c2f8:	bf00      	nop
 800c2fa:	e7fd      	b.n	800c2f8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2fc:	f001 fa00 	bl	800d700 <xTaskGetSchedulerState>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <xQueueGenericSend+0xa4>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <xQueueGenericSend+0xa8>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <xQueueGenericSend+0xaa>
 800c310:	2300      	movs	r3, #0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d10b      	bne.n	800c32e <xQueueGenericSend+0xc6>
        __asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	61fb      	str	r3, [r7, #28]
    }
 800c328:	bf00      	nop
 800c32a:	bf00      	nop
 800c32c:	e7fd      	b.n	800c32a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c32e:	f002 f9fd 	bl	800e72c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d302      	bcc.n	800c344 <xQueueGenericSend+0xdc>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b02      	cmp	r3, #2
 800c342:	d129      	bne.n	800c398 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c34a:	f000 fab1 	bl	800c8b0 <prvCopyDataToQueue>
 800c34e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d010      	beq.n	800c37a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35a:	3324      	adds	r3, #36	@ 0x24
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 f82f 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d013      	beq.n	800c390 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800c368:	4b3f      	ldr	r3, [pc, #252]	@ (800c468 <xQueueGenericSend+0x200>)
 800c36a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	e00a      	b.n	800c390 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c380:	4b39      	ldr	r3, [pc, #228]	@ (800c468 <xQueueGenericSend+0x200>)
 800c382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c390:	f002 f9fe 	bl	800e790 <vPortExitCritical>
                return pdPASS;
 800c394:	2301      	movs	r3, #1
 800c396:	e063      	b.n	800c460 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c39e:	f002 f9f7 	bl	800e790 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e05c      	b.n	800c460 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ac:	f107 0314 	add.w	r3, r7, #20
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f001 f869 	bl	800d488 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c3ba:	f002 f9e9 	bl	800e790 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c3be:	f000 fddb 	bl	800cf78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c3c2:	f002 f9b3 	bl	800e72c <vPortEnterCritical>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3cc:	b25b      	sxtb	r3, r3
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d2:	d103      	bne.n	800c3dc <xQueueGenericSend+0x174>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e8:	d103      	bne.n	800c3f2 <xQueueGenericSend+0x18a>
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3f2:	f002 f9cd 	bl	800e790 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3f6:	1d3a      	adds	r2, r7, #4
 800c3f8:	f107 0314 	add.w	r3, r7, #20
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 f858 	bl	800d4b4 <xTaskCheckForTimeOut>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d124      	bne.n	800c454 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c40a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c40c:	f000 fb48 	bl	800caa0 <prvIsQueueFull>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d018      	beq.n	800c448 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c418:	3310      	adds	r3, #16
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4611      	mov	r1, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 ff7c 	bl	800d31c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c426:	f000 fad3 	bl	800c9d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c42a:	f000 fdb3 	bl	800cf94 <xTaskResumeAll>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	f47f af7c 	bne.w	800c32e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800c436:	4b0c      	ldr	r3, [pc, #48]	@ (800c468 <xQueueGenericSend+0x200>)
 800c438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	e772      	b.n	800c32e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c44a:	f000 fac1 	bl	800c9d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c44e:	f000 fda1 	bl	800cf94 <xTaskResumeAll>
 800c452:	e76c      	b.n	800c32e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c456:	f000 fabb 	bl	800c9d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c45a:	f000 fd9b 	bl	800cf94 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c45e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c460:	4618      	mov	r0, r3
 800c462:	3738      	adds	r7, #56	@ 0x38
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b090      	sub	sp, #64	@ 0x40
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800c47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10b      	bne.n	800c49c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d103      	bne.n	800c4aa <xQueueGenericSendFromISR+0x3e>
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <xQueueGenericSendFromISR+0x42>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e000      	b.n	800c4b0 <xQueueGenericSendFromISR+0x44>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10b      	bne.n	800c4cc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	e7fd      	b.n	800c4c8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d103      	bne.n	800c4da <xQueueGenericSendFromISR+0x6e>
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d101      	bne.n	800c4de <xQueueGenericSendFromISR+0x72>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e000      	b.n	800c4e0 <xQueueGenericSendFromISR+0x74>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	623b      	str	r3, [r7, #32]
    }
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	e7fd      	b.n	800c4f8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4fc:	f002 f9fe 	bl	800e8fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800c500:	f3ef 8211 	mrs	r2, BASEPRI
 800c504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	61fa      	str	r2, [r7, #28]
 800c516:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800c518:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c51a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c524:	429a      	cmp	r2, r3
 800c526:	d302      	bcc.n	800c52e <xQueueGenericSendFromISR+0xc2>
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d13f      	bne.n	800c5ae <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c534:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	68b9      	ldr	r1, [r7, #8]
 800c542:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c544:	f000 f9b4 	bl	800c8b0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c548:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c550:	d112      	bne.n	800c578 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c556:	2b00      	cmp	r3, #0
 800c558:	d026      	beq.n	800c5a8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55c:	3324      	adds	r3, #36	@ 0x24
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 ff2e 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d01e      	beq.n	800c5a8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d01b      	beq.n	800c5a8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	e017      	b.n	800c5a8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800c578:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c57c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c57e:	d10b      	bne.n	800c598 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	617b      	str	r3, [r7, #20]
    }
 800c592:	bf00      	nop
 800c594:	bf00      	nop
 800c596:	e7fd      	b.n	800c594 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c598:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c59c:	3301      	adds	r3, #1
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	b25a      	sxtb	r2, r3
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800c5ac:	e001      	b.n	800c5b2 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800c5bc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800c5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3740      	adds	r7, #64	@ 0x40
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08c      	sub	sp, #48	@ 0x30
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10b      	bne.n	800c5fa <xQueueReceive+0x32>
        __asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	623b      	str	r3, [r7, #32]
    }
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop
 800c5f8:	e7fd      	b.n	800c5f6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d103      	bne.n	800c608 <xQueueReceive+0x40>
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <xQueueReceive+0x44>
 800c608:	2301      	movs	r3, #1
 800c60a:	e000      	b.n	800c60e <xQueueReceive+0x46>
 800c60c:	2300      	movs	r3, #0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10b      	bne.n	800c62a <xQueueReceive+0x62>
        __asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	61fb      	str	r3, [r7, #28]
    }
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c62a:	f001 f869 	bl	800d700 <xTaskGetSchedulerState>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d102      	bne.n	800c63a <xQueueReceive+0x72>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <xQueueReceive+0x76>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <xQueueReceive+0x78>
 800c63e:	2300      	movs	r3, #0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10b      	bne.n	800c65c <xQueueReceive+0x94>
        __asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	61bb      	str	r3, [r7, #24]
    }
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	e7fd      	b.n	800c658 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c65c:	f002 f866 	bl	800e72c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c664:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01f      	beq.n	800c6ac <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c66c:	68b9      	ldr	r1, [r7, #8]
 800c66e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c670:	f000 f988 	bl	800c984 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	1e5a      	subs	r2, r3, #1
 800c678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00f      	beq.n	800c6a4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c686:	3310      	adds	r3, #16
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fe99 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d007      	beq.n	800c6a4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c694:	4b3c      	ldr	r3, [pc, #240]	@ (800c788 <xQueueReceive+0x1c0>)
 800c696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c6a4:	f002 f874 	bl	800e790 <vPortExitCritical>
                return pdPASS;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e069      	b.n	800c780 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c6b2:	f002 f86d 	bl	800e790 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e062      	b.n	800c780 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c6c0:	f107 0310 	add.w	r3, r7, #16
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 fedf 	bl	800d488 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c6ce:	f002 f85f 	bl	800e790 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c6d2:	f000 fc51 	bl	800cf78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c6d6:	f002 f829 	bl	800e72c <vPortEnterCritical>
 800c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6e0:	b25b      	sxtb	r3, r3
 800c6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e6:	d103      	bne.n	800c6f0 <xQueueReceive+0x128>
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6f6:	b25b      	sxtb	r3, r3
 800c6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fc:	d103      	bne.n	800c706 <xQueueReceive+0x13e>
 800c6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c706:	f002 f843 	bl	800e790 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c70a:	1d3a      	adds	r2, r7, #4
 800c70c:	f107 0310 	add.w	r3, r7, #16
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fece 	bl	800d4b4 <xTaskCheckForTimeOut>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d123      	bne.n	800c766 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c71e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c720:	f000 f9a8 	bl	800ca74 <prvIsQueueEmpty>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d017      	beq.n	800c75a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	3324      	adds	r3, #36	@ 0x24
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fdf2 	bl	800d31c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c73a:	f000 f949 	bl	800c9d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c73e:	f000 fc29 	bl	800cf94 <xTaskResumeAll>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d189      	bne.n	800c65c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800c748:	4b0f      	ldr	r3, [pc, #60]	@ (800c788 <xQueueReceive+0x1c0>)
 800c74a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	e780      	b.n	800c65c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c75a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c75c:	f000 f938 	bl	800c9d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c760:	f000 fc18 	bl	800cf94 <xTaskResumeAll>
 800c764:	e77a      	b.n	800c65c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c768:	f000 f932 	bl	800c9d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c76c:	f000 fc12 	bl	800cf94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c772:	f000 f97f 	bl	800ca74 <prvIsQueueEmpty>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f43f af6f 	beq.w	800c65c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c77e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c780:	4618      	mov	r0, r3
 800c782:	3730      	adds	r7, #48	@ 0x30
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b090      	sub	sp, #64	@ 0x40
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10b      	bne.n	800c7ba <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <xQueueReceiveFromISR+0x3c>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <xQueueReceiveFromISR+0x40>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e000      	b.n	800c7ce <xQueueReceiveFromISR+0x42>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10b      	bne.n	800c7ea <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop
 800c7e8:	e7fd      	b.n	800c7e6 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ea:	f002 f887 	bl	800e8fc <vPortValidateInterruptPriority>
        __asm volatile
 800c7ee:	f3ef 8211 	mrs	r2, BASEPRI
 800c7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	623a      	str	r2, [r7, #32]
 800c804:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800c806:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c808:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c80e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c812:	2b00      	cmp	r3, #0
 800c814:	d03f      	beq.n	800c896 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c81c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c824:	f000 f8ae 	bl	800c984 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	1e5a      	subs	r2, r3, #1
 800c82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800c830:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d112      	bne.n	800c860 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d026      	beq.n	800c890 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c844:	3310      	adds	r3, #16
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fdba 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d01e      	beq.n	800c890 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01b      	beq.n	800c890 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e017      	b.n	800c890 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800c860:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c864:	2b7f      	cmp	r3, #127	@ 0x7f
 800c866:	d10b      	bne.n	800c880 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61bb      	str	r3, [r7, #24]
    }
 800c87a:	bf00      	nop
 800c87c:	bf00      	nop
 800c87e:	e7fd      	b.n	800c87c <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c880:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c884:	3301      	adds	r3, #1
 800c886:	b2db      	uxtb	r3, r3
 800c888:	b25a      	sxtb	r2, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800c890:	2301      	movs	r3, #1
 800c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c894:	e001      	b.n	800c89a <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 800c896:	2300      	movs	r3, #0
 800c898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f383 8811 	msr	BASEPRI, r3
    }
 800c8a4:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3740      	adds	r7, #64	@ 0x40
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10d      	bne.n	800c8ea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d14d      	bne.n	800c972 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 ff2e 	bl	800d73c <xTaskPriorityDisinherit>
 800c8e0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	609a      	str	r2, [r3, #8]
 800c8e8:	e043      	b.n	800c972 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d119      	bne.n	800c924 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6858      	ldr	r0, [r3, #4]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	f003 f939 	bl	800fb72 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	441a      	add	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	429a      	cmp	r2, r3
 800c918:	d32b      	bcc.n	800c972 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	605a      	str	r2, [r3, #4]
 800c922:	e026      	b.n	800c972 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68d8      	ldr	r0, [r3, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c92c:	461a      	mov	r2, r3
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	f003 f91f 	bl	800fb72 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	68da      	ldr	r2, [r3, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93c:	425b      	negs	r3, r3
 800c93e:	441a      	add	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d207      	bcs.n	800c960 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	689a      	ldr	r2, [r3, #8]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c958:	425b      	negs	r3, r3
 800c95a:	441a      	add	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d105      	bne.n	800c972 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3b01      	subs	r3, #1
 800c970:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800c97a:	697b      	ldr	r3, [r7, #20]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c992:	2b00      	cmp	r3, #0
 800c994:	d018      	beq.n	800c9c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c99e:	441a      	add	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68da      	ldr	r2, [r3, #12]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d303      	bcc.n	800c9b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68d9      	ldr	r1, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6838      	ldr	r0, [r7, #0]
 800c9c4:	f003 f8d5 	bl	800fb72 <memcpy>
    }
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800c9d8:	f001 fea8 	bl	800e72c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e4:	e011      	b.n	800ca0a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d012      	beq.n	800ca14 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	3324      	adds	r3, #36	@ 0x24
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 fce4 	bl	800d3c0 <xTaskRemoveFromEventList>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800c9fe:	f000 fdc1 	bl	800d584 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
 800ca04:	3b01      	subs	r3, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	dce9      	bgt.n	800c9e6 <prvUnlockQueue+0x16>
 800ca12:	e000      	b.n	800ca16 <prvUnlockQueue+0x46>
                        break;
 800ca14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	22ff      	movs	r2, #255	@ 0xff
 800ca1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800ca1e:	f001 feb7 	bl	800e790 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800ca22:	f001 fe83 	bl	800e72c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca2e:	e011      	b.n	800ca54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d012      	beq.n	800ca5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3310      	adds	r3, #16
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 fcbf 	bl	800d3c0 <xTaskRemoveFromEventList>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800ca48:	f000 fd9c 	bl	800d584 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	dce9      	bgt.n	800ca30 <prvUnlockQueue+0x60>
 800ca5c:	e000      	b.n	800ca60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800ca5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	22ff      	movs	r2, #255	@ 0xff
 800ca64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800ca68:	f001 fe92 	bl	800e790 <vPortExitCritical>
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800ca7c:	f001 fe56 	bl	800e72c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	e001      	b.n	800ca92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800ca92:	f001 fe7d 	bl	800e790 <vPortExitCritical>

    return xReturn;
 800ca96:	68fb      	ldr	r3, [r7, #12]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800caa8:	f001 fe40 	bl	800e72c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d102      	bne.n	800cabe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cab8:	2301      	movs	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	e001      	b.n	800cac2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cabe:	2300      	movs	r3, #0
 800cac0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cac2:	f001 fe65 	bl	800e790 <vPortExitCritical>

    return xReturn;
 800cac6:	68fb      	ldr	r3, [r7, #12]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800cad0:	b480      	push	{r7}
 800cad2:	b087      	sub	sp, #28
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10b      	bne.n	800cafa <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60fb      	str	r3, [r7, #12]
    }
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d102      	bne.n	800cb0c <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800cb06:	2301      	movs	r3, #1
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e001      	b.n	800cb10 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cb10:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb12:	4618      	mov	r0, r3
 800cb14:	371c      	adds	r7, #28
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
	...

0800cb20 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e014      	b.n	800cb5a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb30:	4a0f      	ldr	r2, [pc, #60]	@ (800cb70 <vQueueAddToRegistry+0x50>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb3c:	490c      	ldr	r1, [pc, #48]	@ (800cb70 <vQueueAddToRegistry+0x50>)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800cb46:	4a0a      	ldr	r2, [pc, #40]	@ (800cb70 <vQueueAddToRegistry+0x50>)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	4413      	add	r3, r2
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800cb52:	e006      	b.n	800cb62 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3301      	adds	r3, #1
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b07      	cmp	r3, #7
 800cb5e:	d9e7      	bls.n	800cb30 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800cb60:	bf00      	nop
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	200026e4 	.word	0x200026e4

0800cb74 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800cb84:	f001 fdd2 	bl	800e72c <vPortEnterCritical>
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb8e:	b25b      	sxtb	r3, r3
 800cb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb94:	d103      	bne.n	800cb9e <vQueueWaitForMessageRestricted+0x2a>
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cba4:	b25b      	sxtb	r3, r3
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d103      	bne.n	800cbb4 <vQueueWaitForMessageRestricted+0x40>
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbb4:	f001 fdec 	bl	800e790 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d106      	bne.n	800cbce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	3324      	adds	r3, #36	@ 0x24
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fbcd 	bl	800d368 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800cbce:	6978      	ldr	r0, [r7, #20]
 800cbd0:	f7ff fefe 	bl	800c9d0 <prvUnlockQueue>
    }
 800cbd4:	bf00      	nop
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08c      	sub	sp, #48	@ 0x30
 800cbe0:	af04      	add	r7, sp, #16
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbec:	88fb      	ldrh	r3, [r7, #6]
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fec5 	bl	800e980 <pvPortMalloc>
 800cbf6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbfe:	2058      	movs	r0, #88	@ 0x58
 800cc00:	f001 febe 	bl	800e980 <pvPortMalloc>
 800cc04:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc12:	e005      	b.n	800cc20 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800cc14:	6978      	ldr	r0, [r7, #20]
 800cc16:	f001 ff95 	bl	800eb44 <vPortFree>
 800cc1a:	e001      	b.n	800cc20 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d013      	beq.n	800cc4e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc26:	88fa      	ldrh	r2, [r7, #6]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	9302      	str	r3, [sp, #8]
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	68b9      	ldr	r1, [r7, #8]
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 f80e 	bl	800cc5e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800cc42:	69f8      	ldr	r0, [r7, #28]
 800cc44:	f000 f8a2 	bl	800cd8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	61bb      	str	r3, [r7, #24]
 800cc4c:	e002      	b.n	800cc54 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800cc54:	69bb      	ldr	r3, [r7, #24]
    }
 800cc56:	4618      	mov	r0, r3
 800cc58:	3720      	adds	r7, #32
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b088      	sub	sp, #32
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	461a      	mov	r2, r3
 800cc76:	21a5      	movs	r1, #165	@ 0xa5
 800cc78:	f002 feeb 	bl	800fa52 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc86:	3b01      	subs	r3, #1
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	f003 0307 	and.w	r3, r3, #7
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	617b      	str	r3, [r7, #20]
    }
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01f      	beq.n	800ccfe <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	e012      	b.n	800ccea <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	4413      	add	r3, r2
 800ccca:	7819      	ldrb	r1, [r3, #0]
 800cccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	3334      	adds	r3, #52	@ 0x34
 800ccd4:	460a      	mov	r2, r1
 800ccd6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	4413      	add	r3, r2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d9e9      	bls.n	800ccc4 <prvInitialiseNewTask+0x66>
 800ccf0:	e000      	b.n	800ccf4 <prvInitialiseNewTask+0x96>
            {
                break;
 800ccf2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ccfc:	e003      	b.n	800cd06 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd08:	2b04      	cmp	r3, #4
 800cd0a:	d901      	bls.n	800cd10 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd0c:	2304      	movs	r3, #4
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd14:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd1a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1e:	2200      	movs	r2, #0
 800cd20:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	3304      	adds	r3, #4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff f919 	bl	800bf5e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2e:	3318      	adds	r3, #24
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff f914 	bl	800bf5e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd3a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	f1c3 0205 	rsb	r2, r3, #5
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	3350      	adds	r3, #80	@ 0x50
 800cd50:	2204      	movs	r2, #4
 800cd52:	2100      	movs	r1, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f002 fe7c 	bl	800fa52 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	3354      	adds	r3, #84	@ 0x54
 800cd5e:	2201      	movs	r2, #1
 800cd60:	2100      	movs	r1, #0
 800cd62:	4618      	mov	r0, r3
 800cd64:	f002 fe75 	bl	800fa52 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	69b8      	ldr	r0, [r7, #24]
 800cd6e:	f001 fbad 	bl	800e4cc <pxPortInitialiseStack>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd76:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800cd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd82:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cd84:	bf00      	nop
 800cd86:	3720      	adds	r7, #32
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800cd94:	f001 fcca 	bl	800e72c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800cd98:	4b2c      	ldr	r3, [pc, #176]	@ (800ce4c <prvAddNewTaskToReadyList+0xc0>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	4a2b      	ldr	r2, [pc, #172]	@ (800ce4c <prvAddNewTaskToReadyList+0xc0>)
 800cda0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800cda2:	4b2b      	ldr	r3, [pc, #172]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800cdaa:	4a29      	ldr	r2, [pc, #164]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdb0:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <prvAddNewTaskToReadyList+0xc0>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d110      	bne.n	800cdda <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800cdb8:	f000 fc08 	bl	800d5cc <prvInitialiseTaskLists>
 800cdbc:	e00d      	b.n	800cdda <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800cdbe:	4b25      	ldr	r3, [pc, #148]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d109      	bne.n	800cdda <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdc6:	4b22      	ldr	r3, [pc, #136]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d802      	bhi.n	800cdda <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800cdd4:	4a1e      	ldr	r2, [pc, #120]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800cdda:	4b1f      	ldr	r3, [pc, #124]	@ (800ce58 <prvAddNewTaskToReadyList+0xcc>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	4a1d      	ldr	r2, [pc, #116]	@ (800ce58 <prvAddNewTaskToReadyList+0xcc>)
 800cde2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cde4:	4b1c      	ldr	r3, [pc, #112]	@ (800ce58 <prvAddNewTaskToReadyList+0xcc>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	409a      	lsls	r2, r3
 800cdf4:	4b19      	ldr	r3, [pc, #100]	@ (800ce5c <prvAddNewTaskToReadyList+0xd0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	4a18      	ldr	r2, [pc, #96]	@ (800ce5c <prvAddNewTaskToReadyList+0xd0>)
 800cdfc:	6013      	str	r3, [r2, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4a15      	ldr	r2, [pc, #84]	@ (800ce60 <prvAddNewTaskToReadyList+0xd4>)
 800ce0c:	441a      	add	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3304      	adds	r3, #4
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f7ff f8af 	bl	800bf78 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800ce1a:	f001 fcb9 	bl	800e790 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800ce1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00e      	beq.n	800ce44 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce26:	4b0a      	ldr	r3, [pc, #40]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d207      	bcs.n	800ce44 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800ce34:	4b0b      	ldr	r3, [pc, #44]	@ (800ce64 <prvAddNewTaskToReadyList+0xd8>)
 800ce36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	200027fc 	.word	0x200027fc
 800ce50:	20002724 	.word	0x20002724
 800ce54:	20002808 	.word	0x20002808
 800ce58:	20002818 	.word	0x20002818
 800ce5c:	20002804 	.word	0x20002804
 800ce60:	20002728 	.word	0x20002728
 800ce64:	e000ed04 	.word	0xe000ed04

0800ce68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d018      	beq.n	800ceac <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800ce7a:	4b14      	ldr	r3, [pc, #80]	@ (800cecc <vTaskDelay+0x64>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00b      	beq.n	800ce9a <vTaskDelay+0x32>
        __asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	60bb      	str	r3, [r7, #8]
    }
 800ce94:	bf00      	nop
 800ce96:	bf00      	nop
 800ce98:	e7fd      	b.n	800ce96 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800ce9a:	f000 f86d 	bl	800cf78 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce9e:	2100      	movs	r1, #0
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 ff31 	bl	800dd08 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800cea6:	f000 f875 	bl	800cf94 <xTaskResumeAll>
 800ceaa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d107      	bne.n	800cec2 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 800ceb2:	4b07      	ldr	r3, [pc, #28]	@ (800ced0 <vTaskDelay+0x68>)
 800ceb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800cec2:	bf00      	nop
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20002824 	.word	0x20002824
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800ceda:	4b20      	ldr	r3, [pc, #128]	@ (800cf5c <vTaskStartScheduler+0x88>)
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	2300      	movs	r3, #0
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	2300      	movs	r3, #0
 800cee4:	2282      	movs	r2, #130	@ 0x82
 800cee6:	491e      	ldr	r1, [pc, #120]	@ (800cf60 <vTaskStartScheduler+0x8c>)
 800cee8:	481e      	ldr	r0, [pc, #120]	@ (800cf64 <vTaskStartScheduler+0x90>)
 800ceea:	f7ff fe77 	bl	800cbdc <xTaskCreate>
 800ceee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d102      	bne.n	800cefc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800cef6:	f000 ff6d 	bl	800ddd4 <xTimerCreateTimerTask>
 800cefa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d116      	bne.n	800cf30 <vTaskStartScheduler+0x5c>
        __asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	60bb      	str	r3, [r7, #8]
    }
 800cf14:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800cf16:	4b14      	ldr	r3, [pc, #80]	@ (800cf68 <vTaskStartScheduler+0x94>)
 800cf18:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800cf1e:	4b13      	ldr	r3, [pc, #76]	@ (800cf6c <vTaskStartScheduler+0x98>)
 800cf20:	2201      	movs	r2, #1
 800cf22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf24:	4b12      	ldr	r3, [pc, #72]	@ (800cf70 <vTaskStartScheduler+0x9c>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800cf2a:	f001 fb5b 	bl	800e5e4 <xPortStartScheduler>
 800cf2e:	e00f      	b.n	800cf50 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf36:	d10b      	bne.n	800cf50 <vTaskStartScheduler+0x7c>
        __asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	607b      	str	r3, [r7, #4]
    }
 800cf4a:	bf00      	nop
 800cf4c:	bf00      	nop
 800cf4e:	e7fd      	b.n	800cf4c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800cf50:	4b08      	ldr	r3, [pc, #32]	@ (800cf74 <vTaskStartScheduler+0xa0>)
 800cf52:	681b      	ldr	r3, [r3, #0]
}
 800cf54:	bf00      	nop
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20002820 	.word	0x20002820
 800cf60:	08013788 	.word	0x08013788
 800cf64:	0800d59d 	.word	0x0800d59d
 800cf68:	2000281c 	.word	0x2000281c
 800cf6c:	20002808 	.word	0x20002808
 800cf70:	20002800 	.word	0x20002800
 800cf74:	20000010 	.word	0x20000010

0800cf78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800cf7c:	4b04      	ldr	r3, [pc, #16]	@ (800cf90 <vTaskSuspendAll+0x18>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	4a03      	ldr	r2, [pc, #12]	@ (800cf90 <vTaskSuspendAll+0x18>)
 800cf84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800cf86:	bf00      	nop
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	20002824 	.word	0x20002824

0800cf94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800cfa2:	4b42      	ldr	r3, [pc, #264]	@ (800d0ac <xTaskResumeAll+0x118>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10b      	bne.n	800cfc2 <xTaskResumeAll+0x2e>
        __asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	603b      	str	r3, [r7, #0]
    }
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	e7fd      	b.n	800cfbe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800cfc2:	f001 fbb3 	bl	800e72c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800cfc6:	4b39      	ldr	r3, [pc, #228]	@ (800d0ac <xTaskResumeAll+0x118>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	4a37      	ldr	r2, [pc, #220]	@ (800d0ac <xTaskResumeAll+0x118>)
 800cfce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfd0:	4b36      	ldr	r3, [pc, #216]	@ (800d0ac <xTaskResumeAll+0x118>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d161      	bne.n	800d09c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfd8:	4b35      	ldr	r3, [pc, #212]	@ (800d0b0 <xTaskResumeAll+0x11c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d05d      	beq.n	800d09c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfe0:	e02e      	b.n	800d040 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe2:	4b34      	ldr	r3, [pc, #208]	@ (800d0b4 <xTaskResumeAll+0x120>)
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3318      	adds	r3, #24
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff f81f 	bl	800c032 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff f81a 	bl	800c032 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d002:	2201      	movs	r2, #1
 800d004:	409a      	lsls	r2, r3
 800d006:	4b2c      	ldr	r3, [pc, #176]	@ (800d0b8 <xTaskResumeAll+0x124>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	4a2a      	ldr	r2, [pc, #168]	@ (800d0b8 <xTaskResumeAll+0x124>)
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d014:	4613      	mov	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4a27      	ldr	r2, [pc, #156]	@ (800d0bc <xTaskResumeAll+0x128>)
 800d01e:	441a      	add	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	3304      	adds	r3, #4
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	f7fe ffa6 	bl	800bf78 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d030:	4b23      	ldr	r3, [pc, #140]	@ (800d0c0 <xTaskResumeAll+0x12c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d036:	429a      	cmp	r2, r3
 800d038:	d302      	bcc.n	800d040 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800d03a:	4b22      	ldr	r3, [pc, #136]	@ (800d0c4 <xTaskResumeAll+0x130>)
 800d03c:	2201      	movs	r2, #1
 800d03e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d040:	4b1c      	ldr	r3, [pc, #112]	@ (800d0b4 <xTaskResumeAll+0x120>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1cc      	bne.n	800cfe2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d04e:	f000 fb3b 	bl	800d6c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d052:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c8 <xTaskResumeAll+0x134>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d010      	beq.n	800d080 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d05e:	f000 f847 	bl	800d0f0 <xTaskIncrementTick>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800d068:	4b16      	ldr	r3, [pc, #88]	@ (800d0c4 <xTaskResumeAll+0x130>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3b01      	subs	r3, #1
 800d072:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f1      	bne.n	800d05e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800d07a:	4b13      	ldr	r3, [pc, #76]	@ (800d0c8 <xTaskResumeAll+0x134>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d080:	4b10      	ldr	r3, [pc, #64]	@ (800d0c4 <xTaskResumeAll+0x130>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d009      	beq.n	800d09c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800d088:	2301      	movs	r3, #1
 800d08a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d08c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0cc <xTaskResumeAll+0x138>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d09c:	f001 fb78 	bl	800e790 <vPortExitCritical>

    return xAlreadyYielded;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20002824 	.word	0x20002824
 800d0b0:	200027fc 	.word	0x200027fc
 800d0b4:	200027bc 	.word	0x200027bc
 800d0b8:	20002804 	.word	0x20002804
 800d0bc:	20002728 	.word	0x20002728
 800d0c0:	20002724 	.word	0x20002724
 800d0c4:	20002810 	.word	0x20002810
 800d0c8:	2000280c 	.word	0x2000280c
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d0d6:	4b05      	ldr	r3, [pc, #20]	@ (800d0ec <xTaskGetTickCount+0x1c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d0dc:	687b      	ldr	r3, [r7, #4]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20002800 	.word	0x20002800

0800d0f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800d238 <xTaskIncrementTick+0x148>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f040 808f 	bne.w	800d222 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d104:	4b4d      	ldr	r3, [pc, #308]	@ (800d23c <xTaskIncrementTick+0x14c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3301      	adds	r3, #1
 800d10a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d10c:	4a4b      	ldr	r2, [pc, #300]	@ (800d23c <xTaskIncrementTick+0x14c>)
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d121      	bne.n	800d15c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d118:	4b49      	ldr	r3, [pc, #292]	@ (800d240 <xTaskIncrementTick+0x150>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00b      	beq.n	800d13a <xTaskIncrementTick+0x4a>
        __asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	603b      	str	r3, [r7, #0]
    }
 800d134:	bf00      	nop
 800d136:	bf00      	nop
 800d138:	e7fd      	b.n	800d136 <xTaskIncrementTick+0x46>
 800d13a:	4b41      	ldr	r3, [pc, #260]	@ (800d240 <xTaskIncrementTick+0x150>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	4b40      	ldr	r3, [pc, #256]	@ (800d244 <xTaskIncrementTick+0x154>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a3e      	ldr	r2, [pc, #248]	@ (800d240 <xTaskIncrementTick+0x150>)
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	4a3e      	ldr	r2, [pc, #248]	@ (800d244 <xTaskIncrementTick+0x154>)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	4b3e      	ldr	r3, [pc, #248]	@ (800d248 <xTaskIncrementTick+0x158>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	4a3c      	ldr	r2, [pc, #240]	@ (800d248 <xTaskIncrementTick+0x158>)
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	f000 fab6 	bl	800d6c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d15c:	4b3b      	ldr	r3, [pc, #236]	@ (800d24c <xTaskIncrementTick+0x15c>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	429a      	cmp	r2, r3
 800d164:	d348      	bcc.n	800d1f8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d166:	4b36      	ldr	r3, [pc, #216]	@ (800d240 <xTaskIncrementTick+0x150>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d104      	bne.n	800d17a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d170:	4b36      	ldr	r3, [pc, #216]	@ (800d24c <xTaskIncrementTick+0x15c>)
 800d172:	f04f 32ff 	mov.w	r2, #4294967295
 800d176:	601a      	str	r2, [r3, #0]
                    break;
 800d178:	e03e      	b.n	800d1f8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d17a:	4b31      	ldr	r3, [pc, #196]	@ (800d240 <xTaskIncrementTick+0x150>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d203      	bcs.n	800d19a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d192:	4a2e      	ldr	r2, [pc, #184]	@ (800d24c <xTaskIncrementTick+0x15c>)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d198:	e02e      	b.n	800d1f8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe ff47 	bl	800c032 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	3318      	adds	r3, #24
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe ff3e 	bl	800c032 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	409a      	lsls	r2, r3
 800d1be:	4b24      	ldr	r3, [pc, #144]	@ (800d250 <xTaskIncrementTick+0x160>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	4a22      	ldr	r2, [pc, #136]	@ (800d250 <xTaskIncrementTick+0x160>)
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800d254 <xTaskIncrementTick+0x164>)
 800d1d6:	441a      	add	r2, r3
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	f7fe feca 	bl	800bf78 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d258 <xTaskIncrementTick+0x168>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d3b9      	bcc.n	800d166 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1f6:	e7b6      	b.n	800d166 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1f8:	4b17      	ldr	r3, [pc, #92]	@ (800d258 <xTaskIncrementTick+0x168>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1fe:	4915      	ldr	r1, [pc, #84]	@ (800d254 <xTaskIncrementTick+0x164>)
 800d200:	4613      	mov	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	440b      	add	r3, r1
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d901      	bls.n	800d214 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800d210:	2301      	movs	r3, #1
 800d212:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800d214:	4b11      	ldr	r3, [pc, #68]	@ (800d25c <xTaskIncrementTick+0x16c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d007      	beq.n	800d22c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800d21c:	2301      	movs	r3, #1
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	e004      	b.n	800d22c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d222:	4b0f      	ldr	r3, [pc, #60]	@ (800d260 <xTaskIncrementTick+0x170>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	4a0d      	ldr	r2, [pc, #52]	@ (800d260 <xTaskIncrementTick+0x170>)
 800d22a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800d22c:	697b      	ldr	r3, [r7, #20]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20002824 	.word	0x20002824
 800d23c:	20002800 	.word	0x20002800
 800d240:	200027b4 	.word	0x200027b4
 800d244:	200027b8 	.word	0x200027b8
 800d248:	20002814 	.word	0x20002814
 800d24c:	2000281c 	.word	0x2000281c
 800d250:	20002804 	.word	0x20002804
 800d254:	20002728 	.word	0x20002728
 800d258:	20002724 	.word	0x20002724
 800d25c:	20002810 	.word	0x20002810
 800d260:	2000280c 	.word	0x2000280c

0800d264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d26a:	4b27      	ldr	r3, [pc, #156]	@ (800d308 <vTaskSwitchContext+0xa4>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d272:	4b26      	ldr	r3, [pc, #152]	@ (800d30c <vTaskSwitchContext+0xa8>)
 800d274:	2201      	movs	r2, #1
 800d276:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800d278:	e040      	b.n	800d2fc <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800d27a:	4b24      	ldr	r3, [pc, #144]	@ (800d30c <vTaskSwitchContext+0xa8>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d280:	4b23      	ldr	r3, [pc, #140]	@ (800d310 <vTaskSwitchContext+0xac>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	fab3 f383 	clz	r3, r3
 800d28c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800d28e:	7afb      	ldrb	r3, [r7, #11]
 800d290:	f1c3 031f 	rsb	r3, r3, #31
 800d294:	617b      	str	r3, [r7, #20]
 800d296:	491f      	ldr	r1, [pc, #124]	@ (800d314 <vTaskSwitchContext+0xb0>)
 800d298:	697a      	ldr	r2, [r7, #20]
 800d29a:	4613      	mov	r3, r2
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	440b      	add	r3, r1
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	607b      	str	r3, [r7, #4]
    }
 800d2bc:	bf00      	nop
 800d2be:	bf00      	nop
 800d2c0:	e7fd      	b.n	800d2be <vTaskSwitchContext+0x5a>
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4a11      	ldr	r2, [pc, #68]	@ (800d314 <vTaskSwitchContext+0xb0>)
 800d2ce:	4413      	add	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	605a      	str	r2, [r3, #4]
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d104      	bne.n	800d2f2 <vTaskSwitchContext+0x8e>
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	605a      	str	r2, [r3, #4]
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a07      	ldr	r2, [pc, #28]	@ (800d318 <vTaskSwitchContext+0xb4>)
 800d2fa:	6013      	str	r3, [r2, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	20002824 	.word	0x20002824
 800d30c:	20002810 	.word	0x20002810
 800d310:	20002804 	.word	0x20002804
 800d314:	20002728 	.word	0x20002728
 800d318:	20002724 	.word	0x20002724

0800d31c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10b      	bne.n	800d344 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	60fb      	str	r3, [r7, #12]
    }
 800d33e:	bf00      	nop
 800d340:	bf00      	nop
 800d342:	e7fd      	b.n	800d340 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d344:	4b07      	ldr	r3, [pc, #28]	@ (800d364 <vTaskPlaceOnEventList+0x48>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3318      	adds	r3, #24
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7fe fe37 	bl	800bfc0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d352:	2101      	movs	r1, #1
 800d354:	6838      	ldr	r0, [r7, #0]
 800d356:	f000 fcd7 	bl	800dd08 <prvAddCurrentTaskToDelayedList>
}
 800d35a:	bf00      	nop
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	20002724 	.word	0x20002724

0800d368 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	617b      	str	r3, [r7, #20]
    }
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d392:	4b0a      	ldr	r3, [pc, #40]	@ (800d3bc <vTaskPlaceOnEventListRestricted+0x54>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3318      	adds	r3, #24
 800d398:	4619      	mov	r1, r3
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f7fe fdec 	bl	800bf78 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800d3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3aa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	68b8      	ldr	r0, [r7, #8]
 800d3b0:	f000 fcaa 	bl	800dd08 <prvAddCurrentTaskToDelayedList>
    }
 800d3b4:	bf00      	nop
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20002724 	.word	0x20002724

0800d3c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10b      	bne.n	800d3ee <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	60fb      	str	r3, [r7, #12]
    }
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	3318      	adds	r3, #24
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fe fe1d 	bl	800c032 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d470 <xTaskRemoveFromEventList+0xb0>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d11c      	bne.n	800d43a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	3304      	adds	r3, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fe14 	bl	800c032 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40e:	2201      	movs	r2, #1
 800d410:	409a      	lsls	r2, r3
 800d412:	4b18      	ldr	r3, [pc, #96]	@ (800d474 <xTaskRemoveFromEventList+0xb4>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4313      	orrs	r3, r2
 800d418:	4a16      	ldr	r2, [pc, #88]	@ (800d474 <xTaskRemoveFromEventList+0xb4>)
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4a13      	ldr	r2, [pc, #76]	@ (800d478 <xTaskRemoveFromEventList+0xb8>)
 800d42a:	441a      	add	r2, r3
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	3304      	adds	r3, #4
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	f7fe fda0 	bl	800bf78 <vListInsertEnd>
 800d438:	e005      	b.n	800d446 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3318      	adds	r3, #24
 800d43e:	4619      	mov	r1, r3
 800d440:	480e      	ldr	r0, [pc, #56]	@ (800d47c <xTaskRemoveFromEventList+0xbc>)
 800d442:	f7fe fd99 	bl	800bf78 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d44a:	4b0d      	ldr	r3, [pc, #52]	@ (800d480 <xTaskRemoveFromEventList+0xc0>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	429a      	cmp	r2, r3
 800d452:	d905      	bls.n	800d460 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800d454:	2301      	movs	r3, #1
 800d456:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d458:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <xTaskRemoveFromEventList+0xc4>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	e001      	b.n	800d464 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d464:	697b      	ldr	r3, [r7, #20]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	20002824 	.word	0x20002824
 800d474:	20002804 	.word	0x20002804
 800d478:	20002728 	.word	0x20002728
 800d47c:	200027bc 	.word	0x200027bc
 800d480:	20002724 	.word	0x20002724
 800d484:	20002810 	.word	0x20002810

0800d488 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d490:	4b06      	ldr	r3, [pc, #24]	@ (800d4ac <vTaskInternalSetTimeOutState+0x24>)
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d498:	4b05      	ldr	r3, [pc, #20]	@ (800d4b0 <vTaskInternalSetTimeOutState+0x28>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	605a      	str	r2, [r3, #4]
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	20002814 	.word	0x20002814
 800d4b0:	20002800 	.word	0x20002800

0800d4b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10b      	bne.n	800d4dc <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	613b      	str	r3, [r7, #16]
    }
 800d4d6:	bf00      	nop
 800d4d8:	bf00      	nop
 800d4da:	e7fd      	b.n	800d4d8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10b      	bne.n	800d4fa <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	60fb      	str	r3, [r7, #12]
    }
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop
 800d4f8:	e7fd      	b.n	800d4f6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800d4fa:	f001 f917 	bl	800e72c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d4fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d57c <xTaskCheckForTimeOut+0xc8>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d102      	bne.n	800d51e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800d518:	2300      	movs	r3, #0
 800d51a:	61fb      	str	r3, [r7, #28]
 800d51c:	e026      	b.n	800d56c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b17      	ldr	r3, [pc, #92]	@ (800d580 <xTaskCheckForTimeOut+0xcc>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	429a      	cmp	r2, r3
 800d528:	d00a      	beq.n	800d540 <xTaskCheckForTimeOut+0x8c>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	69ba      	ldr	r2, [r7, #24]
 800d530:	429a      	cmp	r2, r3
 800d532:	d305      	bcc.n	800d540 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800d534:	2301      	movs	r3, #1
 800d536:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	e015      	b.n	800d56c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	429a      	cmp	r2, r3
 800d548:	d20b      	bcs.n	800d562 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	1ad2      	subs	r2, r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff ff96 	bl	800d488 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
 800d560:	e004      	b.n	800d56c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d568:	2301      	movs	r3, #1
 800d56a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d56c:	f001 f910 	bl	800e790 <vPortExitCritical>

    return xReturn;
 800d570:	69fb      	ldr	r3, [r7, #28]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3720      	adds	r7, #32
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20002800 	.word	0x20002800
 800d580:	20002814 	.word	0x20002814

0800d584 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d588:	4b03      	ldr	r3, [pc, #12]	@ (800d598 <vTaskMissedYield+0x14>)
 800d58a:	2201      	movs	r2, #1
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	bf00      	nop
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	20002810 	.word	0x20002810

0800d59c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d5a4:	f000 f852 	bl	800d64c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d5a8:	4b06      	ldr	r3, [pc, #24]	@ (800d5c4 <prvIdleTask+0x28>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d9f9      	bls.n	800d5a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800d5b0:	4b05      	ldr	r3, [pc, #20]	@ (800d5c8 <prvIdleTask+0x2c>)
 800d5b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d5c0:	e7f0      	b.n	800d5a4 <prvIdleTask+0x8>
 800d5c2:	bf00      	nop
 800d5c4:	20002728 	.word	0x20002728
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	607b      	str	r3, [r7, #4]
 800d5d6:	e00c      	b.n	800d5f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4413      	add	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4a12      	ldr	r2, [pc, #72]	@ (800d62c <prvInitialiseTaskLists+0x60>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe fc99 	bl	800bf1e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d9ef      	bls.n	800d5d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800d5f8:	480d      	ldr	r0, [pc, #52]	@ (800d630 <prvInitialiseTaskLists+0x64>)
 800d5fa:	f7fe fc90 	bl	800bf1e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800d5fe:	480d      	ldr	r0, [pc, #52]	@ (800d634 <prvInitialiseTaskLists+0x68>)
 800d600:	f7fe fc8d 	bl	800bf1e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800d604:	480c      	ldr	r0, [pc, #48]	@ (800d638 <prvInitialiseTaskLists+0x6c>)
 800d606:	f7fe fc8a 	bl	800bf1e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800d60a:	480c      	ldr	r0, [pc, #48]	@ (800d63c <prvInitialiseTaskLists+0x70>)
 800d60c:	f7fe fc87 	bl	800bf1e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800d610:	480b      	ldr	r0, [pc, #44]	@ (800d640 <prvInitialiseTaskLists+0x74>)
 800d612:	f7fe fc84 	bl	800bf1e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d616:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <prvInitialiseTaskLists+0x78>)
 800d618:	4a05      	ldr	r2, [pc, #20]	@ (800d630 <prvInitialiseTaskLists+0x64>)
 800d61a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d61c:	4b0a      	ldr	r3, [pc, #40]	@ (800d648 <prvInitialiseTaskLists+0x7c>)
 800d61e:	4a05      	ldr	r2, [pc, #20]	@ (800d634 <prvInitialiseTaskLists+0x68>)
 800d620:	601a      	str	r2, [r3, #0]
}
 800d622:	bf00      	nop
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20002728 	.word	0x20002728
 800d630:	2000278c 	.word	0x2000278c
 800d634:	200027a0 	.word	0x200027a0
 800d638:	200027bc 	.word	0x200027bc
 800d63c:	200027d0 	.word	0x200027d0
 800d640:	200027e8 	.word	0x200027e8
 800d644:	200027b4 	.word	0x200027b4
 800d648:	200027b8 	.word	0x200027b8

0800d64c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d652:	e019      	b.n	800d688 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800d654:	f001 f86a 	bl	800e72c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d658:	4b10      	ldr	r3, [pc, #64]	@ (800d69c <prvCheckTasksWaitingTermination+0x50>)
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	3304      	adds	r3, #4
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe fce4 	bl	800c032 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800d66a:	4b0d      	ldr	r3, [pc, #52]	@ (800d6a0 <prvCheckTasksWaitingTermination+0x54>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3b01      	subs	r3, #1
 800d670:	4a0b      	ldr	r2, [pc, #44]	@ (800d6a0 <prvCheckTasksWaitingTermination+0x54>)
 800d672:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800d674:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a4 <prvCheckTasksWaitingTermination+0x58>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3b01      	subs	r3, #1
 800d67a:	4a0a      	ldr	r2, [pc, #40]	@ (800d6a4 <prvCheckTasksWaitingTermination+0x58>)
 800d67c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800d67e:	f001 f887 	bl	800e790 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f810 	bl	800d6a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d688:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <prvCheckTasksWaitingTermination+0x58>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e1      	bne.n	800d654 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800d690:	bf00      	nop
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	200027d0 	.word	0x200027d0
 800d6a0:	200027fc 	.word	0x200027fc
 800d6a4:	200027e4 	.word	0x200027e4

0800d6a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fa45 	bl	800eb44 <vPortFree>
                vPortFree( pxTCB );
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f001 fa42 	bl	800eb44 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f8 <prvResetNextTaskUnblockTime+0x30>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d104      	bne.n	800d6e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d6d6:	4b09      	ldr	r3, [pc, #36]	@ (800d6fc <prvResetNextTaskUnblockTime+0x34>)
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800d6de:	e005      	b.n	800d6ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d6e0:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <prvResetNextTaskUnblockTime+0x30>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a04      	ldr	r2, [pc, #16]	@ (800d6fc <prvResetNextTaskUnblockTime+0x34>)
 800d6ea:	6013      	str	r3, [r2, #0]
}
 800d6ec:	bf00      	nop
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	200027b4 	.word	0x200027b4
 800d6fc:	2000281c 	.word	0x2000281c

0800d700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800d706:	4b0b      	ldr	r3, [pc, #44]	@ (800d734 <xTaskGetSchedulerState+0x34>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800d70e:	2301      	movs	r3, #1
 800d710:	607b      	str	r3, [r7, #4]
 800d712:	e008      	b.n	800d726 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d714:	4b08      	ldr	r3, [pc, #32]	@ (800d738 <xTaskGetSchedulerState+0x38>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d102      	bne.n	800d722 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800d71c:	2302      	movs	r3, #2
 800d71e:	607b      	str	r3, [r7, #4]
 800d720:	e001      	b.n	800d726 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800d722:	2300      	movs	r3, #0
 800d724:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800d726:	687b      	ldr	r3, [r7, #4]
    }
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	20002808 	.word	0x20002808
 800d738:	20002824 	.word	0x20002824

0800d73c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800d748:	2300      	movs	r3, #0
 800d74a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d065      	beq.n	800d81e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800d752:	4b35      	ldr	r3, [pc, #212]	@ (800d828 <xTaskPriorityDisinherit+0xec>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d00b      	beq.n	800d774 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	60fb      	str	r3, [r7, #12]
    }
 800d76e:	bf00      	nop
 800d770:	bf00      	nop
 800d772:	e7fd      	b.n	800d770 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10b      	bne.n	800d794 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	60bb      	str	r3, [r7, #8]
    }
 800d78e:	bf00      	nop
 800d790:	bf00      	nop
 800d792:	e7fd      	b.n	800d790 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d798:	1e5a      	subs	r2, r3, #1
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d039      	beq.n	800d81e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d135      	bne.n	800d81e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fc3b 	bl	800c032 <uxListRemove>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10a      	bne.n	800d7d8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7cc:	43da      	mvns	r2, r3
 800d7ce:	4b17      	ldr	r3, [pc, #92]	@ (800d82c <xTaskPriorityDisinherit+0xf0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	4a15      	ldr	r2, [pc, #84]	@ (800d82c <xTaskPriorityDisinherit+0xf0>)
 800d7d6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e4:	f1c3 0205 	rsb	r2, r3, #5
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	409a      	lsls	r2, r3
 800d7f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d82c <xTaskPriorityDisinherit+0xf0>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	4a0c      	ldr	r2, [pc, #48]	@ (800d82c <xTaskPriorityDisinherit+0xf0>)
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4a09      	ldr	r2, [pc, #36]	@ (800d830 <xTaskPriorityDisinherit+0xf4>)
 800d80c:	441a      	add	r2, r3
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	3304      	adds	r3, #4
 800d812:	4619      	mov	r1, r3
 800d814:	4610      	mov	r0, r2
 800d816:	f7fe fbaf 	bl	800bf78 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800d81a:	2301      	movs	r3, #1
 800d81c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800d81e:	697b      	ldr	r3, [r7, #20]
    }
 800d820:	4618      	mov	r0, r3
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	20002724 	.word	0x20002724
 800d82c:	20002804 	.word	0x20002804
 800d830:	20002728 	.word	0x20002728

0800d834 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00b      	beq.n	800d860 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	613b      	str	r3, [r7, #16]
    }
 800d85a:	bf00      	nop
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800d860:	f000 ff64 	bl	800e72c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800d864:	4b31      	ldr	r3, [pc, #196]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	3354      	adds	r3, #84	@ 0x54
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b02      	cmp	r3, #2
 800d874:	d022      	beq.n	800d8bc <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800d876:	4b2d      	ldr	r3, [pc, #180]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	3214      	adds	r2, #20
 800d87e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	43d2      	mvns	r2, r2
 800d886:	4011      	ands	r1, r2
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	3214      	adds	r2, #20
 800d88c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800d890:	4b26      	ldr	r3, [pc, #152]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	3354      	adds	r3, #84	@ 0x54
 800d89a:	2201      	movs	r2, #1
 800d89c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	6a38      	ldr	r0, [r7, #32]
 800d8a8:	f000 fa2e 	bl	800dd08 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800d8ac:	4b20      	ldr	r3, [pc, #128]	@ (800d930 <xTaskGenericNotifyWait+0xfc>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d8bc:	f000 ff68 	bl	800e790 <vPortExitCritical>

        taskENTER_CRITICAL();
 800d8c0:	f000 ff34 	bl	800e72c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800d8ca:	4b18      	ldr	r3, [pc, #96]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	3214      	adds	r2, #20
 800d8d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800d8da:	4b14      	ldr	r3, [pc, #80]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	3354      	adds	r3, #84	@ 0x54
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d002      	beq.n	800d8f2 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	e00e      	b.n	800d910 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800d8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	3214      	adds	r2, #20
 800d8fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	43d2      	mvns	r2, r2
 800d902:	4011      	ands	r1, r2
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	3214      	adds	r2, #20
 800d908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800d910:	4b06      	ldr	r3, [pc, #24]	@ (800d92c <xTaskGenericNotifyWait+0xf8>)
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4413      	add	r3, r2
 800d918:	3354      	adds	r3, #84	@ 0x54
 800d91a:	2200      	movs	r2, #0
 800d91c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800d91e:	f000 ff37 	bl	800e790 <vPortExitCritical>

        return xReturn;
 800d922:	697b      	ldr	r3, [r7, #20]
    }
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20002724 	.word	0x20002724
 800d930:	e000ed04 	.word	0xe000ed04

0800d934 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800d934:	b580      	push	{r7, lr}
 800d936:	b08c      	sub	sp, #48	@ 0x30
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800d942:	2301      	movs	r3, #1
 800d944:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00b      	beq.n	800d964 <xTaskGenericNotify+0x30>
        __asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	623b      	str	r3, [r7, #32]
    }
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
 800d962:	e7fd      	b.n	800d960 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10b      	bne.n	800d982 <xTaskGenericNotify+0x4e>
        __asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	61fb      	str	r3, [r7, #28]
    }
 800d97c:	bf00      	nop
 800d97e:	bf00      	nop
 800d980:	e7fd      	b.n	800d97e <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800d986:	f000 fed1 	bl	800e72c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800d98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800d990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	3214      	adds	r2, #20
 800d996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800d99e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	3354      	adds	r3, #84	@ 0x54
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800d9ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	3354      	adds	r3, #84	@ 0x54
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d83b      	bhi.n	800da36 <xTaskGenericNotify+0x102>
 800d9be:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c4 <xTaskGenericNotify+0x90>)
 800d9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c4:	0800da57 	.word	0x0800da57
 800d9c8:	0800d9d9 	.word	0x0800d9d9
 800d9cc:	0800d9f5 	.word	0x0800d9f5
 800d9d0:	0800da0d 	.word	0x0800da0d
 800d9d4:	0800da1b 	.word	0x0800da1b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800d9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	3214      	adds	r2, #20
 800d9de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	ea42 0103 	orr.w	r1, r2, r3
 800d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	3214      	adds	r2, #20
 800d9ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800d9f2:	e033      	b.n	800da5c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	3214      	adds	r2, #20
 800d9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9fe:	1c59      	adds	r1, r3, #1
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	3214      	adds	r2, #20
 800da06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800da0a:	e027      	b.n	800da5c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	3214      	adds	r2, #20
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800da18:	e020      	b.n	800da5c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d006      	beq.n	800da30 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800da22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	3214      	adds	r2, #20
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800da2e:	e015      	b.n	800da5c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800da30:	2300      	movs	r3, #0
 800da32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800da34:	e012      	b.n	800da5c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800da36:	4b2c      	ldr	r3, [pc, #176]	@ (800dae8 <xTaskGenericNotify+0x1b4>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00d      	beq.n	800da5a <xTaskGenericNotify+0x126>
        __asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	61bb      	str	r3, [r7, #24]
    }
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	e7fd      	b.n	800da52 <xTaskGenericNotify+0x11e>
                    break;
 800da56:	bf00      	nop
 800da58:	e000      	b.n	800da5c <xTaskGenericNotify+0x128>

                    break;
 800da5a:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800da5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da60:	2b01      	cmp	r3, #1
 800da62:	d13a      	bne.n	800dada <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da66:	3304      	adds	r3, #4
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fae2 	bl	800c032 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da72:	2201      	movs	r2, #1
 800da74:	409a      	lsls	r2, r3
 800da76:	4b1d      	ldr	r3, [pc, #116]	@ (800daec <xTaskGenericNotify+0x1b8>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	4a1b      	ldr	r2, [pc, #108]	@ (800daec <xTaskGenericNotify+0x1b8>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a18      	ldr	r2, [pc, #96]	@ (800daf0 <xTaskGenericNotify+0x1bc>)
 800da8e:	441a      	add	r2, r3
 800da90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fe fa6e 	bl	800bf78 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00b      	beq.n	800dabc <xTaskGenericNotify+0x188>
        __asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	617b      	str	r3, [r7, #20]
    }
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
 800daba:	e7fd      	b.n	800dab8 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dac0:	4b0c      	ldr	r3, [pc, #48]	@ (800daf4 <xTaskGenericNotify+0x1c0>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d907      	bls.n	800dada <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800daca:	4b0b      	ldr	r3, [pc, #44]	@ (800daf8 <xTaskGenericNotify+0x1c4>)
 800dacc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800dada:	f000 fe59 	bl	800e790 <vPortExitCritical>

        return xReturn;
 800dade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800dae0:	4618      	mov	r0, r3
 800dae2:	3730      	adds	r7, #48	@ 0x30
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20002800 	.word	0x20002800
 800daec:	20002804 	.word	0x20002804
 800daf0:	20002728 	.word	0x20002728
 800daf4:	20002724 	.word	0x20002724
 800daf8:	e000ed04 	.word	0xe000ed04

0800dafc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b090      	sub	sp, #64	@ 0x40
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800db0a:	2301      	movs	r3, #1
 800db0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10b      	bne.n	800db2c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00b      	beq.n	800db4a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	e7fd      	b.n	800db46 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db4a:	f000 fed7 	bl	800e8fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800db52:	f3ef 8211 	mrs	r2, BASEPRI
 800db56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	627a      	str	r2, [r7, #36]	@ 0x24
 800db68:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800db6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db6c:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800db6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	3214      	adds	r2, #20
 800db7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db80:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800db82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	4413      	add	r3, r2
 800db88:	3354      	adds	r3, #84	@ 0x54
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800db90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	4413      	add	r3, r2
 800db96:	3354      	adds	r3, #84	@ 0x54
 800db98:	2202      	movs	r2, #2
 800db9a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	2b04      	cmp	r3, #4
 800dba0:	d83b      	bhi.n	800dc1a <xTaskGenericNotifyFromISR+0x11e>
 800dba2:	a201      	add	r2, pc, #4	@ (adr r2, 800dba8 <xTaskGenericNotifyFromISR+0xac>)
 800dba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba8:	0800dc3b 	.word	0x0800dc3b
 800dbac:	0800dbbd 	.word	0x0800dbbd
 800dbb0:	0800dbd9 	.word	0x0800dbd9
 800dbb4:	0800dbf1 	.word	0x0800dbf1
 800dbb8:	0800dbff 	.word	0x0800dbff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	3214      	adds	r2, #20
 800dbc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	ea42 0103 	orr.w	r1, r2, r3
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	3214      	adds	r2, #20
 800dbd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800dbd6:	e033      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	3214      	adds	r2, #20
 800dbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe2:	1c59      	adds	r1, r3, #1
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	3214      	adds	r2, #20
 800dbea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800dbee:	e027      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	3214      	adds	r2, #20
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800dbfc:	e020      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dbfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d006      	beq.n	800dc14 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800dc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	3214      	adds	r2, #20
 800dc0c:	6879      	ldr	r1, [r7, #4]
 800dc0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800dc12:	e015      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800dc14:	2300      	movs	r3, #0
 800dc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800dc18:	e012      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800dc1a:	4b34      	ldr	r3, [pc, #208]	@ (800dcec <xTaskGenericNotifyFromISR+0x1f0>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00d      	beq.n	800dc3e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	61fb      	str	r3, [r7, #28]
    }
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	e7fd      	b.n	800dc36 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800dc3a:	bf00      	nop
 800dc3c:	e000      	b.n	800dc40 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800dc3e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d146      	bne.n	800dcd6 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00b      	beq.n	800dc68 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	61bb      	str	r3, [r7, #24]
    }
 800dc62:	bf00      	nop
 800dc64:	bf00      	nop
 800dc66:	e7fd      	b.n	800dc64 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc68:	4b21      	ldr	r3, [pc, #132]	@ (800dcf0 <xTaskGenericNotifyFromISR+0x1f4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d11c      	bne.n	800dcaa <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc72:	3304      	adds	r3, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe f9dc 	bl	800c032 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7e:	2201      	movs	r2, #1
 800dc80:	409a      	lsls	r2, r3
 800dc82:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf4 <xTaskGenericNotifyFromISR+0x1f8>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	4a1a      	ldr	r2, [pc, #104]	@ (800dcf4 <xTaskGenericNotifyFromISR+0x1f8>)
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4a17      	ldr	r2, [pc, #92]	@ (800dcf8 <xTaskGenericNotifyFromISR+0x1fc>)
 800dc9a:	441a      	add	r2, r3
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9e:	3304      	adds	r3, #4
 800dca0:	4619      	mov	r1, r3
 800dca2:	4610      	mov	r0, r2
 800dca4:	f7fe f968 	bl	800bf78 <vListInsertEnd>
 800dca8:	e005      	b.n	800dcb6 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcac:	3318      	adds	r3, #24
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4812      	ldr	r0, [pc, #72]	@ (800dcfc <xTaskGenericNotifyFromISR+0x200>)
 800dcb2:	f7fe f961 	bl	800bf78 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcba:	4b11      	ldr	r3, [pc, #68]	@ (800dd00 <xTaskGenericNotifyFromISR+0x204>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d908      	bls.n	800dcd6 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800dcc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800dcca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dccc:	2201      	movs	r2, #1
 800dcce:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800dcd0:	4b0c      	ldr	r3, [pc, #48]	@ (800dd04 <xTaskGenericNotifyFromISR+0x208>)
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd8:	617b      	str	r3, [r7, #20]
        __asm volatile
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	f383 8811 	msr	BASEPRI, r3
    }
 800dce0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800dce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800dce4:	4618      	mov	r0, r3
 800dce6:	3740      	adds	r7, #64	@ 0x40
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20002800 	.word	0x20002800
 800dcf0:	20002824 	.word	0x20002824
 800dcf4:	20002804 	.word	0x20002804
 800dcf8:	20002728 	.word	0x20002728
 800dcfc:	200027bc 	.word	0x200027bc
 800dd00:	20002724 	.word	0x20002724
 800dd04:	20002810 	.word	0x20002810

0800dd08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800dd12:	4b29      	ldr	r3, [pc, #164]	@ (800ddb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd18:	4b28      	ldr	r3, [pc, #160]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe f987 	bl	800c032 <uxListRemove>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10b      	bne.n	800dd42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dd2a:	4b24      	ldr	r3, [pc, #144]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd30:	2201      	movs	r2, #1
 800dd32:	fa02 f303 	lsl.w	r3, r2, r3
 800dd36:	43da      	mvns	r2, r3
 800dd38:	4b21      	ldr	r3, [pc, #132]	@ (800ddc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	4a20      	ldr	r2, [pc, #128]	@ (800ddc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d10a      	bne.n	800dd60 <prvAddCurrentTaskToDelayedList+0x58>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd50:	4b1a      	ldr	r3, [pc, #104]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3304      	adds	r3, #4
 800dd56:	4619      	mov	r1, r3
 800dd58:	481a      	ldr	r0, [pc, #104]	@ (800ddc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd5a:	f7fe f90d 	bl	800bf78 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800dd5e:	e026      	b.n	800ddae <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4413      	add	r3, r2
 800dd66:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd68:	4b14      	ldr	r3, [pc, #80]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d209      	bcs.n	800dd8c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd78:	4b13      	ldr	r3, [pc, #76]	@ (800ddc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	4b0f      	ldr	r3, [pc, #60]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7fe f91b 	bl	800bfc0 <vListInsert>
}
 800dd8a:	e010      	b.n	800ddae <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0xc4>)
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	4b0a      	ldr	r3, [pc, #40]	@ (800ddbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4619      	mov	r1, r3
 800dd98:	4610      	mov	r0, r2
 800dd9a:	f7fe f911 	bl	800bfc0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800dd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d202      	bcs.n	800ddae <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800dda8:	4a09      	ldr	r2, [pc, #36]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	6013      	str	r3, [r2, #0]
}
 800ddae:	bf00      	nop
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20002800 	.word	0x20002800
 800ddbc:	20002724 	.word	0x20002724
 800ddc0:	20002804 	.word	0x20002804
 800ddc4:	200027e8 	.word	0x200027e8
 800ddc8:	200027b8 	.word	0x200027b8
 800ddcc:	200027b4 	.word	0x200027b4
 800ddd0:	2000281c 	.word	0x2000281c

0800ddd4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ddde:	f000 fb3f 	bl	800e460 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <xTimerCreateTimerTask+0x58>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00b      	beq.n	800de02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800ddea:	4b11      	ldr	r3, [pc, #68]	@ (800de30 <xTimerCreateTimerTask+0x5c>)
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	2302      	movs	r3, #2
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ddf8:	490e      	ldr	r1, [pc, #56]	@ (800de34 <xTimerCreateTimerTask+0x60>)
 800ddfa:	480f      	ldr	r0, [pc, #60]	@ (800de38 <xTimerCreateTimerTask+0x64>)
 800ddfc:	f7fe feee 	bl	800cbdc <xTaskCreate>
 800de00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10b      	bne.n	800de20 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	603b      	str	r3, [r7, #0]
    }
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	e7fd      	b.n	800de1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800de20:	687b      	ldr	r3, [r7, #4]
    }
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20002858 	.word	0x20002858
 800de30:	2000285c 	.word	0x2000285c
 800de34:	08013790 	.word	0x08013790
 800de38:	0800e031 	.word	0x0800e031

0800de3c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af02      	add	r7, sp, #8
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800de4a:	202c      	movs	r0, #44	@ 0x2c
 800de4c:	f000 fd98 	bl	800e980 <pvPortMalloc>
 800de50:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00d      	beq.n	800de74 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	68b9      	ldr	r1, [r7, #8]
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f000 f805 	bl	800de7e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800de74:	697b      	ldr	r3, [r7, #20]
        }
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800de7e:	b580      	push	{r7, lr}
 800de80:	b086      	sub	sp, #24
 800de82:	af00      	add	r7, sp, #0
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	607a      	str	r2, [r7, #4]
 800de8a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10b      	bne.n	800deaa <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	617b      	str	r3, [r7, #20]
    }
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	e7fd      	b.n	800dea6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	2b00      	cmp	r3, #0
 800deae:	d01e      	beq.n	800deee <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800deb0:	f000 fad6 	bl	800e460 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec8:	6a3a      	ldr	r2, [r7, #32]
 800deca:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dece:	3304      	adds	r3, #4
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe f844 	bl	800bf5e <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d008      	beq.n	800deee <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dee2:	f043 0304 	orr.w	r3, r3, #4
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800deee:	bf00      	nop
 800def0:	3718      	adds	r7, #24
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800def8:	b580      	push	{r7, lr}
 800defa:	b08a      	sub	sp, #40	@ 0x28
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800df06:	2300      	movs	r3, #0
 800df08:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10b      	bne.n	800df28 <xTimerGenericCommand+0x30>
        __asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	623b      	str	r3, [r7, #32]
    }
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	e7fd      	b.n	800df24 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800df28:	4b19      	ldr	r3, [pc, #100]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d02a      	beq.n	800df86 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b05      	cmp	r3, #5
 800df40:	dc18      	bgt.n	800df74 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df42:	f7ff fbdd 	bl	800d700 <xTaskGetSchedulerState>
 800df46:	4603      	mov	r3, r0
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d109      	bne.n	800df60 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df4c:	4b10      	ldr	r3, [pc, #64]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	f107 0114 	add.w	r1, r7, #20
 800df54:	2300      	movs	r3, #0
 800df56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df58:	f7fe f986 	bl	800c268 <xQueueGenericSend>
 800df5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800df5e:	e012      	b.n	800df86 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df60:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	f107 0114 	add.w	r1, r7, #20
 800df68:	2300      	movs	r3, #0
 800df6a:	2200      	movs	r2, #0
 800df6c:	f7fe f97c 	bl	800c268 <xQueueGenericSend>
 800df70:	6278      	str	r0, [r7, #36]	@ 0x24
 800df72:	e008      	b.n	800df86 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df74:	4b06      	ldr	r3, [pc, #24]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	f107 0114 	add.w	r1, r7, #20
 800df7c:	2300      	movs	r3, #0
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	f7fe fa74 	bl	800c46c <xQueueGenericSendFromISR>
 800df84:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800df88:	4618      	mov	r0, r3
 800df8a:	3728      	adds	r7, #40	@ 0x28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20002858 	.word	0x20002858

0800df94 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af02      	add	r7, sp, #8
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9e:	4b23      	ldr	r3, [pc, #140]	@ (800e02c <prvProcessExpiredTimer+0x98>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe f840 	bl	800c032 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfb8:	f003 0304 	and.w	r3, r3, #4
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d023      	beq.n	800e008 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	699a      	ldr	r2, [r3, #24]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	18d1      	adds	r1, r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	6978      	ldr	r0, [r7, #20]
 800dfce:	f000 f8d5 	bl	800e17c <prvInsertTimerInActiveList>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d020      	beq.n	800e01a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6978      	ldr	r0, [r7, #20]
 800dfe4:	f7ff ff88 	bl	800def8 <xTimerGenericCommand>
 800dfe8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d114      	bne.n	800e01a <prvProcessExpiredTimer+0x86>
        __asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	60fb      	str	r3, [r7, #12]
    }
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	e7fd      	b.n	800e004 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e00e:	f023 0301 	bic.w	r3, r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	4798      	blx	r3
    }
 800e022:	bf00      	nop
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20002850 	.word	0x20002850

0800e030 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e038:	f107 0308 	add.w	r3, r7, #8
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 f859 	bl	800e0f4 <prvGetNextExpireTime>
 800e042:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	4619      	mov	r1, r3
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 f805 	bl	800e058 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e04e:	f000 f8d7 	bl	800e200 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e052:	bf00      	nop
 800e054:	e7f0      	b.n	800e038 <prvTimerTask+0x8>
	...

0800e058 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e062:	f7fe ff89 	bl	800cf78 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e066:	f107 0308 	add.w	r3, r7, #8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f866 	bl	800e13c <prvSampleTimeNow>
 800e070:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d130      	bne.n	800e0da <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10a      	bne.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	429a      	cmp	r2, r3
 800e084:	d806      	bhi.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e086:	f7fe ff85 	bl	800cf94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e08a:	68f9      	ldr	r1, [r7, #12]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff ff81 	bl	800df94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e092:	e024      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d008      	beq.n	800e0ac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e09a:	4b13      	ldr	r3, [pc, #76]	@ (800e0e8 <prvProcessTimerOrBlockTask+0x90>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <prvProcessTimerOrBlockTask+0x50>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <prvProcessTimerOrBlockTask+0x52>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e0ec <prvProcessTimerOrBlockTask+0x94>)
 800e0ae:	6818      	ldr	r0, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f7fe fd5b 	bl	800cb74 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e0be:	f7fe ff69 	bl	800cf94 <xTaskResumeAll>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800e0c8:	4b09      	ldr	r3, [pc, #36]	@ (800e0f0 <prvProcessTimerOrBlockTask+0x98>)
 800e0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	f3bf 8f6f 	isb	sy
    }
 800e0d8:	e001      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800e0da:	f7fe ff5b 	bl	800cf94 <xTaskResumeAll>
    }
 800e0de:	bf00      	nop
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20002854 	.word	0x20002854
 800e0ec:	20002858 	.word	0x20002858
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800e138 <prvGetNextExpireTime+0x44>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <prvGetNextExpireTime+0x16>
 800e106:	2201      	movs	r2, #1
 800e108:	e000      	b.n	800e10c <prvGetNextExpireTime+0x18>
 800e10a:	2200      	movs	r2, #0
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e118:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <prvGetNextExpireTime+0x44>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	e001      	b.n	800e128 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e128:	68fb      	ldr	r3, [r7, #12]
    }
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	20002850 	.word	0x20002850

0800e13c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e144:	f7fe ffc4 	bl	800d0d0 <xTaskGetTickCount>
 800e148:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e14a:	4b0b      	ldr	r3, [pc, #44]	@ (800e178 <prvSampleTimeNow+0x3c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d205      	bcs.n	800e160 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e154:	f000 f91e 	bl	800e394 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e002      	b.n	800e166 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e166:	4a04      	ldr	r2, [pc, #16]	@ (800e178 <prvSampleTimeNow+0x3c>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e16c:	68fb      	ldr	r3, [r7, #12]
    }
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20002860 	.word	0x20002860

0800e17c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d812      	bhi.n	800e1c8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d302      	bcc.n	800e1b6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e01b      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1b6:	4b10      	ldr	r3, [pc, #64]	@ (800e1f8 <prvInsertTimerInActiveList+0x7c>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7fd fefd 	bl	800bfc0 <vListInsert>
 800e1c6:	e012      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d206      	bcs.n	800e1de <prvInsertTimerInActiveList+0x62>
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d302      	bcc.n	800e1de <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	e007      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1de:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <prvInsertTimerInActiveList+0x80>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f7fd fee9 	bl	800bfc0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e1ee:	697b      	ldr	r3, [r7, #20]
    }
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20002854 	.word	0x20002854
 800e1fc:	20002850 	.word	0x20002850

0800e200 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e200:	b580      	push	{r7, lr}
 800e202:	b08c      	sub	sp, #48	@ 0x30
 800e204:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e206:	e0b2      	b.n	800e36e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f2c0 80af 	blt.w	800e36e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d004      	beq.n	800e226 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	3304      	adds	r3, #4
 800e220:	4618      	mov	r0, r3
 800e222:	f7fd ff06 	bl	800c032 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e226:	1d3b      	adds	r3, r7, #4
 800e228:	4618      	mov	r0, r3
 800e22a:	f7ff ff87 	bl	800e13c <prvSampleTimeNow>
 800e22e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2b09      	cmp	r3, #9
 800e234:	f200 8098 	bhi.w	800e368 <prvProcessReceivedCommands+0x168>
 800e238:	a201      	add	r2, pc, #4	@ (adr r2, 800e240 <prvProcessReceivedCommands+0x40>)
 800e23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23e:	bf00      	nop
 800e240:	0800e269 	.word	0x0800e269
 800e244:	0800e269 	.word	0x0800e269
 800e248:	0800e269 	.word	0x0800e269
 800e24c:	0800e2df 	.word	0x0800e2df
 800e250:	0800e2f3 	.word	0x0800e2f3
 800e254:	0800e33f 	.word	0x0800e33f
 800e258:	0800e269 	.word	0x0800e269
 800e25c:	0800e269 	.word	0x0800e269
 800e260:	0800e2df 	.word	0x0800e2df
 800e264:	0800e2f3 	.word	0x0800e2f3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e26e:	f043 0301 	orr.w	r3, r3, #1
 800e272:	b2da      	uxtb	r2, r3
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	18d1      	adds	r1, r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6a3a      	ldr	r2, [r7, #32]
 800e286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e288:	f7ff ff78 	bl	800e17c <prvInsertTimerInActiveList>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d06c      	beq.n	800e36c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e298:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2a0:	f003 0304 	and.w	r3, r3, #4
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d061      	beq.n	800e36c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	441a      	add	r2, r3
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e2ba:	f7ff fe1d 	bl	800def8 <xTimerGenericCommand>
 800e2be:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d152      	bne.n	800e36c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800e2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	61bb      	str	r3, [r7, #24]
    }
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	e7fd      	b.n	800e2da <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2e4:	f023 0301 	bic.w	r3, r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e2f0:	e03d      	b.n	800e36e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2f8:	f043 0301 	orr.w	r3, r3, #1
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e308:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10b      	bne.n	800e32a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	617b      	str	r3, [r7, #20]
    }
 800e324:	bf00      	nop
 800e326:	bf00      	nop
 800e328:	e7fd      	b.n	800e326 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32c:	699a      	ldr	r2, [r3, #24]
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	18d1      	adds	r1, r2, r3
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	6a3a      	ldr	r2, [r7, #32]
 800e336:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e338:	f7ff ff20 	bl	800e17c <prvInsertTimerInActiveList>
                        break;
 800e33c:	e017      	b.n	800e36e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e344:	f003 0302 	and.w	r3, r3, #2
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d103      	bne.n	800e354 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800e34c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e34e:	f000 fbf9 	bl	800eb44 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e352:	e00c      	b.n	800e36e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e35a:	f023 0301 	bic.w	r3, r3, #1
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e366:	e002      	b.n	800e36e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e368:	bf00      	nop
 800e36a:	e000      	b.n	800e36e <prvProcessReceivedCommands+0x16e>
                        break;
 800e36c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e36e:	4b08      	ldr	r3, [pc, #32]	@ (800e390 <prvProcessReceivedCommands+0x190>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f107 0108 	add.w	r1, r7, #8
 800e376:	2200      	movs	r2, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe f925 	bl	800c5c8 <xQueueReceive>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	f47f af41 	bne.w	800e208 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e386:	bf00      	nop
 800e388:	bf00      	nop
 800e38a:	3728      	adds	r7, #40	@ 0x28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	20002858 	.word	0x20002858

0800e394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e39a:	e049      	b.n	800e430 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e39c:	4b2e      	ldr	r3, [pc, #184]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a6:	4b2c      	ldr	r3, [pc, #176]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fd fe3c 	bl	800c032 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d02f      	beq.n	800e430 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d90e      	bls.n	800e400 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	f7fd fde1 	bl	800bfc0 <vListInsert>
 800e3fe:	e017      	b.n	800e430 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e400:	2300      	movs	r3, #0
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	2100      	movs	r1, #0
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f7ff fd74 	bl	800def8 <xTimerGenericCommand>
 800e410:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10b      	bne.n	800e430 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	603b      	str	r3, [r7, #0]
    }
 800e42a:	bf00      	nop
 800e42c:	bf00      	nop
 800e42e:	e7fd      	b.n	800e42c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e430:	4b09      	ldr	r3, [pc, #36]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1b0      	bne.n	800e39c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800e43a:	4b07      	ldr	r3, [pc, #28]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800e440:	4b06      	ldr	r3, [pc, #24]	@ (800e45c <prvSwitchTimerLists+0xc8>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a04      	ldr	r2, [pc, #16]	@ (800e458 <prvSwitchTimerLists+0xc4>)
 800e446:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e448:	4a04      	ldr	r2, [pc, #16]	@ (800e45c <prvSwitchTimerLists+0xc8>)
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	6013      	str	r3, [r2, #0]
    }
 800e44e:	bf00      	nop
 800e450:	3718      	adds	r7, #24
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20002850 	.word	0x20002850
 800e45c:	20002854 	.word	0x20002854

0800e460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e464:	f000 f962 	bl	800e72c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e468:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <prvCheckForValidListAndQueue+0x54>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d11d      	bne.n	800e4ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800e470:	4811      	ldr	r0, [pc, #68]	@ (800e4b8 <prvCheckForValidListAndQueue+0x58>)
 800e472:	f7fd fd54 	bl	800bf1e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e476:	4811      	ldr	r0, [pc, #68]	@ (800e4bc <prvCheckForValidListAndQueue+0x5c>)
 800e478:	f7fd fd51 	bl	800bf1e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e47c:	4b10      	ldr	r3, [pc, #64]	@ (800e4c0 <prvCheckForValidListAndQueue+0x60>)
 800e47e:	4a0e      	ldr	r2, [pc, #56]	@ (800e4b8 <prvCheckForValidListAndQueue+0x58>)
 800e480:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e482:	4b10      	ldr	r3, [pc, #64]	@ (800e4c4 <prvCheckForValidListAndQueue+0x64>)
 800e484:	4a0d      	ldr	r2, [pc, #52]	@ (800e4bc <prvCheckForValidListAndQueue+0x5c>)
 800e486:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e488:	2200      	movs	r2, #0
 800e48a:	210c      	movs	r1, #12
 800e48c:	200a      	movs	r0, #10
 800e48e:	f7fd fe65 	bl	800c15c <xQueueGenericCreate>
 800e492:	4603      	mov	r3, r0
 800e494:	4a07      	ldr	r2, [pc, #28]	@ (800e4b4 <prvCheckForValidListAndQueue+0x54>)
 800e496:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800e498:	4b06      	ldr	r3, [pc, #24]	@ (800e4b4 <prvCheckForValidListAndQueue+0x54>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d005      	beq.n	800e4ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4a0:	4b04      	ldr	r3, [pc, #16]	@ (800e4b4 <prvCheckForValidListAndQueue+0x54>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4908      	ldr	r1, [pc, #32]	@ (800e4c8 <prvCheckForValidListAndQueue+0x68>)
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe fb3a 	bl	800cb20 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e4ac:	f000 f970 	bl	800e790 <vPortExitCritical>
    }
 800e4b0:	bf00      	nop
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	20002858 	.word	0x20002858
 800e4b8:	20002828 	.word	0x20002828
 800e4bc:	2000283c 	.word	0x2000283c
 800e4c0:	20002850 	.word	0x20002850
 800e4c4:	20002854 	.word	0x20002854
 800e4c8:	08013798 	.word	0x08013798

0800e4cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3b04      	subs	r3, #4
 800e4dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e4e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b04      	subs	r3, #4
 800e4ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f023 0201 	bic.w	r2, r3, #1
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800e4fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e530 <pxPortInitialiseStack+0x64>)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3b14      	subs	r3, #20
 800e506:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3b04      	subs	r3, #4
 800e512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f06f 0202 	mvn.w	r2, #2
 800e51a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3b20      	subs	r3, #32
 800e520:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e522:	68fb      	ldr	r3, [r7, #12]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3714      	adds	r7, #20
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	0800e535 	.word	0x0800e535

0800e534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800e53e:	4b13      	ldr	r3, [pc, #76]	@ (800e58c <prvTaskExitError+0x58>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e546:	d00b      	beq.n	800e560 <prvTaskExitError+0x2c>
        __asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	60fb      	str	r3, [r7, #12]
    }
 800e55a:	bf00      	nop
 800e55c:	bf00      	nop
 800e55e:	e7fd      	b.n	800e55c <prvTaskExitError+0x28>
        __asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	60bb      	str	r3, [r7, #8]
    }
 800e572:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800e574:	bf00      	nop
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d0fc      	beq.n	800e576 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800e57c:	bf00      	nop
 800e57e:	bf00      	nop
 800e580:	3714      	adds	r7, #20
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	20000014 	.word	0x20000014

0800e590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800e590:	4b07      	ldr	r3, [pc, #28]	@ (800e5b0 <pxCurrentTCBConst2>)
 800e592:	6819      	ldr	r1, [r3, #0]
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59a:	f380 8809 	msr	PSP, r0
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f04f 0000 	mov.w	r0, #0
 800e5a6:	f380 8811 	msr	BASEPRI, r0
 800e5aa:	4770      	bx	lr
 800e5ac:	f3af 8000 	nop.w

0800e5b0 <pxCurrentTCBConst2>:
 800e5b0:	20002724 	.word	0x20002724
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800e5b8:	4808      	ldr	r0, [pc, #32]	@ (800e5dc <prvPortStartFirstTask+0x24>)
 800e5ba:	6800      	ldr	r0, [r0, #0]
 800e5bc:	6800      	ldr	r0, [r0, #0]
 800e5be:	f380 8808 	msr	MSP, r0
 800e5c2:	f04f 0000 	mov.w	r0, #0
 800e5c6:	f380 8814 	msr	CONTROL, r0
 800e5ca:	b662      	cpsie	i
 800e5cc:	b661      	cpsie	f
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	df00      	svc	0
 800e5d8:	bf00      	nop
 800e5da:	0000      	.short	0x0000
 800e5dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800e5e0:	bf00      	nop
 800e5e2:	bf00      	nop

0800e5e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5ea:	4b47      	ldr	r3, [pc, #284]	@ (800e708 <xPortStartScheduler+0x124>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a47      	ldr	r2, [pc, #284]	@ (800e70c <xPortStartScheduler+0x128>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d10b      	bne.n	800e60c <xPortStartScheduler+0x28>
        __asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	613b      	str	r3, [r7, #16]
    }
 800e606:	bf00      	nop
 800e608:	bf00      	nop
 800e60a:	e7fd      	b.n	800e608 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e60c:	4b3e      	ldr	r3, [pc, #248]	@ (800e708 <xPortStartScheduler+0x124>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a3f      	ldr	r2, [pc, #252]	@ (800e710 <xPortStartScheduler+0x12c>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d10b      	bne.n	800e62e <xPortStartScheduler+0x4a>
        __asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	60fb      	str	r3, [r7, #12]
    }
 800e628:	bf00      	nop
 800e62a:	bf00      	nop
 800e62c:	e7fd      	b.n	800e62a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e62e:	4b39      	ldr	r3, [pc, #228]	@ (800e714 <xPortStartScheduler+0x130>)
 800e630:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	b2db      	uxtb	r3, r3
 800e638:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	22ff      	movs	r2, #255	@ 0xff
 800e63e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	b2db      	uxtb	r3, r3
 800e646:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e648:	78fb      	ldrb	r3, [r7, #3]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e650:	b2da      	uxtb	r2, r3
 800e652:	4b31      	ldr	r3, [pc, #196]	@ (800e718 <xPortStartScheduler+0x134>)
 800e654:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e656:	4b31      	ldr	r3, [pc, #196]	@ (800e71c <xPortStartScheduler+0x138>)
 800e658:	2207      	movs	r2, #7
 800e65a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e65c:	e009      	b.n	800e672 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800e65e:	4b2f      	ldr	r3, [pc, #188]	@ (800e71c <xPortStartScheduler+0x138>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3b01      	subs	r3, #1
 800e664:	4a2d      	ldr	r2, [pc, #180]	@ (800e71c <xPortStartScheduler+0x138>)
 800e666:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e672:	78fb      	ldrb	r3, [r7, #3]
 800e674:	b2db      	uxtb	r3, r3
 800e676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e67a:	2b80      	cmp	r3, #128	@ 0x80
 800e67c:	d0ef      	beq.n	800e65e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e67e:	4b27      	ldr	r3, [pc, #156]	@ (800e71c <xPortStartScheduler+0x138>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f1c3 0307 	rsb	r3, r3, #7
 800e686:	2b04      	cmp	r3, #4
 800e688:	d00b      	beq.n	800e6a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800e68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	60bb      	str	r3, [r7, #8]
    }
 800e69c:	bf00      	nop
 800e69e:	bf00      	nop
 800e6a0:	e7fd      	b.n	800e69e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6a2:	4b1e      	ldr	r3, [pc, #120]	@ (800e71c <xPortStartScheduler+0x138>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	4a1c      	ldr	r2, [pc, #112]	@ (800e71c <xPortStartScheduler+0x138>)
 800e6aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800e71c <xPortStartScheduler+0x138>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6b4:	4a19      	ldr	r2, [pc, #100]	@ (800e71c <xPortStartScheduler+0x138>)
 800e6b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e6c0:	4b17      	ldr	r3, [pc, #92]	@ (800e720 <xPortStartScheduler+0x13c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a16      	ldr	r2, [pc, #88]	@ (800e720 <xPortStartScheduler+0x13c>)
 800e6c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e6ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e6cc:	4b14      	ldr	r3, [pc, #80]	@ (800e720 <xPortStartScheduler+0x13c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a13      	ldr	r2, [pc, #76]	@ (800e720 <xPortStartScheduler+0x13c>)
 800e6d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e6d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e6d8:	f000 f8e0 	bl	800e89c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e6dc:	4b11      	ldr	r3, [pc, #68]	@ (800e724 <xPortStartScheduler+0x140>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e6e2:	f000 f8ff 	bl	800e8e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6e6:	4b10      	ldr	r3, [pc, #64]	@ (800e728 <xPortStartScheduler+0x144>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a0f      	ldr	r2, [pc, #60]	@ (800e728 <xPortStartScheduler+0x144>)
 800e6ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e6f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e6f2:	f7ff ff61 	bl	800e5b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e6f6:	f7fe fdb5 	bl	800d264 <vTaskSwitchContext>
    prvTaskExitError();
 800e6fa:	f7ff ff1b 	bl	800e534 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	e000ed00 	.word	0xe000ed00
 800e70c:	410fc271 	.word	0x410fc271
 800e710:	410fc270 	.word	0x410fc270
 800e714:	e000e400 	.word	0xe000e400
 800e718:	20002864 	.word	0x20002864
 800e71c:	20002868 	.word	0x20002868
 800e720:	e000ed20 	.word	0xe000ed20
 800e724:	20000014 	.word	0x20000014
 800e728:	e000ef34 	.word	0xe000ef34

0800e72c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
        __asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	607b      	str	r3, [r7, #4]
    }
 800e744:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e746:	4b10      	ldr	r3, [pc, #64]	@ (800e788 <vPortEnterCritical+0x5c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3301      	adds	r3, #1
 800e74c:	4a0e      	ldr	r2, [pc, #56]	@ (800e788 <vPortEnterCritical+0x5c>)
 800e74e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800e750:	4b0d      	ldr	r3, [pc, #52]	@ (800e788 <vPortEnterCritical+0x5c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d110      	bne.n	800e77a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e758:	4b0c      	ldr	r3, [pc, #48]	@ (800e78c <vPortEnterCritical+0x60>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00b      	beq.n	800e77a <vPortEnterCritical+0x4e>
        __asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	603b      	str	r3, [r7, #0]
    }
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	e7fd      	b.n	800e776 <vPortEnterCritical+0x4a>
    }
}
 800e77a:	bf00      	nop
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	20000014 	.word	0x20000014
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800e796:	4b12      	ldr	r3, [pc, #72]	@ (800e7e0 <vPortExitCritical+0x50>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10b      	bne.n	800e7b6 <vPortExitCritical+0x26>
        __asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	607b      	str	r3, [r7, #4]
    }
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	e7fd      	b.n	800e7b2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800e7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e0 <vPortExitCritical+0x50>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	4a08      	ldr	r2, [pc, #32]	@ (800e7e0 <vPortExitCritical+0x50>)
 800e7be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800e7c0:	4b07      	ldr	r3, [pc, #28]	@ (800e7e0 <vPortExitCritical+0x50>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d105      	bne.n	800e7d4 <vPortExitCritical+0x44>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	603b      	str	r3, [r7, #0]
        __asm volatile
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	f383 8811 	msr	BASEPRI, r3
    }
 800e7d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	20000014 	.word	0x20000014
	...

0800e7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800e7f0:	f3ef 8009 	mrs	r0, PSP
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <pxCurrentTCBConst>)
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	f01e 0f10 	tst.w	lr, #16
 800e800:	bf08      	it	eq
 800e802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80a:	6010      	str	r0, [r2, #0]
 800e80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e814:	f380 8811 	msr	BASEPRI, r0
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f7fe fd20 	bl	800d264 <vTaskSwitchContext>
 800e824:	f04f 0000 	mov.w	r0, #0
 800e828:	f380 8811 	msr	BASEPRI, r0
 800e82c:	bc09      	pop	{r0, r3}
 800e82e:	6819      	ldr	r1, [r3, #0]
 800e830:	6808      	ldr	r0, [r1, #0]
 800e832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e836:	f01e 0f10 	tst.w	lr, #16
 800e83a:	bf08      	it	eq
 800e83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e840:	f380 8809 	msr	PSP, r0
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	f3af 8000 	nop.w

0800e850 <pxCurrentTCBConst>:
 800e850:	20002724 	.word	0x20002724
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop

0800e858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
        __asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	607b      	str	r3, [r7, #4]
    }
 800e870:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e872:	f7fe fc3d 	bl	800d0f0 <xTaskIncrementTick>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d003      	beq.n	800e884 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e87c:	4b06      	ldr	r3, [pc, #24]	@ (800e898 <SysTick_Handler+0x40>)
 800e87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	2300      	movs	r3, #0
 800e886:	603b      	str	r3, [r7, #0]
        __asm volatile
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	f383 8811 	msr	BASEPRI, r3
    }
 800e88e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800e890:	bf00      	nop
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	e000ed04 	.word	0xe000ed04

0800e89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800e89c:	b480      	push	{r7}
 800e89e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d0 <vPortSetupTimerInterrupt+0x34>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d4 <vPortSetupTimerInterrupt+0x38>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d8 <vPortSetupTimerInterrupt+0x3c>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e8dc <vPortSetupTimerInterrupt+0x40>)
 800e8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8b6:	099b      	lsrs	r3, r3, #6
 800e8b8:	4a09      	ldr	r2, [pc, #36]	@ (800e8e0 <vPortSetupTimerInterrupt+0x44>)
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8be:	4b04      	ldr	r3, [pc, #16]	@ (800e8d0 <vPortSetupTimerInterrupt+0x34>)
 800e8c0:	2207      	movs	r2, #7
 800e8c2:	601a      	str	r2, [r3, #0]
}
 800e8c4:	bf00      	nop
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	e000e010 	.word	0xe000e010
 800e8d4:	e000e018 	.word	0xe000e018
 800e8d8:	20000000 	.word	0x20000000
 800e8dc:	10624dd3 	.word	0x10624dd3
 800e8e0:	e000e014 	.word	0xe000e014

0800e8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800e8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e8f4 <vPortEnableVFP+0x10>
 800e8e8:	6801      	ldr	r1, [r0, #0]
 800e8ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e8ee:	6001      	str	r1, [r0, #0]
 800e8f0:	4770      	bx	lr
 800e8f2:	0000      	.short	0x0000
 800e8f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800e8f8:	bf00      	nop
 800e8fa:	bf00      	nop

0800e8fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800e902:	f3ef 8305 	mrs	r3, IPSR
 800e906:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b0f      	cmp	r3, #15
 800e90c:	d915      	bls.n	800e93a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e90e:	4a18      	ldr	r2, [pc, #96]	@ (800e970 <vPortValidateInterruptPriority+0x74>)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4413      	add	r3, r2
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e918:	4b16      	ldr	r3, [pc, #88]	@ (800e974 <vPortValidateInterruptPriority+0x78>)
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	7afa      	ldrb	r2, [r7, #11]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d20b      	bcs.n	800e93a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	607b      	str	r3, [r7, #4]
    }
 800e934:	bf00      	nop
 800e936:	bf00      	nop
 800e938:	e7fd      	b.n	800e936 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e93a:	4b0f      	ldr	r3, [pc, #60]	@ (800e978 <vPortValidateInterruptPriority+0x7c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e942:	4b0e      	ldr	r3, [pc, #56]	@ (800e97c <vPortValidateInterruptPriority+0x80>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d90b      	bls.n	800e962 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	603b      	str	r3, [r7, #0]
    }
 800e95c:	bf00      	nop
 800e95e:	bf00      	nop
 800e960:	e7fd      	b.n	800e95e <vPortValidateInterruptPriority+0x62>
    }
 800e962:	bf00      	nop
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	e000e3f0 	.word	0xe000e3f0
 800e974:	20002864 	.word	0x20002864
 800e978:	e000ed0c 	.word	0xe000ed0c
 800e97c:	20002868 	.word	0x20002868

0800e980 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08a      	sub	sp, #40	@ 0x28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800e988:	2300      	movs	r3, #0
 800e98a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800e98c:	f7fe faf4 	bl	800cf78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800e990:	4b66      	ldr	r3, [pc, #408]	@ (800eb2c <pvPortMalloc+0x1ac>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800e998:	f000 f938 	bl	800ec0c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e99c:	4b64      	ldr	r3, [pc, #400]	@ (800eb30 <pvPortMalloc+0x1b0>)
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f040 80a9 	bne.w	800eafc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d02e      	beq.n	800ea0e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800e9b0:	2208      	movs	r2, #8
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d228      	bcs.n	800ea0e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800e9bc:	2208      	movs	r2, #8
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d022      	beq.n	800ea14 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f023 0307 	bic.w	r3, r3, #7
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d215      	bcs.n	800ea08 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f023 0307 	bic.w	r3, r3, #7
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f003 0307 	and.w	r3, r3, #7
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d011      	beq.n	800ea14 <pvPortMalloc+0x94>
        __asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	617b      	str	r3, [r7, #20]
    }
 800ea02:	bf00      	nop
 800ea04:	bf00      	nop
 800ea06:	e7fd      	b.n	800ea04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea0c:	e002      	b.n	800ea14 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	607b      	str	r3, [r7, #4]
 800ea12:	e000      	b.n	800ea16 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea14:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d06f      	beq.n	800eafc <pvPortMalloc+0x17c>
 800ea1c:	4b45      	ldr	r3, [pc, #276]	@ (800eb34 <pvPortMalloc+0x1b4>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d86a      	bhi.n	800eafc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ea26:	4b44      	ldr	r3, [pc, #272]	@ (800eb38 <pvPortMalloc+0x1b8>)
 800ea28:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800ea2a:	4b43      	ldr	r3, [pc, #268]	@ (800eb38 <pvPortMalloc+0x1b8>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea30:	e004      	b.n	800ea3c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea34:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d903      	bls.n	800ea4e <pvPortMalloc+0xce>
 800ea46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1f1      	bne.n	800ea32 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ea4e:	4b37      	ldr	r3, [pc, #220]	@ (800eb2c <pvPortMalloc+0x1ac>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d051      	beq.n	800eafc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2208      	movs	r2, #8
 800ea5e:	4413      	add	r3, r2
 800ea60:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	1ad2      	subs	r2, r2, r3
 800ea72:	2308      	movs	r3, #8
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d920      	bls.n	800eabc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4413      	add	r3, r2
 800ea80:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00b      	beq.n	800eaa4 <pvPortMalloc+0x124>
        __asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	613b      	str	r3, [r7, #16]
    }
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	e7fd      	b.n	800eaa0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	1ad2      	subs	r2, r2, r3
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800eab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eab6:	69b8      	ldr	r0, [r7, #24]
 800eab8:	f000 f90a 	bl	800ecd0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eabc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb34 <pvPortMalloc+0x1b4>)
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb34 <pvPortMalloc+0x1b4>)
 800eac8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaca:	4b1a      	ldr	r3, [pc, #104]	@ (800eb34 <pvPortMalloc+0x1b4>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	4b1b      	ldr	r3, [pc, #108]	@ (800eb3c <pvPortMalloc+0x1bc>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d203      	bcs.n	800eade <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ead6:	4b17      	ldr	r3, [pc, #92]	@ (800eb34 <pvPortMalloc+0x1b4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a18      	ldr	r2, [pc, #96]	@ (800eb3c <pvPortMalloc+0x1bc>)
 800eadc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae0:	685a      	ldr	r2, [r3, #4]
 800eae2:	4b13      	ldr	r3, [pc, #76]	@ (800eb30 <pvPortMalloc+0x1b0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	431a      	orrs	r2, r3
 800eae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800eaf2:	4b13      	ldr	r3, [pc, #76]	@ (800eb40 <pvPortMalloc+0x1c0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	4a11      	ldr	r2, [pc, #68]	@ (800eb40 <pvPortMalloc+0x1c0>)
 800eafa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800eafc:	f7fe fa4a 	bl	800cf94 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	f003 0307 	and.w	r3, r3, #7
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00b      	beq.n	800eb22 <pvPortMalloc+0x1a2>
        __asm volatile
 800eb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	60fb      	str	r3, [r7, #12]
    }
 800eb1c:	bf00      	nop
 800eb1e:	bf00      	nop
 800eb20:	e7fd      	b.n	800eb1e <pvPortMalloc+0x19e>
    return pvReturn;
 800eb22:	69fb      	ldr	r3, [r7, #28]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3728      	adds	r7, #40	@ 0x28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20015474 	.word	0x20015474
 800eb30:	20015488 	.word	0x20015488
 800eb34:	20015478 	.word	0x20015478
 800eb38:	2001546c 	.word	0x2001546c
 800eb3c:	2001547c 	.word	0x2001547c
 800eb40:	20015480 	.word	0x20015480

0800eb44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d04f      	beq.n	800ebf6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800eb56:	2308      	movs	r3, #8
 800eb58:	425b      	negs	r3, r3
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	4b25      	ldr	r3, [pc, #148]	@ (800ec00 <vPortFree+0xbc>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10b      	bne.n	800eb8a <vPortFree+0x46>
        __asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	60fb      	str	r3, [r7, #12]
    }
 800eb84:	bf00      	nop
 800eb86:	bf00      	nop
 800eb88:	e7fd      	b.n	800eb86 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00b      	beq.n	800ebaa <vPortFree+0x66>
        __asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	60bb      	str	r3, [r7, #8]
    }
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop
 800eba8:	e7fd      	b.n	800eba6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	4b14      	ldr	r3, [pc, #80]	@ (800ec00 <vPortFree+0xbc>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01e      	beq.n	800ebf6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d11a      	bne.n	800ebf6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ec00 <vPortFree+0xbc>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	43db      	mvns	r3, r3
 800ebca:	401a      	ands	r2, r3
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800ebd0:	f7fe f9d2 	bl	800cf78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec04 <vPortFree+0xc0>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4413      	add	r3, r2
 800ebde:	4a09      	ldr	r2, [pc, #36]	@ (800ec04 <vPortFree+0xc0>)
 800ebe0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebe2:	6938      	ldr	r0, [r7, #16]
 800ebe4:	f000 f874 	bl	800ecd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ebe8:	4b07      	ldr	r3, [pc, #28]	@ (800ec08 <vPortFree+0xc4>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3301      	adds	r3, #1
 800ebee:	4a06      	ldr	r2, [pc, #24]	@ (800ec08 <vPortFree+0xc4>)
 800ebf0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ebf2:	f7fe f9cf 	bl	800cf94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ebf6:	bf00      	nop
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20015488 	.word	0x20015488
 800ec04:	20015478 	.word	0x20015478
 800ec08:	20015484 	.word	0x20015484

0800ec0c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec12:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800ec16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800ec18:	4b27      	ldr	r3, [pc, #156]	@ (800ecb8 <prvHeapInit+0xac>)
 800ec1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f003 0307 	and.w	r3, r3, #7
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00c      	beq.n	800ec40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3307      	adds	r3, #7
 800ec2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f023 0307 	bic.w	r3, r3, #7
 800ec32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	4a1f      	ldr	r2, [pc, #124]	@ (800ecb8 <prvHeapInit+0xac>)
 800ec3c:	4413      	add	r3, r2
 800ec3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec44:	4a1d      	ldr	r2, [pc, #116]	@ (800ecbc <prvHeapInit+0xb0>)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ec4a:	4b1c      	ldr	r3, [pc, #112]	@ (800ecbc <prvHeapInit+0xb0>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	4413      	add	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ec58:	2208      	movs	r2, #8
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	1a9b      	subs	r3, r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f023 0307 	bic.w	r3, r3, #7
 800ec66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4a15      	ldr	r2, [pc, #84]	@ (800ecc0 <prvHeapInit+0xb4>)
 800ec6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ec6e:	4b14      	ldr	r3, [pc, #80]	@ (800ecc0 <prvHeapInit+0xb4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2200      	movs	r2, #0
 800ec74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ec76:	4b12      	ldr	r3, [pc, #72]	@ (800ecc0 <prvHeapInit+0xb4>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	1ad2      	subs	r2, r2, r3
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ecc0 <prvHeapInit+0xb4>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	4a0a      	ldr	r2, [pc, #40]	@ (800ecc4 <prvHeapInit+0xb8>)
 800ec9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	4a09      	ldr	r2, [pc, #36]	@ (800ecc8 <prvHeapInit+0xbc>)
 800eca2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eca4:	4b09      	ldr	r3, [pc, #36]	@ (800eccc <prvHeapInit+0xc0>)
 800eca6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecaa:	601a      	str	r2, [r3, #0]
}
 800ecac:	bf00      	nop
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	2000286c 	.word	0x2000286c
 800ecbc:	2001546c 	.word	0x2001546c
 800ecc0:	20015474 	.word	0x20015474
 800ecc4:	2001547c 	.word	0x2001547c
 800ecc8:	20015478 	.word	0x20015478
 800eccc:	20015488 	.word	0x20015488

0800ecd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecd8:	4b28      	ldr	r3, [pc, #160]	@ (800ed7c <prvInsertBlockIntoFreeList+0xac>)
 800ecda:	60fb      	str	r3, [r7, #12]
 800ecdc:	e002      	b.n	800ece4 <prvInsertBlockIntoFreeList+0x14>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d8f7      	bhi.n	800ecde <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d108      	bne.n	800ed12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	441a      	add	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d118      	bne.n	800ed58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	4b15      	ldr	r3, [pc, #84]	@ (800ed80 <prvInsertBlockIntoFreeList+0xb0>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d00d      	beq.n	800ed4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	441a      	add	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	e008      	b.n	800ed60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed80 <prvInsertBlockIntoFreeList+0xb0>)
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	601a      	str	r2, [r3, #0]
 800ed56:	e003      	b.n	800ed60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d002      	beq.n	800ed6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ed6e:	bf00      	nop
 800ed70:	3714      	adds	r7, #20
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	2001546c 	.word	0x2001546c
 800ed80:	20015474 	.word	0x20015474

0800ed84 <malloc>:
 800ed84:	4b02      	ldr	r3, [pc, #8]	@ (800ed90 <malloc+0xc>)
 800ed86:	4601      	mov	r1, r0
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	f000 b82d 	b.w	800ede8 <_malloc_r>
 800ed8e:	bf00      	nop
 800ed90:	20000024 	.word	0x20000024

0800ed94 <free>:
 800ed94:	4b02      	ldr	r3, [pc, #8]	@ (800eda0 <free+0xc>)
 800ed96:	4601      	mov	r1, r0
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	f001 bd45 	b.w	8010828 <_free_r>
 800ed9e:	bf00      	nop
 800eda0:	20000024 	.word	0x20000024

0800eda4 <sbrk_aligned>:
 800eda4:	b570      	push	{r4, r5, r6, lr}
 800eda6:	4e0f      	ldr	r6, [pc, #60]	@ (800ede4 <sbrk_aligned+0x40>)
 800eda8:	460c      	mov	r4, r1
 800edaa:	6831      	ldr	r1, [r6, #0]
 800edac:	4605      	mov	r5, r0
 800edae:	b911      	cbnz	r1, 800edb6 <sbrk_aligned+0x12>
 800edb0:	f000 fe90 	bl	800fad4 <_sbrk_r>
 800edb4:	6030      	str	r0, [r6, #0]
 800edb6:	4621      	mov	r1, r4
 800edb8:	4628      	mov	r0, r5
 800edba:	f000 fe8b 	bl	800fad4 <_sbrk_r>
 800edbe:	1c43      	adds	r3, r0, #1
 800edc0:	d103      	bne.n	800edca <sbrk_aligned+0x26>
 800edc2:	f04f 34ff 	mov.w	r4, #4294967295
 800edc6:	4620      	mov	r0, r4
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
 800edca:	1cc4      	adds	r4, r0, #3
 800edcc:	f024 0403 	bic.w	r4, r4, #3
 800edd0:	42a0      	cmp	r0, r4
 800edd2:	d0f8      	beq.n	800edc6 <sbrk_aligned+0x22>
 800edd4:	1a21      	subs	r1, r4, r0
 800edd6:	4628      	mov	r0, r5
 800edd8:	f000 fe7c 	bl	800fad4 <_sbrk_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	d1f2      	bne.n	800edc6 <sbrk_aligned+0x22>
 800ede0:	e7ef      	b.n	800edc2 <sbrk_aligned+0x1e>
 800ede2:	bf00      	nop
 800ede4:	2001548c 	.word	0x2001548c

0800ede8 <_malloc_r>:
 800ede8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edec:	1ccd      	adds	r5, r1, #3
 800edee:	f025 0503 	bic.w	r5, r5, #3
 800edf2:	3508      	adds	r5, #8
 800edf4:	2d0c      	cmp	r5, #12
 800edf6:	bf38      	it	cc
 800edf8:	250c      	movcc	r5, #12
 800edfa:	2d00      	cmp	r5, #0
 800edfc:	4606      	mov	r6, r0
 800edfe:	db01      	blt.n	800ee04 <_malloc_r+0x1c>
 800ee00:	42a9      	cmp	r1, r5
 800ee02:	d904      	bls.n	800ee0e <_malloc_r+0x26>
 800ee04:	230c      	movs	r3, #12
 800ee06:	6033      	str	r3, [r6, #0]
 800ee08:	2000      	movs	r0, #0
 800ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eee4 <_malloc_r+0xfc>
 800ee12:	f000 f869 	bl	800eee8 <__malloc_lock>
 800ee16:	f8d8 3000 	ldr.w	r3, [r8]
 800ee1a:	461c      	mov	r4, r3
 800ee1c:	bb44      	cbnz	r4, 800ee70 <_malloc_r+0x88>
 800ee1e:	4629      	mov	r1, r5
 800ee20:	4630      	mov	r0, r6
 800ee22:	f7ff ffbf 	bl	800eda4 <sbrk_aligned>
 800ee26:	1c43      	adds	r3, r0, #1
 800ee28:	4604      	mov	r4, r0
 800ee2a:	d158      	bne.n	800eede <_malloc_r+0xf6>
 800ee2c:	f8d8 4000 	ldr.w	r4, [r8]
 800ee30:	4627      	mov	r7, r4
 800ee32:	2f00      	cmp	r7, #0
 800ee34:	d143      	bne.n	800eebe <_malloc_r+0xd6>
 800ee36:	2c00      	cmp	r4, #0
 800ee38:	d04b      	beq.n	800eed2 <_malloc_r+0xea>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	4630      	mov	r0, r6
 800ee40:	eb04 0903 	add.w	r9, r4, r3
 800ee44:	f000 fe46 	bl	800fad4 <_sbrk_r>
 800ee48:	4581      	cmp	r9, r0
 800ee4a:	d142      	bne.n	800eed2 <_malloc_r+0xea>
 800ee4c:	6821      	ldr	r1, [r4, #0]
 800ee4e:	1a6d      	subs	r5, r5, r1
 800ee50:	4629      	mov	r1, r5
 800ee52:	4630      	mov	r0, r6
 800ee54:	f7ff ffa6 	bl	800eda4 <sbrk_aligned>
 800ee58:	3001      	adds	r0, #1
 800ee5a:	d03a      	beq.n	800eed2 <_malloc_r+0xea>
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	442b      	add	r3, r5
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	f8d8 3000 	ldr.w	r3, [r8]
 800ee66:	685a      	ldr	r2, [r3, #4]
 800ee68:	bb62      	cbnz	r2, 800eec4 <_malloc_r+0xdc>
 800ee6a:	f8c8 7000 	str.w	r7, [r8]
 800ee6e:	e00f      	b.n	800ee90 <_malloc_r+0xa8>
 800ee70:	6822      	ldr	r2, [r4, #0]
 800ee72:	1b52      	subs	r2, r2, r5
 800ee74:	d420      	bmi.n	800eeb8 <_malloc_r+0xd0>
 800ee76:	2a0b      	cmp	r2, #11
 800ee78:	d917      	bls.n	800eeaa <_malloc_r+0xc2>
 800ee7a:	1961      	adds	r1, r4, r5
 800ee7c:	42a3      	cmp	r3, r4
 800ee7e:	6025      	str	r5, [r4, #0]
 800ee80:	bf18      	it	ne
 800ee82:	6059      	strne	r1, [r3, #4]
 800ee84:	6863      	ldr	r3, [r4, #4]
 800ee86:	bf08      	it	eq
 800ee88:	f8c8 1000 	streq.w	r1, [r8]
 800ee8c:	5162      	str	r2, [r4, r5]
 800ee8e:	604b      	str	r3, [r1, #4]
 800ee90:	4630      	mov	r0, r6
 800ee92:	f000 f82f 	bl	800eef4 <__malloc_unlock>
 800ee96:	f104 000b 	add.w	r0, r4, #11
 800ee9a:	1d23      	adds	r3, r4, #4
 800ee9c:	f020 0007 	bic.w	r0, r0, #7
 800eea0:	1ac2      	subs	r2, r0, r3
 800eea2:	bf1c      	itt	ne
 800eea4:	1a1b      	subne	r3, r3, r0
 800eea6:	50a3      	strne	r3, [r4, r2]
 800eea8:	e7af      	b.n	800ee0a <_malloc_r+0x22>
 800eeaa:	6862      	ldr	r2, [r4, #4]
 800eeac:	42a3      	cmp	r3, r4
 800eeae:	bf0c      	ite	eq
 800eeb0:	f8c8 2000 	streq.w	r2, [r8]
 800eeb4:	605a      	strne	r2, [r3, #4]
 800eeb6:	e7eb      	b.n	800ee90 <_malloc_r+0xa8>
 800eeb8:	4623      	mov	r3, r4
 800eeba:	6864      	ldr	r4, [r4, #4]
 800eebc:	e7ae      	b.n	800ee1c <_malloc_r+0x34>
 800eebe:	463c      	mov	r4, r7
 800eec0:	687f      	ldr	r7, [r7, #4]
 800eec2:	e7b6      	b.n	800ee32 <_malloc_r+0x4a>
 800eec4:	461a      	mov	r2, r3
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	d1fb      	bne.n	800eec4 <_malloc_r+0xdc>
 800eecc:	2300      	movs	r3, #0
 800eece:	6053      	str	r3, [r2, #4]
 800eed0:	e7de      	b.n	800ee90 <_malloc_r+0xa8>
 800eed2:	230c      	movs	r3, #12
 800eed4:	6033      	str	r3, [r6, #0]
 800eed6:	4630      	mov	r0, r6
 800eed8:	f000 f80c 	bl	800eef4 <__malloc_unlock>
 800eedc:	e794      	b.n	800ee08 <_malloc_r+0x20>
 800eede:	6005      	str	r5, [r0, #0]
 800eee0:	e7d6      	b.n	800ee90 <_malloc_r+0xa8>
 800eee2:	bf00      	nop
 800eee4:	20015490 	.word	0x20015490

0800eee8 <__malloc_lock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	@ (800eef0 <__malloc_lock+0x8>)
 800eeea:	f000 be40 	b.w	800fb6e <__retarget_lock_acquire_recursive>
 800eeee:	bf00      	nop
 800eef0:	200155d4 	.word	0x200155d4

0800eef4 <__malloc_unlock>:
 800eef4:	4801      	ldr	r0, [pc, #4]	@ (800eefc <__malloc_unlock+0x8>)
 800eef6:	f000 be3b 	b.w	800fb70 <__retarget_lock_release_recursive>
 800eefa:	bf00      	nop
 800eefc:	200155d4 	.word	0x200155d4

0800ef00 <__cvt>:
 800ef00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	ec57 6b10 	vmov	r6, r7, d0
 800ef08:	2f00      	cmp	r7, #0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	463b      	mov	r3, r7
 800ef10:	bfbb      	ittet	lt
 800ef12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ef16:	461f      	movlt	r7, r3
 800ef18:	2300      	movge	r3, #0
 800ef1a:	232d      	movlt	r3, #45	@ 0x2d
 800ef1c:	700b      	strb	r3, [r1, #0]
 800ef1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ef24:	4691      	mov	r9, r2
 800ef26:	f023 0820 	bic.w	r8, r3, #32
 800ef2a:	bfbc      	itt	lt
 800ef2c:	4632      	movlt	r2, r6
 800ef2e:	4616      	movlt	r6, r2
 800ef30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef34:	d005      	beq.n	800ef42 <__cvt+0x42>
 800ef36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ef3a:	d100      	bne.n	800ef3e <__cvt+0x3e>
 800ef3c:	3401      	adds	r4, #1
 800ef3e:	2102      	movs	r1, #2
 800ef40:	e000      	b.n	800ef44 <__cvt+0x44>
 800ef42:	2103      	movs	r1, #3
 800ef44:	ab03      	add	r3, sp, #12
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	ab02      	add	r3, sp, #8
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	ec47 6b10 	vmov	d0, r6, r7
 800ef50:	4653      	mov	r3, sl
 800ef52:	4622      	mov	r2, r4
 800ef54:	f000 fea4 	bl	800fca0 <_dtoa_r>
 800ef58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef5c:	4605      	mov	r5, r0
 800ef5e:	d119      	bne.n	800ef94 <__cvt+0x94>
 800ef60:	f019 0f01 	tst.w	r9, #1
 800ef64:	d00e      	beq.n	800ef84 <__cvt+0x84>
 800ef66:	eb00 0904 	add.w	r9, r0, r4
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4630      	mov	r0, r6
 800ef70:	4639      	mov	r1, r7
 800ef72:	f7f1 fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef76:	b108      	cbz	r0, 800ef7c <__cvt+0x7c>
 800ef78:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef7c:	2230      	movs	r2, #48	@ 0x30
 800ef7e:	9b03      	ldr	r3, [sp, #12]
 800ef80:	454b      	cmp	r3, r9
 800ef82:	d31e      	bcc.n	800efc2 <__cvt+0xc2>
 800ef84:	9b03      	ldr	r3, [sp, #12]
 800ef86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef88:	1b5b      	subs	r3, r3, r5
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	b004      	add	sp, #16
 800ef90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef98:	eb00 0904 	add.w	r9, r0, r4
 800ef9c:	d1e5      	bne.n	800ef6a <__cvt+0x6a>
 800ef9e:	7803      	ldrb	r3, [r0, #0]
 800efa0:	2b30      	cmp	r3, #48	@ 0x30
 800efa2:	d10a      	bne.n	800efba <__cvt+0xba>
 800efa4:	2200      	movs	r2, #0
 800efa6:	2300      	movs	r3, #0
 800efa8:	4630      	mov	r0, r6
 800efaa:	4639      	mov	r1, r7
 800efac:	f7f1 fd9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800efb0:	b918      	cbnz	r0, 800efba <__cvt+0xba>
 800efb2:	f1c4 0401 	rsb	r4, r4, #1
 800efb6:	f8ca 4000 	str.w	r4, [sl]
 800efba:	f8da 3000 	ldr.w	r3, [sl]
 800efbe:	4499      	add	r9, r3
 800efc0:	e7d3      	b.n	800ef6a <__cvt+0x6a>
 800efc2:	1c59      	adds	r1, r3, #1
 800efc4:	9103      	str	r1, [sp, #12]
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	e7d9      	b.n	800ef7e <__cvt+0x7e>

0800efca <__exponent>:
 800efca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efcc:	2900      	cmp	r1, #0
 800efce:	bfba      	itte	lt
 800efd0:	4249      	neglt	r1, r1
 800efd2:	232d      	movlt	r3, #45	@ 0x2d
 800efd4:	232b      	movge	r3, #43	@ 0x2b
 800efd6:	2909      	cmp	r1, #9
 800efd8:	7002      	strb	r2, [r0, #0]
 800efda:	7043      	strb	r3, [r0, #1]
 800efdc:	dd29      	ble.n	800f032 <__exponent+0x68>
 800efde:	f10d 0307 	add.w	r3, sp, #7
 800efe2:	461d      	mov	r5, r3
 800efe4:	270a      	movs	r7, #10
 800efe6:	461a      	mov	r2, r3
 800efe8:	fbb1 f6f7 	udiv	r6, r1, r7
 800efec:	fb07 1416 	mls	r4, r7, r6, r1
 800eff0:	3430      	adds	r4, #48	@ 0x30
 800eff2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eff6:	460c      	mov	r4, r1
 800eff8:	2c63      	cmp	r4, #99	@ 0x63
 800effa:	f103 33ff 	add.w	r3, r3, #4294967295
 800effe:	4631      	mov	r1, r6
 800f000:	dcf1      	bgt.n	800efe6 <__exponent+0x1c>
 800f002:	3130      	adds	r1, #48	@ 0x30
 800f004:	1e94      	subs	r4, r2, #2
 800f006:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f00a:	1c41      	adds	r1, r0, #1
 800f00c:	4623      	mov	r3, r4
 800f00e:	42ab      	cmp	r3, r5
 800f010:	d30a      	bcc.n	800f028 <__exponent+0x5e>
 800f012:	f10d 0309 	add.w	r3, sp, #9
 800f016:	1a9b      	subs	r3, r3, r2
 800f018:	42ac      	cmp	r4, r5
 800f01a:	bf88      	it	hi
 800f01c:	2300      	movhi	r3, #0
 800f01e:	3302      	adds	r3, #2
 800f020:	4403      	add	r3, r0
 800f022:	1a18      	subs	r0, r3, r0
 800f024:	b003      	add	sp, #12
 800f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f028:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f02c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f030:	e7ed      	b.n	800f00e <__exponent+0x44>
 800f032:	2330      	movs	r3, #48	@ 0x30
 800f034:	3130      	adds	r1, #48	@ 0x30
 800f036:	7083      	strb	r3, [r0, #2]
 800f038:	70c1      	strb	r1, [r0, #3]
 800f03a:	1d03      	adds	r3, r0, #4
 800f03c:	e7f1      	b.n	800f022 <__exponent+0x58>
	...

0800f040 <_printf_float>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	b08d      	sub	sp, #52	@ 0x34
 800f046:	460c      	mov	r4, r1
 800f048:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f04c:	4616      	mov	r6, r2
 800f04e:	461f      	mov	r7, r3
 800f050:	4605      	mov	r5, r0
 800f052:	f000 fd07 	bl	800fa64 <_localeconv_r>
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f1 f918 	bl	8000290 <strlen>
 800f060:	2300      	movs	r3, #0
 800f062:	930a      	str	r3, [sp, #40]	@ 0x28
 800f064:	f8d8 3000 	ldr.w	r3, [r8]
 800f068:	9005      	str	r0, [sp, #20]
 800f06a:	3307      	adds	r3, #7
 800f06c:	f023 0307 	bic.w	r3, r3, #7
 800f070:	f103 0208 	add.w	r2, r3, #8
 800f074:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f078:	f8d4 b000 	ldr.w	fp, [r4]
 800f07c:	f8c8 2000 	str.w	r2, [r8]
 800f080:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f084:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f088:	9307      	str	r3, [sp, #28]
 800f08a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f08e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f096:	4b9c      	ldr	r3, [pc, #624]	@ (800f308 <_printf_float+0x2c8>)
 800f098:	f04f 32ff 	mov.w	r2, #4294967295
 800f09c:	f7f1 fd56 	bl	8000b4c <__aeabi_dcmpun>
 800f0a0:	bb70      	cbnz	r0, 800f100 <_printf_float+0xc0>
 800f0a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0a6:	4b98      	ldr	r3, [pc, #608]	@ (800f308 <_printf_float+0x2c8>)
 800f0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ac:	f7f1 fd30 	bl	8000b10 <__aeabi_dcmple>
 800f0b0:	bb30      	cbnz	r0, 800f100 <_printf_float+0xc0>
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	f7f1 fd1f 	bl	8000afc <__aeabi_dcmplt>
 800f0be:	b110      	cbz	r0, 800f0c6 <_printf_float+0x86>
 800f0c0:	232d      	movs	r3, #45	@ 0x2d
 800f0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0c6:	4a91      	ldr	r2, [pc, #580]	@ (800f30c <_printf_float+0x2cc>)
 800f0c8:	4b91      	ldr	r3, [pc, #580]	@ (800f310 <_printf_float+0x2d0>)
 800f0ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0ce:	bf94      	ite	ls
 800f0d0:	4690      	movls	r8, r2
 800f0d2:	4698      	movhi	r8, r3
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	6123      	str	r3, [r4, #16]
 800f0d8:	f02b 0304 	bic.w	r3, fp, #4
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	f04f 0900 	mov.w	r9, #0
 800f0e2:	9700      	str	r7, [sp, #0]
 800f0e4:	4633      	mov	r3, r6
 800f0e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f000 f9d2 	bl	800f494 <_printf_common>
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	f040 808d 	bne.w	800f210 <_printf_float+0x1d0>
 800f0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fa:	b00d      	add	sp, #52	@ 0x34
 800f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f100:	4642      	mov	r2, r8
 800f102:	464b      	mov	r3, r9
 800f104:	4640      	mov	r0, r8
 800f106:	4649      	mov	r1, r9
 800f108:	f7f1 fd20 	bl	8000b4c <__aeabi_dcmpun>
 800f10c:	b140      	cbz	r0, 800f120 <_printf_float+0xe0>
 800f10e:	464b      	mov	r3, r9
 800f110:	2b00      	cmp	r3, #0
 800f112:	bfbc      	itt	lt
 800f114:	232d      	movlt	r3, #45	@ 0x2d
 800f116:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f11a:	4a7e      	ldr	r2, [pc, #504]	@ (800f314 <_printf_float+0x2d4>)
 800f11c:	4b7e      	ldr	r3, [pc, #504]	@ (800f318 <_printf_float+0x2d8>)
 800f11e:	e7d4      	b.n	800f0ca <_printf_float+0x8a>
 800f120:	6863      	ldr	r3, [r4, #4]
 800f122:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f126:	9206      	str	r2, [sp, #24]
 800f128:	1c5a      	adds	r2, r3, #1
 800f12a:	d13b      	bne.n	800f1a4 <_printf_float+0x164>
 800f12c:	2306      	movs	r3, #6
 800f12e:	6063      	str	r3, [r4, #4]
 800f130:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f134:	2300      	movs	r3, #0
 800f136:	6022      	str	r2, [r4, #0]
 800f138:	9303      	str	r3, [sp, #12]
 800f13a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f13c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f140:	ab09      	add	r3, sp, #36	@ 0x24
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	ec49 8b10 	vmov	d0, r8, r9
 800f14a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f14e:	4628      	mov	r0, r5
 800f150:	f7ff fed6 	bl	800ef00 <__cvt>
 800f154:	9b06      	ldr	r3, [sp, #24]
 800f156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f158:	2b47      	cmp	r3, #71	@ 0x47
 800f15a:	4680      	mov	r8, r0
 800f15c:	d129      	bne.n	800f1b2 <_printf_float+0x172>
 800f15e:	1cc8      	adds	r0, r1, #3
 800f160:	db02      	blt.n	800f168 <_printf_float+0x128>
 800f162:	6863      	ldr	r3, [r4, #4]
 800f164:	4299      	cmp	r1, r3
 800f166:	dd41      	ble.n	800f1ec <_printf_float+0x1ac>
 800f168:	f1aa 0a02 	sub.w	sl, sl, #2
 800f16c:	fa5f fa8a 	uxtb.w	sl, sl
 800f170:	3901      	subs	r1, #1
 800f172:	4652      	mov	r2, sl
 800f174:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f178:	9109      	str	r1, [sp, #36]	@ 0x24
 800f17a:	f7ff ff26 	bl	800efca <__exponent>
 800f17e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f180:	1813      	adds	r3, r2, r0
 800f182:	2a01      	cmp	r2, #1
 800f184:	4681      	mov	r9, r0
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	dc02      	bgt.n	800f190 <_printf_float+0x150>
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	07d2      	lsls	r2, r2, #31
 800f18e:	d501      	bpl.n	800f194 <_printf_float+0x154>
 800f190:	3301      	adds	r3, #1
 800f192:	6123      	str	r3, [r4, #16]
 800f194:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d0a2      	beq.n	800f0e2 <_printf_float+0xa2>
 800f19c:	232d      	movs	r3, #45	@ 0x2d
 800f19e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1a2:	e79e      	b.n	800f0e2 <_printf_float+0xa2>
 800f1a4:	9a06      	ldr	r2, [sp, #24]
 800f1a6:	2a47      	cmp	r2, #71	@ 0x47
 800f1a8:	d1c2      	bne.n	800f130 <_printf_float+0xf0>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1c0      	bne.n	800f130 <_printf_float+0xf0>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e7bd      	b.n	800f12e <_printf_float+0xee>
 800f1b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f1b6:	d9db      	bls.n	800f170 <_printf_float+0x130>
 800f1b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f1bc:	d118      	bne.n	800f1f0 <_printf_float+0x1b0>
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	6863      	ldr	r3, [r4, #4]
 800f1c2:	dd0b      	ble.n	800f1dc <_printf_float+0x19c>
 800f1c4:	6121      	str	r1, [r4, #16]
 800f1c6:	b913      	cbnz	r3, 800f1ce <_printf_float+0x18e>
 800f1c8:	6822      	ldr	r2, [r4, #0]
 800f1ca:	07d0      	lsls	r0, r2, #31
 800f1cc:	d502      	bpl.n	800f1d4 <_printf_float+0x194>
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	440b      	add	r3, r1
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f1d6:	f04f 0900 	mov.w	r9, #0
 800f1da:	e7db      	b.n	800f194 <_printf_float+0x154>
 800f1dc:	b913      	cbnz	r3, 800f1e4 <_printf_float+0x1a4>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	07d2      	lsls	r2, r2, #31
 800f1e2:	d501      	bpl.n	800f1e8 <_printf_float+0x1a8>
 800f1e4:	3302      	adds	r3, #2
 800f1e6:	e7f4      	b.n	800f1d2 <_printf_float+0x192>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e7f2      	b.n	800f1d2 <_printf_float+0x192>
 800f1ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f1f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f2:	4299      	cmp	r1, r3
 800f1f4:	db05      	blt.n	800f202 <_printf_float+0x1c2>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	6121      	str	r1, [r4, #16]
 800f1fa:	07d8      	lsls	r0, r3, #31
 800f1fc:	d5ea      	bpl.n	800f1d4 <_printf_float+0x194>
 800f1fe:	1c4b      	adds	r3, r1, #1
 800f200:	e7e7      	b.n	800f1d2 <_printf_float+0x192>
 800f202:	2900      	cmp	r1, #0
 800f204:	bfd4      	ite	le
 800f206:	f1c1 0202 	rsble	r2, r1, #2
 800f20a:	2201      	movgt	r2, #1
 800f20c:	4413      	add	r3, r2
 800f20e:	e7e0      	b.n	800f1d2 <_printf_float+0x192>
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	055a      	lsls	r2, r3, #21
 800f214:	d407      	bmi.n	800f226 <_printf_float+0x1e6>
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	4642      	mov	r2, r8
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	d12b      	bne.n	800f27c <_printf_float+0x23c>
 800f224:	e767      	b.n	800f0f6 <_printf_float+0xb6>
 800f226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f22a:	f240 80dd 	bls.w	800f3e8 <_printf_float+0x3a8>
 800f22e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f232:	2200      	movs	r2, #0
 800f234:	2300      	movs	r3, #0
 800f236:	f7f1 fc57 	bl	8000ae8 <__aeabi_dcmpeq>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d033      	beq.n	800f2a6 <_printf_float+0x266>
 800f23e:	4a37      	ldr	r2, [pc, #220]	@ (800f31c <_printf_float+0x2dc>)
 800f240:	2301      	movs	r3, #1
 800f242:	4631      	mov	r1, r6
 800f244:	4628      	mov	r0, r5
 800f246:	47b8      	blx	r7
 800f248:	3001      	adds	r0, #1
 800f24a:	f43f af54 	beq.w	800f0f6 <_printf_float+0xb6>
 800f24e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f252:	4543      	cmp	r3, r8
 800f254:	db02      	blt.n	800f25c <_printf_float+0x21c>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	07d8      	lsls	r0, r3, #31
 800f25a:	d50f      	bpl.n	800f27c <_printf_float+0x23c>
 800f25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f260:	4631      	mov	r1, r6
 800f262:	4628      	mov	r0, r5
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f af45 	beq.w	800f0f6 <_printf_float+0xb6>
 800f26c:	f04f 0900 	mov.w	r9, #0
 800f270:	f108 38ff 	add.w	r8, r8, #4294967295
 800f274:	f104 0a1a 	add.w	sl, r4, #26
 800f278:	45c8      	cmp	r8, r9
 800f27a:	dc09      	bgt.n	800f290 <_printf_float+0x250>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	079b      	lsls	r3, r3, #30
 800f280:	f100 8103 	bmi.w	800f48a <_printf_float+0x44a>
 800f284:	68e0      	ldr	r0, [r4, #12]
 800f286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f288:	4298      	cmp	r0, r3
 800f28a:	bfb8      	it	lt
 800f28c:	4618      	movlt	r0, r3
 800f28e:	e734      	b.n	800f0fa <_printf_float+0xba>
 800f290:	2301      	movs	r3, #1
 800f292:	4652      	mov	r2, sl
 800f294:	4631      	mov	r1, r6
 800f296:	4628      	mov	r0, r5
 800f298:	47b8      	blx	r7
 800f29a:	3001      	adds	r0, #1
 800f29c:	f43f af2b 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2a0:	f109 0901 	add.w	r9, r9, #1
 800f2a4:	e7e8      	b.n	800f278 <_printf_float+0x238>
 800f2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dc39      	bgt.n	800f320 <_printf_float+0x2e0>
 800f2ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f31c <_printf_float+0x2dc>)
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	47b8      	blx	r7
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	f43f af1d 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f2c0:	ea59 0303 	orrs.w	r3, r9, r3
 800f2c4:	d102      	bne.n	800f2cc <_printf_float+0x28c>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	07d9      	lsls	r1, r3, #31
 800f2ca:	d5d7      	bpl.n	800f27c <_printf_float+0x23c>
 800f2cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	47b8      	blx	r7
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	f43f af0d 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2dc:	f04f 0a00 	mov.w	sl, #0
 800f2e0:	f104 0b1a 	add.w	fp, r4, #26
 800f2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2e6:	425b      	negs	r3, r3
 800f2e8:	4553      	cmp	r3, sl
 800f2ea:	dc01      	bgt.n	800f2f0 <_printf_float+0x2b0>
 800f2ec:	464b      	mov	r3, r9
 800f2ee:	e793      	b.n	800f218 <_printf_float+0x1d8>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	465a      	mov	r2, fp
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b8      	blx	r7
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	f43f aefb 	beq.w	800f0f6 <_printf_float+0xb6>
 800f300:	f10a 0a01 	add.w	sl, sl, #1
 800f304:	e7ee      	b.n	800f2e4 <_printf_float+0x2a4>
 800f306:	bf00      	nop
 800f308:	7fefffff 	.word	0x7fefffff
 800f30c:	08013c24 	.word	0x08013c24
 800f310:	08013c28 	.word	0x08013c28
 800f314:	08013c2c 	.word	0x08013c2c
 800f318:	08013c30 	.word	0x08013c30
 800f31c:	08013e5f 	.word	0x08013e5f
 800f320:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f322:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f326:	4553      	cmp	r3, sl
 800f328:	bfa8      	it	ge
 800f32a:	4653      	movge	r3, sl
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	4699      	mov	r9, r3
 800f330:	dc36      	bgt.n	800f3a0 <_printf_float+0x360>
 800f332:	f04f 0b00 	mov.w	fp, #0
 800f336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f33a:	f104 021a 	add.w	r2, r4, #26
 800f33e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f340:	9306      	str	r3, [sp, #24]
 800f342:	eba3 0309 	sub.w	r3, r3, r9
 800f346:	455b      	cmp	r3, fp
 800f348:	dc31      	bgt.n	800f3ae <_printf_float+0x36e>
 800f34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f34c:	459a      	cmp	sl, r3
 800f34e:	dc3a      	bgt.n	800f3c6 <_printf_float+0x386>
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	07da      	lsls	r2, r3, #31
 800f354:	d437      	bmi.n	800f3c6 <_printf_float+0x386>
 800f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f358:	ebaa 0903 	sub.w	r9, sl, r3
 800f35c:	9b06      	ldr	r3, [sp, #24]
 800f35e:	ebaa 0303 	sub.w	r3, sl, r3
 800f362:	4599      	cmp	r9, r3
 800f364:	bfa8      	it	ge
 800f366:	4699      	movge	r9, r3
 800f368:	f1b9 0f00 	cmp.w	r9, #0
 800f36c:	dc33      	bgt.n	800f3d6 <_printf_float+0x396>
 800f36e:	f04f 0800 	mov.w	r8, #0
 800f372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f376:	f104 0b1a 	add.w	fp, r4, #26
 800f37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37c:	ebaa 0303 	sub.w	r3, sl, r3
 800f380:	eba3 0309 	sub.w	r3, r3, r9
 800f384:	4543      	cmp	r3, r8
 800f386:	f77f af79 	ble.w	800f27c <_printf_float+0x23c>
 800f38a:	2301      	movs	r3, #1
 800f38c:	465a      	mov	r2, fp
 800f38e:	4631      	mov	r1, r6
 800f390:	4628      	mov	r0, r5
 800f392:	47b8      	blx	r7
 800f394:	3001      	adds	r0, #1
 800f396:	f43f aeae 	beq.w	800f0f6 <_printf_float+0xb6>
 800f39a:	f108 0801 	add.w	r8, r8, #1
 800f39e:	e7ec      	b.n	800f37a <_printf_float+0x33a>
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	47b8      	blx	r7
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1c2      	bne.n	800f332 <_printf_float+0x2f2>
 800f3ac:	e6a3      	b.n	800f0f6 <_printf_float+0xb6>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	9206      	str	r2, [sp, #24]
 800f3b6:	47b8      	blx	r7
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	f43f ae9c 	beq.w	800f0f6 <_printf_float+0xb6>
 800f3be:	9a06      	ldr	r2, [sp, #24]
 800f3c0:	f10b 0b01 	add.w	fp, fp, #1
 800f3c4:	e7bb      	b.n	800f33e <_printf_float+0x2fe>
 800f3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	47b8      	blx	r7
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d1c0      	bne.n	800f356 <_printf_float+0x316>
 800f3d4:	e68f      	b.n	800f0f6 <_printf_float+0xb6>
 800f3d6:	9a06      	ldr	r2, [sp, #24]
 800f3d8:	464b      	mov	r3, r9
 800f3da:	4442      	add	r2, r8
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	d1c3      	bne.n	800f36e <_printf_float+0x32e>
 800f3e6:	e686      	b.n	800f0f6 <_printf_float+0xb6>
 800f3e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3ec:	f1ba 0f01 	cmp.w	sl, #1
 800f3f0:	dc01      	bgt.n	800f3f6 <_printf_float+0x3b6>
 800f3f2:	07db      	lsls	r3, r3, #31
 800f3f4:	d536      	bpl.n	800f464 <_printf_float+0x424>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	4642      	mov	r2, r8
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	47b8      	blx	r7
 800f400:	3001      	adds	r0, #1
 800f402:	f43f ae78 	beq.w	800f0f6 <_printf_float+0xb6>
 800f406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f40a:	4631      	mov	r1, r6
 800f40c:	4628      	mov	r0, r5
 800f40e:	47b8      	blx	r7
 800f410:	3001      	adds	r0, #1
 800f412:	f43f ae70 	beq.w	800f0f6 <_printf_float+0xb6>
 800f416:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f41a:	2200      	movs	r2, #0
 800f41c:	2300      	movs	r3, #0
 800f41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f422:	f7f1 fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 800f426:	b9c0      	cbnz	r0, 800f45a <_printf_float+0x41a>
 800f428:	4653      	mov	r3, sl
 800f42a:	f108 0201 	add.w	r2, r8, #1
 800f42e:	4631      	mov	r1, r6
 800f430:	4628      	mov	r0, r5
 800f432:	47b8      	blx	r7
 800f434:	3001      	adds	r0, #1
 800f436:	d10c      	bne.n	800f452 <_printf_float+0x412>
 800f438:	e65d      	b.n	800f0f6 <_printf_float+0xb6>
 800f43a:	2301      	movs	r3, #1
 800f43c:	465a      	mov	r2, fp
 800f43e:	4631      	mov	r1, r6
 800f440:	4628      	mov	r0, r5
 800f442:	47b8      	blx	r7
 800f444:	3001      	adds	r0, #1
 800f446:	f43f ae56 	beq.w	800f0f6 <_printf_float+0xb6>
 800f44a:	f108 0801 	add.w	r8, r8, #1
 800f44e:	45d0      	cmp	r8, sl
 800f450:	dbf3      	blt.n	800f43a <_printf_float+0x3fa>
 800f452:	464b      	mov	r3, r9
 800f454:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f458:	e6df      	b.n	800f21a <_printf_float+0x1da>
 800f45a:	f04f 0800 	mov.w	r8, #0
 800f45e:	f104 0b1a 	add.w	fp, r4, #26
 800f462:	e7f4      	b.n	800f44e <_printf_float+0x40e>
 800f464:	2301      	movs	r3, #1
 800f466:	4642      	mov	r2, r8
 800f468:	e7e1      	b.n	800f42e <_printf_float+0x3ee>
 800f46a:	2301      	movs	r3, #1
 800f46c:	464a      	mov	r2, r9
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	f43f ae3e 	beq.w	800f0f6 <_printf_float+0xb6>
 800f47a:	f108 0801 	add.w	r8, r8, #1
 800f47e:	68e3      	ldr	r3, [r4, #12]
 800f480:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f482:	1a5b      	subs	r3, r3, r1
 800f484:	4543      	cmp	r3, r8
 800f486:	dcf0      	bgt.n	800f46a <_printf_float+0x42a>
 800f488:	e6fc      	b.n	800f284 <_printf_float+0x244>
 800f48a:	f04f 0800 	mov.w	r8, #0
 800f48e:	f104 0919 	add.w	r9, r4, #25
 800f492:	e7f4      	b.n	800f47e <_printf_float+0x43e>

0800f494 <_printf_common>:
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	4616      	mov	r6, r2
 800f49a:	4698      	mov	r8, r3
 800f49c:	688a      	ldr	r2, [r1, #8]
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	bfb8      	it	lt
 800f4a8:	4613      	movlt	r3, r2
 800f4aa:	6033      	str	r3, [r6, #0]
 800f4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	b10a      	cbz	r2, 800f4ba <_printf_common+0x26>
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	6033      	str	r3, [r6, #0]
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	0699      	lsls	r1, r3, #26
 800f4be:	bf42      	ittt	mi
 800f4c0:	6833      	ldrmi	r3, [r6, #0]
 800f4c2:	3302      	addmi	r3, #2
 800f4c4:	6033      	strmi	r3, [r6, #0]
 800f4c6:	6825      	ldr	r5, [r4, #0]
 800f4c8:	f015 0506 	ands.w	r5, r5, #6
 800f4cc:	d106      	bne.n	800f4dc <_printf_common+0x48>
 800f4ce:	f104 0a19 	add.w	sl, r4, #25
 800f4d2:	68e3      	ldr	r3, [r4, #12]
 800f4d4:	6832      	ldr	r2, [r6, #0]
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	42ab      	cmp	r3, r5
 800f4da:	dc26      	bgt.n	800f52a <_printf_common+0x96>
 800f4dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4e0:	6822      	ldr	r2, [r4, #0]
 800f4e2:	3b00      	subs	r3, #0
 800f4e4:	bf18      	it	ne
 800f4e6:	2301      	movne	r3, #1
 800f4e8:	0692      	lsls	r2, r2, #26
 800f4ea:	d42b      	bmi.n	800f544 <_printf_common+0xb0>
 800f4ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4f0:	4641      	mov	r1, r8
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	47c8      	blx	r9
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d01e      	beq.n	800f538 <_printf_common+0xa4>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	f003 0306 	and.w	r3, r3, #6
 800f502:	2b04      	cmp	r3, #4
 800f504:	bf02      	ittt	eq
 800f506:	68e5      	ldreq	r5, [r4, #12]
 800f508:	6833      	ldreq	r3, [r6, #0]
 800f50a:	1aed      	subeq	r5, r5, r3
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	bf0c      	ite	eq
 800f510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f514:	2500      	movne	r5, #0
 800f516:	4293      	cmp	r3, r2
 800f518:	bfc4      	itt	gt
 800f51a:	1a9b      	subgt	r3, r3, r2
 800f51c:	18ed      	addgt	r5, r5, r3
 800f51e:	2600      	movs	r6, #0
 800f520:	341a      	adds	r4, #26
 800f522:	42b5      	cmp	r5, r6
 800f524:	d11a      	bne.n	800f55c <_printf_common+0xc8>
 800f526:	2000      	movs	r0, #0
 800f528:	e008      	b.n	800f53c <_printf_common+0xa8>
 800f52a:	2301      	movs	r3, #1
 800f52c:	4652      	mov	r2, sl
 800f52e:	4641      	mov	r1, r8
 800f530:	4638      	mov	r0, r7
 800f532:	47c8      	blx	r9
 800f534:	3001      	adds	r0, #1
 800f536:	d103      	bne.n	800f540 <_printf_common+0xac>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295
 800f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f540:	3501      	adds	r5, #1
 800f542:	e7c6      	b.n	800f4d2 <_printf_common+0x3e>
 800f544:	18e1      	adds	r1, r4, r3
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	2030      	movs	r0, #48	@ 0x30
 800f54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f54e:	4422      	add	r2, r4
 800f550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f558:	3302      	adds	r3, #2
 800f55a:	e7c7      	b.n	800f4ec <_printf_common+0x58>
 800f55c:	2301      	movs	r3, #1
 800f55e:	4622      	mov	r2, r4
 800f560:	4641      	mov	r1, r8
 800f562:	4638      	mov	r0, r7
 800f564:	47c8      	blx	r9
 800f566:	3001      	adds	r0, #1
 800f568:	d0e6      	beq.n	800f538 <_printf_common+0xa4>
 800f56a:	3601      	adds	r6, #1
 800f56c:	e7d9      	b.n	800f522 <_printf_common+0x8e>
	...

0800f570 <_printf_i>:
 800f570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	7e0f      	ldrb	r7, [r1, #24]
 800f576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f578:	2f78      	cmp	r7, #120	@ 0x78
 800f57a:	4691      	mov	r9, r2
 800f57c:	4680      	mov	r8, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	469a      	mov	sl, r3
 800f582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f586:	d807      	bhi.n	800f598 <_printf_i+0x28>
 800f588:	2f62      	cmp	r7, #98	@ 0x62
 800f58a:	d80a      	bhi.n	800f5a2 <_printf_i+0x32>
 800f58c:	2f00      	cmp	r7, #0
 800f58e:	f000 80d2 	beq.w	800f736 <_printf_i+0x1c6>
 800f592:	2f58      	cmp	r7, #88	@ 0x58
 800f594:	f000 80b9 	beq.w	800f70a <_printf_i+0x19a>
 800f598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5a0:	e03a      	b.n	800f618 <_printf_i+0xa8>
 800f5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5a6:	2b15      	cmp	r3, #21
 800f5a8:	d8f6      	bhi.n	800f598 <_printf_i+0x28>
 800f5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f5b0 <_printf_i+0x40>)
 800f5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5b0:	0800f609 	.word	0x0800f609
 800f5b4:	0800f61d 	.word	0x0800f61d
 800f5b8:	0800f599 	.word	0x0800f599
 800f5bc:	0800f599 	.word	0x0800f599
 800f5c0:	0800f599 	.word	0x0800f599
 800f5c4:	0800f599 	.word	0x0800f599
 800f5c8:	0800f61d 	.word	0x0800f61d
 800f5cc:	0800f599 	.word	0x0800f599
 800f5d0:	0800f599 	.word	0x0800f599
 800f5d4:	0800f599 	.word	0x0800f599
 800f5d8:	0800f599 	.word	0x0800f599
 800f5dc:	0800f71d 	.word	0x0800f71d
 800f5e0:	0800f647 	.word	0x0800f647
 800f5e4:	0800f6d7 	.word	0x0800f6d7
 800f5e8:	0800f599 	.word	0x0800f599
 800f5ec:	0800f599 	.word	0x0800f599
 800f5f0:	0800f73f 	.word	0x0800f73f
 800f5f4:	0800f599 	.word	0x0800f599
 800f5f8:	0800f647 	.word	0x0800f647
 800f5fc:	0800f599 	.word	0x0800f599
 800f600:	0800f599 	.word	0x0800f599
 800f604:	0800f6df 	.word	0x0800f6df
 800f608:	6833      	ldr	r3, [r6, #0]
 800f60a:	1d1a      	adds	r2, r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6032      	str	r2, [r6, #0]
 800f610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f618:	2301      	movs	r3, #1
 800f61a:	e09d      	b.n	800f758 <_printf_i+0x1e8>
 800f61c:	6833      	ldr	r3, [r6, #0]
 800f61e:	6820      	ldr	r0, [r4, #0]
 800f620:	1d19      	adds	r1, r3, #4
 800f622:	6031      	str	r1, [r6, #0]
 800f624:	0606      	lsls	r6, r0, #24
 800f626:	d501      	bpl.n	800f62c <_printf_i+0xbc>
 800f628:	681d      	ldr	r5, [r3, #0]
 800f62a:	e003      	b.n	800f634 <_printf_i+0xc4>
 800f62c:	0645      	lsls	r5, r0, #25
 800f62e:	d5fb      	bpl.n	800f628 <_printf_i+0xb8>
 800f630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f634:	2d00      	cmp	r5, #0
 800f636:	da03      	bge.n	800f640 <_printf_i+0xd0>
 800f638:	232d      	movs	r3, #45	@ 0x2d
 800f63a:	426d      	negs	r5, r5
 800f63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f640:	4859      	ldr	r0, [pc, #356]	@ (800f7a8 <_printf_i+0x238>)
 800f642:	230a      	movs	r3, #10
 800f644:	e011      	b.n	800f66a <_printf_i+0xfa>
 800f646:	6821      	ldr	r1, [r4, #0]
 800f648:	6833      	ldr	r3, [r6, #0]
 800f64a:	0608      	lsls	r0, r1, #24
 800f64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f650:	d402      	bmi.n	800f658 <_printf_i+0xe8>
 800f652:	0649      	lsls	r1, r1, #25
 800f654:	bf48      	it	mi
 800f656:	b2ad      	uxthmi	r5, r5
 800f658:	2f6f      	cmp	r7, #111	@ 0x6f
 800f65a:	4853      	ldr	r0, [pc, #332]	@ (800f7a8 <_printf_i+0x238>)
 800f65c:	6033      	str	r3, [r6, #0]
 800f65e:	bf14      	ite	ne
 800f660:	230a      	movne	r3, #10
 800f662:	2308      	moveq	r3, #8
 800f664:	2100      	movs	r1, #0
 800f666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f66a:	6866      	ldr	r6, [r4, #4]
 800f66c:	60a6      	str	r6, [r4, #8]
 800f66e:	2e00      	cmp	r6, #0
 800f670:	bfa2      	ittt	ge
 800f672:	6821      	ldrge	r1, [r4, #0]
 800f674:	f021 0104 	bicge.w	r1, r1, #4
 800f678:	6021      	strge	r1, [r4, #0]
 800f67a:	b90d      	cbnz	r5, 800f680 <_printf_i+0x110>
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	d04b      	beq.n	800f718 <_printf_i+0x1a8>
 800f680:	4616      	mov	r6, r2
 800f682:	fbb5 f1f3 	udiv	r1, r5, r3
 800f686:	fb03 5711 	mls	r7, r3, r1, r5
 800f68a:	5dc7      	ldrb	r7, [r0, r7]
 800f68c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f690:	462f      	mov	r7, r5
 800f692:	42bb      	cmp	r3, r7
 800f694:	460d      	mov	r5, r1
 800f696:	d9f4      	bls.n	800f682 <_printf_i+0x112>
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d10b      	bne.n	800f6b4 <_printf_i+0x144>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	07df      	lsls	r7, r3, #31
 800f6a0:	d508      	bpl.n	800f6b4 <_printf_i+0x144>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	6861      	ldr	r1, [r4, #4]
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	bfde      	ittt	le
 800f6aa:	2330      	movle	r3, #48	@ 0x30
 800f6ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6b4:	1b92      	subs	r2, r2, r6
 800f6b6:	6122      	str	r2, [r4, #16]
 800f6b8:	f8cd a000 	str.w	sl, [sp]
 800f6bc:	464b      	mov	r3, r9
 800f6be:	aa03      	add	r2, sp, #12
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	f7ff fee6 	bl	800f494 <_printf_common>
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d14a      	bne.n	800f762 <_printf_i+0x1f2>
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	b004      	add	sp, #16
 800f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	f043 0320 	orr.w	r3, r3, #32
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	4833      	ldr	r0, [pc, #204]	@ (800f7ac <_printf_i+0x23c>)
 800f6e0:	2778      	movs	r7, #120	@ 0x78
 800f6e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6831      	ldr	r1, [r6, #0]
 800f6ea:	061f      	lsls	r7, r3, #24
 800f6ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6f0:	d402      	bmi.n	800f6f8 <_printf_i+0x188>
 800f6f2:	065f      	lsls	r7, r3, #25
 800f6f4:	bf48      	it	mi
 800f6f6:	b2ad      	uxthmi	r5, r5
 800f6f8:	6031      	str	r1, [r6, #0]
 800f6fa:	07d9      	lsls	r1, r3, #31
 800f6fc:	bf44      	itt	mi
 800f6fe:	f043 0320 	orrmi.w	r3, r3, #32
 800f702:	6023      	strmi	r3, [r4, #0]
 800f704:	b11d      	cbz	r5, 800f70e <_printf_i+0x19e>
 800f706:	2310      	movs	r3, #16
 800f708:	e7ac      	b.n	800f664 <_printf_i+0xf4>
 800f70a:	4827      	ldr	r0, [pc, #156]	@ (800f7a8 <_printf_i+0x238>)
 800f70c:	e7e9      	b.n	800f6e2 <_printf_i+0x172>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	f023 0320 	bic.w	r3, r3, #32
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	e7f6      	b.n	800f706 <_printf_i+0x196>
 800f718:	4616      	mov	r6, r2
 800f71a:	e7bd      	b.n	800f698 <_printf_i+0x128>
 800f71c:	6833      	ldr	r3, [r6, #0]
 800f71e:	6825      	ldr	r5, [r4, #0]
 800f720:	6961      	ldr	r1, [r4, #20]
 800f722:	1d18      	adds	r0, r3, #4
 800f724:	6030      	str	r0, [r6, #0]
 800f726:	062e      	lsls	r6, r5, #24
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	d501      	bpl.n	800f730 <_printf_i+0x1c0>
 800f72c:	6019      	str	r1, [r3, #0]
 800f72e:	e002      	b.n	800f736 <_printf_i+0x1c6>
 800f730:	0668      	lsls	r0, r5, #25
 800f732:	d5fb      	bpl.n	800f72c <_printf_i+0x1bc>
 800f734:	8019      	strh	r1, [r3, #0]
 800f736:	2300      	movs	r3, #0
 800f738:	6123      	str	r3, [r4, #16]
 800f73a:	4616      	mov	r6, r2
 800f73c:	e7bc      	b.n	800f6b8 <_printf_i+0x148>
 800f73e:	6833      	ldr	r3, [r6, #0]
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	6032      	str	r2, [r6, #0]
 800f744:	681e      	ldr	r6, [r3, #0]
 800f746:	6862      	ldr	r2, [r4, #4]
 800f748:	2100      	movs	r1, #0
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7f0 fd50 	bl	80001f0 <memchr>
 800f750:	b108      	cbz	r0, 800f756 <_printf_i+0x1e6>
 800f752:	1b80      	subs	r0, r0, r6
 800f754:	6060      	str	r0, [r4, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	2300      	movs	r3, #0
 800f75c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f760:	e7aa      	b.n	800f6b8 <_printf_i+0x148>
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	4632      	mov	r2, r6
 800f766:	4649      	mov	r1, r9
 800f768:	4640      	mov	r0, r8
 800f76a:	47d0      	blx	sl
 800f76c:	3001      	adds	r0, #1
 800f76e:	d0ad      	beq.n	800f6cc <_printf_i+0x15c>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	079b      	lsls	r3, r3, #30
 800f774:	d413      	bmi.n	800f79e <_printf_i+0x22e>
 800f776:	68e0      	ldr	r0, [r4, #12]
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	4298      	cmp	r0, r3
 800f77c:	bfb8      	it	lt
 800f77e:	4618      	movlt	r0, r3
 800f780:	e7a6      	b.n	800f6d0 <_printf_i+0x160>
 800f782:	2301      	movs	r3, #1
 800f784:	4632      	mov	r2, r6
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	47d0      	blx	sl
 800f78c:	3001      	adds	r0, #1
 800f78e:	d09d      	beq.n	800f6cc <_printf_i+0x15c>
 800f790:	3501      	adds	r5, #1
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	9903      	ldr	r1, [sp, #12]
 800f796:	1a5b      	subs	r3, r3, r1
 800f798:	42ab      	cmp	r3, r5
 800f79a:	dcf2      	bgt.n	800f782 <_printf_i+0x212>
 800f79c:	e7eb      	b.n	800f776 <_printf_i+0x206>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	f104 0619 	add.w	r6, r4, #25
 800f7a4:	e7f5      	b.n	800f792 <_printf_i+0x222>
 800f7a6:	bf00      	nop
 800f7a8:	08013c34 	.word	0x08013c34
 800f7ac:	08013c45 	.word	0x08013c45

0800f7b0 <std>:
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7be:	6083      	str	r3, [r0, #8]
 800f7c0:	8181      	strh	r1, [r0, #12]
 800f7c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f7c4:	81c2      	strh	r2, [r0, #14]
 800f7c6:	6183      	str	r3, [r0, #24]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	2208      	movs	r2, #8
 800f7cc:	305c      	adds	r0, #92	@ 0x5c
 800f7ce:	f000 f940 	bl	800fa52 <memset>
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f808 <std+0x58>)
 800f7d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f80c <std+0x5c>)
 800f7d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f7da:	4b0d      	ldr	r3, [pc, #52]	@ (800f810 <std+0x60>)
 800f7dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f7de:	4b0d      	ldr	r3, [pc, #52]	@ (800f814 <std+0x64>)
 800f7e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f818 <std+0x68>)
 800f7e4:	6224      	str	r4, [r4, #32]
 800f7e6:	429c      	cmp	r4, r3
 800f7e8:	d006      	beq.n	800f7f8 <std+0x48>
 800f7ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f7ee:	4294      	cmp	r4, r2
 800f7f0:	d002      	beq.n	800f7f8 <std+0x48>
 800f7f2:	33d0      	adds	r3, #208	@ 0xd0
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	d105      	bne.n	800f804 <std+0x54>
 800f7f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f800:	f000 b9b4 	b.w	800fb6c <__retarget_lock_init_recursive>
 800f804:	bd10      	pop	{r4, pc}
 800f806:	bf00      	nop
 800f808:	0800f9c9 	.word	0x0800f9c9
 800f80c:	0800f9ef 	.word	0x0800f9ef
 800f810:	0800fa27 	.word	0x0800fa27
 800f814:	0800fa4b 	.word	0x0800fa4b
 800f818:	20015494 	.word	0x20015494

0800f81c <stdio_exit_handler>:
 800f81c:	4a02      	ldr	r2, [pc, #8]	@ (800f828 <stdio_exit_handler+0xc>)
 800f81e:	4903      	ldr	r1, [pc, #12]	@ (800f82c <stdio_exit_handler+0x10>)
 800f820:	4803      	ldr	r0, [pc, #12]	@ (800f830 <stdio_exit_handler+0x14>)
 800f822:	f000 b869 	b.w	800f8f8 <_fwalk_sglue>
 800f826:	bf00      	nop
 800f828:	20000018 	.word	0x20000018
 800f82c:	080119ad 	.word	0x080119ad
 800f830:	20000028 	.word	0x20000028

0800f834 <cleanup_stdio>:
 800f834:	6841      	ldr	r1, [r0, #4]
 800f836:	4b0c      	ldr	r3, [pc, #48]	@ (800f868 <cleanup_stdio+0x34>)
 800f838:	4299      	cmp	r1, r3
 800f83a:	b510      	push	{r4, lr}
 800f83c:	4604      	mov	r4, r0
 800f83e:	d001      	beq.n	800f844 <cleanup_stdio+0x10>
 800f840:	f002 f8b4 	bl	80119ac <_fflush_r>
 800f844:	68a1      	ldr	r1, [r4, #8]
 800f846:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <cleanup_stdio+0x38>)
 800f848:	4299      	cmp	r1, r3
 800f84a:	d002      	beq.n	800f852 <cleanup_stdio+0x1e>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f002 f8ad 	bl	80119ac <_fflush_r>
 800f852:	68e1      	ldr	r1, [r4, #12]
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <cleanup_stdio+0x3c>)
 800f856:	4299      	cmp	r1, r3
 800f858:	d004      	beq.n	800f864 <cleanup_stdio+0x30>
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f860:	f002 b8a4 	b.w	80119ac <_fflush_r>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop
 800f868:	20015494 	.word	0x20015494
 800f86c:	200154fc 	.word	0x200154fc
 800f870:	20015564 	.word	0x20015564

0800f874 <global_stdio_init.part.0>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4b0b      	ldr	r3, [pc, #44]	@ (800f8a4 <global_stdio_init.part.0+0x30>)
 800f878:	4c0b      	ldr	r4, [pc, #44]	@ (800f8a8 <global_stdio_init.part.0+0x34>)
 800f87a:	4a0c      	ldr	r2, [pc, #48]	@ (800f8ac <global_stdio_init.part.0+0x38>)
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	4620      	mov	r0, r4
 800f880:	2200      	movs	r2, #0
 800f882:	2104      	movs	r1, #4
 800f884:	f7ff ff94 	bl	800f7b0 <std>
 800f888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f88c:	2201      	movs	r2, #1
 800f88e:	2109      	movs	r1, #9
 800f890:	f7ff ff8e 	bl	800f7b0 <std>
 800f894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f898:	2202      	movs	r2, #2
 800f89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f89e:	2112      	movs	r1, #18
 800f8a0:	f7ff bf86 	b.w	800f7b0 <std>
 800f8a4:	200155cc 	.word	0x200155cc
 800f8a8:	20015494 	.word	0x20015494
 800f8ac:	0800f81d 	.word	0x0800f81d

0800f8b0 <__sfp_lock_acquire>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	@ (800f8b8 <__sfp_lock_acquire+0x8>)
 800f8b2:	f000 b95c 	b.w	800fb6e <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	200155d5 	.word	0x200155d5

0800f8bc <__sfp_lock_release>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	@ (800f8c4 <__sfp_lock_release+0x8>)
 800f8be:	f000 b957 	b.w	800fb70 <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	200155d5 	.word	0x200155d5

0800f8c8 <__sinit>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	f7ff fff0 	bl	800f8b0 <__sfp_lock_acquire>
 800f8d0:	6a23      	ldr	r3, [r4, #32]
 800f8d2:	b11b      	cbz	r3, 800f8dc <__sinit+0x14>
 800f8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d8:	f7ff bff0 	b.w	800f8bc <__sfp_lock_release>
 800f8dc:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <__sinit+0x28>)
 800f8de:	6223      	str	r3, [r4, #32]
 800f8e0:	4b04      	ldr	r3, [pc, #16]	@ (800f8f4 <__sinit+0x2c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1f5      	bne.n	800f8d4 <__sinit+0xc>
 800f8e8:	f7ff ffc4 	bl	800f874 <global_stdio_init.part.0>
 800f8ec:	e7f2      	b.n	800f8d4 <__sinit+0xc>
 800f8ee:	bf00      	nop
 800f8f0:	0800f835 	.word	0x0800f835
 800f8f4:	200155cc 	.word	0x200155cc

0800f8f8 <_fwalk_sglue>:
 800f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	4688      	mov	r8, r1
 800f900:	4614      	mov	r4, r2
 800f902:	2600      	movs	r6, #0
 800f904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f908:	f1b9 0901 	subs.w	r9, r9, #1
 800f90c:	d505      	bpl.n	800f91a <_fwalk_sglue+0x22>
 800f90e:	6824      	ldr	r4, [r4, #0]
 800f910:	2c00      	cmp	r4, #0
 800f912:	d1f7      	bne.n	800f904 <_fwalk_sglue+0xc>
 800f914:	4630      	mov	r0, r6
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d907      	bls.n	800f930 <_fwalk_sglue+0x38>
 800f920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f924:	3301      	adds	r3, #1
 800f926:	d003      	beq.n	800f930 <_fwalk_sglue+0x38>
 800f928:	4629      	mov	r1, r5
 800f92a:	4638      	mov	r0, r7
 800f92c:	47c0      	blx	r8
 800f92e:	4306      	orrs	r6, r0
 800f930:	3568      	adds	r5, #104	@ 0x68
 800f932:	e7e9      	b.n	800f908 <_fwalk_sglue+0x10>

0800f934 <siprintf>:
 800f934:	b40e      	push	{r1, r2, r3}
 800f936:	b500      	push	{lr}
 800f938:	b09c      	sub	sp, #112	@ 0x70
 800f93a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f93c:	9002      	str	r0, [sp, #8]
 800f93e:	9006      	str	r0, [sp, #24]
 800f940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f944:	4809      	ldr	r0, [pc, #36]	@ (800f96c <siprintf+0x38>)
 800f946:	9107      	str	r1, [sp, #28]
 800f948:	9104      	str	r1, [sp, #16]
 800f94a:	4909      	ldr	r1, [pc, #36]	@ (800f970 <siprintf+0x3c>)
 800f94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f950:	9105      	str	r1, [sp, #20]
 800f952:	6800      	ldr	r0, [r0, #0]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	a902      	add	r1, sp, #8
 800f958:	f001 fb8e 	bl	8011078 <_svfiprintf_r>
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	2200      	movs	r2, #0
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	b01c      	add	sp, #112	@ 0x70
 800f964:	f85d eb04 	ldr.w	lr, [sp], #4
 800f968:	b003      	add	sp, #12
 800f96a:	4770      	bx	lr
 800f96c:	20000024 	.word	0x20000024
 800f970:	ffff0208 	.word	0xffff0208

0800f974 <siscanf>:
 800f974:	b40e      	push	{r1, r2, r3}
 800f976:	b530      	push	{r4, r5, lr}
 800f978:	b09c      	sub	sp, #112	@ 0x70
 800f97a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f97c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f980:	f854 5b04 	ldr.w	r5, [r4], #4
 800f984:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f988:	9002      	str	r0, [sp, #8]
 800f98a:	9006      	str	r0, [sp, #24]
 800f98c:	f7f0 fc80 	bl	8000290 <strlen>
 800f990:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c0 <siscanf+0x4c>)
 800f992:	9003      	str	r0, [sp, #12]
 800f994:	9007      	str	r0, [sp, #28]
 800f996:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f998:	480a      	ldr	r0, [pc, #40]	@ (800f9c4 <siscanf+0x50>)
 800f99a:	9401      	str	r4, [sp, #4]
 800f99c:	2300      	movs	r3, #0
 800f99e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9a0:	9314      	str	r3, [sp, #80]	@ 0x50
 800f9a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	4623      	mov	r3, r4
 800f9ae:	a902      	add	r1, sp, #8
 800f9b0:	6800      	ldr	r0, [r0, #0]
 800f9b2:	f001 fcb5 	bl	8011320 <__ssvfiscanf_r>
 800f9b6:	b01c      	add	sp, #112	@ 0x70
 800f9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9bc:	b003      	add	sp, #12
 800f9be:	4770      	bx	lr
 800f9c0:	0800f9eb 	.word	0x0800f9eb
 800f9c4:	20000024 	.word	0x20000024

0800f9c8 <__sread>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d0:	f000 f86e 	bl	800fab0 <_read_r>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	bfab      	itete	ge
 800f9d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9da:	89a3      	ldrhlt	r3, [r4, #12]
 800f9dc:	181b      	addge	r3, r3, r0
 800f9de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9e2:	bfac      	ite	ge
 800f9e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9e6:	81a3      	strhlt	r3, [r4, #12]
 800f9e8:	bd10      	pop	{r4, pc}

0800f9ea <__seofread>:
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	4770      	bx	lr

0800f9ee <__swrite>:
 800f9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f2:	461f      	mov	r7, r3
 800f9f4:	898b      	ldrh	r3, [r1, #12]
 800f9f6:	05db      	lsls	r3, r3, #23
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	460c      	mov	r4, r1
 800f9fc:	4616      	mov	r6, r2
 800f9fe:	d505      	bpl.n	800fa0c <__swrite+0x1e>
 800fa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa04:	2302      	movs	r3, #2
 800fa06:	2200      	movs	r2, #0
 800fa08:	f000 f840 	bl	800fa8c <_lseek_r>
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa16:	81a3      	strh	r3, [r4, #12]
 800fa18:	4632      	mov	r2, r6
 800fa1a:	463b      	mov	r3, r7
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa22:	f000 b867 	b.w	800faf4 <_write_r>

0800fa26 <__sseek>:
 800fa26:	b510      	push	{r4, lr}
 800fa28:	460c      	mov	r4, r1
 800fa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa2e:	f000 f82d 	bl	800fa8c <_lseek_r>
 800fa32:	1c43      	adds	r3, r0, #1
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	bf15      	itete	ne
 800fa38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa42:	81a3      	strheq	r3, [r4, #12]
 800fa44:	bf18      	it	ne
 800fa46:	81a3      	strhne	r3, [r4, #12]
 800fa48:	bd10      	pop	{r4, pc}

0800fa4a <__sclose>:
 800fa4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4e:	f000 b80d 	b.w	800fa6c <_close_r>

0800fa52 <memset>:
 800fa52:	4402      	add	r2, r0
 800fa54:	4603      	mov	r3, r0
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d100      	bne.n	800fa5c <memset+0xa>
 800fa5a:	4770      	bx	lr
 800fa5c:	f803 1b01 	strb.w	r1, [r3], #1
 800fa60:	e7f9      	b.n	800fa56 <memset+0x4>
	...

0800fa64 <_localeconv_r>:
 800fa64:	4800      	ldr	r0, [pc, #0]	@ (800fa68 <_localeconv_r+0x4>)
 800fa66:	4770      	bx	lr
 800fa68:	20000164 	.word	0x20000164

0800fa6c <_close_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d06      	ldr	r5, [pc, #24]	@ (800fa88 <_close_r+0x1c>)
 800fa70:	2300      	movs	r3, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	602b      	str	r3, [r5, #0]
 800fa78:	f7f2 ff82 	bl	8002980 <_close>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_close_r+0x1a>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_close_r+0x1a>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	200155d0 	.word	0x200155d0

0800fa8c <_lseek_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d07      	ldr	r5, [pc, #28]	@ (800faac <_lseek_r+0x20>)
 800fa90:	4604      	mov	r4, r0
 800fa92:	4608      	mov	r0, r1
 800fa94:	4611      	mov	r1, r2
 800fa96:	2200      	movs	r2, #0
 800fa98:	602a      	str	r2, [r5, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	f7f2 ff97 	bl	80029ce <_lseek>
 800faa0:	1c43      	adds	r3, r0, #1
 800faa2:	d102      	bne.n	800faaa <_lseek_r+0x1e>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	b103      	cbz	r3, 800faaa <_lseek_r+0x1e>
 800faa8:	6023      	str	r3, [r4, #0]
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	200155d0 	.word	0x200155d0

0800fab0 <_read_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	4d07      	ldr	r5, [pc, #28]	@ (800fad0 <_read_r+0x20>)
 800fab4:	4604      	mov	r4, r0
 800fab6:	4608      	mov	r0, r1
 800fab8:	4611      	mov	r1, r2
 800faba:	2200      	movs	r2, #0
 800fabc:	602a      	str	r2, [r5, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f7f2 ff25 	bl	800290e <_read>
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	d102      	bne.n	800face <_read_r+0x1e>
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	b103      	cbz	r3, 800face <_read_r+0x1e>
 800facc:	6023      	str	r3, [r4, #0]
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	200155d0 	.word	0x200155d0

0800fad4 <_sbrk_r>:
 800fad4:	b538      	push	{r3, r4, r5, lr}
 800fad6:	4d06      	ldr	r5, [pc, #24]	@ (800faf0 <_sbrk_r+0x1c>)
 800fad8:	2300      	movs	r3, #0
 800fada:	4604      	mov	r4, r0
 800fadc:	4608      	mov	r0, r1
 800fade:	602b      	str	r3, [r5, #0]
 800fae0:	f003 fba4 	bl	801322c <_sbrk>
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d102      	bne.n	800faee <_sbrk_r+0x1a>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	b103      	cbz	r3, 800faee <_sbrk_r+0x1a>
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	200155d0 	.word	0x200155d0

0800faf4 <_write_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4d07      	ldr	r5, [pc, #28]	@ (800fb14 <_write_r+0x20>)
 800faf8:	4604      	mov	r4, r0
 800fafa:	4608      	mov	r0, r1
 800fafc:	4611      	mov	r1, r2
 800fafe:	2200      	movs	r2, #0
 800fb00:	602a      	str	r2, [r5, #0]
 800fb02:	461a      	mov	r2, r3
 800fb04:	f7f2 ff20 	bl	8002948 <_write>
 800fb08:	1c43      	adds	r3, r0, #1
 800fb0a:	d102      	bne.n	800fb12 <_write_r+0x1e>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	b103      	cbz	r3, 800fb12 <_write_r+0x1e>
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	bd38      	pop	{r3, r4, r5, pc}
 800fb14:	200155d0 	.word	0x200155d0

0800fb18 <__errno>:
 800fb18:	4b01      	ldr	r3, [pc, #4]	@ (800fb20 <__errno+0x8>)
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	20000024 	.word	0x20000024

0800fb24 <__libc_init_array>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4d0d      	ldr	r5, [pc, #52]	@ (800fb5c <__libc_init_array+0x38>)
 800fb28:	4c0d      	ldr	r4, [pc, #52]	@ (800fb60 <__libc_init_array+0x3c>)
 800fb2a:	1b64      	subs	r4, r4, r5
 800fb2c:	10a4      	asrs	r4, r4, #2
 800fb2e:	2600      	movs	r6, #0
 800fb30:	42a6      	cmp	r6, r4
 800fb32:	d109      	bne.n	800fb48 <__libc_init_array+0x24>
 800fb34:	4d0b      	ldr	r5, [pc, #44]	@ (800fb64 <__libc_init_array+0x40>)
 800fb36:	4c0c      	ldr	r4, [pc, #48]	@ (800fb68 <__libc_init_array+0x44>)
 800fb38:	f003 fb86 	bl	8013248 <_init>
 800fb3c:	1b64      	subs	r4, r4, r5
 800fb3e:	10a4      	asrs	r4, r4, #2
 800fb40:	2600      	movs	r6, #0
 800fb42:	42a6      	cmp	r6, r4
 800fb44:	d105      	bne.n	800fb52 <__libc_init_array+0x2e>
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb4c:	4798      	blx	r3
 800fb4e:	3601      	adds	r6, #1
 800fb50:	e7ee      	b.n	800fb30 <__libc_init_array+0xc>
 800fb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb56:	4798      	blx	r3
 800fb58:	3601      	adds	r6, #1
 800fb5a:	e7f2      	b.n	800fb42 <__libc_init_array+0x1e>
 800fb5c:	08013fe8 	.word	0x08013fe8
 800fb60:	08013fe8 	.word	0x08013fe8
 800fb64:	08013fe8 	.word	0x08013fe8
 800fb68:	08013fec 	.word	0x08013fec

0800fb6c <__retarget_lock_init_recursive>:
 800fb6c:	4770      	bx	lr

0800fb6e <__retarget_lock_acquire_recursive>:
 800fb6e:	4770      	bx	lr

0800fb70 <__retarget_lock_release_recursive>:
 800fb70:	4770      	bx	lr

0800fb72 <memcpy>:
 800fb72:	440a      	add	r2, r1
 800fb74:	4291      	cmp	r1, r2
 800fb76:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb7a:	d100      	bne.n	800fb7e <memcpy+0xc>
 800fb7c:	4770      	bx	lr
 800fb7e:	b510      	push	{r4, lr}
 800fb80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb88:	4291      	cmp	r1, r2
 800fb8a:	d1f9      	bne.n	800fb80 <memcpy+0xe>
 800fb8c:	bd10      	pop	{r4, pc}

0800fb8e <quorem>:
 800fb8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb92:	6903      	ldr	r3, [r0, #16]
 800fb94:	690c      	ldr	r4, [r1, #16]
 800fb96:	42a3      	cmp	r3, r4
 800fb98:	4607      	mov	r7, r0
 800fb9a:	db7e      	blt.n	800fc9a <quorem+0x10c>
 800fb9c:	3c01      	subs	r4, #1
 800fb9e:	f101 0814 	add.w	r8, r1, #20
 800fba2:	00a3      	lsls	r3, r4, #2
 800fba4:	f100 0514 	add.w	r5, r0, #20
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbc4:	d32e      	bcc.n	800fc24 <quorem+0x96>
 800fbc6:	f04f 0a00 	mov.w	sl, #0
 800fbca:	46c4      	mov	ip, r8
 800fbcc:	46ae      	mov	lr, r5
 800fbce:	46d3      	mov	fp, sl
 800fbd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbd4:	b298      	uxth	r0, r3
 800fbd6:	fb06 a000 	mla	r0, r6, r0, sl
 800fbda:	0c02      	lsrs	r2, r0, #16
 800fbdc:	0c1b      	lsrs	r3, r3, #16
 800fbde:	fb06 2303 	mla	r3, r6, r3, r2
 800fbe2:	f8de 2000 	ldr.w	r2, [lr]
 800fbe6:	b280      	uxth	r0, r0
 800fbe8:	b292      	uxth	r2, r2
 800fbea:	1a12      	subs	r2, r2, r0
 800fbec:	445a      	add	r2, fp
 800fbee:	f8de 0000 	ldr.w	r0, [lr]
 800fbf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fbfc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc00:	b292      	uxth	r2, r2
 800fc02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc06:	45e1      	cmp	r9, ip
 800fc08:	f84e 2b04 	str.w	r2, [lr], #4
 800fc0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc10:	d2de      	bcs.n	800fbd0 <quorem+0x42>
 800fc12:	9b00      	ldr	r3, [sp, #0]
 800fc14:	58eb      	ldr	r3, [r5, r3]
 800fc16:	b92b      	cbnz	r3, 800fc24 <quorem+0x96>
 800fc18:	9b01      	ldr	r3, [sp, #4]
 800fc1a:	3b04      	subs	r3, #4
 800fc1c:	429d      	cmp	r5, r3
 800fc1e:	461a      	mov	r2, r3
 800fc20:	d32f      	bcc.n	800fc82 <quorem+0xf4>
 800fc22:	613c      	str	r4, [r7, #16]
 800fc24:	4638      	mov	r0, r7
 800fc26:	f001 f8c3 	bl	8010db0 <__mcmp>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	db25      	blt.n	800fc7a <quorem+0xec>
 800fc2e:	4629      	mov	r1, r5
 800fc30:	2000      	movs	r0, #0
 800fc32:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc36:	f8d1 c000 	ldr.w	ip, [r1]
 800fc3a:	fa1f fe82 	uxth.w	lr, r2
 800fc3e:	fa1f f38c 	uxth.w	r3, ip
 800fc42:	eba3 030e 	sub.w	r3, r3, lr
 800fc46:	4403      	add	r3, r0
 800fc48:	0c12      	lsrs	r2, r2, #16
 800fc4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc58:	45c1      	cmp	r9, r8
 800fc5a:	f841 3b04 	str.w	r3, [r1], #4
 800fc5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc62:	d2e6      	bcs.n	800fc32 <quorem+0xa4>
 800fc64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc6c:	b922      	cbnz	r2, 800fc78 <quorem+0xea>
 800fc6e:	3b04      	subs	r3, #4
 800fc70:	429d      	cmp	r5, r3
 800fc72:	461a      	mov	r2, r3
 800fc74:	d30b      	bcc.n	800fc8e <quorem+0x100>
 800fc76:	613c      	str	r4, [r7, #16]
 800fc78:	3601      	adds	r6, #1
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	b003      	add	sp, #12
 800fc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	3b04      	subs	r3, #4
 800fc86:	2a00      	cmp	r2, #0
 800fc88:	d1cb      	bne.n	800fc22 <quorem+0x94>
 800fc8a:	3c01      	subs	r4, #1
 800fc8c:	e7c6      	b.n	800fc1c <quorem+0x8e>
 800fc8e:	6812      	ldr	r2, [r2, #0]
 800fc90:	3b04      	subs	r3, #4
 800fc92:	2a00      	cmp	r2, #0
 800fc94:	d1ef      	bne.n	800fc76 <quorem+0xe8>
 800fc96:	3c01      	subs	r4, #1
 800fc98:	e7ea      	b.n	800fc70 <quorem+0xe2>
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	e7ee      	b.n	800fc7c <quorem+0xee>
	...

0800fca0 <_dtoa_r>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	69c7      	ldr	r7, [r0, #28]
 800fca6:	b099      	sub	sp, #100	@ 0x64
 800fca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fcac:	ec55 4b10 	vmov	r4, r5, d0
 800fcb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fcb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fcb4:	4683      	mov	fp, r0
 800fcb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fcb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fcba:	b97f      	cbnz	r7, 800fcdc <_dtoa_r+0x3c>
 800fcbc:	2010      	movs	r0, #16
 800fcbe:	f7ff f861 	bl	800ed84 <malloc>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800fcc8:	b920      	cbnz	r0, 800fcd4 <_dtoa_r+0x34>
 800fcca:	4ba7      	ldr	r3, [pc, #668]	@ (800ff68 <_dtoa_r+0x2c8>)
 800fccc:	21ef      	movs	r1, #239	@ 0xef
 800fcce:	48a7      	ldr	r0, [pc, #668]	@ (800ff6c <_dtoa_r+0x2cc>)
 800fcd0:	f001 ff22 	bl	8011b18 <__assert_func>
 800fcd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fcd8:	6007      	str	r7, [r0, #0]
 800fcda:	60c7      	str	r7, [r0, #12]
 800fcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fce0:	6819      	ldr	r1, [r3, #0]
 800fce2:	b159      	cbz	r1, 800fcfc <_dtoa_r+0x5c>
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	604a      	str	r2, [r1, #4]
 800fce8:	2301      	movs	r3, #1
 800fcea:	4093      	lsls	r3, r2
 800fcec:	608b      	str	r3, [r1, #8]
 800fcee:	4658      	mov	r0, fp
 800fcf0:	f000 fe24 	bl	801093c <_Bfree>
 800fcf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	1e2b      	subs	r3, r5, #0
 800fcfe:	bfb9      	ittee	lt
 800fd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd04:	9303      	strlt	r3, [sp, #12]
 800fd06:	2300      	movge	r3, #0
 800fd08:	6033      	strge	r3, [r6, #0]
 800fd0a:	9f03      	ldr	r7, [sp, #12]
 800fd0c:	4b98      	ldr	r3, [pc, #608]	@ (800ff70 <_dtoa_r+0x2d0>)
 800fd0e:	bfbc      	itt	lt
 800fd10:	2201      	movlt	r2, #1
 800fd12:	6032      	strlt	r2, [r6, #0]
 800fd14:	43bb      	bics	r3, r7
 800fd16:	d112      	bne.n	800fd3e <_dtoa_r+0x9e>
 800fd18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd24:	4323      	orrs	r3, r4
 800fd26:	f000 854d 	beq.w	80107c4 <_dtoa_r+0xb24>
 800fd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ff84 <_dtoa_r+0x2e4>
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 854f 	beq.w	80107d4 <_dtoa_r+0xb34>
 800fd36:	f10a 0303 	add.w	r3, sl, #3
 800fd3a:	f000 bd49 	b.w	80107d0 <_dtoa_r+0xb30>
 800fd3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd42:	2200      	movs	r2, #0
 800fd44:	ec51 0b17 	vmov	r0, r1, d7
 800fd48:	2300      	movs	r3, #0
 800fd4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fd4e:	f7f0 fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd52:	4680      	mov	r8, r0
 800fd54:	b158      	cbz	r0, 800fd6e <_dtoa_r+0xce>
 800fd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd58:	2301      	movs	r3, #1
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd5e:	b113      	cbz	r3, 800fd66 <_dtoa_r+0xc6>
 800fd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd62:	4b84      	ldr	r3, [pc, #528]	@ (800ff74 <_dtoa_r+0x2d4>)
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ff88 <_dtoa_r+0x2e8>
 800fd6a:	f000 bd33 	b.w	80107d4 <_dtoa_r+0xb34>
 800fd6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd72:	aa16      	add	r2, sp, #88	@ 0x58
 800fd74:	a917      	add	r1, sp, #92	@ 0x5c
 800fd76:	4658      	mov	r0, fp
 800fd78:	f001 f8ca 	bl	8010f10 <__d2b>
 800fd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fd80:	4681      	mov	r9, r0
 800fd82:	2e00      	cmp	r6, #0
 800fd84:	d077      	beq.n	800fe76 <_dtoa_r+0x1d6>
 800fd86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fda0:	4619      	mov	r1, r3
 800fda2:	2200      	movs	r2, #0
 800fda4:	4b74      	ldr	r3, [pc, #464]	@ (800ff78 <_dtoa_r+0x2d8>)
 800fda6:	f7f0 fa7f 	bl	80002a8 <__aeabi_dsub>
 800fdaa:	a369      	add	r3, pc, #420	@ (adr r3, 800ff50 <_dtoa_r+0x2b0>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 fc32 	bl	8000618 <__aeabi_dmul>
 800fdb4:	a368      	add	r3, pc, #416	@ (adr r3, 800ff58 <_dtoa_r+0x2b8>)
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	f7f0 fa77 	bl	80002ac <__adddf3>
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	460d      	mov	r5, r1
 800fdc4:	f7f0 fbbe 	bl	8000544 <__aeabi_i2d>
 800fdc8:	a365      	add	r3, pc, #404	@ (adr r3, 800ff60 <_dtoa_r+0x2c0>)
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	f7f0 fc23 	bl	8000618 <__aeabi_dmul>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	4629      	mov	r1, r5
 800fdda:	f7f0 fa67 	bl	80002ac <__adddf3>
 800fdde:	4604      	mov	r4, r0
 800fde0:	460d      	mov	r5, r1
 800fde2:	f7f0 fec9 	bl	8000b78 <__aeabi_d2iz>
 800fde6:	2200      	movs	r2, #0
 800fde8:	4607      	mov	r7, r0
 800fdea:	2300      	movs	r3, #0
 800fdec:	4620      	mov	r0, r4
 800fdee:	4629      	mov	r1, r5
 800fdf0:	f7f0 fe84 	bl	8000afc <__aeabi_dcmplt>
 800fdf4:	b140      	cbz	r0, 800fe08 <_dtoa_r+0x168>
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f7f0 fba4 	bl	8000544 <__aeabi_i2d>
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	462b      	mov	r3, r5
 800fe00:	f7f0 fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe04:	b900      	cbnz	r0, 800fe08 <_dtoa_r+0x168>
 800fe06:	3f01      	subs	r7, #1
 800fe08:	2f16      	cmp	r7, #22
 800fe0a:	d851      	bhi.n	800feb0 <_dtoa_r+0x210>
 800fe0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ff7c <_dtoa_r+0x2dc>)
 800fe0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe1a:	f7f0 fe6f 	bl	8000afc <__aeabi_dcmplt>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d048      	beq.n	800feb4 <_dtoa_r+0x214>
 800fe22:	3f01      	subs	r7, #1
 800fe24:	2300      	movs	r3, #0
 800fe26:	9312      	str	r3, [sp, #72]	@ 0x48
 800fe28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe2a:	1b9b      	subs	r3, r3, r6
 800fe2c:	1e5a      	subs	r2, r3, #1
 800fe2e:	bf44      	itt	mi
 800fe30:	f1c3 0801 	rsbmi	r8, r3, #1
 800fe34:	2300      	movmi	r3, #0
 800fe36:	9208      	str	r2, [sp, #32]
 800fe38:	bf54      	ite	pl
 800fe3a:	f04f 0800 	movpl.w	r8, #0
 800fe3e:	9308      	strmi	r3, [sp, #32]
 800fe40:	2f00      	cmp	r7, #0
 800fe42:	db39      	blt.n	800feb8 <_dtoa_r+0x218>
 800fe44:	9b08      	ldr	r3, [sp, #32]
 800fe46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fe48:	443b      	add	r3, r7
 800fe4a:	9308      	str	r3, [sp, #32]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe52:	2b09      	cmp	r3, #9
 800fe54:	d864      	bhi.n	800ff20 <_dtoa_r+0x280>
 800fe56:	2b05      	cmp	r3, #5
 800fe58:	bfc4      	itt	gt
 800fe5a:	3b04      	subgt	r3, #4
 800fe5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fe5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe60:	f1a3 0302 	sub.w	r3, r3, #2
 800fe64:	bfcc      	ite	gt
 800fe66:	2400      	movgt	r4, #0
 800fe68:	2401      	movle	r4, #1
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	d863      	bhi.n	800ff36 <_dtoa_r+0x296>
 800fe6e:	e8df f003 	tbb	[pc, r3]
 800fe72:	372a      	.short	0x372a
 800fe74:	5535      	.short	0x5535
 800fe76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fe7a:	441e      	add	r6, r3
 800fe7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fe80:	2b20      	cmp	r3, #32
 800fe82:	bfc1      	itttt	gt
 800fe84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fe88:	409f      	lslgt	r7, r3
 800fe8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fe8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fe92:	bfd6      	itet	le
 800fe94:	f1c3 0320 	rsble	r3, r3, #32
 800fe98:	ea47 0003 	orrgt.w	r0, r7, r3
 800fe9c:	fa04 f003 	lslle.w	r0, r4, r3
 800fea0:	f7f0 fb40 	bl	8000524 <__aeabi_ui2d>
 800fea4:	2201      	movs	r2, #1
 800fea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800feaa:	3e01      	subs	r6, #1
 800feac:	9214      	str	r2, [sp, #80]	@ 0x50
 800feae:	e777      	b.n	800fda0 <_dtoa_r+0x100>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e7b8      	b.n	800fe26 <_dtoa_r+0x186>
 800feb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800feb6:	e7b7      	b.n	800fe28 <_dtoa_r+0x188>
 800feb8:	427b      	negs	r3, r7
 800feba:	930a      	str	r3, [sp, #40]	@ 0x28
 800febc:	2300      	movs	r3, #0
 800febe:	eba8 0807 	sub.w	r8, r8, r7
 800fec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fec4:	e7c4      	b.n	800fe50 <_dtoa_r+0x1b0>
 800fec6:	2300      	movs	r3, #0
 800fec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fecc:	2b00      	cmp	r3, #0
 800fece:	dc35      	bgt.n	800ff3c <_dtoa_r+0x29c>
 800fed0:	2301      	movs	r3, #1
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	9307      	str	r3, [sp, #28]
 800fed6:	461a      	mov	r2, r3
 800fed8:	920e      	str	r2, [sp, #56]	@ 0x38
 800feda:	e00b      	b.n	800fef4 <_dtoa_r+0x254>
 800fedc:	2301      	movs	r3, #1
 800fede:	e7f3      	b.n	800fec8 <_dtoa_r+0x228>
 800fee0:	2300      	movs	r3, #0
 800fee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fee6:	18fb      	adds	r3, r7, r3
 800fee8:	9300      	str	r3, [sp, #0]
 800feea:	3301      	adds	r3, #1
 800feec:	2b01      	cmp	r3, #1
 800feee:	9307      	str	r3, [sp, #28]
 800fef0:	bfb8      	it	lt
 800fef2:	2301      	movlt	r3, #1
 800fef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fef8:	2100      	movs	r1, #0
 800fefa:	2204      	movs	r2, #4
 800fefc:	f102 0514 	add.w	r5, r2, #20
 800ff00:	429d      	cmp	r5, r3
 800ff02:	d91f      	bls.n	800ff44 <_dtoa_r+0x2a4>
 800ff04:	6041      	str	r1, [r0, #4]
 800ff06:	4658      	mov	r0, fp
 800ff08:	f000 fcd8 	bl	80108bc <_Balloc>
 800ff0c:	4682      	mov	sl, r0
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d13c      	bne.n	800ff8c <_dtoa_r+0x2ec>
 800ff12:	4b1b      	ldr	r3, [pc, #108]	@ (800ff80 <_dtoa_r+0x2e0>)
 800ff14:	4602      	mov	r2, r0
 800ff16:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff1a:	e6d8      	b.n	800fcce <_dtoa_r+0x2e>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e7e0      	b.n	800fee2 <_dtoa_r+0x242>
 800ff20:	2401      	movs	r4, #1
 800ff22:	2300      	movs	r3, #0
 800ff24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff28:	f04f 33ff 	mov.w	r3, #4294967295
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	9307      	str	r3, [sp, #28]
 800ff30:	2200      	movs	r2, #0
 800ff32:	2312      	movs	r3, #18
 800ff34:	e7d0      	b.n	800fed8 <_dtoa_r+0x238>
 800ff36:	2301      	movs	r3, #1
 800ff38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff3a:	e7f5      	b.n	800ff28 <_dtoa_r+0x288>
 800ff3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	9307      	str	r3, [sp, #28]
 800ff42:	e7d7      	b.n	800fef4 <_dtoa_r+0x254>
 800ff44:	3101      	adds	r1, #1
 800ff46:	0052      	lsls	r2, r2, #1
 800ff48:	e7d8      	b.n	800fefc <_dtoa_r+0x25c>
 800ff4a:	bf00      	nop
 800ff4c:	f3af 8000 	nop.w
 800ff50:	636f4361 	.word	0x636f4361
 800ff54:	3fd287a7 	.word	0x3fd287a7
 800ff58:	8b60c8b3 	.word	0x8b60c8b3
 800ff5c:	3fc68a28 	.word	0x3fc68a28
 800ff60:	509f79fb 	.word	0x509f79fb
 800ff64:	3fd34413 	.word	0x3fd34413
 800ff68:	08013c63 	.word	0x08013c63
 800ff6c:	08013c7a 	.word	0x08013c7a
 800ff70:	7ff00000 	.word	0x7ff00000
 800ff74:	08013e60 	.word	0x08013e60
 800ff78:	3ff80000 	.word	0x3ff80000
 800ff7c:	08013d70 	.word	0x08013d70
 800ff80:	08013cd2 	.word	0x08013cd2
 800ff84:	08013c5f 	.word	0x08013c5f
 800ff88:	08013e5f 	.word	0x08013e5f
 800ff8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff90:	6018      	str	r0, [r3, #0]
 800ff92:	9b07      	ldr	r3, [sp, #28]
 800ff94:	2b0e      	cmp	r3, #14
 800ff96:	f200 80a4 	bhi.w	80100e2 <_dtoa_r+0x442>
 800ff9a:	2c00      	cmp	r4, #0
 800ff9c:	f000 80a1 	beq.w	80100e2 <_dtoa_r+0x442>
 800ffa0:	2f00      	cmp	r7, #0
 800ffa2:	dd33      	ble.n	801000c <_dtoa_r+0x36c>
 800ffa4:	4bad      	ldr	r3, [pc, #692]	@ (801025c <_dtoa_r+0x5bc>)
 800ffa6:	f007 020f 	and.w	r2, r7, #15
 800ffaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffae:	ed93 7b00 	vldr	d7, [r3]
 800ffb2:	05f8      	lsls	r0, r7, #23
 800ffb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ffb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ffbc:	d516      	bpl.n	800ffec <_dtoa_r+0x34c>
 800ffbe:	4ba8      	ldr	r3, [pc, #672]	@ (8010260 <_dtoa_r+0x5c0>)
 800ffc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffc8:	f7f0 fc50 	bl	800086c <__aeabi_ddiv>
 800ffcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffd0:	f004 040f 	and.w	r4, r4, #15
 800ffd4:	2603      	movs	r6, #3
 800ffd6:	4da2      	ldr	r5, [pc, #648]	@ (8010260 <_dtoa_r+0x5c0>)
 800ffd8:	b954      	cbnz	r4, 800fff0 <_dtoa_r+0x350>
 800ffda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe2:	f7f0 fc43 	bl	800086c <__aeabi_ddiv>
 800ffe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffea:	e028      	b.n	801003e <_dtoa_r+0x39e>
 800ffec:	2602      	movs	r6, #2
 800ffee:	e7f2      	b.n	800ffd6 <_dtoa_r+0x336>
 800fff0:	07e1      	lsls	r1, r4, #31
 800fff2:	d508      	bpl.n	8010006 <_dtoa_r+0x366>
 800fff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fffc:	f7f0 fb0c 	bl	8000618 <__aeabi_dmul>
 8010000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010004:	3601      	adds	r6, #1
 8010006:	1064      	asrs	r4, r4, #1
 8010008:	3508      	adds	r5, #8
 801000a:	e7e5      	b.n	800ffd8 <_dtoa_r+0x338>
 801000c:	f000 80d2 	beq.w	80101b4 <_dtoa_r+0x514>
 8010010:	427c      	negs	r4, r7
 8010012:	4b92      	ldr	r3, [pc, #584]	@ (801025c <_dtoa_r+0x5bc>)
 8010014:	4d92      	ldr	r5, [pc, #584]	@ (8010260 <_dtoa_r+0x5c0>)
 8010016:	f004 020f 	and.w	r2, r4, #15
 801001a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010026:	f7f0 faf7 	bl	8000618 <__aeabi_dmul>
 801002a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801002e:	1124      	asrs	r4, r4, #4
 8010030:	2300      	movs	r3, #0
 8010032:	2602      	movs	r6, #2
 8010034:	2c00      	cmp	r4, #0
 8010036:	f040 80b2 	bne.w	801019e <_dtoa_r+0x4fe>
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1d3      	bne.n	800ffe6 <_dtoa_r+0x346>
 801003e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 80b7 	beq.w	80101b8 <_dtoa_r+0x518>
 801004a:	4b86      	ldr	r3, [pc, #536]	@ (8010264 <_dtoa_r+0x5c4>)
 801004c:	2200      	movs	r2, #0
 801004e:	4620      	mov	r0, r4
 8010050:	4629      	mov	r1, r5
 8010052:	f7f0 fd53 	bl	8000afc <__aeabi_dcmplt>
 8010056:	2800      	cmp	r0, #0
 8010058:	f000 80ae 	beq.w	80101b8 <_dtoa_r+0x518>
 801005c:	9b07      	ldr	r3, [sp, #28]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f000 80aa 	beq.w	80101b8 <_dtoa_r+0x518>
 8010064:	9b00      	ldr	r3, [sp, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	dd37      	ble.n	80100da <_dtoa_r+0x43a>
 801006a:	1e7b      	subs	r3, r7, #1
 801006c:	9304      	str	r3, [sp, #16]
 801006e:	4620      	mov	r0, r4
 8010070:	4b7d      	ldr	r3, [pc, #500]	@ (8010268 <_dtoa_r+0x5c8>)
 8010072:	2200      	movs	r2, #0
 8010074:	4629      	mov	r1, r5
 8010076:	f7f0 facf 	bl	8000618 <__aeabi_dmul>
 801007a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801007e:	9c00      	ldr	r4, [sp, #0]
 8010080:	3601      	adds	r6, #1
 8010082:	4630      	mov	r0, r6
 8010084:	f7f0 fa5e 	bl	8000544 <__aeabi_i2d>
 8010088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801008c:	f7f0 fac4 	bl	8000618 <__aeabi_dmul>
 8010090:	4b76      	ldr	r3, [pc, #472]	@ (801026c <_dtoa_r+0x5cc>)
 8010092:	2200      	movs	r2, #0
 8010094:	f7f0 f90a 	bl	80002ac <__adddf3>
 8010098:	4605      	mov	r5, r0
 801009a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801009e:	2c00      	cmp	r4, #0
 80100a0:	f040 808d 	bne.w	80101be <_dtoa_r+0x51e>
 80100a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100a8:	4b71      	ldr	r3, [pc, #452]	@ (8010270 <_dtoa_r+0x5d0>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	f7f0 f8fc 	bl	80002a8 <__aeabi_dsub>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100b8:	462a      	mov	r2, r5
 80100ba:	4633      	mov	r3, r6
 80100bc:	f7f0 fd3c 	bl	8000b38 <__aeabi_dcmpgt>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	f040 828b 	bne.w	80105dc <_dtoa_r+0x93c>
 80100c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ca:	462a      	mov	r2, r5
 80100cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80100d0:	f7f0 fd14 	bl	8000afc <__aeabi_dcmplt>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	f040 8128 	bne.w	801032a <_dtoa_r+0x68a>
 80100da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80100de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80100e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	f2c0 815a 	blt.w	801039e <_dtoa_r+0x6fe>
 80100ea:	2f0e      	cmp	r7, #14
 80100ec:	f300 8157 	bgt.w	801039e <_dtoa_r+0x6fe>
 80100f0:	4b5a      	ldr	r3, [pc, #360]	@ (801025c <_dtoa_r+0x5bc>)
 80100f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100f6:	ed93 7b00 	vldr	d7, [r3]
 80100fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	ed8d 7b00 	vstr	d7, [sp]
 8010102:	da03      	bge.n	801010c <_dtoa_r+0x46c>
 8010104:	9b07      	ldr	r3, [sp, #28]
 8010106:	2b00      	cmp	r3, #0
 8010108:	f340 8101 	ble.w	801030e <_dtoa_r+0x66e>
 801010c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010110:	4656      	mov	r6, sl
 8010112:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010116:	4620      	mov	r0, r4
 8010118:	4629      	mov	r1, r5
 801011a:	f7f0 fba7 	bl	800086c <__aeabi_ddiv>
 801011e:	f7f0 fd2b 	bl	8000b78 <__aeabi_d2iz>
 8010122:	4680      	mov	r8, r0
 8010124:	f7f0 fa0e 	bl	8000544 <__aeabi_i2d>
 8010128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801012c:	f7f0 fa74 	bl	8000618 <__aeabi_dmul>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4620      	mov	r0, r4
 8010136:	4629      	mov	r1, r5
 8010138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801013c:	f7f0 f8b4 	bl	80002a8 <__aeabi_dsub>
 8010140:	f806 4b01 	strb.w	r4, [r6], #1
 8010144:	9d07      	ldr	r5, [sp, #28]
 8010146:	eba6 040a 	sub.w	r4, r6, sl
 801014a:	42a5      	cmp	r5, r4
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	f040 8117 	bne.w	8010382 <_dtoa_r+0x6e2>
 8010154:	f7f0 f8aa 	bl	80002ac <__adddf3>
 8010158:	e9dd 2300 	ldrd	r2, r3, [sp]
 801015c:	4604      	mov	r4, r0
 801015e:	460d      	mov	r5, r1
 8010160:	f7f0 fcea 	bl	8000b38 <__aeabi_dcmpgt>
 8010164:	2800      	cmp	r0, #0
 8010166:	f040 80f9 	bne.w	801035c <_dtoa_r+0x6bc>
 801016a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 fcb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010176:	b118      	cbz	r0, 8010180 <_dtoa_r+0x4e0>
 8010178:	f018 0f01 	tst.w	r8, #1
 801017c:	f040 80ee 	bne.w	801035c <_dtoa_r+0x6bc>
 8010180:	4649      	mov	r1, r9
 8010182:	4658      	mov	r0, fp
 8010184:	f000 fbda 	bl	801093c <_Bfree>
 8010188:	2300      	movs	r3, #0
 801018a:	7033      	strb	r3, [r6, #0]
 801018c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801018e:	3701      	adds	r7, #1
 8010190:	601f      	str	r7, [r3, #0]
 8010192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 831d 	beq.w	80107d4 <_dtoa_r+0xb34>
 801019a:	601e      	str	r6, [r3, #0]
 801019c:	e31a      	b.n	80107d4 <_dtoa_r+0xb34>
 801019e:	07e2      	lsls	r2, r4, #31
 80101a0:	d505      	bpl.n	80101ae <_dtoa_r+0x50e>
 80101a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101a6:	f7f0 fa37 	bl	8000618 <__aeabi_dmul>
 80101aa:	3601      	adds	r6, #1
 80101ac:	2301      	movs	r3, #1
 80101ae:	1064      	asrs	r4, r4, #1
 80101b0:	3508      	adds	r5, #8
 80101b2:	e73f      	b.n	8010034 <_dtoa_r+0x394>
 80101b4:	2602      	movs	r6, #2
 80101b6:	e742      	b.n	801003e <_dtoa_r+0x39e>
 80101b8:	9c07      	ldr	r4, [sp, #28]
 80101ba:	9704      	str	r7, [sp, #16]
 80101bc:	e761      	b.n	8010082 <_dtoa_r+0x3e2>
 80101be:	4b27      	ldr	r3, [pc, #156]	@ (801025c <_dtoa_r+0x5bc>)
 80101c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101ca:	4454      	add	r4, sl
 80101cc:	2900      	cmp	r1, #0
 80101ce:	d053      	beq.n	8010278 <_dtoa_r+0x5d8>
 80101d0:	4928      	ldr	r1, [pc, #160]	@ (8010274 <_dtoa_r+0x5d4>)
 80101d2:	2000      	movs	r0, #0
 80101d4:	f7f0 fb4a 	bl	800086c <__aeabi_ddiv>
 80101d8:	4633      	mov	r3, r6
 80101da:	462a      	mov	r2, r5
 80101dc:	f7f0 f864 	bl	80002a8 <__aeabi_dsub>
 80101e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101e4:	4656      	mov	r6, sl
 80101e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ea:	f7f0 fcc5 	bl	8000b78 <__aeabi_d2iz>
 80101ee:	4605      	mov	r5, r0
 80101f0:	f7f0 f9a8 	bl	8000544 <__aeabi_i2d>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101fc:	f7f0 f854 	bl	80002a8 <__aeabi_dsub>
 8010200:	3530      	adds	r5, #48	@ 0x30
 8010202:	4602      	mov	r2, r0
 8010204:	460b      	mov	r3, r1
 8010206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801020a:	f806 5b01 	strb.w	r5, [r6], #1
 801020e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010212:	f7f0 fc73 	bl	8000afc <__aeabi_dcmplt>
 8010216:	2800      	cmp	r0, #0
 8010218:	d171      	bne.n	80102fe <_dtoa_r+0x65e>
 801021a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801021e:	4911      	ldr	r1, [pc, #68]	@ (8010264 <_dtoa_r+0x5c4>)
 8010220:	2000      	movs	r0, #0
 8010222:	f7f0 f841 	bl	80002a8 <__aeabi_dsub>
 8010226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801022a:	f7f0 fc67 	bl	8000afc <__aeabi_dcmplt>
 801022e:	2800      	cmp	r0, #0
 8010230:	f040 8095 	bne.w	801035e <_dtoa_r+0x6be>
 8010234:	42a6      	cmp	r6, r4
 8010236:	f43f af50 	beq.w	80100da <_dtoa_r+0x43a>
 801023a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801023e:	4b0a      	ldr	r3, [pc, #40]	@ (8010268 <_dtoa_r+0x5c8>)
 8010240:	2200      	movs	r2, #0
 8010242:	f7f0 f9e9 	bl	8000618 <__aeabi_dmul>
 8010246:	4b08      	ldr	r3, [pc, #32]	@ (8010268 <_dtoa_r+0x5c8>)
 8010248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801024c:	2200      	movs	r2, #0
 801024e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010252:	f7f0 f9e1 	bl	8000618 <__aeabi_dmul>
 8010256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801025a:	e7c4      	b.n	80101e6 <_dtoa_r+0x546>
 801025c:	08013d70 	.word	0x08013d70
 8010260:	08013d48 	.word	0x08013d48
 8010264:	3ff00000 	.word	0x3ff00000
 8010268:	40240000 	.word	0x40240000
 801026c:	401c0000 	.word	0x401c0000
 8010270:	40140000 	.word	0x40140000
 8010274:	3fe00000 	.word	0x3fe00000
 8010278:	4631      	mov	r1, r6
 801027a:	4628      	mov	r0, r5
 801027c:	f7f0 f9cc 	bl	8000618 <__aeabi_dmul>
 8010280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010284:	9415      	str	r4, [sp, #84]	@ 0x54
 8010286:	4656      	mov	r6, sl
 8010288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801028c:	f7f0 fc74 	bl	8000b78 <__aeabi_d2iz>
 8010290:	4605      	mov	r5, r0
 8010292:	f7f0 f957 	bl	8000544 <__aeabi_i2d>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801029e:	f7f0 f803 	bl	80002a8 <__aeabi_dsub>
 80102a2:	3530      	adds	r5, #48	@ 0x30
 80102a4:	f806 5b01 	strb.w	r5, [r6], #1
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	42a6      	cmp	r6, r4
 80102ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102b2:	f04f 0200 	mov.w	r2, #0
 80102b6:	d124      	bne.n	8010302 <_dtoa_r+0x662>
 80102b8:	4bac      	ldr	r3, [pc, #688]	@ (801056c <_dtoa_r+0x8cc>)
 80102ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80102be:	f7ef fff5 	bl	80002ac <__adddf3>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102ca:	f7f0 fc35 	bl	8000b38 <__aeabi_dcmpgt>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d145      	bne.n	801035e <_dtoa_r+0x6be>
 80102d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80102d6:	49a5      	ldr	r1, [pc, #660]	@ (801056c <_dtoa_r+0x8cc>)
 80102d8:	2000      	movs	r0, #0
 80102da:	f7ef ffe5 	bl	80002a8 <__aeabi_dsub>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e6:	f7f0 fc09 	bl	8000afc <__aeabi_dcmplt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	f43f aef5 	beq.w	80100da <_dtoa_r+0x43a>
 80102f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80102f2:	1e73      	subs	r3, r6, #1
 80102f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80102f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102fa:	2b30      	cmp	r3, #48	@ 0x30
 80102fc:	d0f8      	beq.n	80102f0 <_dtoa_r+0x650>
 80102fe:	9f04      	ldr	r7, [sp, #16]
 8010300:	e73e      	b.n	8010180 <_dtoa_r+0x4e0>
 8010302:	4b9b      	ldr	r3, [pc, #620]	@ (8010570 <_dtoa_r+0x8d0>)
 8010304:	f7f0 f988 	bl	8000618 <__aeabi_dmul>
 8010308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801030c:	e7bc      	b.n	8010288 <_dtoa_r+0x5e8>
 801030e:	d10c      	bne.n	801032a <_dtoa_r+0x68a>
 8010310:	4b98      	ldr	r3, [pc, #608]	@ (8010574 <_dtoa_r+0x8d4>)
 8010312:	2200      	movs	r2, #0
 8010314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010318:	f7f0 f97e 	bl	8000618 <__aeabi_dmul>
 801031c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010320:	f7f0 fc00 	bl	8000b24 <__aeabi_dcmpge>
 8010324:	2800      	cmp	r0, #0
 8010326:	f000 8157 	beq.w	80105d8 <_dtoa_r+0x938>
 801032a:	2400      	movs	r4, #0
 801032c:	4625      	mov	r5, r4
 801032e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010330:	43db      	mvns	r3, r3
 8010332:	9304      	str	r3, [sp, #16]
 8010334:	4656      	mov	r6, sl
 8010336:	2700      	movs	r7, #0
 8010338:	4621      	mov	r1, r4
 801033a:	4658      	mov	r0, fp
 801033c:	f000 fafe 	bl	801093c <_Bfree>
 8010340:	2d00      	cmp	r5, #0
 8010342:	d0dc      	beq.n	80102fe <_dtoa_r+0x65e>
 8010344:	b12f      	cbz	r7, 8010352 <_dtoa_r+0x6b2>
 8010346:	42af      	cmp	r7, r5
 8010348:	d003      	beq.n	8010352 <_dtoa_r+0x6b2>
 801034a:	4639      	mov	r1, r7
 801034c:	4658      	mov	r0, fp
 801034e:	f000 faf5 	bl	801093c <_Bfree>
 8010352:	4629      	mov	r1, r5
 8010354:	4658      	mov	r0, fp
 8010356:	f000 faf1 	bl	801093c <_Bfree>
 801035a:	e7d0      	b.n	80102fe <_dtoa_r+0x65e>
 801035c:	9704      	str	r7, [sp, #16]
 801035e:	4633      	mov	r3, r6
 8010360:	461e      	mov	r6, r3
 8010362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010366:	2a39      	cmp	r2, #57	@ 0x39
 8010368:	d107      	bne.n	801037a <_dtoa_r+0x6da>
 801036a:	459a      	cmp	sl, r3
 801036c:	d1f8      	bne.n	8010360 <_dtoa_r+0x6c0>
 801036e:	9a04      	ldr	r2, [sp, #16]
 8010370:	3201      	adds	r2, #1
 8010372:	9204      	str	r2, [sp, #16]
 8010374:	2230      	movs	r2, #48	@ 0x30
 8010376:	f88a 2000 	strb.w	r2, [sl]
 801037a:	781a      	ldrb	r2, [r3, #0]
 801037c:	3201      	adds	r2, #1
 801037e:	701a      	strb	r2, [r3, #0]
 8010380:	e7bd      	b.n	80102fe <_dtoa_r+0x65e>
 8010382:	4b7b      	ldr	r3, [pc, #492]	@ (8010570 <_dtoa_r+0x8d0>)
 8010384:	2200      	movs	r2, #0
 8010386:	f7f0 f947 	bl	8000618 <__aeabi_dmul>
 801038a:	2200      	movs	r2, #0
 801038c:	2300      	movs	r3, #0
 801038e:	4604      	mov	r4, r0
 8010390:	460d      	mov	r5, r1
 8010392:	f7f0 fba9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010396:	2800      	cmp	r0, #0
 8010398:	f43f aebb 	beq.w	8010112 <_dtoa_r+0x472>
 801039c:	e6f0      	b.n	8010180 <_dtoa_r+0x4e0>
 801039e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	f000 80db 	beq.w	801055c <_dtoa_r+0x8bc>
 80103a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103a8:	2a01      	cmp	r2, #1
 80103aa:	f300 80bf 	bgt.w	801052c <_dtoa_r+0x88c>
 80103ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80103b0:	2a00      	cmp	r2, #0
 80103b2:	f000 80b7 	beq.w	8010524 <_dtoa_r+0x884>
 80103b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80103ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103bc:	4646      	mov	r6, r8
 80103be:	9a08      	ldr	r2, [sp, #32]
 80103c0:	2101      	movs	r1, #1
 80103c2:	441a      	add	r2, r3
 80103c4:	4658      	mov	r0, fp
 80103c6:	4498      	add	r8, r3
 80103c8:	9208      	str	r2, [sp, #32]
 80103ca:	f000 fb6b 	bl	8010aa4 <__i2b>
 80103ce:	4605      	mov	r5, r0
 80103d0:	b15e      	cbz	r6, 80103ea <_dtoa_r+0x74a>
 80103d2:	9b08      	ldr	r3, [sp, #32]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	dd08      	ble.n	80103ea <_dtoa_r+0x74a>
 80103d8:	42b3      	cmp	r3, r6
 80103da:	9a08      	ldr	r2, [sp, #32]
 80103dc:	bfa8      	it	ge
 80103de:	4633      	movge	r3, r6
 80103e0:	eba8 0803 	sub.w	r8, r8, r3
 80103e4:	1af6      	subs	r6, r6, r3
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	9308      	str	r3, [sp, #32]
 80103ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ec:	b1f3      	cbz	r3, 801042c <_dtoa_r+0x78c>
 80103ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f000 80b7 	beq.w	8010564 <_dtoa_r+0x8c4>
 80103f6:	b18c      	cbz	r4, 801041c <_dtoa_r+0x77c>
 80103f8:	4629      	mov	r1, r5
 80103fa:	4622      	mov	r2, r4
 80103fc:	4658      	mov	r0, fp
 80103fe:	f000 fc11 	bl	8010c24 <__pow5mult>
 8010402:	464a      	mov	r2, r9
 8010404:	4601      	mov	r1, r0
 8010406:	4605      	mov	r5, r0
 8010408:	4658      	mov	r0, fp
 801040a:	f000 fb61 	bl	8010ad0 <__multiply>
 801040e:	4649      	mov	r1, r9
 8010410:	9004      	str	r0, [sp, #16]
 8010412:	4658      	mov	r0, fp
 8010414:	f000 fa92 	bl	801093c <_Bfree>
 8010418:	9b04      	ldr	r3, [sp, #16]
 801041a:	4699      	mov	r9, r3
 801041c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801041e:	1b1a      	subs	r2, r3, r4
 8010420:	d004      	beq.n	801042c <_dtoa_r+0x78c>
 8010422:	4649      	mov	r1, r9
 8010424:	4658      	mov	r0, fp
 8010426:	f000 fbfd 	bl	8010c24 <__pow5mult>
 801042a:	4681      	mov	r9, r0
 801042c:	2101      	movs	r1, #1
 801042e:	4658      	mov	r0, fp
 8010430:	f000 fb38 	bl	8010aa4 <__i2b>
 8010434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010436:	4604      	mov	r4, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 81cf 	beq.w	80107dc <_dtoa_r+0xb3c>
 801043e:	461a      	mov	r2, r3
 8010440:	4601      	mov	r1, r0
 8010442:	4658      	mov	r0, fp
 8010444:	f000 fbee 	bl	8010c24 <__pow5mult>
 8010448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044a:	2b01      	cmp	r3, #1
 801044c:	4604      	mov	r4, r0
 801044e:	f300 8095 	bgt.w	801057c <_dtoa_r+0x8dc>
 8010452:	9b02      	ldr	r3, [sp, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	f040 8087 	bne.w	8010568 <_dtoa_r+0x8c8>
 801045a:	9b03      	ldr	r3, [sp, #12]
 801045c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010460:	2b00      	cmp	r3, #0
 8010462:	f040 8089 	bne.w	8010578 <_dtoa_r+0x8d8>
 8010466:	9b03      	ldr	r3, [sp, #12]
 8010468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801046c:	0d1b      	lsrs	r3, r3, #20
 801046e:	051b      	lsls	r3, r3, #20
 8010470:	b12b      	cbz	r3, 801047e <_dtoa_r+0x7de>
 8010472:	9b08      	ldr	r3, [sp, #32]
 8010474:	3301      	adds	r3, #1
 8010476:	9308      	str	r3, [sp, #32]
 8010478:	f108 0801 	add.w	r8, r8, #1
 801047c:	2301      	movs	r3, #1
 801047e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 81b0 	beq.w	80107e8 <_dtoa_r+0xb48>
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801048e:	6918      	ldr	r0, [r3, #16]
 8010490:	f000 fabc 	bl	8010a0c <__hi0bits>
 8010494:	f1c0 0020 	rsb	r0, r0, #32
 8010498:	9b08      	ldr	r3, [sp, #32]
 801049a:	4418      	add	r0, r3
 801049c:	f010 001f 	ands.w	r0, r0, #31
 80104a0:	d077      	beq.n	8010592 <_dtoa_r+0x8f2>
 80104a2:	f1c0 0320 	rsb	r3, r0, #32
 80104a6:	2b04      	cmp	r3, #4
 80104a8:	dd6b      	ble.n	8010582 <_dtoa_r+0x8e2>
 80104aa:	9b08      	ldr	r3, [sp, #32]
 80104ac:	f1c0 001c 	rsb	r0, r0, #28
 80104b0:	4403      	add	r3, r0
 80104b2:	4480      	add	r8, r0
 80104b4:	4406      	add	r6, r0
 80104b6:	9308      	str	r3, [sp, #32]
 80104b8:	f1b8 0f00 	cmp.w	r8, #0
 80104bc:	dd05      	ble.n	80104ca <_dtoa_r+0x82a>
 80104be:	4649      	mov	r1, r9
 80104c0:	4642      	mov	r2, r8
 80104c2:	4658      	mov	r0, fp
 80104c4:	f000 fc08 	bl	8010cd8 <__lshift>
 80104c8:	4681      	mov	r9, r0
 80104ca:	9b08      	ldr	r3, [sp, #32]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	dd05      	ble.n	80104dc <_dtoa_r+0x83c>
 80104d0:	4621      	mov	r1, r4
 80104d2:	461a      	mov	r2, r3
 80104d4:	4658      	mov	r0, fp
 80104d6:	f000 fbff 	bl	8010cd8 <__lshift>
 80104da:	4604      	mov	r4, r0
 80104dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d059      	beq.n	8010596 <_dtoa_r+0x8f6>
 80104e2:	4621      	mov	r1, r4
 80104e4:	4648      	mov	r0, r9
 80104e6:	f000 fc63 	bl	8010db0 <__mcmp>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	da53      	bge.n	8010596 <_dtoa_r+0x8f6>
 80104ee:	1e7b      	subs	r3, r7, #1
 80104f0:	9304      	str	r3, [sp, #16]
 80104f2:	4649      	mov	r1, r9
 80104f4:	2300      	movs	r3, #0
 80104f6:	220a      	movs	r2, #10
 80104f8:	4658      	mov	r0, fp
 80104fa:	f000 fa41 	bl	8010980 <__multadd>
 80104fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010500:	4681      	mov	r9, r0
 8010502:	2b00      	cmp	r3, #0
 8010504:	f000 8172 	beq.w	80107ec <_dtoa_r+0xb4c>
 8010508:	2300      	movs	r3, #0
 801050a:	4629      	mov	r1, r5
 801050c:	220a      	movs	r2, #10
 801050e:	4658      	mov	r0, fp
 8010510:	f000 fa36 	bl	8010980 <__multadd>
 8010514:	9b00      	ldr	r3, [sp, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	4605      	mov	r5, r0
 801051a:	dc67      	bgt.n	80105ec <_dtoa_r+0x94c>
 801051c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801051e:	2b02      	cmp	r3, #2
 8010520:	dc41      	bgt.n	80105a6 <_dtoa_r+0x906>
 8010522:	e063      	b.n	80105ec <_dtoa_r+0x94c>
 8010524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801052a:	e746      	b.n	80103ba <_dtoa_r+0x71a>
 801052c:	9b07      	ldr	r3, [sp, #28]
 801052e:	1e5c      	subs	r4, r3, #1
 8010530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010532:	42a3      	cmp	r3, r4
 8010534:	bfbf      	itttt	lt
 8010536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801053a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801053c:	1ae3      	sublt	r3, r4, r3
 801053e:	bfb4      	ite	lt
 8010540:	18d2      	addlt	r2, r2, r3
 8010542:	1b1c      	subge	r4, r3, r4
 8010544:	9b07      	ldr	r3, [sp, #28]
 8010546:	bfbc      	itt	lt
 8010548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801054a:	2400      	movlt	r4, #0
 801054c:	2b00      	cmp	r3, #0
 801054e:	bfb5      	itete	lt
 8010550:	eba8 0603 	sublt.w	r6, r8, r3
 8010554:	9b07      	ldrge	r3, [sp, #28]
 8010556:	2300      	movlt	r3, #0
 8010558:	4646      	movge	r6, r8
 801055a:	e730      	b.n	80103be <_dtoa_r+0x71e>
 801055c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801055e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010560:	4646      	mov	r6, r8
 8010562:	e735      	b.n	80103d0 <_dtoa_r+0x730>
 8010564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010566:	e75c      	b.n	8010422 <_dtoa_r+0x782>
 8010568:	2300      	movs	r3, #0
 801056a:	e788      	b.n	801047e <_dtoa_r+0x7de>
 801056c:	3fe00000 	.word	0x3fe00000
 8010570:	40240000 	.word	0x40240000
 8010574:	40140000 	.word	0x40140000
 8010578:	9b02      	ldr	r3, [sp, #8]
 801057a:	e780      	b.n	801047e <_dtoa_r+0x7de>
 801057c:	2300      	movs	r3, #0
 801057e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010580:	e782      	b.n	8010488 <_dtoa_r+0x7e8>
 8010582:	d099      	beq.n	80104b8 <_dtoa_r+0x818>
 8010584:	9a08      	ldr	r2, [sp, #32]
 8010586:	331c      	adds	r3, #28
 8010588:	441a      	add	r2, r3
 801058a:	4498      	add	r8, r3
 801058c:	441e      	add	r6, r3
 801058e:	9208      	str	r2, [sp, #32]
 8010590:	e792      	b.n	80104b8 <_dtoa_r+0x818>
 8010592:	4603      	mov	r3, r0
 8010594:	e7f6      	b.n	8010584 <_dtoa_r+0x8e4>
 8010596:	9b07      	ldr	r3, [sp, #28]
 8010598:	9704      	str	r7, [sp, #16]
 801059a:	2b00      	cmp	r3, #0
 801059c:	dc20      	bgt.n	80105e0 <_dtoa_r+0x940>
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	dd1e      	ble.n	80105e4 <_dtoa_r+0x944>
 80105a6:	9b00      	ldr	r3, [sp, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f47f aec0 	bne.w	801032e <_dtoa_r+0x68e>
 80105ae:	4621      	mov	r1, r4
 80105b0:	2205      	movs	r2, #5
 80105b2:	4658      	mov	r0, fp
 80105b4:	f000 f9e4 	bl	8010980 <__multadd>
 80105b8:	4601      	mov	r1, r0
 80105ba:	4604      	mov	r4, r0
 80105bc:	4648      	mov	r0, r9
 80105be:	f000 fbf7 	bl	8010db0 <__mcmp>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	f77f aeb3 	ble.w	801032e <_dtoa_r+0x68e>
 80105c8:	4656      	mov	r6, sl
 80105ca:	2331      	movs	r3, #49	@ 0x31
 80105cc:	f806 3b01 	strb.w	r3, [r6], #1
 80105d0:	9b04      	ldr	r3, [sp, #16]
 80105d2:	3301      	adds	r3, #1
 80105d4:	9304      	str	r3, [sp, #16]
 80105d6:	e6ae      	b.n	8010336 <_dtoa_r+0x696>
 80105d8:	9c07      	ldr	r4, [sp, #28]
 80105da:	9704      	str	r7, [sp, #16]
 80105dc:	4625      	mov	r5, r4
 80105de:	e7f3      	b.n	80105c8 <_dtoa_r+0x928>
 80105e0:	9b07      	ldr	r3, [sp, #28]
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 8104 	beq.w	80107f4 <_dtoa_r+0xb54>
 80105ec:	2e00      	cmp	r6, #0
 80105ee:	dd05      	ble.n	80105fc <_dtoa_r+0x95c>
 80105f0:	4629      	mov	r1, r5
 80105f2:	4632      	mov	r2, r6
 80105f4:	4658      	mov	r0, fp
 80105f6:	f000 fb6f 	bl	8010cd8 <__lshift>
 80105fa:	4605      	mov	r5, r0
 80105fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d05a      	beq.n	80106b8 <_dtoa_r+0xa18>
 8010602:	6869      	ldr	r1, [r5, #4]
 8010604:	4658      	mov	r0, fp
 8010606:	f000 f959 	bl	80108bc <_Balloc>
 801060a:	4606      	mov	r6, r0
 801060c:	b928      	cbnz	r0, 801061a <_dtoa_r+0x97a>
 801060e:	4b84      	ldr	r3, [pc, #528]	@ (8010820 <_dtoa_r+0xb80>)
 8010610:	4602      	mov	r2, r0
 8010612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010616:	f7ff bb5a 	b.w	800fcce <_dtoa_r+0x2e>
 801061a:	692a      	ldr	r2, [r5, #16]
 801061c:	3202      	adds	r2, #2
 801061e:	0092      	lsls	r2, r2, #2
 8010620:	f105 010c 	add.w	r1, r5, #12
 8010624:	300c      	adds	r0, #12
 8010626:	f7ff faa4 	bl	800fb72 <memcpy>
 801062a:	2201      	movs	r2, #1
 801062c:	4631      	mov	r1, r6
 801062e:	4658      	mov	r0, fp
 8010630:	f000 fb52 	bl	8010cd8 <__lshift>
 8010634:	f10a 0301 	add.w	r3, sl, #1
 8010638:	9307      	str	r3, [sp, #28]
 801063a:	9b00      	ldr	r3, [sp, #0]
 801063c:	4453      	add	r3, sl
 801063e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010640:	9b02      	ldr	r3, [sp, #8]
 8010642:	f003 0301 	and.w	r3, r3, #1
 8010646:	462f      	mov	r7, r5
 8010648:	930a      	str	r3, [sp, #40]	@ 0x28
 801064a:	4605      	mov	r5, r0
 801064c:	9b07      	ldr	r3, [sp, #28]
 801064e:	4621      	mov	r1, r4
 8010650:	3b01      	subs	r3, #1
 8010652:	4648      	mov	r0, r9
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	f7ff fa9a 	bl	800fb8e <quorem>
 801065a:	4639      	mov	r1, r7
 801065c:	9002      	str	r0, [sp, #8]
 801065e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010662:	4648      	mov	r0, r9
 8010664:	f000 fba4 	bl	8010db0 <__mcmp>
 8010668:	462a      	mov	r2, r5
 801066a:	9008      	str	r0, [sp, #32]
 801066c:	4621      	mov	r1, r4
 801066e:	4658      	mov	r0, fp
 8010670:	f000 fbba 	bl	8010de8 <__mdiff>
 8010674:	68c2      	ldr	r2, [r0, #12]
 8010676:	4606      	mov	r6, r0
 8010678:	bb02      	cbnz	r2, 80106bc <_dtoa_r+0xa1c>
 801067a:	4601      	mov	r1, r0
 801067c:	4648      	mov	r0, r9
 801067e:	f000 fb97 	bl	8010db0 <__mcmp>
 8010682:	4602      	mov	r2, r0
 8010684:	4631      	mov	r1, r6
 8010686:	4658      	mov	r0, fp
 8010688:	920e      	str	r2, [sp, #56]	@ 0x38
 801068a:	f000 f957 	bl	801093c <_Bfree>
 801068e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010692:	9e07      	ldr	r6, [sp, #28]
 8010694:	ea43 0102 	orr.w	r1, r3, r2
 8010698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801069a:	4319      	orrs	r1, r3
 801069c:	d110      	bne.n	80106c0 <_dtoa_r+0xa20>
 801069e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106a2:	d029      	beq.n	80106f8 <_dtoa_r+0xa58>
 80106a4:	9b08      	ldr	r3, [sp, #32]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	dd02      	ble.n	80106b0 <_dtoa_r+0xa10>
 80106aa:	9b02      	ldr	r3, [sp, #8]
 80106ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80106b0:	9b00      	ldr	r3, [sp, #0]
 80106b2:	f883 8000 	strb.w	r8, [r3]
 80106b6:	e63f      	b.n	8010338 <_dtoa_r+0x698>
 80106b8:	4628      	mov	r0, r5
 80106ba:	e7bb      	b.n	8010634 <_dtoa_r+0x994>
 80106bc:	2201      	movs	r2, #1
 80106be:	e7e1      	b.n	8010684 <_dtoa_r+0x9e4>
 80106c0:	9b08      	ldr	r3, [sp, #32]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	db04      	blt.n	80106d0 <_dtoa_r+0xa30>
 80106c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106c8:	430b      	orrs	r3, r1
 80106ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80106cc:	430b      	orrs	r3, r1
 80106ce:	d120      	bne.n	8010712 <_dtoa_r+0xa72>
 80106d0:	2a00      	cmp	r2, #0
 80106d2:	dded      	ble.n	80106b0 <_dtoa_r+0xa10>
 80106d4:	4649      	mov	r1, r9
 80106d6:	2201      	movs	r2, #1
 80106d8:	4658      	mov	r0, fp
 80106da:	f000 fafd 	bl	8010cd8 <__lshift>
 80106de:	4621      	mov	r1, r4
 80106e0:	4681      	mov	r9, r0
 80106e2:	f000 fb65 	bl	8010db0 <__mcmp>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	dc03      	bgt.n	80106f2 <_dtoa_r+0xa52>
 80106ea:	d1e1      	bne.n	80106b0 <_dtoa_r+0xa10>
 80106ec:	f018 0f01 	tst.w	r8, #1
 80106f0:	d0de      	beq.n	80106b0 <_dtoa_r+0xa10>
 80106f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106f6:	d1d8      	bne.n	80106aa <_dtoa_r+0xa0a>
 80106f8:	9a00      	ldr	r2, [sp, #0]
 80106fa:	2339      	movs	r3, #57	@ 0x39
 80106fc:	7013      	strb	r3, [r2, #0]
 80106fe:	4633      	mov	r3, r6
 8010700:	461e      	mov	r6, r3
 8010702:	3b01      	subs	r3, #1
 8010704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010708:	2a39      	cmp	r2, #57	@ 0x39
 801070a:	d052      	beq.n	80107b2 <_dtoa_r+0xb12>
 801070c:	3201      	adds	r2, #1
 801070e:	701a      	strb	r2, [r3, #0]
 8010710:	e612      	b.n	8010338 <_dtoa_r+0x698>
 8010712:	2a00      	cmp	r2, #0
 8010714:	dd07      	ble.n	8010726 <_dtoa_r+0xa86>
 8010716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801071a:	d0ed      	beq.n	80106f8 <_dtoa_r+0xa58>
 801071c:	9a00      	ldr	r2, [sp, #0]
 801071e:	f108 0301 	add.w	r3, r8, #1
 8010722:	7013      	strb	r3, [r2, #0]
 8010724:	e608      	b.n	8010338 <_dtoa_r+0x698>
 8010726:	9b07      	ldr	r3, [sp, #28]
 8010728:	9a07      	ldr	r2, [sp, #28]
 801072a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801072e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010730:	4293      	cmp	r3, r2
 8010732:	d028      	beq.n	8010786 <_dtoa_r+0xae6>
 8010734:	4649      	mov	r1, r9
 8010736:	2300      	movs	r3, #0
 8010738:	220a      	movs	r2, #10
 801073a:	4658      	mov	r0, fp
 801073c:	f000 f920 	bl	8010980 <__multadd>
 8010740:	42af      	cmp	r7, r5
 8010742:	4681      	mov	r9, r0
 8010744:	f04f 0300 	mov.w	r3, #0
 8010748:	f04f 020a 	mov.w	r2, #10
 801074c:	4639      	mov	r1, r7
 801074e:	4658      	mov	r0, fp
 8010750:	d107      	bne.n	8010762 <_dtoa_r+0xac2>
 8010752:	f000 f915 	bl	8010980 <__multadd>
 8010756:	4607      	mov	r7, r0
 8010758:	4605      	mov	r5, r0
 801075a:	9b07      	ldr	r3, [sp, #28]
 801075c:	3301      	adds	r3, #1
 801075e:	9307      	str	r3, [sp, #28]
 8010760:	e774      	b.n	801064c <_dtoa_r+0x9ac>
 8010762:	f000 f90d 	bl	8010980 <__multadd>
 8010766:	4629      	mov	r1, r5
 8010768:	4607      	mov	r7, r0
 801076a:	2300      	movs	r3, #0
 801076c:	220a      	movs	r2, #10
 801076e:	4658      	mov	r0, fp
 8010770:	f000 f906 	bl	8010980 <__multadd>
 8010774:	4605      	mov	r5, r0
 8010776:	e7f0      	b.n	801075a <_dtoa_r+0xaba>
 8010778:	9b00      	ldr	r3, [sp, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	bfcc      	ite	gt
 801077e:	461e      	movgt	r6, r3
 8010780:	2601      	movle	r6, #1
 8010782:	4456      	add	r6, sl
 8010784:	2700      	movs	r7, #0
 8010786:	4649      	mov	r1, r9
 8010788:	2201      	movs	r2, #1
 801078a:	4658      	mov	r0, fp
 801078c:	f000 faa4 	bl	8010cd8 <__lshift>
 8010790:	4621      	mov	r1, r4
 8010792:	4681      	mov	r9, r0
 8010794:	f000 fb0c 	bl	8010db0 <__mcmp>
 8010798:	2800      	cmp	r0, #0
 801079a:	dcb0      	bgt.n	80106fe <_dtoa_r+0xa5e>
 801079c:	d102      	bne.n	80107a4 <_dtoa_r+0xb04>
 801079e:	f018 0f01 	tst.w	r8, #1
 80107a2:	d1ac      	bne.n	80106fe <_dtoa_r+0xa5e>
 80107a4:	4633      	mov	r3, r6
 80107a6:	461e      	mov	r6, r3
 80107a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ac:	2a30      	cmp	r2, #48	@ 0x30
 80107ae:	d0fa      	beq.n	80107a6 <_dtoa_r+0xb06>
 80107b0:	e5c2      	b.n	8010338 <_dtoa_r+0x698>
 80107b2:	459a      	cmp	sl, r3
 80107b4:	d1a4      	bne.n	8010700 <_dtoa_r+0xa60>
 80107b6:	9b04      	ldr	r3, [sp, #16]
 80107b8:	3301      	adds	r3, #1
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	2331      	movs	r3, #49	@ 0x31
 80107be:	f88a 3000 	strb.w	r3, [sl]
 80107c2:	e5b9      	b.n	8010338 <_dtoa_r+0x698>
 80107c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80107c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010824 <_dtoa_r+0xb84>
 80107ca:	b11b      	cbz	r3, 80107d4 <_dtoa_r+0xb34>
 80107cc:	f10a 0308 	add.w	r3, sl, #8
 80107d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	4650      	mov	r0, sl
 80107d6:	b019      	add	sp, #100	@ 0x64
 80107d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107de:	2b01      	cmp	r3, #1
 80107e0:	f77f ae37 	ble.w	8010452 <_dtoa_r+0x7b2>
 80107e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107e8:	2001      	movs	r0, #1
 80107ea:	e655      	b.n	8010498 <_dtoa_r+0x7f8>
 80107ec:	9b00      	ldr	r3, [sp, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f77f aed6 	ble.w	80105a0 <_dtoa_r+0x900>
 80107f4:	4656      	mov	r6, sl
 80107f6:	4621      	mov	r1, r4
 80107f8:	4648      	mov	r0, r9
 80107fa:	f7ff f9c8 	bl	800fb8e <quorem>
 80107fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010802:	f806 8b01 	strb.w	r8, [r6], #1
 8010806:	9b00      	ldr	r3, [sp, #0]
 8010808:	eba6 020a 	sub.w	r2, r6, sl
 801080c:	4293      	cmp	r3, r2
 801080e:	ddb3      	ble.n	8010778 <_dtoa_r+0xad8>
 8010810:	4649      	mov	r1, r9
 8010812:	2300      	movs	r3, #0
 8010814:	220a      	movs	r2, #10
 8010816:	4658      	mov	r0, fp
 8010818:	f000 f8b2 	bl	8010980 <__multadd>
 801081c:	4681      	mov	r9, r0
 801081e:	e7ea      	b.n	80107f6 <_dtoa_r+0xb56>
 8010820:	08013cd2 	.word	0x08013cd2
 8010824:	08013c56 	.word	0x08013c56

08010828 <_free_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	4605      	mov	r5, r0
 801082c:	2900      	cmp	r1, #0
 801082e:	d041      	beq.n	80108b4 <_free_r+0x8c>
 8010830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010834:	1f0c      	subs	r4, r1, #4
 8010836:	2b00      	cmp	r3, #0
 8010838:	bfb8      	it	lt
 801083a:	18e4      	addlt	r4, r4, r3
 801083c:	f7fe fb54 	bl	800eee8 <__malloc_lock>
 8010840:	4a1d      	ldr	r2, [pc, #116]	@ (80108b8 <_free_r+0x90>)
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	b933      	cbnz	r3, 8010854 <_free_r+0x2c>
 8010846:	6063      	str	r3, [r4, #4]
 8010848:	6014      	str	r4, [r2, #0]
 801084a:	4628      	mov	r0, r5
 801084c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010850:	f7fe bb50 	b.w	800eef4 <__malloc_unlock>
 8010854:	42a3      	cmp	r3, r4
 8010856:	d908      	bls.n	801086a <_free_r+0x42>
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	1821      	adds	r1, r4, r0
 801085c:	428b      	cmp	r3, r1
 801085e:	bf01      	itttt	eq
 8010860:	6819      	ldreq	r1, [r3, #0]
 8010862:	685b      	ldreq	r3, [r3, #4]
 8010864:	1809      	addeq	r1, r1, r0
 8010866:	6021      	streq	r1, [r4, #0]
 8010868:	e7ed      	b.n	8010846 <_free_r+0x1e>
 801086a:	461a      	mov	r2, r3
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	b10b      	cbz	r3, 8010874 <_free_r+0x4c>
 8010870:	42a3      	cmp	r3, r4
 8010872:	d9fa      	bls.n	801086a <_free_r+0x42>
 8010874:	6811      	ldr	r1, [r2, #0]
 8010876:	1850      	adds	r0, r2, r1
 8010878:	42a0      	cmp	r0, r4
 801087a:	d10b      	bne.n	8010894 <_free_r+0x6c>
 801087c:	6820      	ldr	r0, [r4, #0]
 801087e:	4401      	add	r1, r0
 8010880:	1850      	adds	r0, r2, r1
 8010882:	4283      	cmp	r3, r0
 8010884:	6011      	str	r1, [r2, #0]
 8010886:	d1e0      	bne.n	801084a <_free_r+0x22>
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	6053      	str	r3, [r2, #4]
 801088e:	4408      	add	r0, r1
 8010890:	6010      	str	r0, [r2, #0]
 8010892:	e7da      	b.n	801084a <_free_r+0x22>
 8010894:	d902      	bls.n	801089c <_free_r+0x74>
 8010896:	230c      	movs	r3, #12
 8010898:	602b      	str	r3, [r5, #0]
 801089a:	e7d6      	b.n	801084a <_free_r+0x22>
 801089c:	6820      	ldr	r0, [r4, #0]
 801089e:	1821      	adds	r1, r4, r0
 80108a0:	428b      	cmp	r3, r1
 80108a2:	bf04      	itt	eq
 80108a4:	6819      	ldreq	r1, [r3, #0]
 80108a6:	685b      	ldreq	r3, [r3, #4]
 80108a8:	6063      	str	r3, [r4, #4]
 80108aa:	bf04      	itt	eq
 80108ac:	1809      	addeq	r1, r1, r0
 80108ae:	6021      	streq	r1, [r4, #0]
 80108b0:	6054      	str	r4, [r2, #4]
 80108b2:	e7ca      	b.n	801084a <_free_r+0x22>
 80108b4:	bd38      	pop	{r3, r4, r5, pc}
 80108b6:	bf00      	nop
 80108b8:	20015490 	.word	0x20015490

080108bc <_Balloc>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	69c6      	ldr	r6, [r0, #28]
 80108c0:	4604      	mov	r4, r0
 80108c2:	460d      	mov	r5, r1
 80108c4:	b976      	cbnz	r6, 80108e4 <_Balloc+0x28>
 80108c6:	2010      	movs	r0, #16
 80108c8:	f7fe fa5c 	bl	800ed84 <malloc>
 80108cc:	4602      	mov	r2, r0
 80108ce:	61e0      	str	r0, [r4, #28]
 80108d0:	b920      	cbnz	r0, 80108dc <_Balloc+0x20>
 80108d2:	4b18      	ldr	r3, [pc, #96]	@ (8010934 <_Balloc+0x78>)
 80108d4:	4818      	ldr	r0, [pc, #96]	@ (8010938 <_Balloc+0x7c>)
 80108d6:	216b      	movs	r1, #107	@ 0x6b
 80108d8:	f001 f91e 	bl	8011b18 <__assert_func>
 80108dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108e0:	6006      	str	r6, [r0, #0]
 80108e2:	60c6      	str	r6, [r0, #12]
 80108e4:	69e6      	ldr	r6, [r4, #28]
 80108e6:	68f3      	ldr	r3, [r6, #12]
 80108e8:	b183      	cbz	r3, 801090c <_Balloc+0x50>
 80108ea:	69e3      	ldr	r3, [r4, #28]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108f2:	b9b8      	cbnz	r0, 8010924 <_Balloc+0x68>
 80108f4:	2101      	movs	r1, #1
 80108f6:	fa01 f605 	lsl.w	r6, r1, r5
 80108fa:	1d72      	adds	r2, r6, #5
 80108fc:	0092      	lsls	r2, r2, #2
 80108fe:	4620      	mov	r0, r4
 8010900:	f001 f928 	bl	8011b54 <_calloc_r>
 8010904:	b160      	cbz	r0, 8010920 <_Balloc+0x64>
 8010906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801090a:	e00e      	b.n	801092a <_Balloc+0x6e>
 801090c:	2221      	movs	r2, #33	@ 0x21
 801090e:	2104      	movs	r1, #4
 8010910:	4620      	mov	r0, r4
 8010912:	f001 f91f 	bl	8011b54 <_calloc_r>
 8010916:	69e3      	ldr	r3, [r4, #28]
 8010918:	60f0      	str	r0, [r6, #12]
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1e4      	bne.n	80108ea <_Balloc+0x2e>
 8010920:	2000      	movs	r0, #0
 8010922:	bd70      	pop	{r4, r5, r6, pc}
 8010924:	6802      	ldr	r2, [r0, #0]
 8010926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801092a:	2300      	movs	r3, #0
 801092c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010930:	e7f7      	b.n	8010922 <_Balloc+0x66>
 8010932:	bf00      	nop
 8010934:	08013c63 	.word	0x08013c63
 8010938:	08013ce3 	.word	0x08013ce3

0801093c <_Bfree>:
 801093c:	b570      	push	{r4, r5, r6, lr}
 801093e:	69c6      	ldr	r6, [r0, #28]
 8010940:	4605      	mov	r5, r0
 8010942:	460c      	mov	r4, r1
 8010944:	b976      	cbnz	r6, 8010964 <_Bfree+0x28>
 8010946:	2010      	movs	r0, #16
 8010948:	f7fe fa1c 	bl	800ed84 <malloc>
 801094c:	4602      	mov	r2, r0
 801094e:	61e8      	str	r0, [r5, #28]
 8010950:	b920      	cbnz	r0, 801095c <_Bfree+0x20>
 8010952:	4b09      	ldr	r3, [pc, #36]	@ (8010978 <_Bfree+0x3c>)
 8010954:	4809      	ldr	r0, [pc, #36]	@ (801097c <_Bfree+0x40>)
 8010956:	218f      	movs	r1, #143	@ 0x8f
 8010958:	f001 f8de 	bl	8011b18 <__assert_func>
 801095c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010960:	6006      	str	r6, [r0, #0]
 8010962:	60c6      	str	r6, [r0, #12]
 8010964:	b13c      	cbz	r4, 8010976 <_Bfree+0x3a>
 8010966:	69eb      	ldr	r3, [r5, #28]
 8010968:	6862      	ldr	r2, [r4, #4]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010970:	6021      	str	r1, [r4, #0]
 8010972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010976:	bd70      	pop	{r4, r5, r6, pc}
 8010978:	08013c63 	.word	0x08013c63
 801097c:	08013ce3 	.word	0x08013ce3

08010980 <__multadd>:
 8010980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010984:	690d      	ldr	r5, [r1, #16]
 8010986:	4607      	mov	r7, r0
 8010988:	460c      	mov	r4, r1
 801098a:	461e      	mov	r6, r3
 801098c:	f101 0c14 	add.w	ip, r1, #20
 8010990:	2000      	movs	r0, #0
 8010992:	f8dc 3000 	ldr.w	r3, [ip]
 8010996:	b299      	uxth	r1, r3
 8010998:	fb02 6101 	mla	r1, r2, r1, r6
 801099c:	0c1e      	lsrs	r6, r3, #16
 801099e:	0c0b      	lsrs	r3, r1, #16
 80109a0:	fb02 3306 	mla	r3, r2, r6, r3
 80109a4:	b289      	uxth	r1, r1
 80109a6:	3001      	adds	r0, #1
 80109a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80109ac:	4285      	cmp	r5, r0
 80109ae:	f84c 1b04 	str.w	r1, [ip], #4
 80109b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80109b6:	dcec      	bgt.n	8010992 <__multadd+0x12>
 80109b8:	b30e      	cbz	r6, 80109fe <__multadd+0x7e>
 80109ba:	68a3      	ldr	r3, [r4, #8]
 80109bc:	42ab      	cmp	r3, r5
 80109be:	dc19      	bgt.n	80109f4 <__multadd+0x74>
 80109c0:	6861      	ldr	r1, [r4, #4]
 80109c2:	4638      	mov	r0, r7
 80109c4:	3101      	adds	r1, #1
 80109c6:	f7ff ff79 	bl	80108bc <_Balloc>
 80109ca:	4680      	mov	r8, r0
 80109cc:	b928      	cbnz	r0, 80109da <__multadd+0x5a>
 80109ce:	4602      	mov	r2, r0
 80109d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010a04 <__multadd+0x84>)
 80109d2:	480d      	ldr	r0, [pc, #52]	@ (8010a08 <__multadd+0x88>)
 80109d4:	21ba      	movs	r1, #186	@ 0xba
 80109d6:	f001 f89f 	bl	8011b18 <__assert_func>
 80109da:	6922      	ldr	r2, [r4, #16]
 80109dc:	3202      	adds	r2, #2
 80109de:	f104 010c 	add.w	r1, r4, #12
 80109e2:	0092      	lsls	r2, r2, #2
 80109e4:	300c      	adds	r0, #12
 80109e6:	f7ff f8c4 	bl	800fb72 <memcpy>
 80109ea:	4621      	mov	r1, r4
 80109ec:	4638      	mov	r0, r7
 80109ee:	f7ff ffa5 	bl	801093c <_Bfree>
 80109f2:	4644      	mov	r4, r8
 80109f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109f8:	3501      	adds	r5, #1
 80109fa:	615e      	str	r6, [r3, #20]
 80109fc:	6125      	str	r5, [r4, #16]
 80109fe:	4620      	mov	r0, r4
 8010a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a04:	08013cd2 	.word	0x08013cd2
 8010a08:	08013ce3 	.word	0x08013ce3

08010a0c <__hi0bits>:
 8010a0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010a10:	4603      	mov	r3, r0
 8010a12:	bf36      	itet	cc
 8010a14:	0403      	lslcc	r3, r0, #16
 8010a16:	2000      	movcs	r0, #0
 8010a18:	2010      	movcc	r0, #16
 8010a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010a1e:	bf3c      	itt	cc
 8010a20:	021b      	lslcc	r3, r3, #8
 8010a22:	3008      	addcc	r0, #8
 8010a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010a28:	bf3c      	itt	cc
 8010a2a:	011b      	lslcc	r3, r3, #4
 8010a2c:	3004      	addcc	r0, #4
 8010a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a32:	bf3c      	itt	cc
 8010a34:	009b      	lslcc	r3, r3, #2
 8010a36:	3002      	addcc	r0, #2
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	db05      	blt.n	8010a48 <__hi0bits+0x3c>
 8010a3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010a40:	f100 0001 	add.w	r0, r0, #1
 8010a44:	bf08      	it	eq
 8010a46:	2020      	moveq	r0, #32
 8010a48:	4770      	bx	lr

08010a4a <__lo0bits>:
 8010a4a:	6803      	ldr	r3, [r0, #0]
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	f013 0007 	ands.w	r0, r3, #7
 8010a52:	d00b      	beq.n	8010a6c <__lo0bits+0x22>
 8010a54:	07d9      	lsls	r1, r3, #31
 8010a56:	d421      	bmi.n	8010a9c <__lo0bits+0x52>
 8010a58:	0798      	lsls	r0, r3, #30
 8010a5a:	bf49      	itett	mi
 8010a5c:	085b      	lsrmi	r3, r3, #1
 8010a5e:	089b      	lsrpl	r3, r3, #2
 8010a60:	2001      	movmi	r0, #1
 8010a62:	6013      	strmi	r3, [r2, #0]
 8010a64:	bf5c      	itt	pl
 8010a66:	6013      	strpl	r3, [r2, #0]
 8010a68:	2002      	movpl	r0, #2
 8010a6a:	4770      	bx	lr
 8010a6c:	b299      	uxth	r1, r3
 8010a6e:	b909      	cbnz	r1, 8010a74 <__lo0bits+0x2a>
 8010a70:	0c1b      	lsrs	r3, r3, #16
 8010a72:	2010      	movs	r0, #16
 8010a74:	b2d9      	uxtb	r1, r3
 8010a76:	b909      	cbnz	r1, 8010a7c <__lo0bits+0x32>
 8010a78:	3008      	adds	r0, #8
 8010a7a:	0a1b      	lsrs	r3, r3, #8
 8010a7c:	0719      	lsls	r1, r3, #28
 8010a7e:	bf04      	itt	eq
 8010a80:	091b      	lsreq	r3, r3, #4
 8010a82:	3004      	addeq	r0, #4
 8010a84:	0799      	lsls	r1, r3, #30
 8010a86:	bf04      	itt	eq
 8010a88:	089b      	lsreq	r3, r3, #2
 8010a8a:	3002      	addeq	r0, #2
 8010a8c:	07d9      	lsls	r1, r3, #31
 8010a8e:	d403      	bmi.n	8010a98 <__lo0bits+0x4e>
 8010a90:	085b      	lsrs	r3, r3, #1
 8010a92:	f100 0001 	add.w	r0, r0, #1
 8010a96:	d003      	beq.n	8010aa0 <__lo0bits+0x56>
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	4770      	bx	lr
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	4770      	bx	lr
 8010aa0:	2020      	movs	r0, #32
 8010aa2:	4770      	bx	lr

08010aa4 <__i2b>:
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	2101      	movs	r1, #1
 8010aaa:	f7ff ff07 	bl	80108bc <_Balloc>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	b928      	cbnz	r0, 8010abe <__i2b+0x1a>
 8010ab2:	4b05      	ldr	r3, [pc, #20]	@ (8010ac8 <__i2b+0x24>)
 8010ab4:	4805      	ldr	r0, [pc, #20]	@ (8010acc <__i2b+0x28>)
 8010ab6:	f240 1145 	movw	r1, #325	@ 0x145
 8010aba:	f001 f82d 	bl	8011b18 <__assert_func>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	6144      	str	r4, [r0, #20]
 8010ac2:	6103      	str	r3, [r0, #16]
 8010ac4:	bd10      	pop	{r4, pc}
 8010ac6:	bf00      	nop
 8010ac8:	08013cd2 	.word	0x08013cd2
 8010acc:	08013ce3 	.word	0x08013ce3

08010ad0 <__multiply>:
 8010ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad4:	4614      	mov	r4, r2
 8010ad6:	690a      	ldr	r2, [r1, #16]
 8010ad8:	6923      	ldr	r3, [r4, #16]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	bfa8      	it	ge
 8010ade:	4623      	movge	r3, r4
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	bfa4      	itt	ge
 8010ae4:	460c      	movge	r4, r1
 8010ae6:	461f      	movge	r7, r3
 8010ae8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010aec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010af0:	68a3      	ldr	r3, [r4, #8]
 8010af2:	6861      	ldr	r1, [r4, #4]
 8010af4:	eb0a 0609 	add.w	r6, sl, r9
 8010af8:	42b3      	cmp	r3, r6
 8010afa:	b085      	sub	sp, #20
 8010afc:	bfb8      	it	lt
 8010afe:	3101      	addlt	r1, #1
 8010b00:	f7ff fedc 	bl	80108bc <_Balloc>
 8010b04:	b930      	cbnz	r0, 8010b14 <__multiply+0x44>
 8010b06:	4602      	mov	r2, r0
 8010b08:	4b44      	ldr	r3, [pc, #272]	@ (8010c1c <__multiply+0x14c>)
 8010b0a:	4845      	ldr	r0, [pc, #276]	@ (8010c20 <__multiply+0x150>)
 8010b0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010b10:	f001 f802 	bl	8011b18 <__assert_func>
 8010b14:	f100 0514 	add.w	r5, r0, #20
 8010b18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b1c:	462b      	mov	r3, r5
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4543      	cmp	r3, r8
 8010b22:	d321      	bcc.n	8010b68 <__multiply+0x98>
 8010b24:	f107 0114 	add.w	r1, r7, #20
 8010b28:	f104 0214 	add.w	r2, r4, #20
 8010b2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010b30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010b34:	9302      	str	r3, [sp, #8]
 8010b36:	1b13      	subs	r3, r2, r4
 8010b38:	3b15      	subs	r3, #21
 8010b3a:	f023 0303 	bic.w	r3, r3, #3
 8010b3e:	3304      	adds	r3, #4
 8010b40:	f104 0715 	add.w	r7, r4, #21
 8010b44:	42ba      	cmp	r2, r7
 8010b46:	bf38      	it	cc
 8010b48:	2304      	movcc	r3, #4
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	9b02      	ldr	r3, [sp, #8]
 8010b4e:	9103      	str	r1, [sp, #12]
 8010b50:	428b      	cmp	r3, r1
 8010b52:	d80c      	bhi.n	8010b6e <__multiply+0x9e>
 8010b54:	2e00      	cmp	r6, #0
 8010b56:	dd03      	ble.n	8010b60 <__multiply+0x90>
 8010b58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d05b      	beq.n	8010c18 <__multiply+0x148>
 8010b60:	6106      	str	r6, [r0, #16]
 8010b62:	b005      	add	sp, #20
 8010b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b68:	f843 2b04 	str.w	r2, [r3], #4
 8010b6c:	e7d8      	b.n	8010b20 <__multiply+0x50>
 8010b6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010b72:	f1ba 0f00 	cmp.w	sl, #0
 8010b76:	d024      	beq.n	8010bc2 <__multiply+0xf2>
 8010b78:	f104 0e14 	add.w	lr, r4, #20
 8010b7c:	46a9      	mov	r9, r5
 8010b7e:	f04f 0c00 	mov.w	ip, #0
 8010b82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b86:	f8d9 3000 	ldr.w	r3, [r9]
 8010b8a:	fa1f fb87 	uxth.w	fp, r7
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	fb0a 330b 	mla	r3, sl, fp, r3
 8010b94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010b98:	f8d9 7000 	ldr.w	r7, [r9]
 8010b9c:	4463      	add	r3, ip
 8010b9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ba2:	fb0a c70b 	mla	r7, sl, fp, ip
 8010ba6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010bb0:	4572      	cmp	r2, lr
 8010bb2:	f849 3b04 	str.w	r3, [r9], #4
 8010bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010bba:	d8e2      	bhi.n	8010b82 <__multiply+0xb2>
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	f845 c003 	str.w	ip, [r5, r3]
 8010bc2:	9b03      	ldr	r3, [sp, #12]
 8010bc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010bc8:	3104      	adds	r1, #4
 8010bca:	f1b9 0f00 	cmp.w	r9, #0
 8010bce:	d021      	beq.n	8010c14 <__multiply+0x144>
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	f104 0c14 	add.w	ip, r4, #20
 8010bd6:	46ae      	mov	lr, r5
 8010bd8:	f04f 0a00 	mov.w	sl, #0
 8010bdc:	f8bc b000 	ldrh.w	fp, [ip]
 8010be0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010be4:	fb09 770b 	mla	r7, r9, fp, r7
 8010be8:	4457      	add	r7, sl
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010bf0:	f84e 3b04 	str.w	r3, [lr], #4
 8010bf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010bf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bfc:	f8be 3000 	ldrh.w	r3, [lr]
 8010c00:	fb09 330a 	mla	r3, r9, sl, r3
 8010c04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010c08:	4562      	cmp	r2, ip
 8010c0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c0e:	d8e5      	bhi.n	8010bdc <__multiply+0x10c>
 8010c10:	9f01      	ldr	r7, [sp, #4]
 8010c12:	51eb      	str	r3, [r5, r7]
 8010c14:	3504      	adds	r5, #4
 8010c16:	e799      	b.n	8010b4c <__multiply+0x7c>
 8010c18:	3e01      	subs	r6, #1
 8010c1a:	e79b      	b.n	8010b54 <__multiply+0x84>
 8010c1c:	08013cd2 	.word	0x08013cd2
 8010c20:	08013ce3 	.word	0x08013ce3

08010c24 <__pow5mult>:
 8010c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c28:	4615      	mov	r5, r2
 8010c2a:	f012 0203 	ands.w	r2, r2, #3
 8010c2e:	4607      	mov	r7, r0
 8010c30:	460e      	mov	r6, r1
 8010c32:	d007      	beq.n	8010c44 <__pow5mult+0x20>
 8010c34:	4c25      	ldr	r4, [pc, #148]	@ (8010ccc <__pow5mult+0xa8>)
 8010c36:	3a01      	subs	r2, #1
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c3e:	f7ff fe9f 	bl	8010980 <__multadd>
 8010c42:	4606      	mov	r6, r0
 8010c44:	10ad      	asrs	r5, r5, #2
 8010c46:	d03d      	beq.n	8010cc4 <__pow5mult+0xa0>
 8010c48:	69fc      	ldr	r4, [r7, #28]
 8010c4a:	b97c      	cbnz	r4, 8010c6c <__pow5mult+0x48>
 8010c4c:	2010      	movs	r0, #16
 8010c4e:	f7fe f899 	bl	800ed84 <malloc>
 8010c52:	4602      	mov	r2, r0
 8010c54:	61f8      	str	r0, [r7, #28]
 8010c56:	b928      	cbnz	r0, 8010c64 <__pow5mult+0x40>
 8010c58:	4b1d      	ldr	r3, [pc, #116]	@ (8010cd0 <__pow5mult+0xac>)
 8010c5a:	481e      	ldr	r0, [pc, #120]	@ (8010cd4 <__pow5mult+0xb0>)
 8010c5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010c60:	f000 ff5a 	bl	8011b18 <__assert_func>
 8010c64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c68:	6004      	str	r4, [r0, #0]
 8010c6a:	60c4      	str	r4, [r0, #12]
 8010c6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010c70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c74:	b94c      	cbnz	r4, 8010c8a <__pow5mult+0x66>
 8010c76:	f240 2171 	movw	r1, #625	@ 0x271
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	f7ff ff12 	bl	8010aa4 <__i2b>
 8010c80:	2300      	movs	r3, #0
 8010c82:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c86:	4604      	mov	r4, r0
 8010c88:	6003      	str	r3, [r0, #0]
 8010c8a:	f04f 0900 	mov.w	r9, #0
 8010c8e:	07eb      	lsls	r3, r5, #31
 8010c90:	d50a      	bpl.n	8010ca8 <__pow5mult+0x84>
 8010c92:	4631      	mov	r1, r6
 8010c94:	4622      	mov	r2, r4
 8010c96:	4638      	mov	r0, r7
 8010c98:	f7ff ff1a 	bl	8010ad0 <__multiply>
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	4680      	mov	r8, r0
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff fe4b 	bl	801093c <_Bfree>
 8010ca6:	4646      	mov	r6, r8
 8010ca8:	106d      	asrs	r5, r5, #1
 8010caa:	d00b      	beq.n	8010cc4 <__pow5mult+0xa0>
 8010cac:	6820      	ldr	r0, [r4, #0]
 8010cae:	b938      	cbnz	r0, 8010cc0 <__pow5mult+0x9c>
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	4638      	mov	r0, r7
 8010cb6:	f7ff ff0b 	bl	8010ad0 <__multiply>
 8010cba:	6020      	str	r0, [r4, #0]
 8010cbc:	f8c0 9000 	str.w	r9, [r0]
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	e7e4      	b.n	8010c8e <__pow5mult+0x6a>
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cca:	bf00      	nop
 8010ccc:	08013d3c 	.word	0x08013d3c
 8010cd0:	08013c63 	.word	0x08013c63
 8010cd4:	08013ce3 	.word	0x08013ce3

08010cd8 <__lshift>:
 8010cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cdc:	460c      	mov	r4, r1
 8010cde:	6849      	ldr	r1, [r1, #4]
 8010ce0:	6923      	ldr	r3, [r4, #16]
 8010ce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ce6:	68a3      	ldr	r3, [r4, #8]
 8010ce8:	4607      	mov	r7, r0
 8010cea:	4691      	mov	r9, r2
 8010cec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cf0:	f108 0601 	add.w	r6, r8, #1
 8010cf4:	42b3      	cmp	r3, r6
 8010cf6:	db0b      	blt.n	8010d10 <__lshift+0x38>
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f7ff fddf 	bl	80108bc <_Balloc>
 8010cfe:	4605      	mov	r5, r0
 8010d00:	b948      	cbnz	r0, 8010d16 <__lshift+0x3e>
 8010d02:	4602      	mov	r2, r0
 8010d04:	4b28      	ldr	r3, [pc, #160]	@ (8010da8 <__lshift+0xd0>)
 8010d06:	4829      	ldr	r0, [pc, #164]	@ (8010dac <__lshift+0xd4>)
 8010d08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010d0c:	f000 ff04 	bl	8011b18 <__assert_func>
 8010d10:	3101      	adds	r1, #1
 8010d12:	005b      	lsls	r3, r3, #1
 8010d14:	e7ee      	b.n	8010cf4 <__lshift+0x1c>
 8010d16:	2300      	movs	r3, #0
 8010d18:	f100 0114 	add.w	r1, r0, #20
 8010d1c:	f100 0210 	add.w	r2, r0, #16
 8010d20:	4618      	mov	r0, r3
 8010d22:	4553      	cmp	r3, sl
 8010d24:	db33      	blt.n	8010d8e <__lshift+0xb6>
 8010d26:	6920      	ldr	r0, [r4, #16]
 8010d28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d2c:	f104 0314 	add.w	r3, r4, #20
 8010d30:	f019 091f 	ands.w	r9, r9, #31
 8010d34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d3c:	d02b      	beq.n	8010d96 <__lshift+0xbe>
 8010d3e:	f1c9 0e20 	rsb	lr, r9, #32
 8010d42:	468a      	mov	sl, r1
 8010d44:	2200      	movs	r2, #0
 8010d46:	6818      	ldr	r0, [r3, #0]
 8010d48:	fa00 f009 	lsl.w	r0, r0, r9
 8010d4c:	4310      	orrs	r0, r2
 8010d4e:	f84a 0b04 	str.w	r0, [sl], #4
 8010d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d56:	459c      	cmp	ip, r3
 8010d58:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d5c:	d8f3      	bhi.n	8010d46 <__lshift+0x6e>
 8010d5e:	ebac 0304 	sub.w	r3, ip, r4
 8010d62:	3b15      	subs	r3, #21
 8010d64:	f023 0303 	bic.w	r3, r3, #3
 8010d68:	3304      	adds	r3, #4
 8010d6a:	f104 0015 	add.w	r0, r4, #21
 8010d6e:	4584      	cmp	ip, r0
 8010d70:	bf38      	it	cc
 8010d72:	2304      	movcc	r3, #4
 8010d74:	50ca      	str	r2, [r1, r3]
 8010d76:	b10a      	cbz	r2, 8010d7c <__lshift+0xa4>
 8010d78:	f108 0602 	add.w	r6, r8, #2
 8010d7c:	3e01      	subs	r6, #1
 8010d7e:	4638      	mov	r0, r7
 8010d80:	612e      	str	r6, [r5, #16]
 8010d82:	4621      	mov	r1, r4
 8010d84:	f7ff fdda 	bl	801093c <_Bfree>
 8010d88:	4628      	mov	r0, r5
 8010d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d92:	3301      	adds	r3, #1
 8010d94:	e7c5      	b.n	8010d22 <__lshift+0x4a>
 8010d96:	3904      	subs	r1, #4
 8010d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010da0:	459c      	cmp	ip, r3
 8010da2:	d8f9      	bhi.n	8010d98 <__lshift+0xc0>
 8010da4:	e7ea      	b.n	8010d7c <__lshift+0xa4>
 8010da6:	bf00      	nop
 8010da8:	08013cd2 	.word	0x08013cd2
 8010dac:	08013ce3 	.word	0x08013ce3

08010db0 <__mcmp>:
 8010db0:	690a      	ldr	r2, [r1, #16]
 8010db2:	4603      	mov	r3, r0
 8010db4:	6900      	ldr	r0, [r0, #16]
 8010db6:	1a80      	subs	r0, r0, r2
 8010db8:	b530      	push	{r4, r5, lr}
 8010dba:	d10e      	bne.n	8010dda <__mcmp+0x2a>
 8010dbc:	3314      	adds	r3, #20
 8010dbe:	3114      	adds	r1, #20
 8010dc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010dc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010dc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010dcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010dd0:	4295      	cmp	r5, r2
 8010dd2:	d003      	beq.n	8010ddc <__mcmp+0x2c>
 8010dd4:	d205      	bcs.n	8010de2 <__mcmp+0x32>
 8010dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dda:	bd30      	pop	{r4, r5, pc}
 8010ddc:	42a3      	cmp	r3, r4
 8010dde:	d3f3      	bcc.n	8010dc8 <__mcmp+0x18>
 8010de0:	e7fb      	b.n	8010dda <__mcmp+0x2a>
 8010de2:	2001      	movs	r0, #1
 8010de4:	e7f9      	b.n	8010dda <__mcmp+0x2a>
	...

08010de8 <__mdiff>:
 8010de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	4689      	mov	r9, r1
 8010dee:	4606      	mov	r6, r0
 8010df0:	4611      	mov	r1, r2
 8010df2:	4648      	mov	r0, r9
 8010df4:	4614      	mov	r4, r2
 8010df6:	f7ff ffdb 	bl	8010db0 <__mcmp>
 8010dfa:	1e05      	subs	r5, r0, #0
 8010dfc:	d112      	bne.n	8010e24 <__mdiff+0x3c>
 8010dfe:	4629      	mov	r1, r5
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7ff fd5b 	bl	80108bc <_Balloc>
 8010e06:	4602      	mov	r2, r0
 8010e08:	b928      	cbnz	r0, 8010e16 <__mdiff+0x2e>
 8010e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f08 <__mdiff+0x120>)
 8010e0c:	f240 2137 	movw	r1, #567	@ 0x237
 8010e10:	483e      	ldr	r0, [pc, #248]	@ (8010f0c <__mdiff+0x124>)
 8010e12:	f000 fe81 	bl	8011b18 <__assert_func>
 8010e16:	2301      	movs	r3, #1
 8010e18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	b003      	add	sp, #12
 8010e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e24:	bfbc      	itt	lt
 8010e26:	464b      	movlt	r3, r9
 8010e28:	46a1      	movlt	r9, r4
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010e30:	bfba      	itte	lt
 8010e32:	461c      	movlt	r4, r3
 8010e34:	2501      	movlt	r5, #1
 8010e36:	2500      	movge	r5, #0
 8010e38:	f7ff fd40 	bl	80108bc <_Balloc>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	b918      	cbnz	r0, 8010e48 <__mdiff+0x60>
 8010e40:	4b31      	ldr	r3, [pc, #196]	@ (8010f08 <__mdiff+0x120>)
 8010e42:	f240 2145 	movw	r1, #581	@ 0x245
 8010e46:	e7e3      	b.n	8010e10 <__mdiff+0x28>
 8010e48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010e4c:	6926      	ldr	r6, [r4, #16]
 8010e4e:	60c5      	str	r5, [r0, #12]
 8010e50:	f109 0310 	add.w	r3, r9, #16
 8010e54:	f109 0514 	add.w	r5, r9, #20
 8010e58:	f104 0e14 	add.w	lr, r4, #20
 8010e5c:	f100 0b14 	add.w	fp, r0, #20
 8010e60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010e64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	46d9      	mov	r9, fp
 8010e6c:	f04f 0c00 	mov.w	ip, #0
 8010e70:	9b01      	ldr	r3, [sp, #4]
 8010e72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010e76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010e7a:	9301      	str	r3, [sp, #4]
 8010e7c:	fa1f f38a 	uxth.w	r3, sl
 8010e80:	4619      	mov	r1, r3
 8010e82:	b283      	uxth	r3, r0
 8010e84:	1acb      	subs	r3, r1, r3
 8010e86:	0c00      	lsrs	r0, r0, #16
 8010e88:	4463      	add	r3, ip
 8010e8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010e8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010e98:	4576      	cmp	r6, lr
 8010e9a:	f849 3b04 	str.w	r3, [r9], #4
 8010e9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ea2:	d8e5      	bhi.n	8010e70 <__mdiff+0x88>
 8010ea4:	1b33      	subs	r3, r6, r4
 8010ea6:	3b15      	subs	r3, #21
 8010ea8:	f023 0303 	bic.w	r3, r3, #3
 8010eac:	3415      	adds	r4, #21
 8010eae:	3304      	adds	r3, #4
 8010eb0:	42a6      	cmp	r6, r4
 8010eb2:	bf38      	it	cc
 8010eb4:	2304      	movcc	r3, #4
 8010eb6:	441d      	add	r5, r3
 8010eb8:	445b      	add	r3, fp
 8010eba:	461e      	mov	r6, r3
 8010ebc:	462c      	mov	r4, r5
 8010ebe:	4544      	cmp	r4, r8
 8010ec0:	d30e      	bcc.n	8010ee0 <__mdiff+0xf8>
 8010ec2:	f108 0103 	add.w	r1, r8, #3
 8010ec6:	1b49      	subs	r1, r1, r5
 8010ec8:	f021 0103 	bic.w	r1, r1, #3
 8010ecc:	3d03      	subs	r5, #3
 8010ece:	45a8      	cmp	r8, r5
 8010ed0:	bf38      	it	cc
 8010ed2:	2100      	movcc	r1, #0
 8010ed4:	440b      	add	r3, r1
 8010ed6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010eda:	b191      	cbz	r1, 8010f02 <__mdiff+0x11a>
 8010edc:	6117      	str	r7, [r2, #16]
 8010ede:	e79d      	b.n	8010e1c <__mdiff+0x34>
 8010ee0:	f854 1b04 	ldr.w	r1, [r4], #4
 8010ee4:	46e6      	mov	lr, ip
 8010ee6:	0c08      	lsrs	r0, r1, #16
 8010ee8:	fa1c fc81 	uxtah	ip, ip, r1
 8010eec:	4471      	add	r1, lr
 8010eee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010ef2:	b289      	uxth	r1, r1
 8010ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ef8:	f846 1b04 	str.w	r1, [r6], #4
 8010efc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f00:	e7dd      	b.n	8010ebe <__mdiff+0xd6>
 8010f02:	3f01      	subs	r7, #1
 8010f04:	e7e7      	b.n	8010ed6 <__mdiff+0xee>
 8010f06:	bf00      	nop
 8010f08:	08013cd2 	.word	0x08013cd2
 8010f0c:	08013ce3 	.word	0x08013ce3

08010f10 <__d2b>:
 8010f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f14:	460f      	mov	r7, r1
 8010f16:	2101      	movs	r1, #1
 8010f18:	ec59 8b10 	vmov	r8, r9, d0
 8010f1c:	4616      	mov	r6, r2
 8010f1e:	f7ff fccd 	bl	80108bc <_Balloc>
 8010f22:	4604      	mov	r4, r0
 8010f24:	b930      	cbnz	r0, 8010f34 <__d2b+0x24>
 8010f26:	4602      	mov	r2, r0
 8010f28:	4b23      	ldr	r3, [pc, #140]	@ (8010fb8 <__d2b+0xa8>)
 8010f2a:	4824      	ldr	r0, [pc, #144]	@ (8010fbc <__d2b+0xac>)
 8010f2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010f30:	f000 fdf2 	bl	8011b18 <__assert_func>
 8010f34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f3c:	b10d      	cbz	r5, 8010f42 <__d2b+0x32>
 8010f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	f1b8 0300 	subs.w	r3, r8, #0
 8010f48:	d023      	beq.n	8010f92 <__d2b+0x82>
 8010f4a:	4668      	mov	r0, sp
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	f7ff fd7c 	bl	8010a4a <__lo0bits>
 8010f52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f56:	b1d0      	cbz	r0, 8010f8e <__d2b+0x7e>
 8010f58:	f1c0 0320 	rsb	r3, r0, #32
 8010f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f60:	430b      	orrs	r3, r1
 8010f62:	40c2      	lsrs	r2, r0
 8010f64:	6163      	str	r3, [r4, #20]
 8010f66:	9201      	str	r2, [sp, #4]
 8010f68:	9b01      	ldr	r3, [sp, #4]
 8010f6a:	61a3      	str	r3, [r4, #24]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bf0c      	ite	eq
 8010f70:	2201      	moveq	r2, #1
 8010f72:	2202      	movne	r2, #2
 8010f74:	6122      	str	r2, [r4, #16]
 8010f76:	b1a5      	cbz	r5, 8010fa2 <__d2b+0x92>
 8010f78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010f7c:	4405      	add	r5, r0
 8010f7e:	603d      	str	r5, [r7, #0]
 8010f80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010f84:	6030      	str	r0, [r6, #0]
 8010f86:	4620      	mov	r0, r4
 8010f88:	b003      	add	sp, #12
 8010f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f8e:	6161      	str	r1, [r4, #20]
 8010f90:	e7ea      	b.n	8010f68 <__d2b+0x58>
 8010f92:	a801      	add	r0, sp, #4
 8010f94:	f7ff fd59 	bl	8010a4a <__lo0bits>
 8010f98:	9b01      	ldr	r3, [sp, #4]
 8010f9a:	6163      	str	r3, [r4, #20]
 8010f9c:	3020      	adds	r0, #32
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	e7e8      	b.n	8010f74 <__d2b+0x64>
 8010fa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010fa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010faa:	6038      	str	r0, [r7, #0]
 8010fac:	6918      	ldr	r0, [r3, #16]
 8010fae:	f7ff fd2d 	bl	8010a0c <__hi0bits>
 8010fb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010fb6:	e7e5      	b.n	8010f84 <__d2b+0x74>
 8010fb8:	08013cd2 	.word	0x08013cd2
 8010fbc:	08013ce3 	.word	0x08013ce3

08010fc0 <__ssputs_r>:
 8010fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc4:	688e      	ldr	r6, [r1, #8]
 8010fc6:	461f      	mov	r7, r3
 8010fc8:	42be      	cmp	r6, r7
 8010fca:	680b      	ldr	r3, [r1, #0]
 8010fcc:	4682      	mov	sl, r0
 8010fce:	460c      	mov	r4, r1
 8010fd0:	4690      	mov	r8, r2
 8010fd2:	d82d      	bhi.n	8011030 <__ssputs_r+0x70>
 8010fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010fdc:	d026      	beq.n	801102c <__ssputs_r+0x6c>
 8010fde:	6965      	ldr	r5, [r4, #20]
 8010fe0:	6909      	ldr	r1, [r1, #16]
 8010fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fe6:	eba3 0901 	sub.w	r9, r3, r1
 8010fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fee:	1c7b      	adds	r3, r7, #1
 8010ff0:	444b      	add	r3, r9
 8010ff2:	106d      	asrs	r5, r5, #1
 8010ff4:	429d      	cmp	r5, r3
 8010ff6:	bf38      	it	cc
 8010ff8:	461d      	movcc	r5, r3
 8010ffa:	0553      	lsls	r3, r2, #21
 8010ffc:	d527      	bpl.n	801104e <__ssputs_r+0x8e>
 8010ffe:	4629      	mov	r1, r5
 8011000:	f7fd fef2 	bl	800ede8 <_malloc_r>
 8011004:	4606      	mov	r6, r0
 8011006:	b360      	cbz	r0, 8011062 <__ssputs_r+0xa2>
 8011008:	6921      	ldr	r1, [r4, #16]
 801100a:	464a      	mov	r2, r9
 801100c:	f7fe fdb1 	bl	800fb72 <memcpy>
 8011010:	89a3      	ldrh	r3, [r4, #12]
 8011012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801101a:	81a3      	strh	r3, [r4, #12]
 801101c:	6126      	str	r6, [r4, #16]
 801101e:	6165      	str	r5, [r4, #20]
 8011020:	444e      	add	r6, r9
 8011022:	eba5 0509 	sub.w	r5, r5, r9
 8011026:	6026      	str	r6, [r4, #0]
 8011028:	60a5      	str	r5, [r4, #8]
 801102a:	463e      	mov	r6, r7
 801102c:	42be      	cmp	r6, r7
 801102e:	d900      	bls.n	8011032 <__ssputs_r+0x72>
 8011030:	463e      	mov	r6, r7
 8011032:	6820      	ldr	r0, [r4, #0]
 8011034:	4632      	mov	r2, r6
 8011036:	4641      	mov	r1, r8
 8011038:	f000 fd53 	bl	8011ae2 <memmove>
 801103c:	68a3      	ldr	r3, [r4, #8]
 801103e:	1b9b      	subs	r3, r3, r6
 8011040:	60a3      	str	r3, [r4, #8]
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	4433      	add	r3, r6
 8011046:	6023      	str	r3, [r4, #0]
 8011048:	2000      	movs	r0, #0
 801104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801104e:	462a      	mov	r2, r5
 8011050:	f000 fda6 	bl	8011ba0 <_realloc_r>
 8011054:	4606      	mov	r6, r0
 8011056:	2800      	cmp	r0, #0
 8011058:	d1e0      	bne.n	801101c <__ssputs_r+0x5c>
 801105a:	6921      	ldr	r1, [r4, #16]
 801105c:	4650      	mov	r0, sl
 801105e:	f7ff fbe3 	bl	8010828 <_free_r>
 8011062:	230c      	movs	r3, #12
 8011064:	f8ca 3000 	str.w	r3, [sl]
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801106e:	81a3      	strh	r3, [r4, #12]
 8011070:	f04f 30ff 	mov.w	r0, #4294967295
 8011074:	e7e9      	b.n	801104a <__ssputs_r+0x8a>
	...

08011078 <_svfiprintf_r>:
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	4698      	mov	r8, r3
 801107e:	898b      	ldrh	r3, [r1, #12]
 8011080:	061b      	lsls	r3, r3, #24
 8011082:	b09d      	sub	sp, #116	@ 0x74
 8011084:	4607      	mov	r7, r0
 8011086:	460d      	mov	r5, r1
 8011088:	4614      	mov	r4, r2
 801108a:	d510      	bpl.n	80110ae <_svfiprintf_r+0x36>
 801108c:	690b      	ldr	r3, [r1, #16]
 801108e:	b973      	cbnz	r3, 80110ae <_svfiprintf_r+0x36>
 8011090:	2140      	movs	r1, #64	@ 0x40
 8011092:	f7fd fea9 	bl	800ede8 <_malloc_r>
 8011096:	6028      	str	r0, [r5, #0]
 8011098:	6128      	str	r0, [r5, #16]
 801109a:	b930      	cbnz	r0, 80110aa <_svfiprintf_r+0x32>
 801109c:	230c      	movs	r3, #12
 801109e:	603b      	str	r3, [r7, #0]
 80110a0:	f04f 30ff 	mov.w	r0, #4294967295
 80110a4:	b01d      	add	sp, #116	@ 0x74
 80110a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110aa:	2340      	movs	r3, #64	@ 0x40
 80110ac:	616b      	str	r3, [r5, #20]
 80110ae:	2300      	movs	r3, #0
 80110b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80110b2:	2320      	movs	r3, #32
 80110b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80110bc:	2330      	movs	r3, #48	@ 0x30
 80110be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801125c <_svfiprintf_r+0x1e4>
 80110c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110c6:	f04f 0901 	mov.w	r9, #1
 80110ca:	4623      	mov	r3, r4
 80110cc:	469a      	mov	sl, r3
 80110ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d2:	b10a      	cbz	r2, 80110d8 <_svfiprintf_r+0x60>
 80110d4:	2a25      	cmp	r2, #37	@ 0x25
 80110d6:	d1f9      	bne.n	80110cc <_svfiprintf_r+0x54>
 80110d8:	ebba 0b04 	subs.w	fp, sl, r4
 80110dc:	d00b      	beq.n	80110f6 <_svfiprintf_r+0x7e>
 80110de:	465b      	mov	r3, fp
 80110e0:	4622      	mov	r2, r4
 80110e2:	4629      	mov	r1, r5
 80110e4:	4638      	mov	r0, r7
 80110e6:	f7ff ff6b 	bl	8010fc0 <__ssputs_r>
 80110ea:	3001      	adds	r0, #1
 80110ec:	f000 80a7 	beq.w	801123e <_svfiprintf_r+0x1c6>
 80110f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110f2:	445a      	add	r2, fp
 80110f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80110f6:	f89a 3000 	ldrb.w	r3, [sl]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 809f 	beq.w	801123e <_svfiprintf_r+0x1c6>
 8011100:	2300      	movs	r3, #0
 8011102:	f04f 32ff 	mov.w	r2, #4294967295
 8011106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801110a:	f10a 0a01 	add.w	sl, sl, #1
 801110e:	9304      	str	r3, [sp, #16]
 8011110:	9307      	str	r3, [sp, #28]
 8011112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011116:	931a      	str	r3, [sp, #104]	@ 0x68
 8011118:	4654      	mov	r4, sl
 801111a:	2205      	movs	r2, #5
 801111c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011120:	484e      	ldr	r0, [pc, #312]	@ (801125c <_svfiprintf_r+0x1e4>)
 8011122:	f7ef f865 	bl	80001f0 <memchr>
 8011126:	9a04      	ldr	r2, [sp, #16]
 8011128:	b9d8      	cbnz	r0, 8011162 <_svfiprintf_r+0xea>
 801112a:	06d0      	lsls	r0, r2, #27
 801112c:	bf44      	itt	mi
 801112e:	2320      	movmi	r3, #32
 8011130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011134:	0711      	lsls	r1, r2, #28
 8011136:	bf44      	itt	mi
 8011138:	232b      	movmi	r3, #43	@ 0x2b
 801113a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801113e:	f89a 3000 	ldrb.w	r3, [sl]
 8011142:	2b2a      	cmp	r3, #42	@ 0x2a
 8011144:	d015      	beq.n	8011172 <_svfiprintf_r+0xfa>
 8011146:	9a07      	ldr	r2, [sp, #28]
 8011148:	4654      	mov	r4, sl
 801114a:	2000      	movs	r0, #0
 801114c:	f04f 0c0a 	mov.w	ip, #10
 8011150:	4621      	mov	r1, r4
 8011152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011156:	3b30      	subs	r3, #48	@ 0x30
 8011158:	2b09      	cmp	r3, #9
 801115a:	d94b      	bls.n	80111f4 <_svfiprintf_r+0x17c>
 801115c:	b1b0      	cbz	r0, 801118c <_svfiprintf_r+0x114>
 801115e:	9207      	str	r2, [sp, #28]
 8011160:	e014      	b.n	801118c <_svfiprintf_r+0x114>
 8011162:	eba0 0308 	sub.w	r3, r0, r8
 8011166:	fa09 f303 	lsl.w	r3, r9, r3
 801116a:	4313      	orrs	r3, r2
 801116c:	9304      	str	r3, [sp, #16]
 801116e:	46a2      	mov	sl, r4
 8011170:	e7d2      	b.n	8011118 <_svfiprintf_r+0xa0>
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	1d19      	adds	r1, r3, #4
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	9103      	str	r1, [sp, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	bfbb      	ittet	lt
 801117e:	425b      	neglt	r3, r3
 8011180:	f042 0202 	orrlt.w	r2, r2, #2
 8011184:	9307      	strge	r3, [sp, #28]
 8011186:	9307      	strlt	r3, [sp, #28]
 8011188:	bfb8      	it	lt
 801118a:	9204      	strlt	r2, [sp, #16]
 801118c:	7823      	ldrb	r3, [r4, #0]
 801118e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011190:	d10a      	bne.n	80111a8 <_svfiprintf_r+0x130>
 8011192:	7863      	ldrb	r3, [r4, #1]
 8011194:	2b2a      	cmp	r3, #42	@ 0x2a
 8011196:	d132      	bne.n	80111fe <_svfiprintf_r+0x186>
 8011198:	9b03      	ldr	r3, [sp, #12]
 801119a:	1d1a      	adds	r2, r3, #4
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	9203      	str	r2, [sp, #12]
 80111a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111a4:	3402      	adds	r4, #2
 80111a6:	9305      	str	r3, [sp, #20]
 80111a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801126c <_svfiprintf_r+0x1f4>
 80111ac:	7821      	ldrb	r1, [r4, #0]
 80111ae:	2203      	movs	r2, #3
 80111b0:	4650      	mov	r0, sl
 80111b2:	f7ef f81d 	bl	80001f0 <memchr>
 80111b6:	b138      	cbz	r0, 80111c8 <_svfiprintf_r+0x150>
 80111b8:	9b04      	ldr	r3, [sp, #16]
 80111ba:	eba0 000a 	sub.w	r0, r0, sl
 80111be:	2240      	movs	r2, #64	@ 0x40
 80111c0:	4082      	lsls	r2, r0
 80111c2:	4313      	orrs	r3, r2
 80111c4:	3401      	adds	r4, #1
 80111c6:	9304      	str	r3, [sp, #16]
 80111c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111cc:	4824      	ldr	r0, [pc, #144]	@ (8011260 <_svfiprintf_r+0x1e8>)
 80111ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111d2:	2206      	movs	r2, #6
 80111d4:	f7ef f80c 	bl	80001f0 <memchr>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d036      	beq.n	801124a <_svfiprintf_r+0x1d2>
 80111dc:	4b21      	ldr	r3, [pc, #132]	@ (8011264 <_svfiprintf_r+0x1ec>)
 80111de:	bb1b      	cbnz	r3, 8011228 <_svfiprintf_r+0x1b0>
 80111e0:	9b03      	ldr	r3, [sp, #12]
 80111e2:	3307      	adds	r3, #7
 80111e4:	f023 0307 	bic.w	r3, r3, #7
 80111e8:	3308      	adds	r3, #8
 80111ea:	9303      	str	r3, [sp, #12]
 80111ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ee:	4433      	add	r3, r6
 80111f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80111f2:	e76a      	b.n	80110ca <_svfiprintf_r+0x52>
 80111f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80111f8:	460c      	mov	r4, r1
 80111fa:	2001      	movs	r0, #1
 80111fc:	e7a8      	b.n	8011150 <_svfiprintf_r+0xd8>
 80111fe:	2300      	movs	r3, #0
 8011200:	3401      	adds	r4, #1
 8011202:	9305      	str	r3, [sp, #20]
 8011204:	4619      	mov	r1, r3
 8011206:	f04f 0c0a 	mov.w	ip, #10
 801120a:	4620      	mov	r0, r4
 801120c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011210:	3a30      	subs	r2, #48	@ 0x30
 8011212:	2a09      	cmp	r2, #9
 8011214:	d903      	bls.n	801121e <_svfiprintf_r+0x1a6>
 8011216:	2b00      	cmp	r3, #0
 8011218:	d0c6      	beq.n	80111a8 <_svfiprintf_r+0x130>
 801121a:	9105      	str	r1, [sp, #20]
 801121c:	e7c4      	b.n	80111a8 <_svfiprintf_r+0x130>
 801121e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011222:	4604      	mov	r4, r0
 8011224:	2301      	movs	r3, #1
 8011226:	e7f0      	b.n	801120a <_svfiprintf_r+0x192>
 8011228:	ab03      	add	r3, sp, #12
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	462a      	mov	r2, r5
 801122e:	4b0e      	ldr	r3, [pc, #56]	@ (8011268 <_svfiprintf_r+0x1f0>)
 8011230:	a904      	add	r1, sp, #16
 8011232:	4638      	mov	r0, r7
 8011234:	f7fd ff04 	bl	800f040 <_printf_float>
 8011238:	1c42      	adds	r2, r0, #1
 801123a:	4606      	mov	r6, r0
 801123c:	d1d6      	bne.n	80111ec <_svfiprintf_r+0x174>
 801123e:	89ab      	ldrh	r3, [r5, #12]
 8011240:	065b      	lsls	r3, r3, #25
 8011242:	f53f af2d 	bmi.w	80110a0 <_svfiprintf_r+0x28>
 8011246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011248:	e72c      	b.n	80110a4 <_svfiprintf_r+0x2c>
 801124a:	ab03      	add	r3, sp, #12
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	462a      	mov	r2, r5
 8011250:	4b05      	ldr	r3, [pc, #20]	@ (8011268 <_svfiprintf_r+0x1f0>)
 8011252:	a904      	add	r1, sp, #16
 8011254:	4638      	mov	r0, r7
 8011256:	f7fe f98b 	bl	800f570 <_printf_i>
 801125a:	e7ed      	b.n	8011238 <_svfiprintf_r+0x1c0>
 801125c:	08013e38 	.word	0x08013e38
 8011260:	08013e42 	.word	0x08013e42
 8011264:	0800f041 	.word	0x0800f041
 8011268:	08010fc1 	.word	0x08010fc1
 801126c:	08013e3e 	.word	0x08013e3e

08011270 <_sungetc_r>:
 8011270:	b538      	push	{r3, r4, r5, lr}
 8011272:	1c4b      	adds	r3, r1, #1
 8011274:	4614      	mov	r4, r2
 8011276:	d103      	bne.n	8011280 <_sungetc_r+0x10>
 8011278:	f04f 35ff 	mov.w	r5, #4294967295
 801127c:	4628      	mov	r0, r5
 801127e:	bd38      	pop	{r3, r4, r5, pc}
 8011280:	8993      	ldrh	r3, [r2, #12]
 8011282:	f023 0320 	bic.w	r3, r3, #32
 8011286:	8193      	strh	r3, [r2, #12]
 8011288:	6853      	ldr	r3, [r2, #4]
 801128a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801128c:	b2cd      	uxtb	r5, r1
 801128e:	b18a      	cbz	r2, 80112b4 <_sungetc_r+0x44>
 8011290:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011292:	429a      	cmp	r2, r3
 8011294:	dd08      	ble.n	80112a8 <_sungetc_r+0x38>
 8011296:	6823      	ldr	r3, [r4, #0]
 8011298:	1e5a      	subs	r2, r3, #1
 801129a:	6022      	str	r2, [r4, #0]
 801129c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80112a0:	6863      	ldr	r3, [r4, #4]
 80112a2:	3301      	adds	r3, #1
 80112a4:	6063      	str	r3, [r4, #4]
 80112a6:	e7e9      	b.n	801127c <_sungetc_r+0xc>
 80112a8:	4621      	mov	r1, r4
 80112aa:	f000 fbe0 	bl	8011a6e <__submore>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d0f1      	beq.n	8011296 <_sungetc_r+0x26>
 80112b2:	e7e1      	b.n	8011278 <_sungetc_r+0x8>
 80112b4:	6921      	ldr	r1, [r4, #16]
 80112b6:	6822      	ldr	r2, [r4, #0]
 80112b8:	b141      	cbz	r1, 80112cc <_sungetc_r+0x5c>
 80112ba:	4291      	cmp	r1, r2
 80112bc:	d206      	bcs.n	80112cc <_sungetc_r+0x5c>
 80112be:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80112c2:	42a9      	cmp	r1, r5
 80112c4:	d102      	bne.n	80112cc <_sungetc_r+0x5c>
 80112c6:	3a01      	subs	r2, #1
 80112c8:	6022      	str	r2, [r4, #0]
 80112ca:	e7ea      	b.n	80112a2 <_sungetc_r+0x32>
 80112cc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80112d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80112d6:	2303      	movs	r3, #3
 80112d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80112da:	4623      	mov	r3, r4
 80112dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80112e0:	6023      	str	r3, [r4, #0]
 80112e2:	2301      	movs	r3, #1
 80112e4:	e7de      	b.n	80112a4 <_sungetc_r+0x34>

080112e6 <__ssrefill_r>:
 80112e6:	b510      	push	{r4, lr}
 80112e8:	460c      	mov	r4, r1
 80112ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80112ec:	b169      	cbz	r1, 801130a <__ssrefill_r+0x24>
 80112ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112f2:	4299      	cmp	r1, r3
 80112f4:	d001      	beq.n	80112fa <__ssrefill_r+0x14>
 80112f6:	f7ff fa97 	bl	8010828 <_free_r>
 80112fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112fc:	6063      	str	r3, [r4, #4]
 80112fe:	2000      	movs	r0, #0
 8011300:	6360      	str	r0, [r4, #52]	@ 0x34
 8011302:	b113      	cbz	r3, 801130a <__ssrefill_r+0x24>
 8011304:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011306:	6023      	str	r3, [r4, #0]
 8011308:	bd10      	pop	{r4, pc}
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	6023      	str	r3, [r4, #0]
 801130e:	2300      	movs	r3, #0
 8011310:	6063      	str	r3, [r4, #4]
 8011312:	89a3      	ldrh	r3, [r4, #12]
 8011314:	f043 0320 	orr.w	r3, r3, #32
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	f04f 30ff 	mov.w	r0, #4294967295
 801131e:	e7f3      	b.n	8011308 <__ssrefill_r+0x22>

08011320 <__ssvfiscanf_r>:
 8011320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	460c      	mov	r4, r1
 8011326:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801132a:	2100      	movs	r1, #0
 801132c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011330:	49a5      	ldr	r1, [pc, #660]	@ (80115c8 <__ssvfiscanf_r+0x2a8>)
 8011332:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011334:	f10d 0804 	add.w	r8, sp, #4
 8011338:	49a4      	ldr	r1, [pc, #656]	@ (80115cc <__ssvfiscanf_r+0x2ac>)
 801133a:	4fa5      	ldr	r7, [pc, #660]	@ (80115d0 <__ssvfiscanf_r+0x2b0>)
 801133c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011340:	4606      	mov	r6, r0
 8011342:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	7813      	ldrb	r3, [r2, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 8158 	beq.w	80115fe <__ssvfiscanf_r+0x2de>
 801134e:	5cf9      	ldrb	r1, [r7, r3]
 8011350:	f011 0108 	ands.w	r1, r1, #8
 8011354:	f102 0501 	add.w	r5, r2, #1
 8011358:	d019      	beq.n	801138e <__ssvfiscanf_r+0x6e>
 801135a:	6863      	ldr	r3, [r4, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	dd0f      	ble.n	8011380 <__ssvfiscanf_r+0x60>
 8011360:	6823      	ldr	r3, [r4, #0]
 8011362:	781a      	ldrb	r2, [r3, #0]
 8011364:	5cba      	ldrb	r2, [r7, r2]
 8011366:	0712      	lsls	r2, r2, #28
 8011368:	d401      	bmi.n	801136e <__ssvfiscanf_r+0x4e>
 801136a:	462a      	mov	r2, r5
 801136c:	e7eb      	b.n	8011346 <__ssvfiscanf_r+0x26>
 801136e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011370:	3201      	adds	r2, #1
 8011372:	9245      	str	r2, [sp, #276]	@ 0x114
 8011374:	6862      	ldr	r2, [r4, #4]
 8011376:	3301      	adds	r3, #1
 8011378:	3a01      	subs	r2, #1
 801137a:	6062      	str	r2, [r4, #4]
 801137c:	6023      	str	r3, [r4, #0]
 801137e:	e7ec      	b.n	801135a <__ssvfiscanf_r+0x3a>
 8011380:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011382:	4621      	mov	r1, r4
 8011384:	4630      	mov	r0, r6
 8011386:	4798      	blx	r3
 8011388:	2800      	cmp	r0, #0
 801138a:	d0e9      	beq.n	8011360 <__ssvfiscanf_r+0x40>
 801138c:	e7ed      	b.n	801136a <__ssvfiscanf_r+0x4a>
 801138e:	2b25      	cmp	r3, #37	@ 0x25
 8011390:	d012      	beq.n	80113b8 <__ssvfiscanf_r+0x98>
 8011392:	4699      	mov	r9, r3
 8011394:	6863      	ldr	r3, [r4, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	f340 8093 	ble.w	80114c2 <__ssvfiscanf_r+0x1a2>
 801139c:	6822      	ldr	r2, [r4, #0]
 801139e:	7813      	ldrb	r3, [r2, #0]
 80113a0:	454b      	cmp	r3, r9
 80113a2:	f040 812c 	bne.w	80115fe <__ssvfiscanf_r+0x2de>
 80113a6:	6863      	ldr	r3, [r4, #4]
 80113a8:	3b01      	subs	r3, #1
 80113aa:	6063      	str	r3, [r4, #4]
 80113ac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80113ae:	3201      	adds	r2, #1
 80113b0:	3301      	adds	r3, #1
 80113b2:	6022      	str	r2, [r4, #0]
 80113b4:	9345      	str	r3, [sp, #276]	@ 0x114
 80113b6:	e7d8      	b.n	801136a <__ssvfiscanf_r+0x4a>
 80113b8:	9141      	str	r1, [sp, #260]	@ 0x104
 80113ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80113bc:	7853      	ldrb	r3, [r2, #1]
 80113be:	2b2a      	cmp	r3, #42	@ 0x2a
 80113c0:	bf02      	ittt	eq
 80113c2:	2310      	moveq	r3, #16
 80113c4:	1c95      	addeq	r5, r2, #2
 80113c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80113c8:	220a      	movs	r2, #10
 80113ca:	46a9      	mov	r9, r5
 80113cc:	f819 1b01 	ldrb.w	r1, [r9], #1
 80113d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80113d4:	2b09      	cmp	r3, #9
 80113d6:	d91e      	bls.n	8011416 <__ssvfiscanf_r+0xf6>
 80113d8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80115d4 <__ssvfiscanf_r+0x2b4>
 80113dc:	2203      	movs	r2, #3
 80113de:	4650      	mov	r0, sl
 80113e0:	f7ee ff06 	bl	80001f0 <memchr>
 80113e4:	b138      	cbz	r0, 80113f6 <__ssvfiscanf_r+0xd6>
 80113e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80113e8:	eba0 000a 	sub.w	r0, r0, sl
 80113ec:	2301      	movs	r3, #1
 80113ee:	4083      	lsls	r3, r0
 80113f0:	4313      	orrs	r3, r2
 80113f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80113f4:	464d      	mov	r5, r9
 80113f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80113fa:	2b78      	cmp	r3, #120	@ 0x78
 80113fc:	d806      	bhi.n	801140c <__ssvfiscanf_r+0xec>
 80113fe:	2b57      	cmp	r3, #87	@ 0x57
 8011400:	d810      	bhi.n	8011424 <__ssvfiscanf_r+0x104>
 8011402:	2b25      	cmp	r3, #37	@ 0x25
 8011404:	d0c5      	beq.n	8011392 <__ssvfiscanf_r+0x72>
 8011406:	d857      	bhi.n	80114b8 <__ssvfiscanf_r+0x198>
 8011408:	2b00      	cmp	r3, #0
 801140a:	d065      	beq.n	80114d8 <__ssvfiscanf_r+0x1b8>
 801140c:	2303      	movs	r3, #3
 801140e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011410:	230a      	movs	r3, #10
 8011412:	9342      	str	r3, [sp, #264]	@ 0x108
 8011414:	e078      	b.n	8011508 <__ssvfiscanf_r+0x1e8>
 8011416:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011418:	fb02 1103 	mla	r1, r2, r3, r1
 801141c:	3930      	subs	r1, #48	@ 0x30
 801141e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011420:	464d      	mov	r5, r9
 8011422:	e7d2      	b.n	80113ca <__ssvfiscanf_r+0xaa>
 8011424:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011428:	2a20      	cmp	r2, #32
 801142a:	d8ef      	bhi.n	801140c <__ssvfiscanf_r+0xec>
 801142c:	a101      	add	r1, pc, #4	@ (adr r1, 8011434 <__ssvfiscanf_r+0x114>)
 801142e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011432:	bf00      	nop
 8011434:	080114e7 	.word	0x080114e7
 8011438:	0801140d 	.word	0x0801140d
 801143c:	0801140d 	.word	0x0801140d
 8011440:	08011541 	.word	0x08011541
 8011444:	0801140d 	.word	0x0801140d
 8011448:	0801140d 	.word	0x0801140d
 801144c:	0801140d 	.word	0x0801140d
 8011450:	0801140d 	.word	0x0801140d
 8011454:	0801140d 	.word	0x0801140d
 8011458:	0801140d 	.word	0x0801140d
 801145c:	0801140d 	.word	0x0801140d
 8011460:	08011557 	.word	0x08011557
 8011464:	0801153d 	.word	0x0801153d
 8011468:	080114bf 	.word	0x080114bf
 801146c:	080114bf 	.word	0x080114bf
 8011470:	080114bf 	.word	0x080114bf
 8011474:	0801140d 	.word	0x0801140d
 8011478:	080114f9 	.word	0x080114f9
 801147c:	0801140d 	.word	0x0801140d
 8011480:	0801140d 	.word	0x0801140d
 8011484:	0801140d 	.word	0x0801140d
 8011488:	0801140d 	.word	0x0801140d
 801148c:	08011567 	.word	0x08011567
 8011490:	08011501 	.word	0x08011501
 8011494:	080114df 	.word	0x080114df
 8011498:	0801140d 	.word	0x0801140d
 801149c:	0801140d 	.word	0x0801140d
 80114a0:	08011563 	.word	0x08011563
 80114a4:	0801140d 	.word	0x0801140d
 80114a8:	0801153d 	.word	0x0801153d
 80114ac:	0801140d 	.word	0x0801140d
 80114b0:	0801140d 	.word	0x0801140d
 80114b4:	080114e7 	.word	0x080114e7
 80114b8:	3b45      	subs	r3, #69	@ 0x45
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d8a6      	bhi.n	801140c <__ssvfiscanf_r+0xec>
 80114be:	2305      	movs	r3, #5
 80114c0:	e021      	b.n	8011506 <__ssvfiscanf_r+0x1e6>
 80114c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80114c4:	4621      	mov	r1, r4
 80114c6:	4630      	mov	r0, r6
 80114c8:	4798      	blx	r3
 80114ca:	2800      	cmp	r0, #0
 80114cc:	f43f af66 	beq.w	801139c <__ssvfiscanf_r+0x7c>
 80114d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80114d2:	2800      	cmp	r0, #0
 80114d4:	f040 808b 	bne.w	80115ee <__ssvfiscanf_r+0x2ce>
 80114d8:	f04f 30ff 	mov.w	r0, #4294967295
 80114dc:	e08b      	b.n	80115f6 <__ssvfiscanf_r+0x2d6>
 80114de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114e0:	f042 0220 	orr.w	r2, r2, #32
 80114e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80114e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80114ec:	9241      	str	r2, [sp, #260]	@ 0x104
 80114ee:	2210      	movs	r2, #16
 80114f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80114f2:	9242      	str	r2, [sp, #264]	@ 0x108
 80114f4:	d902      	bls.n	80114fc <__ssvfiscanf_r+0x1dc>
 80114f6:	e005      	b.n	8011504 <__ssvfiscanf_r+0x1e4>
 80114f8:	2300      	movs	r3, #0
 80114fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80114fc:	2303      	movs	r3, #3
 80114fe:	e002      	b.n	8011506 <__ssvfiscanf_r+0x1e6>
 8011500:	2308      	movs	r3, #8
 8011502:	9342      	str	r3, [sp, #264]	@ 0x108
 8011504:	2304      	movs	r3, #4
 8011506:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011508:	6863      	ldr	r3, [r4, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	dd39      	ble.n	8011582 <__ssvfiscanf_r+0x262>
 801150e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011510:	0659      	lsls	r1, r3, #25
 8011512:	d404      	bmi.n	801151e <__ssvfiscanf_r+0x1fe>
 8011514:	6823      	ldr	r3, [r4, #0]
 8011516:	781a      	ldrb	r2, [r3, #0]
 8011518:	5cba      	ldrb	r2, [r7, r2]
 801151a:	0712      	lsls	r2, r2, #28
 801151c:	d438      	bmi.n	8011590 <__ssvfiscanf_r+0x270>
 801151e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011520:	2b02      	cmp	r3, #2
 8011522:	dc47      	bgt.n	80115b4 <__ssvfiscanf_r+0x294>
 8011524:	466b      	mov	r3, sp
 8011526:	4622      	mov	r2, r4
 8011528:	a941      	add	r1, sp, #260	@ 0x104
 801152a:	4630      	mov	r0, r6
 801152c:	f000 f86c 	bl	8011608 <_scanf_chars>
 8011530:	2801      	cmp	r0, #1
 8011532:	d064      	beq.n	80115fe <__ssvfiscanf_r+0x2de>
 8011534:	2802      	cmp	r0, #2
 8011536:	f47f af18 	bne.w	801136a <__ssvfiscanf_r+0x4a>
 801153a:	e7c9      	b.n	80114d0 <__ssvfiscanf_r+0x1b0>
 801153c:	220a      	movs	r2, #10
 801153e:	e7d7      	b.n	80114f0 <__ssvfiscanf_r+0x1d0>
 8011540:	4629      	mov	r1, r5
 8011542:	4640      	mov	r0, r8
 8011544:	f000 fa5a 	bl	80119fc <__sccl>
 8011548:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801154a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801154e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011550:	4605      	mov	r5, r0
 8011552:	2301      	movs	r3, #1
 8011554:	e7d7      	b.n	8011506 <__ssvfiscanf_r+0x1e6>
 8011556:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801155c:	9341      	str	r3, [sp, #260]	@ 0x104
 801155e:	2300      	movs	r3, #0
 8011560:	e7d1      	b.n	8011506 <__ssvfiscanf_r+0x1e6>
 8011562:	2302      	movs	r3, #2
 8011564:	e7cf      	b.n	8011506 <__ssvfiscanf_r+0x1e6>
 8011566:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011568:	06c3      	lsls	r3, r0, #27
 801156a:	f53f aefe 	bmi.w	801136a <__ssvfiscanf_r+0x4a>
 801156e:	9b00      	ldr	r3, [sp, #0]
 8011570:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011572:	1d19      	adds	r1, r3, #4
 8011574:	9100      	str	r1, [sp, #0]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	07c0      	lsls	r0, r0, #31
 801157a:	bf4c      	ite	mi
 801157c:	801a      	strhmi	r2, [r3, #0]
 801157e:	601a      	strpl	r2, [r3, #0]
 8011580:	e6f3      	b.n	801136a <__ssvfiscanf_r+0x4a>
 8011582:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011584:	4621      	mov	r1, r4
 8011586:	4630      	mov	r0, r6
 8011588:	4798      	blx	r3
 801158a:	2800      	cmp	r0, #0
 801158c:	d0bf      	beq.n	801150e <__ssvfiscanf_r+0x1ee>
 801158e:	e79f      	b.n	80114d0 <__ssvfiscanf_r+0x1b0>
 8011590:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011592:	3201      	adds	r2, #1
 8011594:	9245      	str	r2, [sp, #276]	@ 0x114
 8011596:	6862      	ldr	r2, [r4, #4]
 8011598:	3a01      	subs	r2, #1
 801159a:	2a00      	cmp	r2, #0
 801159c:	6062      	str	r2, [r4, #4]
 801159e:	dd02      	ble.n	80115a6 <__ssvfiscanf_r+0x286>
 80115a0:	3301      	adds	r3, #1
 80115a2:	6023      	str	r3, [r4, #0]
 80115a4:	e7b6      	b.n	8011514 <__ssvfiscanf_r+0x1f4>
 80115a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115a8:	4621      	mov	r1, r4
 80115aa:	4630      	mov	r0, r6
 80115ac:	4798      	blx	r3
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d0b0      	beq.n	8011514 <__ssvfiscanf_r+0x1f4>
 80115b2:	e78d      	b.n	80114d0 <__ssvfiscanf_r+0x1b0>
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	dc0f      	bgt.n	80115d8 <__ssvfiscanf_r+0x2b8>
 80115b8:	466b      	mov	r3, sp
 80115ba:	4622      	mov	r2, r4
 80115bc:	a941      	add	r1, sp, #260	@ 0x104
 80115be:	4630      	mov	r0, r6
 80115c0:	f000 f87c 	bl	80116bc <_scanf_i>
 80115c4:	e7b4      	b.n	8011530 <__ssvfiscanf_r+0x210>
 80115c6:	bf00      	nop
 80115c8:	08011271 	.word	0x08011271
 80115cc:	080112e7 	.word	0x080112e7
 80115d0:	08013eab 	.word	0x08013eab
 80115d4:	08013e3e 	.word	0x08013e3e
 80115d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011604 <__ssvfiscanf_r+0x2e4>)
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f43f aec5 	beq.w	801136a <__ssvfiscanf_r+0x4a>
 80115e0:	466b      	mov	r3, sp
 80115e2:	4622      	mov	r2, r4
 80115e4:	a941      	add	r1, sp, #260	@ 0x104
 80115e6:	4630      	mov	r0, r6
 80115e8:	f3af 8000 	nop.w
 80115ec:	e7a0      	b.n	8011530 <__ssvfiscanf_r+0x210>
 80115ee:	89a3      	ldrh	r3, [r4, #12]
 80115f0:	065b      	lsls	r3, r3, #25
 80115f2:	f53f af71 	bmi.w	80114d8 <__ssvfiscanf_r+0x1b8>
 80115f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80115fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115fe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011600:	e7f9      	b.n	80115f6 <__ssvfiscanf_r+0x2d6>
 8011602:	bf00      	nop
 8011604:	00000000 	.word	0x00000000

08011608 <_scanf_chars>:
 8011608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801160c:	4615      	mov	r5, r2
 801160e:	688a      	ldr	r2, [r1, #8]
 8011610:	4680      	mov	r8, r0
 8011612:	460c      	mov	r4, r1
 8011614:	b932      	cbnz	r2, 8011624 <_scanf_chars+0x1c>
 8011616:	698a      	ldr	r2, [r1, #24]
 8011618:	2a00      	cmp	r2, #0
 801161a:	bf14      	ite	ne
 801161c:	f04f 32ff 	movne.w	r2, #4294967295
 8011620:	2201      	moveq	r2, #1
 8011622:	608a      	str	r2, [r1, #8]
 8011624:	6822      	ldr	r2, [r4, #0]
 8011626:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80116b8 <_scanf_chars+0xb0>
 801162a:	06d1      	lsls	r1, r2, #27
 801162c:	bf5f      	itttt	pl
 801162e:	681a      	ldrpl	r2, [r3, #0]
 8011630:	1d11      	addpl	r1, r2, #4
 8011632:	6019      	strpl	r1, [r3, #0]
 8011634:	6816      	ldrpl	r6, [r2, #0]
 8011636:	2700      	movs	r7, #0
 8011638:	69a0      	ldr	r0, [r4, #24]
 801163a:	b188      	cbz	r0, 8011660 <_scanf_chars+0x58>
 801163c:	2801      	cmp	r0, #1
 801163e:	d107      	bne.n	8011650 <_scanf_chars+0x48>
 8011640:	682b      	ldr	r3, [r5, #0]
 8011642:	781a      	ldrb	r2, [r3, #0]
 8011644:	6963      	ldr	r3, [r4, #20]
 8011646:	5c9b      	ldrb	r3, [r3, r2]
 8011648:	b953      	cbnz	r3, 8011660 <_scanf_chars+0x58>
 801164a:	2f00      	cmp	r7, #0
 801164c:	d031      	beq.n	80116b2 <_scanf_chars+0xaa>
 801164e:	e022      	b.n	8011696 <_scanf_chars+0x8e>
 8011650:	2802      	cmp	r0, #2
 8011652:	d120      	bne.n	8011696 <_scanf_chars+0x8e>
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	f819 3003 	ldrb.w	r3, [r9, r3]
 801165c:	071b      	lsls	r3, r3, #28
 801165e:	d41a      	bmi.n	8011696 <_scanf_chars+0x8e>
 8011660:	6823      	ldr	r3, [r4, #0]
 8011662:	06da      	lsls	r2, r3, #27
 8011664:	bf5e      	ittt	pl
 8011666:	682b      	ldrpl	r3, [r5, #0]
 8011668:	781b      	ldrbpl	r3, [r3, #0]
 801166a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801166e:	682a      	ldr	r2, [r5, #0]
 8011670:	686b      	ldr	r3, [r5, #4]
 8011672:	3201      	adds	r2, #1
 8011674:	602a      	str	r2, [r5, #0]
 8011676:	68a2      	ldr	r2, [r4, #8]
 8011678:	3b01      	subs	r3, #1
 801167a:	3a01      	subs	r2, #1
 801167c:	606b      	str	r3, [r5, #4]
 801167e:	3701      	adds	r7, #1
 8011680:	60a2      	str	r2, [r4, #8]
 8011682:	b142      	cbz	r2, 8011696 <_scanf_chars+0x8e>
 8011684:	2b00      	cmp	r3, #0
 8011686:	dcd7      	bgt.n	8011638 <_scanf_chars+0x30>
 8011688:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801168c:	4629      	mov	r1, r5
 801168e:	4640      	mov	r0, r8
 8011690:	4798      	blx	r3
 8011692:	2800      	cmp	r0, #0
 8011694:	d0d0      	beq.n	8011638 <_scanf_chars+0x30>
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	f013 0310 	ands.w	r3, r3, #16
 801169c:	d105      	bne.n	80116aa <_scanf_chars+0xa2>
 801169e:	68e2      	ldr	r2, [r4, #12]
 80116a0:	3201      	adds	r2, #1
 80116a2:	60e2      	str	r2, [r4, #12]
 80116a4:	69a2      	ldr	r2, [r4, #24]
 80116a6:	b102      	cbz	r2, 80116aa <_scanf_chars+0xa2>
 80116a8:	7033      	strb	r3, [r6, #0]
 80116aa:	6923      	ldr	r3, [r4, #16]
 80116ac:	443b      	add	r3, r7
 80116ae:	6123      	str	r3, [r4, #16]
 80116b0:	2000      	movs	r0, #0
 80116b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b6:	bf00      	nop
 80116b8:	08013eab 	.word	0x08013eab

080116bc <_scanf_i>:
 80116bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c0:	4698      	mov	r8, r3
 80116c2:	4b74      	ldr	r3, [pc, #464]	@ (8011894 <_scanf_i+0x1d8>)
 80116c4:	460c      	mov	r4, r1
 80116c6:	4682      	mov	sl, r0
 80116c8:	4616      	mov	r6, r2
 80116ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80116ce:	b087      	sub	sp, #28
 80116d0:	ab03      	add	r3, sp, #12
 80116d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80116d6:	4b70      	ldr	r3, [pc, #448]	@ (8011898 <_scanf_i+0x1dc>)
 80116d8:	69a1      	ldr	r1, [r4, #24]
 80116da:	4a70      	ldr	r2, [pc, #448]	@ (801189c <_scanf_i+0x1e0>)
 80116dc:	2903      	cmp	r1, #3
 80116de:	bf08      	it	eq
 80116e0:	461a      	moveq	r2, r3
 80116e2:	68a3      	ldr	r3, [r4, #8]
 80116e4:	9201      	str	r2, [sp, #4]
 80116e6:	1e5a      	subs	r2, r3, #1
 80116e8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80116ec:	bf88      	it	hi
 80116ee:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80116f2:	4627      	mov	r7, r4
 80116f4:	bf82      	ittt	hi
 80116f6:	eb03 0905 	addhi.w	r9, r3, r5
 80116fa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80116fe:	60a3      	strhi	r3, [r4, #8]
 8011700:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011704:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011708:	bf98      	it	ls
 801170a:	f04f 0900 	movls.w	r9, #0
 801170e:	6023      	str	r3, [r4, #0]
 8011710:	463d      	mov	r5, r7
 8011712:	f04f 0b00 	mov.w	fp, #0
 8011716:	6831      	ldr	r1, [r6, #0]
 8011718:	ab03      	add	r3, sp, #12
 801171a:	7809      	ldrb	r1, [r1, #0]
 801171c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011720:	2202      	movs	r2, #2
 8011722:	f7ee fd65 	bl	80001f0 <memchr>
 8011726:	b328      	cbz	r0, 8011774 <_scanf_i+0xb8>
 8011728:	f1bb 0f01 	cmp.w	fp, #1
 801172c:	d159      	bne.n	80117e2 <_scanf_i+0x126>
 801172e:	6862      	ldr	r2, [r4, #4]
 8011730:	b92a      	cbnz	r2, 801173e <_scanf_i+0x82>
 8011732:	6822      	ldr	r2, [r4, #0]
 8011734:	2108      	movs	r1, #8
 8011736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801173a:	6061      	str	r1, [r4, #4]
 801173c:	6022      	str	r2, [r4, #0]
 801173e:	6822      	ldr	r2, [r4, #0]
 8011740:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011744:	6022      	str	r2, [r4, #0]
 8011746:	68a2      	ldr	r2, [r4, #8]
 8011748:	1e51      	subs	r1, r2, #1
 801174a:	60a1      	str	r1, [r4, #8]
 801174c:	b192      	cbz	r2, 8011774 <_scanf_i+0xb8>
 801174e:	6832      	ldr	r2, [r6, #0]
 8011750:	1c51      	adds	r1, r2, #1
 8011752:	6031      	str	r1, [r6, #0]
 8011754:	7812      	ldrb	r2, [r2, #0]
 8011756:	f805 2b01 	strb.w	r2, [r5], #1
 801175a:	6872      	ldr	r2, [r6, #4]
 801175c:	3a01      	subs	r2, #1
 801175e:	2a00      	cmp	r2, #0
 8011760:	6072      	str	r2, [r6, #4]
 8011762:	dc07      	bgt.n	8011774 <_scanf_i+0xb8>
 8011764:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011768:	4631      	mov	r1, r6
 801176a:	4650      	mov	r0, sl
 801176c:	4790      	blx	r2
 801176e:	2800      	cmp	r0, #0
 8011770:	f040 8085 	bne.w	801187e <_scanf_i+0x1c2>
 8011774:	f10b 0b01 	add.w	fp, fp, #1
 8011778:	f1bb 0f03 	cmp.w	fp, #3
 801177c:	d1cb      	bne.n	8011716 <_scanf_i+0x5a>
 801177e:	6863      	ldr	r3, [r4, #4]
 8011780:	b90b      	cbnz	r3, 8011786 <_scanf_i+0xca>
 8011782:	230a      	movs	r3, #10
 8011784:	6063      	str	r3, [r4, #4]
 8011786:	6863      	ldr	r3, [r4, #4]
 8011788:	4945      	ldr	r1, [pc, #276]	@ (80118a0 <_scanf_i+0x1e4>)
 801178a:	6960      	ldr	r0, [r4, #20]
 801178c:	1ac9      	subs	r1, r1, r3
 801178e:	f000 f935 	bl	80119fc <__sccl>
 8011792:	f04f 0b00 	mov.w	fp, #0
 8011796:	68a3      	ldr	r3, [r4, #8]
 8011798:	6822      	ldr	r2, [r4, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d03d      	beq.n	801181a <_scanf_i+0x15e>
 801179e:	6831      	ldr	r1, [r6, #0]
 80117a0:	6960      	ldr	r0, [r4, #20]
 80117a2:	f891 c000 	ldrb.w	ip, [r1]
 80117a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d035      	beq.n	801181a <_scanf_i+0x15e>
 80117ae:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80117b2:	d124      	bne.n	80117fe <_scanf_i+0x142>
 80117b4:	0510      	lsls	r0, r2, #20
 80117b6:	d522      	bpl.n	80117fe <_scanf_i+0x142>
 80117b8:	f10b 0b01 	add.w	fp, fp, #1
 80117bc:	f1b9 0f00 	cmp.w	r9, #0
 80117c0:	d003      	beq.n	80117ca <_scanf_i+0x10e>
 80117c2:	3301      	adds	r3, #1
 80117c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80117c8:	60a3      	str	r3, [r4, #8]
 80117ca:	6873      	ldr	r3, [r6, #4]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	6073      	str	r3, [r6, #4]
 80117d2:	dd1b      	ble.n	801180c <_scanf_i+0x150>
 80117d4:	6833      	ldr	r3, [r6, #0]
 80117d6:	3301      	adds	r3, #1
 80117d8:	6033      	str	r3, [r6, #0]
 80117da:	68a3      	ldr	r3, [r4, #8]
 80117dc:	3b01      	subs	r3, #1
 80117de:	60a3      	str	r3, [r4, #8]
 80117e0:	e7d9      	b.n	8011796 <_scanf_i+0xda>
 80117e2:	f1bb 0f02 	cmp.w	fp, #2
 80117e6:	d1ae      	bne.n	8011746 <_scanf_i+0x8a>
 80117e8:	6822      	ldr	r2, [r4, #0]
 80117ea:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80117ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80117f2:	d1bf      	bne.n	8011774 <_scanf_i+0xb8>
 80117f4:	2110      	movs	r1, #16
 80117f6:	6061      	str	r1, [r4, #4]
 80117f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80117fc:	e7a2      	b.n	8011744 <_scanf_i+0x88>
 80117fe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011802:	6022      	str	r2, [r4, #0]
 8011804:	780b      	ldrb	r3, [r1, #0]
 8011806:	f805 3b01 	strb.w	r3, [r5], #1
 801180a:	e7de      	b.n	80117ca <_scanf_i+0x10e>
 801180c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011810:	4631      	mov	r1, r6
 8011812:	4650      	mov	r0, sl
 8011814:	4798      	blx	r3
 8011816:	2800      	cmp	r0, #0
 8011818:	d0df      	beq.n	80117da <_scanf_i+0x11e>
 801181a:	6823      	ldr	r3, [r4, #0]
 801181c:	05d9      	lsls	r1, r3, #23
 801181e:	d50d      	bpl.n	801183c <_scanf_i+0x180>
 8011820:	42bd      	cmp	r5, r7
 8011822:	d909      	bls.n	8011838 <_scanf_i+0x17c>
 8011824:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011828:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801182c:	4632      	mov	r2, r6
 801182e:	4650      	mov	r0, sl
 8011830:	4798      	blx	r3
 8011832:	f105 39ff 	add.w	r9, r5, #4294967295
 8011836:	464d      	mov	r5, r9
 8011838:	42bd      	cmp	r5, r7
 801183a:	d028      	beq.n	801188e <_scanf_i+0x1d2>
 801183c:	6822      	ldr	r2, [r4, #0]
 801183e:	f012 0210 	ands.w	r2, r2, #16
 8011842:	d113      	bne.n	801186c <_scanf_i+0x1b0>
 8011844:	702a      	strb	r2, [r5, #0]
 8011846:	6863      	ldr	r3, [r4, #4]
 8011848:	9e01      	ldr	r6, [sp, #4]
 801184a:	4639      	mov	r1, r7
 801184c:	4650      	mov	r0, sl
 801184e:	47b0      	blx	r6
 8011850:	f8d8 3000 	ldr.w	r3, [r8]
 8011854:	6821      	ldr	r1, [r4, #0]
 8011856:	1d1a      	adds	r2, r3, #4
 8011858:	f8c8 2000 	str.w	r2, [r8]
 801185c:	f011 0f20 	tst.w	r1, #32
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	d00f      	beq.n	8011884 <_scanf_i+0x1c8>
 8011864:	6018      	str	r0, [r3, #0]
 8011866:	68e3      	ldr	r3, [r4, #12]
 8011868:	3301      	adds	r3, #1
 801186a:	60e3      	str	r3, [r4, #12]
 801186c:	6923      	ldr	r3, [r4, #16]
 801186e:	1bed      	subs	r5, r5, r7
 8011870:	445d      	add	r5, fp
 8011872:	442b      	add	r3, r5
 8011874:	6123      	str	r3, [r4, #16]
 8011876:	2000      	movs	r0, #0
 8011878:	b007      	add	sp, #28
 801187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187e:	f04f 0b00 	mov.w	fp, #0
 8011882:	e7ca      	b.n	801181a <_scanf_i+0x15e>
 8011884:	07ca      	lsls	r2, r1, #31
 8011886:	bf4c      	ite	mi
 8011888:	8018      	strhmi	r0, [r3, #0]
 801188a:	6018      	strpl	r0, [r3, #0]
 801188c:	e7eb      	b.n	8011866 <_scanf_i+0x1aa>
 801188e:	2001      	movs	r0, #1
 8011890:	e7f2      	b.n	8011878 <_scanf_i+0x1bc>
 8011892:	bf00      	nop
 8011894:	080137a0 	.word	0x080137a0
 8011898:	08011cf1 	.word	0x08011cf1
 801189c:	08011dd1 	.word	0x08011dd1
 80118a0:	08013e59 	.word	0x08013e59

080118a4 <__sflush_r>:
 80118a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ac:	0716      	lsls	r6, r2, #28
 80118ae:	4605      	mov	r5, r0
 80118b0:	460c      	mov	r4, r1
 80118b2:	d454      	bmi.n	801195e <__sflush_r+0xba>
 80118b4:	684b      	ldr	r3, [r1, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	dc02      	bgt.n	80118c0 <__sflush_r+0x1c>
 80118ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80118bc:	2b00      	cmp	r3, #0
 80118be:	dd48      	ble.n	8011952 <__sflush_r+0xae>
 80118c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118c2:	2e00      	cmp	r6, #0
 80118c4:	d045      	beq.n	8011952 <__sflush_r+0xae>
 80118c6:	2300      	movs	r3, #0
 80118c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80118cc:	682f      	ldr	r7, [r5, #0]
 80118ce:	6a21      	ldr	r1, [r4, #32]
 80118d0:	602b      	str	r3, [r5, #0]
 80118d2:	d030      	beq.n	8011936 <__sflush_r+0x92>
 80118d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80118d6:	89a3      	ldrh	r3, [r4, #12]
 80118d8:	0759      	lsls	r1, r3, #29
 80118da:	d505      	bpl.n	80118e8 <__sflush_r+0x44>
 80118dc:	6863      	ldr	r3, [r4, #4]
 80118de:	1ad2      	subs	r2, r2, r3
 80118e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118e2:	b10b      	cbz	r3, 80118e8 <__sflush_r+0x44>
 80118e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118e6:	1ad2      	subs	r2, r2, r3
 80118e8:	2300      	movs	r3, #0
 80118ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118ec:	6a21      	ldr	r1, [r4, #32]
 80118ee:	4628      	mov	r0, r5
 80118f0:	47b0      	blx	r6
 80118f2:	1c43      	adds	r3, r0, #1
 80118f4:	89a3      	ldrh	r3, [r4, #12]
 80118f6:	d106      	bne.n	8011906 <__sflush_r+0x62>
 80118f8:	6829      	ldr	r1, [r5, #0]
 80118fa:	291d      	cmp	r1, #29
 80118fc:	d82b      	bhi.n	8011956 <__sflush_r+0xb2>
 80118fe:	4a2a      	ldr	r2, [pc, #168]	@ (80119a8 <__sflush_r+0x104>)
 8011900:	410a      	asrs	r2, r1
 8011902:	07d6      	lsls	r6, r2, #31
 8011904:	d427      	bmi.n	8011956 <__sflush_r+0xb2>
 8011906:	2200      	movs	r2, #0
 8011908:	6062      	str	r2, [r4, #4]
 801190a:	04d9      	lsls	r1, r3, #19
 801190c:	6922      	ldr	r2, [r4, #16]
 801190e:	6022      	str	r2, [r4, #0]
 8011910:	d504      	bpl.n	801191c <__sflush_r+0x78>
 8011912:	1c42      	adds	r2, r0, #1
 8011914:	d101      	bne.n	801191a <__sflush_r+0x76>
 8011916:	682b      	ldr	r3, [r5, #0]
 8011918:	b903      	cbnz	r3, 801191c <__sflush_r+0x78>
 801191a:	6560      	str	r0, [r4, #84]	@ 0x54
 801191c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801191e:	602f      	str	r7, [r5, #0]
 8011920:	b1b9      	cbz	r1, 8011952 <__sflush_r+0xae>
 8011922:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011926:	4299      	cmp	r1, r3
 8011928:	d002      	beq.n	8011930 <__sflush_r+0x8c>
 801192a:	4628      	mov	r0, r5
 801192c:	f7fe ff7c 	bl	8010828 <_free_r>
 8011930:	2300      	movs	r3, #0
 8011932:	6363      	str	r3, [r4, #52]	@ 0x34
 8011934:	e00d      	b.n	8011952 <__sflush_r+0xae>
 8011936:	2301      	movs	r3, #1
 8011938:	4628      	mov	r0, r5
 801193a:	47b0      	blx	r6
 801193c:	4602      	mov	r2, r0
 801193e:	1c50      	adds	r0, r2, #1
 8011940:	d1c9      	bne.n	80118d6 <__sflush_r+0x32>
 8011942:	682b      	ldr	r3, [r5, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d0c6      	beq.n	80118d6 <__sflush_r+0x32>
 8011948:	2b1d      	cmp	r3, #29
 801194a:	d001      	beq.n	8011950 <__sflush_r+0xac>
 801194c:	2b16      	cmp	r3, #22
 801194e:	d11e      	bne.n	801198e <__sflush_r+0xea>
 8011950:	602f      	str	r7, [r5, #0]
 8011952:	2000      	movs	r0, #0
 8011954:	e022      	b.n	801199c <__sflush_r+0xf8>
 8011956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801195a:	b21b      	sxth	r3, r3
 801195c:	e01b      	b.n	8011996 <__sflush_r+0xf2>
 801195e:	690f      	ldr	r7, [r1, #16]
 8011960:	2f00      	cmp	r7, #0
 8011962:	d0f6      	beq.n	8011952 <__sflush_r+0xae>
 8011964:	0793      	lsls	r3, r2, #30
 8011966:	680e      	ldr	r6, [r1, #0]
 8011968:	bf08      	it	eq
 801196a:	694b      	ldreq	r3, [r1, #20]
 801196c:	600f      	str	r7, [r1, #0]
 801196e:	bf18      	it	ne
 8011970:	2300      	movne	r3, #0
 8011972:	eba6 0807 	sub.w	r8, r6, r7
 8011976:	608b      	str	r3, [r1, #8]
 8011978:	f1b8 0f00 	cmp.w	r8, #0
 801197c:	dde9      	ble.n	8011952 <__sflush_r+0xae>
 801197e:	6a21      	ldr	r1, [r4, #32]
 8011980:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011982:	4643      	mov	r3, r8
 8011984:	463a      	mov	r2, r7
 8011986:	4628      	mov	r0, r5
 8011988:	47b0      	blx	r6
 801198a:	2800      	cmp	r0, #0
 801198c:	dc08      	bgt.n	80119a0 <__sflush_r+0xfc>
 801198e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011996:	81a3      	strh	r3, [r4, #12]
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119a0:	4407      	add	r7, r0
 80119a2:	eba8 0800 	sub.w	r8, r8, r0
 80119a6:	e7e7      	b.n	8011978 <__sflush_r+0xd4>
 80119a8:	dfbffffe 	.word	0xdfbffffe

080119ac <_fflush_r>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	690b      	ldr	r3, [r1, #16]
 80119b0:	4605      	mov	r5, r0
 80119b2:	460c      	mov	r4, r1
 80119b4:	b913      	cbnz	r3, 80119bc <_fflush_r+0x10>
 80119b6:	2500      	movs	r5, #0
 80119b8:	4628      	mov	r0, r5
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	b118      	cbz	r0, 80119c6 <_fflush_r+0x1a>
 80119be:	6a03      	ldr	r3, [r0, #32]
 80119c0:	b90b      	cbnz	r3, 80119c6 <_fflush_r+0x1a>
 80119c2:	f7fd ff81 	bl	800f8c8 <__sinit>
 80119c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0f3      	beq.n	80119b6 <_fflush_r+0xa>
 80119ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80119d0:	07d0      	lsls	r0, r2, #31
 80119d2:	d404      	bmi.n	80119de <_fflush_r+0x32>
 80119d4:	0599      	lsls	r1, r3, #22
 80119d6:	d402      	bmi.n	80119de <_fflush_r+0x32>
 80119d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119da:	f7fe f8c8 	bl	800fb6e <__retarget_lock_acquire_recursive>
 80119de:	4628      	mov	r0, r5
 80119e0:	4621      	mov	r1, r4
 80119e2:	f7ff ff5f 	bl	80118a4 <__sflush_r>
 80119e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119e8:	07da      	lsls	r2, r3, #31
 80119ea:	4605      	mov	r5, r0
 80119ec:	d4e4      	bmi.n	80119b8 <_fflush_r+0xc>
 80119ee:	89a3      	ldrh	r3, [r4, #12]
 80119f0:	059b      	lsls	r3, r3, #22
 80119f2:	d4e1      	bmi.n	80119b8 <_fflush_r+0xc>
 80119f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119f6:	f7fe f8bb 	bl	800fb70 <__retarget_lock_release_recursive>
 80119fa:	e7dd      	b.n	80119b8 <_fflush_r+0xc>

080119fc <__sccl>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	780b      	ldrb	r3, [r1, #0]
 8011a00:	4604      	mov	r4, r0
 8011a02:	2b5e      	cmp	r3, #94	@ 0x5e
 8011a04:	bf0b      	itete	eq
 8011a06:	784b      	ldrbeq	r3, [r1, #1]
 8011a08:	1c4a      	addne	r2, r1, #1
 8011a0a:	1c8a      	addeq	r2, r1, #2
 8011a0c:	2100      	movne	r1, #0
 8011a0e:	bf08      	it	eq
 8011a10:	2101      	moveq	r1, #1
 8011a12:	3801      	subs	r0, #1
 8011a14:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011a18:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011a1c:	42a8      	cmp	r0, r5
 8011a1e:	d1fb      	bne.n	8011a18 <__sccl+0x1c>
 8011a20:	b90b      	cbnz	r3, 8011a26 <__sccl+0x2a>
 8011a22:	1e50      	subs	r0, r2, #1
 8011a24:	bd70      	pop	{r4, r5, r6, pc}
 8011a26:	f081 0101 	eor.w	r1, r1, #1
 8011a2a:	54e1      	strb	r1, [r4, r3]
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	4602      	mov	r2, r0
 8011a30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011a34:	2d2d      	cmp	r5, #45	@ 0x2d
 8011a36:	d005      	beq.n	8011a44 <__sccl+0x48>
 8011a38:	2d5d      	cmp	r5, #93	@ 0x5d
 8011a3a:	d016      	beq.n	8011a6a <__sccl+0x6e>
 8011a3c:	2d00      	cmp	r5, #0
 8011a3e:	d0f1      	beq.n	8011a24 <__sccl+0x28>
 8011a40:	462b      	mov	r3, r5
 8011a42:	e7f2      	b.n	8011a2a <__sccl+0x2e>
 8011a44:	7846      	ldrb	r6, [r0, #1]
 8011a46:	2e5d      	cmp	r6, #93	@ 0x5d
 8011a48:	d0fa      	beq.n	8011a40 <__sccl+0x44>
 8011a4a:	42b3      	cmp	r3, r6
 8011a4c:	dcf8      	bgt.n	8011a40 <__sccl+0x44>
 8011a4e:	3002      	adds	r0, #2
 8011a50:	461a      	mov	r2, r3
 8011a52:	3201      	adds	r2, #1
 8011a54:	4296      	cmp	r6, r2
 8011a56:	54a1      	strb	r1, [r4, r2]
 8011a58:	dcfb      	bgt.n	8011a52 <__sccl+0x56>
 8011a5a:	1af2      	subs	r2, r6, r3
 8011a5c:	3a01      	subs	r2, #1
 8011a5e:	1c5d      	adds	r5, r3, #1
 8011a60:	42b3      	cmp	r3, r6
 8011a62:	bfa8      	it	ge
 8011a64:	2200      	movge	r2, #0
 8011a66:	18ab      	adds	r3, r5, r2
 8011a68:	e7e1      	b.n	8011a2e <__sccl+0x32>
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	e7da      	b.n	8011a24 <__sccl+0x28>

08011a6e <__submore>:
 8011a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a72:	460c      	mov	r4, r1
 8011a74:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011a76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a7a:	4299      	cmp	r1, r3
 8011a7c:	d11d      	bne.n	8011aba <__submore+0x4c>
 8011a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011a82:	f7fd f9b1 	bl	800ede8 <_malloc_r>
 8011a86:	b918      	cbnz	r0, 8011a90 <__submore+0x22>
 8011a88:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011a96:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011a9a:	6360      	str	r0, [r4, #52]	@ 0x34
 8011a9c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011aa0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011aa4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011aa8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011aac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011ab0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011ab4:	6020      	str	r0, [r4, #0]
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	e7e8      	b.n	8011a8c <__submore+0x1e>
 8011aba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011abc:	0077      	lsls	r7, r6, #1
 8011abe:	463a      	mov	r2, r7
 8011ac0:	f000 f86e 	bl	8011ba0 <_realloc_r>
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0de      	beq.n	8011a88 <__submore+0x1a>
 8011aca:	eb00 0806 	add.w	r8, r0, r6
 8011ace:	4601      	mov	r1, r0
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4640      	mov	r0, r8
 8011ad4:	f7fe f84d 	bl	800fb72 <memcpy>
 8011ad8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011adc:	f8c4 8000 	str.w	r8, [r4]
 8011ae0:	e7e9      	b.n	8011ab6 <__submore+0x48>

08011ae2 <memmove>:
 8011ae2:	4288      	cmp	r0, r1
 8011ae4:	b510      	push	{r4, lr}
 8011ae6:	eb01 0402 	add.w	r4, r1, r2
 8011aea:	d902      	bls.n	8011af2 <memmove+0x10>
 8011aec:	4284      	cmp	r4, r0
 8011aee:	4623      	mov	r3, r4
 8011af0:	d807      	bhi.n	8011b02 <memmove+0x20>
 8011af2:	1e43      	subs	r3, r0, #1
 8011af4:	42a1      	cmp	r1, r4
 8011af6:	d008      	beq.n	8011b0a <memmove+0x28>
 8011af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011afc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b00:	e7f8      	b.n	8011af4 <memmove+0x12>
 8011b02:	4402      	add	r2, r0
 8011b04:	4601      	mov	r1, r0
 8011b06:	428a      	cmp	r2, r1
 8011b08:	d100      	bne.n	8011b0c <memmove+0x2a>
 8011b0a:	bd10      	pop	{r4, pc}
 8011b0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b14:	e7f7      	b.n	8011b06 <memmove+0x24>
	...

08011b18 <__assert_func>:
 8011b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b1a:	4614      	mov	r4, r2
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	4b09      	ldr	r3, [pc, #36]	@ (8011b44 <__assert_func+0x2c>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4605      	mov	r5, r0
 8011b24:	68d8      	ldr	r0, [r3, #12]
 8011b26:	b954      	cbnz	r4, 8011b3e <__assert_func+0x26>
 8011b28:	4b07      	ldr	r3, [pc, #28]	@ (8011b48 <__assert_func+0x30>)
 8011b2a:	461c      	mov	r4, r3
 8011b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b30:	9100      	str	r1, [sp, #0]
 8011b32:	462b      	mov	r3, r5
 8011b34:	4905      	ldr	r1, [pc, #20]	@ (8011b4c <__assert_func+0x34>)
 8011b36:	f000 f95b 	bl	8011df0 <fiprintf>
 8011b3a:	f000 f96b 	bl	8011e14 <abort>
 8011b3e:	4b04      	ldr	r3, [pc, #16]	@ (8011b50 <__assert_func+0x38>)
 8011b40:	e7f4      	b.n	8011b2c <__assert_func+0x14>
 8011b42:	bf00      	nop
 8011b44:	20000024 	.word	0x20000024
 8011b48:	08013ea9 	.word	0x08013ea9
 8011b4c:	08013e7b 	.word	0x08013e7b
 8011b50:	08013e6e 	.word	0x08013e6e

08011b54 <_calloc_r>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	fba1 5402 	umull	r5, r4, r1, r2
 8011b5a:	b93c      	cbnz	r4, 8011b6c <_calloc_r+0x18>
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	f7fd f943 	bl	800ede8 <_malloc_r>
 8011b62:	4606      	mov	r6, r0
 8011b64:	b928      	cbnz	r0, 8011b72 <_calloc_r+0x1e>
 8011b66:	2600      	movs	r6, #0
 8011b68:	4630      	mov	r0, r6
 8011b6a:	bd70      	pop	{r4, r5, r6, pc}
 8011b6c:	220c      	movs	r2, #12
 8011b6e:	6002      	str	r2, [r0, #0]
 8011b70:	e7f9      	b.n	8011b66 <_calloc_r+0x12>
 8011b72:	462a      	mov	r2, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7fd ff6c 	bl	800fa52 <memset>
 8011b7a:	e7f5      	b.n	8011b68 <_calloc_r+0x14>

08011b7c <__ascii_mbtowc>:
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	b901      	cbnz	r1, 8011b82 <__ascii_mbtowc+0x6>
 8011b80:	a901      	add	r1, sp, #4
 8011b82:	b142      	cbz	r2, 8011b96 <__ascii_mbtowc+0x1a>
 8011b84:	b14b      	cbz	r3, 8011b9a <__ascii_mbtowc+0x1e>
 8011b86:	7813      	ldrb	r3, [r2, #0]
 8011b88:	600b      	str	r3, [r1, #0]
 8011b8a:	7812      	ldrb	r2, [r2, #0]
 8011b8c:	1e10      	subs	r0, r2, #0
 8011b8e:	bf18      	it	ne
 8011b90:	2001      	movne	r0, #1
 8011b92:	b002      	add	sp, #8
 8011b94:	4770      	bx	lr
 8011b96:	4610      	mov	r0, r2
 8011b98:	e7fb      	b.n	8011b92 <__ascii_mbtowc+0x16>
 8011b9a:	f06f 0001 	mvn.w	r0, #1
 8011b9e:	e7f8      	b.n	8011b92 <__ascii_mbtowc+0x16>

08011ba0 <_realloc_r>:
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba4:	4680      	mov	r8, r0
 8011ba6:	4615      	mov	r5, r2
 8011ba8:	460c      	mov	r4, r1
 8011baa:	b921      	cbnz	r1, 8011bb6 <_realloc_r+0x16>
 8011bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	f7fd b919 	b.w	800ede8 <_malloc_r>
 8011bb6:	b92a      	cbnz	r2, 8011bc4 <_realloc_r+0x24>
 8011bb8:	f7fe fe36 	bl	8010828 <_free_r>
 8011bbc:	2400      	movs	r4, #0
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc4:	f000 f92d 	bl	8011e22 <_malloc_usable_size_r>
 8011bc8:	4285      	cmp	r5, r0
 8011bca:	4606      	mov	r6, r0
 8011bcc:	d802      	bhi.n	8011bd4 <_realloc_r+0x34>
 8011bce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011bd2:	d8f4      	bhi.n	8011bbe <_realloc_r+0x1e>
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	4640      	mov	r0, r8
 8011bd8:	f7fd f906 	bl	800ede8 <_malloc_r>
 8011bdc:	4607      	mov	r7, r0
 8011bde:	2800      	cmp	r0, #0
 8011be0:	d0ec      	beq.n	8011bbc <_realloc_r+0x1c>
 8011be2:	42b5      	cmp	r5, r6
 8011be4:	462a      	mov	r2, r5
 8011be6:	4621      	mov	r1, r4
 8011be8:	bf28      	it	cs
 8011bea:	4632      	movcs	r2, r6
 8011bec:	f7fd ffc1 	bl	800fb72 <memcpy>
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	f7fe fe18 	bl	8010828 <_free_r>
 8011bf8:	463c      	mov	r4, r7
 8011bfa:	e7e0      	b.n	8011bbe <_realloc_r+0x1e>

08011bfc <_strtol_l.constprop.0>:
 8011bfc:	2b24      	cmp	r3, #36	@ 0x24
 8011bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c02:	4686      	mov	lr, r0
 8011c04:	4690      	mov	r8, r2
 8011c06:	d801      	bhi.n	8011c0c <_strtol_l.constprop.0+0x10>
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d106      	bne.n	8011c1a <_strtol_l.constprop.0+0x1e>
 8011c0c:	f7fd ff84 	bl	800fb18 <__errno>
 8011c10:	2316      	movs	r3, #22
 8011c12:	6003      	str	r3, [r0, #0]
 8011c14:	2000      	movs	r0, #0
 8011c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1a:	4834      	ldr	r0, [pc, #208]	@ (8011cec <_strtol_l.constprop.0+0xf0>)
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	462a      	mov	r2, r5
 8011c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c24:	5d06      	ldrb	r6, [r0, r4]
 8011c26:	f016 0608 	ands.w	r6, r6, #8
 8011c2a:	d1f8      	bne.n	8011c1e <_strtol_l.constprop.0+0x22>
 8011c2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c2e:	d12d      	bne.n	8011c8c <_strtol_l.constprop.0+0x90>
 8011c30:	782c      	ldrb	r4, [r5, #0]
 8011c32:	2601      	movs	r6, #1
 8011c34:	1c95      	adds	r5, r2, #2
 8011c36:	f033 0210 	bics.w	r2, r3, #16
 8011c3a:	d109      	bne.n	8011c50 <_strtol_l.constprop.0+0x54>
 8011c3c:	2c30      	cmp	r4, #48	@ 0x30
 8011c3e:	d12a      	bne.n	8011c96 <_strtol_l.constprop.0+0x9a>
 8011c40:	782a      	ldrb	r2, [r5, #0]
 8011c42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011c46:	2a58      	cmp	r2, #88	@ 0x58
 8011c48:	d125      	bne.n	8011c96 <_strtol_l.constprop.0+0x9a>
 8011c4a:	786c      	ldrb	r4, [r5, #1]
 8011c4c:	2310      	movs	r3, #16
 8011c4e:	3502      	adds	r5, #2
 8011c50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011c54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011c58:	2200      	movs	r2, #0
 8011c5a:	fbbc f9f3 	udiv	r9, ip, r3
 8011c5e:	4610      	mov	r0, r2
 8011c60:	fb03 ca19 	mls	sl, r3, r9, ip
 8011c64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011c68:	2f09      	cmp	r7, #9
 8011c6a:	d81b      	bhi.n	8011ca4 <_strtol_l.constprop.0+0xa8>
 8011c6c:	463c      	mov	r4, r7
 8011c6e:	42a3      	cmp	r3, r4
 8011c70:	dd27      	ble.n	8011cc2 <_strtol_l.constprop.0+0xc6>
 8011c72:	1c57      	adds	r7, r2, #1
 8011c74:	d007      	beq.n	8011c86 <_strtol_l.constprop.0+0x8a>
 8011c76:	4581      	cmp	r9, r0
 8011c78:	d320      	bcc.n	8011cbc <_strtol_l.constprop.0+0xc0>
 8011c7a:	d101      	bne.n	8011c80 <_strtol_l.constprop.0+0x84>
 8011c7c:	45a2      	cmp	sl, r4
 8011c7e:	db1d      	blt.n	8011cbc <_strtol_l.constprop.0+0xc0>
 8011c80:	fb00 4003 	mla	r0, r0, r3, r4
 8011c84:	2201      	movs	r2, #1
 8011c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c8a:	e7eb      	b.n	8011c64 <_strtol_l.constprop.0+0x68>
 8011c8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c8e:	bf04      	itt	eq
 8011c90:	782c      	ldrbeq	r4, [r5, #0]
 8011c92:	1c95      	addeq	r5, r2, #2
 8011c94:	e7cf      	b.n	8011c36 <_strtol_l.constprop.0+0x3a>
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1da      	bne.n	8011c50 <_strtol_l.constprop.0+0x54>
 8011c9a:	2c30      	cmp	r4, #48	@ 0x30
 8011c9c:	bf0c      	ite	eq
 8011c9e:	2308      	moveq	r3, #8
 8011ca0:	230a      	movne	r3, #10
 8011ca2:	e7d5      	b.n	8011c50 <_strtol_l.constprop.0+0x54>
 8011ca4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011ca8:	2f19      	cmp	r7, #25
 8011caa:	d801      	bhi.n	8011cb0 <_strtol_l.constprop.0+0xb4>
 8011cac:	3c37      	subs	r4, #55	@ 0x37
 8011cae:	e7de      	b.n	8011c6e <_strtol_l.constprop.0+0x72>
 8011cb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011cb4:	2f19      	cmp	r7, #25
 8011cb6:	d804      	bhi.n	8011cc2 <_strtol_l.constprop.0+0xc6>
 8011cb8:	3c57      	subs	r4, #87	@ 0x57
 8011cba:	e7d8      	b.n	8011c6e <_strtol_l.constprop.0+0x72>
 8011cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc0:	e7e1      	b.n	8011c86 <_strtol_l.constprop.0+0x8a>
 8011cc2:	1c53      	adds	r3, r2, #1
 8011cc4:	d108      	bne.n	8011cd8 <_strtol_l.constprop.0+0xdc>
 8011cc6:	2322      	movs	r3, #34	@ 0x22
 8011cc8:	f8ce 3000 	str.w	r3, [lr]
 8011ccc:	4660      	mov	r0, ip
 8011cce:	f1b8 0f00 	cmp.w	r8, #0
 8011cd2:	d0a0      	beq.n	8011c16 <_strtol_l.constprop.0+0x1a>
 8011cd4:	1e69      	subs	r1, r5, #1
 8011cd6:	e006      	b.n	8011ce6 <_strtol_l.constprop.0+0xea>
 8011cd8:	b106      	cbz	r6, 8011cdc <_strtol_l.constprop.0+0xe0>
 8011cda:	4240      	negs	r0, r0
 8011cdc:	f1b8 0f00 	cmp.w	r8, #0
 8011ce0:	d099      	beq.n	8011c16 <_strtol_l.constprop.0+0x1a>
 8011ce2:	2a00      	cmp	r2, #0
 8011ce4:	d1f6      	bne.n	8011cd4 <_strtol_l.constprop.0+0xd8>
 8011ce6:	f8c8 1000 	str.w	r1, [r8]
 8011cea:	e794      	b.n	8011c16 <_strtol_l.constprop.0+0x1a>
 8011cec:	08013eab 	.word	0x08013eab

08011cf0 <_strtol_r>:
 8011cf0:	f7ff bf84 	b.w	8011bfc <_strtol_l.constprop.0>

08011cf4 <_strtoul_l.constprop.0>:
 8011cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cf8:	4e34      	ldr	r6, [pc, #208]	@ (8011dcc <_strtoul_l.constprop.0+0xd8>)
 8011cfa:	4686      	mov	lr, r0
 8011cfc:	460d      	mov	r5, r1
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d04:	5d37      	ldrb	r7, [r6, r4]
 8011d06:	f017 0708 	ands.w	r7, r7, #8
 8011d0a:	d1f8      	bne.n	8011cfe <_strtoul_l.constprop.0+0xa>
 8011d0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011d0e:	d12f      	bne.n	8011d70 <_strtoul_l.constprop.0+0x7c>
 8011d10:	782c      	ldrb	r4, [r5, #0]
 8011d12:	2701      	movs	r7, #1
 8011d14:	1c85      	adds	r5, r0, #2
 8011d16:	f033 0010 	bics.w	r0, r3, #16
 8011d1a:	d109      	bne.n	8011d30 <_strtoul_l.constprop.0+0x3c>
 8011d1c:	2c30      	cmp	r4, #48	@ 0x30
 8011d1e:	d12c      	bne.n	8011d7a <_strtoul_l.constprop.0+0x86>
 8011d20:	7828      	ldrb	r0, [r5, #0]
 8011d22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011d26:	2858      	cmp	r0, #88	@ 0x58
 8011d28:	d127      	bne.n	8011d7a <_strtoul_l.constprop.0+0x86>
 8011d2a:	786c      	ldrb	r4, [r5, #1]
 8011d2c:	2310      	movs	r3, #16
 8011d2e:	3502      	adds	r5, #2
 8011d30:	f04f 38ff 	mov.w	r8, #4294967295
 8011d34:	2600      	movs	r6, #0
 8011d36:	fbb8 f8f3 	udiv	r8, r8, r3
 8011d3a:	fb03 f908 	mul.w	r9, r3, r8
 8011d3e:	ea6f 0909 	mvn.w	r9, r9
 8011d42:	4630      	mov	r0, r6
 8011d44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011d48:	f1bc 0f09 	cmp.w	ip, #9
 8011d4c:	d81c      	bhi.n	8011d88 <_strtoul_l.constprop.0+0x94>
 8011d4e:	4664      	mov	r4, ip
 8011d50:	42a3      	cmp	r3, r4
 8011d52:	dd2a      	ble.n	8011daa <_strtoul_l.constprop.0+0xb6>
 8011d54:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011d58:	d007      	beq.n	8011d6a <_strtoul_l.constprop.0+0x76>
 8011d5a:	4580      	cmp	r8, r0
 8011d5c:	d322      	bcc.n	8011da4 <_strtoul_l.constprop.0+0xb0>
 8011d5e:	d101      	bne.n	8011d64 <_strtoul_l.constprop.0+0x70>
 8011d60:	45a1      	cmp	r9, r4
 8011d62:	db1f      	blt.n	8011da4 <_strtoul_l.constprop.0+0xb0>
 8011d64:	fb00 4003 	mla	r0, r0, r3, r4
 8011d68:	2601      	movs	r6, #1
 8011d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d6e:	e7e9      	b.n	8011d44 <_strtoul_l.constprop.0+0x50>
 8011d70:	2c2b      	cmp	r4, #43	@ 0x2b
 8011d72:	bf04      	itt	eq
 8011d74:	782c      	ldrbeq	r4, [r5, #0]
 8011d76:	1c85      	addeq	r5, r0, #2
 8011d78:	e7cd      	b.n	8011d16 <_strtoul_l.constprop.0+0x22>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1d8      	bne.n	8011d30 <_strtoul_l.constprop.0+0x3c>
 8011d7e:	2c30      	cmp	r4, #48	@ 0x30
 8011d80:	bf0c      	ite	eq
 8011d82:	2308      	moveq	r3, #8
 8011d84:	230a      	movne	r3, #10
 8011d86:	e7d3      	b.n	8011d30 <_strtoul_l.constprop.0+0x3c>
 8011d88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011d8c:	f1bc 0f19 	cmp.w	ip, #25
 8011d90:	d801      	bhi.n	8011d96 <_strtoul_l.constprop.0+0xa2>
 8011d92:	3c37      	subs	r4, #55	@ 0x37
 8011d94:	e7dc      	b.n	8011d50 <_strtoul_l.constprop.0+0x5c>
 8011d96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011d9a:	f1bc 0f19 	cmp.w	ip, #25
 8011d9e:	d804      	bhi.n	8011daa <_strtoul_l.constprop.0+0xb6>
 8011da0:	3c57      	subs	r4, #87	@ 0x57
 8011da2:	e7d5      	b.n	8011d50 <_strtoul_l.constprop.0+0x5c>
 8011da4:	f04f 36ff 	mov.w	r6, #4294967295
 8011da8:	e7df      	b.n	8011d6a <_strtoul_l.constprop.0+0x76>
 8011daa:	1c73      	adds	r3, r6, #1
 8011dac:	d106      	bne.n	8011dbc <_strtoul_l.constprop.0+0xc8>
 8011dae:	2322      	movs	r3, #34	@ 0x22
 8011db0:	f8ce 3000 	str.w	r3, [lr]
 8011db4:	4630      	mov	r0, r6
 8011db6:	b932      	cbnz	r2, 8011dc6 <_strtoul_l.constprop.0+0xd2>
 8011db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbc:	b107      	cbz	r7, 8011dc0 <_strtoul_l.constprop.0+0xcc>
 8011dbe:	4240      	negs	r0, r0
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	d0f9      	beq.n	8011db8 <_strtoul_l.constprop.0+0xc4>
 8011dc4:	b106      	cbz	r6, 8011dc8 <_strtoul_l.constprop.0+0xd4>
 8011dc6:	1e69      	subs	r1, r5, #1
 8011dc8:	6011      	str	r1, [r2, #0]
 8011dca:	e7f5      	b.n	8011db8 <_strtoul_l.constprop.0+0xc4>
 8011dcc:	08013eab 	.word	0x08013eab

08011dd0 <_strtoul_r>:
 8011dd0:	f7ff bf90 	b.w	8011cf4 <_strtoul_l.constprop.0>

08011dd4 <__ascii_wctomb>:
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	4608      	mov	r0, r1
 8011dd8:	b141      	cbz	r1, 8011dec <__ascii_wctomb+0x18>
 8011dda:	2aff      	cmp	r2, #255	@ 0xff
 8011ddc:	d904      	bls.n	8011de8 <__ascii_wctomb+0x14>
 8011dde:	228a      	movs	r2, #138	@ 0x8a
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	f04f 30ff 	mov.w	r0, #4294967295
 8011de6:	4770      	bx	lr
 8011de8:	700a      	strb	r2, [r1, #0]
 8011dea:	2001      	movs	r0, #1
 8011dec:	4770      	bx	lr
	...

08011df0 <fiprintf>:
 8011df0:	b40e      	push	{r1, r2, r3}
 8011df2:	b503      	push	{r0, r1, lr}
 8011df4:	4601      	mov	r1, r0
 8011df6:	ab03      	add	r3, sp, #12
 8011df8:	4805      	ldr	r0, [pc, #20]	@ (8011e10 <fiprintf+0x20>)
 8011dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dfe:	6800      	ldr	r0, [r0, #0]
 8011e00:	9301      	str	r3, [sp, #4]
 8011e02:	f000 f83f 	bl	8011e84 <_vfiprintf_r>
 8011e06:	b002      	add	sp, #8
 8011e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e0c:	b003      	add	sp, #12
 8011e0e:	4770      	bx	lr
 8011e10:	20000024 	.word	0x20000024

08011e14 <abort>:
 8011e14:	b508      	push	{r3, lr}
 8011e16:	2006      	movs	r0, #6
 8011e18:	f000 fa08 	bl	801222c <raise>
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	f7f0 fd6b 	bl	80028f8 <_exit>

08011e22 <_malloc_usable_size_r>:
 8011e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e26:	1f18      	subs	r0, r3, #4
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	bfbc      	itt	lt
 8011e2c:	580b      	ldrlt	r3, [r1, r0]
 8011e2e:	18c0      	addlt	r0, r0, r3
 8011e30:	4770      	bx	lr

08011e32 <__sfputc_r>:
 8011e32:	6893      	ldr	r3, [r2, #8]
 8011e34:	3b01      	subs	r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	b410      	push	{r4}
 8011e3a:	6093      	str	r3, [r2, #8]
 8011e3c:	da08      	bge.n	8011e50 <__sfputc_r+0x1e>
 8011e3e:	6994      	ldr	r4, [r2, #24]
 8011e40:	42a3      	cmp	r3, r4
 8011e42:	db01      	blt.n	8011e48 <__sfputc_r+0x16>
 8011e44:	290a      	cmp	r1, #10
 8011e46:	d103      	bne.n	8011e50 <__sfputc_r+0x1e>
 8011e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e4c:	f000 b932 	b.w	80120b4 <__swbuf_r>
 8011e50:	6813      	ldr	r3, [r2, #0]
 8011e52:	1c58      	adds	r0, r3, #1
 8011e54:	6010      	str	r0, [r2, #0]
 8011e56:	7019      	strb	r1, [r3, #0]
 8011e58:	4608      	mov	r0, r1
 8011e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <__sfputs_r>:
 8011e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e62:	4606      	mov	r6, r0
 8011e64:	460f      	mov	r7, r1
 8011e66:	4614      	mov	r4, r2
 8011e68:	18d5      	adds	r5, r2, r3
 8011e6a:	42ac      	cmp	r4, r5
 8011e6c:	d101      	bne.n	8011e72 <__sfputs_r+0x12>
 8011e6e:	2000      	movs	r0, #0
 8011e70:	e007      	b.n	8011e82 <__sfputs_r+0x22>
 8011e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e76:	463a      	mov	r2, r7
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f7ff ffda 	bl	8011e32 <__sfputc_r>
 8011e7e:	1c43      	adds	r3, r0, #1
 8011e80:	d1f3      	bne.n	8011e6a <__sfputs_r+0xa>
 8011e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e84 <_vfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	460d      	mov	r5, r1
 8011e8a:	b09d      	sub	sp, #116	@ 0x74
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	4698      	mov	r8, r3
 8011e90:	4606      	mov	r6, r0
 8011e92:	b118      	cbz	r0, 8011e9c <_vfiprintf_r+0x18>
 8011e94:	6a03      	ldr	r3, [r0, #32]
 8011e96:	b90b      	cbnz	r3, 8011e9c <_vfiprintf_r+0x18>
 8011e98:	f7fd fd16 	bl	800f8c8 <__sinit>
 8011e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e9e:	07d9      	lsls	r1, r3, #31
 8011ea0:	d405      	bmi.n	8011eae <_vfiprintf_r+0x2a>
 8011ea2:	89ab      	ldrh	r3, [r5, #12]
 8011ea4:	059a      	lsls	r2, r3, #22
 8011ea6:	d402      	bmi.n	8011eae <_vfiprintf_r+0x2a>
 8011ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eaa:	f7fd fe60 	bl	800fb6e <__retarget_lock_acquire_recursive>
 8011eae:	89ab      	ldrh	r3, [r5, #12]
 8011eb0:	071b      	lsls	r3, r3, #28
 8011eb2:	d501      	bpl.n	8011eb8 <_vfiprintf_r+0x34>
 8011eb4:	692b      	ldr	r3, [r5, #16]
 8011eb6:	b99b      	cbnz	r3, 8011ee0 <_vfiprintf_r+0x5c>
 8011eb8:	4629      	mov	r1, r5
 8011eba:	4630      	mov	r0, r6
 8011ebc:	f000 f938 	bl	8012130 <__swsetup_r>
 8011ec0:	b170      	cbz	r0, 8011ee0 <_vfiprintf_r+0x5c>
 8011ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ec4:	07dc      	lsls	r4, r3, #31
 8011ec6:	d504      	bpl.n	8011ed2 <_vfiprintf_r+0x4e>
 8011ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ecc:	b01d      	add	sp, #116	@ 0x74
 8011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	0598      	lsls	r0, r3, #22
 8011ed6:	d4f7      	bmi.n	8011ec8 <_vfiprintf_r+0x44>
 8011ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eda:	f7fd fe49 	bl	800fb70 <__retarget_lock_release_recursive>
 8011ede:	e7f3      	b.n	8011ec8 <_vfiprintf_r+0x44>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ee4:	2320      	movs	r3, #32
 8011ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eee:	2330      	movs	r3, #48	@ 0x30
 8011ef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80120a0 <_vfiprintf_r+0x21c>
 8011ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ef8:	f04f 0901 	mov.w	r9, #1
 8011efc:	4623      	mov	r3, r4
 8011efe:	469a      	mov	sl, r3
 8011f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f04:	b10a      	cbz	r2, 8011f0a <_vfiprintf_r+0x86>
 8011f06:	2a25      	cmp	r2, #37	@ 0x25
 8011f08:	d1f9      	bne.n	8011efe <_vfiprintf_r+0x7a>
 8011f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011f0e:	d00b      	beq.n	8011f28 <_vfiprintf_r+0xa4>
 8011f10:	465b      	mov	r3, fp
 8011f12:	4622      	mov	r2, r4
 8011f14:	4629      	mov	r1, r5
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff ffa2 	bl	8011e60 <__sfputs_r>
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	f000 80a7 	beq.w	8012070 <_vfiprintf_r+0x1ec>
 8011f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f24:	445a      	add	r2, fp
 8011f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f28:	f89a 3000 	ldrb.w	r3, [sl]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 809f 	beq.w	8012070 <_vfiprintf_r+0x1ec>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f04f 32ff 	mov.w	r2, #4294967295
 8011f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f3c:	f10a 0a01 	add.w	sl, sl, #1
 8011f40:	9304      	str	r3, [sp, #16]
 8011f42:	9307      	str	r3, [sp, #28]
 8011f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f4a:	4654      	mov	r4, sl
 8011f4c:	2205      	movs	r2, #5
 8011f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f52:	4853      	ldr	r0, [pc, #332]	@ (80120a0 <_vfiprintf_r+0x21c>)
 8011f54:	f7ee f94c 	bl	80001f0 <memchr>
 8011f58:	9a04      	ldr	r2, [sp, #16]
 8011f5a:	b9d8      	cbnz	r0, 8011f94 <_vfiprintf_r+0x110>
 8011f5c:	06d1      	lsls	r1, r2, #27
 8011f5e:	bf44      	itt	mi
 8011f60:	2320      	movmi	r3, #32
 8011f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f66:	0713      	lsls	r3, r2, #28
 8011f68:	bf44      	itt	mi
 8011f6a:	232b      	movmi	r3, #43	@ 0x2b
 8011f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f70:	f89a 3000 	ldrb.w	r3, [sl]
 8011f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f76:	d015      	beq.n	8011fa4 <_vfiprintf_r+0x120>
 8011f78:	9a07      	ldr	r2, [sp, #28]
 8011f7a:	4654      	mov	r4, sl
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	f04f 0c0a 	mov.w	ip, #10
 8011f82:	4621      	mov	r1, r4
 8011f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f88:	3b30      	subs	r3, #48	@ 0x30
 8011f8a:	2b09      	cmp	r3, #9
 8011f8c:	d94b      	bls.n	8012026 <_vfiprintf_r+0x1a2>
 8011f8e:	b1b0      	cbz	r0, 8011fbe <_vfiprintf_r+0x13a>
 8011f90:	9207      	str	r2, [sp, #28]
 8011f92:	e014      	b.n	8011fbe <_vfiprintf_r+0x13a>
 8011f94:	eba0 0308 	sub.w	r3, r0, r8
 8011f98:	fa09 f303 	lsl.w	r3, r9, r3
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	46a2      	mov	sl, r4
 8011fa2:	e7d2      	b.n	8011f4a <_vfiprintf_r+0xc6>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	1d19      	adds	r1, r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	9103      	str	r1, [sp, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	bfbb      	ittet	lt
 8011fb0:	425b      	neglt	r3, r3
 8011fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011fb6:	9307      	strge	r3, [sp, #28]
 8011fb8:	9307      	strlt	r3, [sp, #28]
 8011fba:	bfb8      	it	lt
 8011fbc:	9204      	strlt	r2, [sp, #16]
 8011fbe:	7823      	ldrb	r3, [r4, #0]
 8011fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fc2:	d10a      	bne.n	8011fda <_vfiprintf_r+0x156>
 8011fc4:	7863      	ldrb	r3, [r4, #1]
 8011fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fc8:	d132      	bne.n	8012030 <_vfiprintf_r+0x1ac>
 8011fca:	9b03      	ldr	r3, [sp, #12]
 8011fcc:	1d1a      	adds	r2, r3, #4
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	9203      	str	r2, [sp, #12]
 8011fd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fd6:	3402      	adds	r4, #2
 8011fd8:	9305      	str	r3, [sp, #20]
 8011fda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80120b0 <_vfiprintf_r+0x22c>
 8011fde:	7821      	ldrb	r1, [r4, #0]
 8011fe0:	2203      	movs	r2, #3
 8011fe2:	4650      	mov	r0, sl
 8011fe4:	f7ee f904 	bl	80001f0 <memchr>
 8011fe8:	b138      	cbz	r0, 8011ffa <_vfiprintf_r+0x176>
 8011fea:	9b04      	ldr	r3, [sp, #16]
 8011fec:	eba0 000a 	sub.w	r0, r0, sl
 8011ff0:	2240      	movs	r2, #64	@ 0x40
 8011ff2:	4082      	lsls	r2, r0
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	3401      	adds	r4, #1
 8011ff8:	9304      	str	r3, [sp, #16]
 8011ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffe:	4829      	ldr	r0, [pc, #164]	@ (80120a4 <_vfiprintf_r+0x220>)
 8012000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012004:	2206      	movs	r2, #6
 8012006:	f7ee f8f3 	bl	80001f0 <memchr>
 801200a:	2800      	cmp	r0, #0
 801200c:	d03f      	beq.n	801208e <_vfiprintf_r+0x20a>
 801200e:	4b26      	ldr	r3, [pc, #152]	@ (80120a8 <_vfiprintf_r+0x224>)
 8012010:	bb1b      	cbnz	r3, 801205a <_vfiprintf_r+0x1d6>
 8012012:	9b03      	ldr	r3, [sp, #12]
 8012014:	3307      	adds	r3, #7
 8012016:	f023 0307 	bic.w	r3, r3, #7
 801201a:	3308      	adds	r3, #8
 801201c:	9303      	str	r3, [sp, #12]
 801201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012020:	443b      	add	r3, r7
 8012022:	9309      	str	r3, [sp, #36]	@ 0x24
 8012024:	e76a      	b.n	8011efc <_vfiprintf_r+0x78>
 8012026:	fb0c 3202 	mla	r2, ip, r2, r3
 801202a:	460c      	mov	r4, r1
 801202c:	2001      	movs	r0, #1
 801202e:	e7a8      	b.n	8011f82 <_vfiprintf_r+0xfe>
 8012030:	2300      	movs	r3, #0
 8012032:	3401      	adds	r4, #1
 8012034:	9305      	str	r3, [sp, #20]
 8012036:	4619      	mov	r1, r3
 8012038:	f04f 0c0a 	mov.w	ip, #10
 801203c:	4620      	mov	r0, r4
 801203e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012042:	3a30      	subs	r2, #48	@ 0x30
 8012044:	2a09      	cmp	r2, #9
 8012046:	d903      	bls.n	8012050 <_vfiprintf_r+0x1cc>
 8012048:	2b00      	cmp	r3, #0
 801204a:	d0c6      	beq.n	8011fda <_vfiprintf_r+0x156>
 801204c:	9105      	str	r1, [sp, #20]
 801204e:	e7c4      	b.n	8011fda <_vfiprintf_r+0x156>
 8012050:	fb0c 2101 	mla	r1, ip, r1, r2
 8012054:	4604      	mov	r4, r0
 8012056:	2301      	movs	r3, #1
 8012058:	e7f0      	b.n	801203c <_vfiprintf_r+0x1b8>
 801205a:	ab03      	add	r3, sp, #12
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	462a      	mov	r2, r5
 8012060:	4b12      	ldr	r3, [pc, #72]	@ (80120ac <_vfiprintf_r+0x228>)
 8012062:	a904      	add	r1, sp, #16
 8012064:	4630      	mov	r0, r6
 8012066:	f7fc ffeb 	bl	800f040 <_printf_float>
 801206a:	4607      	mov	r7, r0
 801206c:	1c78      	adds	r0, r7, #1
 801206e:	d1d6      	bne.n	801201e <_vfiprintf_r+0x19a>
 8012070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	d405      	bmi.n	8012082 <_vfiprintf_r+0x1fe>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	059a      	lsls	r2, r3, #22
 801207a:	d402      	bmi.n	8012082 <_vfiprintf_r+0x1fe>
 801207c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801207e:	f7fd fd77 	bl	800fb70 <__retarget_lock_release_recursive>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	065b      	lsls	r3, r3, #25
 8012086:	f53f af1f 	bmi.w	8011ec8 <_vfiprintf_r+0x44>
 801208a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801208c:	e71e      	b.n	8011ecc <_vfiprintf_r+0x48>
 801208e:	ab03      	add	r3, sp, #12
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	462a      	mov	r2, r5
 8012094:	4b05      	ldr	r3, [pc, #20]	@ (80120ac <_vfiprintf_r+0x228>)
 8012096:	a904      	add	r1, sp, #16
 8012098:	4630      	mov	r0, r6
 801209a:	f7fd fa69 	bl	800f570 <_printf_i>
 801209e:	e7e4      	b.n	801206a <_vfiprintf_r+0x1e6>
 80120a0:	08013e38 	.word	0x08013e38
 80120a4:	08013e42 	.word	0x08013e42
 80120a8:	0800f041 	.word	0x0800f041
 80120ac:	08011e61 	.word	0x08011e61
 80120b0:	08013e3e 	.word	0x08013e3e

080120b4 <__swbuf_r>:
 80120b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b6:	460e      	mov	r6, r1
 80120b8:	4614      	mov	r4, r2
 80120ba:	4605      	mov	r5, r0
 80120bc:	b118      	cbz	r0, 80120c6 <__swbuf_r+0x12>
 80120be:	6a03      	ldr	r3, [r0, #32]
 80120c0:	b90b      	cbnz	r3, 80120c6 <__swbuf_r+0x12>
 80120c2:	f7fd fc01 	bl	800f8c8 <__sinit>
 80120c6:	69a3      	ldr	r3, [r4, #24]
 80120c8:	60a3      	str	r3, [r4, #8]
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	071a      	lsls	r2, r3, #28
 80120ce:	d501      	bpl.n	80120d4 <__swbuf_r+0x20>
 80120d0:	6923      	ldr	r3, [r4, #16]
 80120d2:	b943      	cbnz	r3, 80120e6 <__swbuf_r+0x32>
 80120d4:	4621      	mov	r1, r4
 80120d6:	4628      	mov	r0, r5
 80120d8:	f000 f82a 	bl	8012130 <__swsetup_r>
 80120dc:	b118      	cbz	r0, 80120e6 <__swbuf_r+0x32>
 80120de:	f04f 37ff 	mov.w	r7, #4294967295
 80120e2:	4638      	mov	r0, r7
 80120e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	6922      	ldr	r2, [r4, #16]
 80120ea:	1a98      	subs	r0, r3, r2
 80120ec:	6963      	ldr	r3, [r4, #20]
 80120ee:	b2f6      	uxtb	r6, r6
 80120f0:	4283      	cmp	r3, r0
 80120f2:	4637      	mov	r7, r6
 80120f4:	dc05      	bgt.n	8012102 <__swbuf_r+0x4e>
 80120f6:	4621      	mov	r1, r4
 80120f8:	4628      	mov	r0, r5
 80120fa:	f7ff fc57 	bl	80119ac <_fflush_r>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d1ed      	bne.n	80120de <__swbuf_r+0x2a>
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	3b01      	subs	r3, #1
 8012106:	60a3      	str	r3, [r4, #8]
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	6022      	str	r2, [r4, #0]
 801210e:	701e      	strb	r6, [r3, #0]
 8012110:	6962      	ldr	r2, [r4, #20]
 8012112:	1c43      	adds	r3, r0, #1
 8012114:	429a      	cmp	r2, r3
 8012116:	d004      	beq.n	8012122 <__swbuf_r+0x6e>
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	07db      	lsls	r3, r3, #31
 801211c:	d5e1      	bpl.n	80120e2 <__swbuf_r+0x2e>
 801211e:	2e0a      	cmp	r6, #10
 8012120:	d1df      	bne.n	80120e2 <__swbuf_r+0x2e>
 8012122:	4621      	mov	r1, r4
 8012124:	4628      	mov	r0, r5
 8012126:	f7ff fc41 	bl	80119ac <_fflush_r>
 801212a:	2800      	cmp	r0, #0
 801212c:	d0d9      	beq.n	80120e2 <__swbuf_r+0x2e>
 801212e:	e7d6      	b.n	80120de <__swbuf_r+0x2a>

08012130 <__swsetup_r>:
 8012130:	b538      	push	{r3, r4, r5, lr}
 8012132:	4b29      	ldr	r3, [pc, #164]	@ (80121d8 <__swsetup_r+0xa8>)
 8012134:	4605      	mov	r5, r0
 8012136:	6818      	ldr	r0, [r3, #0]
 8012138:	460c      	mov	r4, r1
 801213a:	b118      	cbz	r0, 8012144 <__swsetup_r+0x14>
 801213c:	6a03      	ldr	r3, [r0, #32]
 801213e:	b90b      	cbnz	r3, 8012144 <__swsetup_r+0x14>
 8012140:	f7fd fbc2 	bl	800f8c8 <__sinit>
 8012144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012148:	0719      	lsls	r1, r3, #28
 801214a:	d422      	bmi.n	8012192 <__swsetup_r+0x62>
 801214c:	06da      	lsls	r2, r3, #27
 801214e:	d407      	bmi.n	8012160 <__swsetup_r+0x30>
 8012150:	2209      	movs	r2, #9
 8012152:	602a      	str	r2, [r5, #0]
 8012154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012158:	81a3      	strh	r3, [r4, #12]
 801215a:	f04f 30ff 	mov.w	r0, #4294967295
 801215e:	e033      	b.n	80121c8 <__swsetup_r+0x98>
 8012160:	0758      	lsls	r0, r3, #29
 8012162:	d512      	bpl.n	801218a <__swsetup_r+0x5a>
 8012164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012166:	b141      	cbz	r1, 801217a <__swsetup_r+0x4a>
 8012168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801216c:	4299      	cmp	r1, r3
 801216e:	d002      	beq.n	8012176 <__swsetup_r+0x46>
 8012170:	4628      	mov	r0, r5
 8012172:	f7fe fb59 	bl	8010828 <_free_r>
 8012176:	2300      	movs	r3, #0
 8012178:	6363      	str	r3, [r4, #52]	@ 0x34
 801217a:	89a3      	ldrh	r3, [r4, #12]
 801217c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012180:	81a3      	strh	r3, [r4, #12]
 8012182:	2300      	movs	r3, #0
 8012184:	6063      	str	r3, [r4, #4]
 8012186:	6923      	ldr	r3, [r4, #16]
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	89a3      	ldrh	r3, [r4, #12]
 801218c:	f043 0308 	orr.w	r3, r3, #8
 8012190:	81a3      	strh	r3, [r4, #12]
 8012192:	6923      	ldr	r3, [r4, #16]
 8012194:	b94b      	cbnz	r3, 80121aa <__swsetup_r+0x7a>
 8012196:	89a3      	ldrh	r3, [r4, #12]
 8012198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801219c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121a0:	d003      	beq.n	80121aa <__swsetup_r+0x7a>
 80121a2:	4621      	mov	r1, r4
 80121a4:	4628      	mov	r0, r5
 80121a6:	f000 f883 	bl	80122b0 <__smakebuf_r>
 80121aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ae:	f013 0201 	ands.w	r2, r3, #1
 80121b2:	d00a      	beq.n	80121ca <__swsetup_r+0x9a>
 80121b4:	2200      	movs	r2, #0
 80121b6:	60a2      	str	r2, [r4, #8]
 80121b8:	6962      	ldr	r2, [r4, #20]
 80121ba:	4252      	negs	r2, r2
 80121bc:	61a2      	str	r2, [r4, #24]
 80121be:	6922      	ldr	r2, [r4, #16]
 80121c0:	b942      	cbnz	r2, 80121d4 <__swsetup_r+0xa4>
 80121c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121c6:	d1c5      	bne.n	8012154 <__swsetup_r+0x24>
 80121c8:	bd38      	pop	{r3, r4, r5, pc}
 80121ca:	0799      	lsls	r1, r3, #30
 80121cc:	bf58      	it	pl
 80121ce:	6962      	ldrpl	r2, [r4, #20]
 80121d0:	60a2      	str	r2, [r4, #8]
 80121d2:	e7f4      	b.n	80121be <__swsetup_r+0x8e>
 80121d4:	2000      	movs	r0, #0
 80121d6:	e7f7      	b.n	80121c8 <__swsetup_r+0x98>
 80121d8:	20000024 	.word	0x20000024

080121dc <_raise_r>:
 80121dc:	291f      	cmp	r1, #31
 80121de:	b538      	push	{r3, r4, r5, lr}
 80121e0:	4605      	mov	r5, r0
 80121e2:	460c      	mov	r4, r1
 80121e4:	d904      	bls.n	80121f0 <_raise_r+0x14>
 80121e6:	2316      	movs	r3, #22
 80121e8:	6003      	str	r3, [r0, #0]
 80121ea:	f04f 30ff 	mov.w	r0, #4294967295
 80121ee:	bd38      	pop	{r3, r4, r5, pc}
 80121f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80121f2:	b112      	cbz	r2, 80121fa <_raise_r+0x1e>
 80121f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121f8:	b94b      	cbnz	r3, 801220e <_raise_r+0x32>
 80121fa:	4628      	mov	r0, r5
 80121fc:	f000 f830 	bl	8012260 <_getpid_r>
 8012200:	4622      	mov	r2, r4
 8012202:	4601      	mov	r1, r0
 8012204:	4628      	mov	r0, r5
 8012206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801220a:	f000 b817 	b.w	801223c <_kill_r>
 801220e:	2b01      	cmp	r3, #1
 8012210:	d00a      	beq.n	8012228 <_raise_r+0x4c>
 8012212:	1c59      	adds	r1, r3, #1
 8012214:	d103      	bne.n	801221e <_raise_r+0x42>
 8012216:	2316      	movs	r3, #22
 8012218:	6003      	str	r3, [r0, #0]
 801221a:	2001      	movs	r0, #1
 801221c:	e7e7      	b.n	80121ee <_raise_r+0x12>
 801221e:	2100      	movs	r1, #0
 8012220:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012224:	4620      	mov	r0, r4
 8012226:	4798      	blx	r3
 8012228:	2000      	movs	r0, #0
 801222a:	e7e0      	b.n	80121ee <_raise_r+0x12>

0801222c <raise>:
 801222c:	4b02      	ldr	r3, [pc, #8]	@ (8012238 <raise+0xc>)
 801222e:	4601      	mov	r1, r0
 8012230:	6818      	ldr	r0, [r3, #0]
 8012232:	f7ff bfd3 	b.w	80121dc <_raise_r>
 8012236:	bf00      	nop
 8012238:	20000024 	.word	0x20000024

0801223c <_kill_r>:
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	4d07      	ldr	r5, [pc, #28]	@ (801225c <_kill_r+0x20>)
 8012240:	2300      	movs	r3, #0
 8012242:	4604      	mov	r4, r0
 8012244:	4608      	mov	r0, r1
 8012246:	4611      	mov	r1, r2
 8012248:	602b      	str	r3, [r5, #0]
 801224a:	f7f0 fb45 	bl	80028d8 <_kill>
 801224e:	1c43      	adds	r3, r0, #1
 8012250:	d102      	bne.n	8012258 <_kill_r+0x1c>
 8012252:	682b      	ldr	r3, [r5, #0]
 8012254:	b103      	cbz	r3, 8012258 <_kill_r+0x1c>
 8012256:	6023      	str	r3, [r4, #0]
 8012258:	bd38      	pop	{r3, r4, r5, pc}
 801225a:	bf00      	nop
 801225c:	200155d0 	.word	0x200155d0

08012260 <_getpid_r>:
 8012260:	f7f0 bb32 	b.w	80028c8 <_getpid>

08012264 <__swhatbuf_r>:
 8012264:	b570      	push	{r4, r5, r6, lr}
 8012266:	460c      	mov	r4, r1
 8012268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801226c:	2900      	cmp	r1, #0
 801226e:	b096      	sub	sp, #88	@ 0x58
 8012270:	4615      	mov	r5, r2
 8012272:	461e      	mov	r6, r3
 8012274:	da0d      	bge.n	8012292 <__swhatbuf_r+0x2e>
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801227c:	f04f 0100 	mov.w	r1, #0
 8012280:	bf14      	ite	ne
 8012282:	2340      	movne	r3, #64	@ 0x40
 8012284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012288:	2000      	movs	r0, #0
 801228a:	6031      	str	r1, [r6, #0]
 801228c:	602b      	str	r3, [r5, #0]
 801228e:	b016      	add	sp, #88	@ 0x58
 8012290:	bd70      	pop	{r4, r5, r6, pc}
 8012292:	466a      	mov	r2, sp
 8012294:	f000 f848 	bl	8012328 <_fstat_r>
 8012298:	2800      	cmp	r0, #0
 801229a:	dbec      	blt.n	8012276 <__swhatbuf_r+0x12>
 801229c:	9901      	ldr	r1, [sp, #4]
 801229e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80122a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80122a6:	4259      	negs	r1, r3
 80122a8:	4159      	adcs	r1, r3
 80122aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122ae:	e7eb      	b.n	8012288 <__swhatbuf_r+0x24>

080122b0 <__smakebuf_r>:
 80122b0:	898b      	ldrh	r3, [r1, #12]
 80122b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122b4:	079d      	lsls	r5, r3, #30
 80122b6:	4606      	mov	r6, r0
 80122b8:	460c      	mov	r4, r1
 80122ba:	d507      	bpl.n	80122cc <__smakebuf_r+0x1c>
 80122bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	6123      	str	r3, [r4, #16]
 80122c4:	2301      	movs	r3, #1
 80122c6:	6163      	str	r3, [r4, #20]
 80122c8:	b003      	add	sp, #12
 80122ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122cc:	ab01      	add	r3, sp, #4
 80122ce:	466a      	mov	r2, sp
 80122d0:	f7ff ffc8 	bl	8012264 <__swhatbuf_r>
 80122d4:	9f00      	ldr	r7, [sp, #0]
 80122d6:	4605      	mov	r5, r0
 80122d8:	4639      	mov	r1, r7
 80122da:	4630      	mov	r0, r6
 80122dc:	f7fc fd84 	bl	800ede8 <_malloc_r>
 80122e0:	b948      	cbnz	r0, 80122f6 <__smakebuf_r+0x46>
 80122e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122e6:	059a      	lsls	r2, r3, #22
 80122e8:	d4ee      	bmi.n	80122c8 <__smakebuf_r+0x18>
 80122ea:	f023 0303 	bic.w	r3, r3, #3
 80122ee:	f043 0302 	orr.w	r3, r3, #2
 80122f2:	81a3      	strh	r3, [r4, #12]
 80122f4:	e7e2      	b.n	80122bc <__smakebuf_r+0xc>
 80122f6:	89a3      	ldrh	r3, [r4, #12]
 80122f8:	6020      	str	r0, [r4, #0]
 80122fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122fe:	81a3      	strh	r3, [r4, #12]
 8012300:	9b01      	ldr	r3, [sp, #4]
 8012302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012306:	b15b      	cbz	r3, 8012320 <__smakebuf_r+0x70>
 8012308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801230c:	4630      	mov	r0, r6
 801230e:	f000 f81d 	bl	801234c <_isatty_r>
 8012312:	b128      	cbz	r0, 8012320 <__smakebuf_r+0x70>
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	f023 0303 	bic.w	r3, r3, #3
 801231a:	f043 0301 	orr.w	r3, r3, #1
 801231e:	81a3      	strh	r3, [r4, #12]
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	431d      	orrs	r5, r3
 8012324:	81a5      	strh	r5, [r4, #12]
 8012326:	e7cf      	b.n	80122c8 <__smakebuf_r+0x18>

08012328 <_fstat_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4d07      	ldr	r5, [pc, #28]	@ (8012348 <_fstat_r+0x20>)
 801232c:	2300      	movs	r3, #0
 801232e:	4604      	mov	r4, r0
 8012330:	4608      	mov	r0, r1
 8012332:	4611      	mov	r1, r2
 8012334:	602b      	str	r3, [r5, #0]
 8012336:	f7f0 fb2f 	bl	8002998 <_fstat>
 801233a:	1c43      	adds	r3, r0, #1
 801233c:	d102      	bne.n	8012344 <_fstat_r+0x1c>
 801233e:	682b      	ldr	r3, [r5, #0]
 8012340:	b103      	cbz	r3, 8012344 <_fstat_r+0x1c>
 8012342:	6023      	str	r3, [r4, #0]
 8012344:	bd38      	pop	{r3, r4, r5, pc}
 8012346:	bf00      	nop
 8012348:	200155d0 	.word	0x200155d0

0801234c <_isatty_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d06      	ldr	r5, [pc, #24]	@ (8012368 <_isatty_r+0x1c>)
 8012350:	2300      	movs	r3, #0
 8012352:	4604      	mov	r4, r0
 8012354:	4608      	mov	r0, r1
 8012356:	602b      	str	r3, [r5, #0]
 8012358:	f7f0 fb2e 	bl	80029b8 <_isatty>
 801235c:	1c43      	adds	r3, r0, #1
 801235e:	d102      	bne.n	8012366 <_isatty_r+0x1a>
 8012360:	682b      	ldr	r3, [r5, #0]
 8012362:	b103      	cbz	r3, 8012366 <_isatty_r+0x1a>
 8012364:	6023      	str	r3, [r4, #0]
 8012366:	bd38      	pop	{r3, r4, r5, pc}
 8012368:	200155d0 	.word	0x200155d0

0801236c <pow>:
 801236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236e:	ed2d 8b02 	vpush	{d8}
 8012372:	eeb0 8a40 	vmov.f32	s16, s0
 8012376:	eef0 8a60 	vmov.f32	s17, s1
 801237a:	ec55 4b11 	vmov	r4, r5, d1
 801237e:	f000 f873 	bl	8012468 <__ieee754_pow>
 8012382:	4622      	mov	r2, r4
 8012384:	462b      	mov	r3, r5
 8012386:	4620      	mov	r0, r4
 8012388:	4629      	mov	r1, r5
 801238a:	ec57 6b10 	vmov	r6, r7, d0
 801238e:	f7ee fbdd 	bl	8000b4c <__aeabi_dcmpun>
 8012392:	2800      	cmp	r0, #0
 8012394:	d13b      	bne.n	801240e <pow+0xa2>
 8012396:	ec51 0b18 	vmov	r0, r1, d8
 801239a:	2200      	movs	r2, #0
 801239c:	2300      	movs	r3, #0
 801239e:	f7ee fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 80123a2:	b1b8      	cbz	r0, 80123d4 <pow+0x68>
 80123a4:	2200      	movs	r2, #0
 80123a6:	2300      	movs	r3, #0
 80123a8:	4620      	mov	r0, r4
 80123aa:	4629      	mov	r1, r5
 80123ac:	f7ee fb9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d146      	bne.n	8012442 <pow+0xd6>
 80123b4:	ec45 4b10 	vmov	d0, r4, r5
 80123b8:	f000 f848 	bl	801244c <finite>
 80123bc:	b338      	cbz	r0, 801240e <pow+0xa2>
 80123be:	2200      	movs	r2, #0
 80123c0:	2300      	movs	r3, #0
 80123c2:	4620      	mov	r0, r4
 80123c4:	4629      	mov	r1, r5
 80123c6:	f7ee fb99 	bl	8000afc <__aeabi_dcmplt>
 80123ca:	b300      	cbz	r0, 801240e <pow+0xa2>
 80123cc:	f7fd fba4 	bl	800fb18 <__errno>
 80123d0:	2322      	movs	r3, #34	@ 0x22
 80123d2:	e01b      	b.n	801240c <pow+0xa0>
 80123d4:	ec47 6b10 	vmov	d0, r6, r7
 80123d8:	f000 f838 	bl	801244c <finite>
 80123dc:	b9e0      	cbnz	r0, 8012418 <pow+0xac>
 80123de:	eeb0 0a48 	vmov.f32	s0, s16
 80123e2:	eef0 0a68 	vmov.f32	s1, s17
 80123e6:	f000 f831 	bl	801244c <finite>
 80123ea:	b1a8      	cbz	r0, 8012418 <pow+0xac>
 80123ec:	ec45 4b10 	vmov	d0, r4, r5
 80123f0:	f000 f82c 	bl	801244c <finite>
 80123f4:	b180      	cbz	r0, 8012418 <pow+0xac>
 80123f6:	4632      	mov	r2, r6
 80123f8:	463b      	mov	r3, r7
 80123fa:	4630      	mov	r0, r6
 80123fc:	4639      	mov	r1, r7
 80123fe:	f7ee fba5 	bl	8000b4c <__aeabi_dcmpun>
 8012402:	2800      	cmp	r0, #0
 8012404:	d0e2      	beq.n	80123cc <pow+0x60>
 8012406:	f7fd fb87 	bl	800fb18 <__errno>
 801240a:	2321      	movs	r3, #33	@ 0x21
 801240c:	6003      	str	r3, [r0, #0]
 801240e:	ecbd 8b02 	vpop	{d8}
 8012412:	ec47 6b10 	vmov	d0, r6, r7
 8012416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012418:	2200      	movs	r2, #0
 801241a:	2300      	movs	r3, #0
 801241c:	4630      	mov	r0, r6
 801241e:	4639      	mov	r1, r7
 8012420:	f7ee fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 8012424:	2800      	cmp	r0, #0
 8012426:	d0f2      	beq.n	801240e <pow+0xa2>
 8012428:	eeb0 0a48 	vmov.f32	s0, s16
 801242c:	eef0 0a68 	vmov.f32	s1, s17
 8012430:	f000 f80c 	bl	801244c <finite>
 8012434:	2800      	cmp	r0, #0
 8012436:	d0ea      	beq.n	801240e <pow+0xa2>
 8012438:	ec45 4b10 	vmov	d0, r4, r5
 801243c:	f000 f806 	bl	801244c <finite>
 8012440:	e7c3      	b.n	80123ca <pow+0x5e>
 8012442:	4f01      	ldr	r7, [pc, #4]	@ (8012448 <pow+0xdc>)
 8012444:	2600      	movs	r6, #0
 8012446:	e7e2      	b.n	801240e <pow+0xa2>
 8012448:	3ff00000 	.word	0x3ff00000

0801244c <finite>:
 801244c:	b082      	sub	sp, #8
 801244e:	ed8d 0b00 	vstr	d0, [sp]
 8012452:	9801      	ldr	r0, [sp, #4]
 8012454:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012458:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801245c:	0fc0      	lsrs	r0, r0, #31
 801245e:	b002      	add	sp, #8
 8012460:	4770      	bx	lr
 8012462:	0000      	movs	r0, r0
 8012464:	0000      	movs	r0, r0
	...

08012468 <__ieee754_pow>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	b091      	sub	sp, #68	@ 0x44
 801246e:	ed8d 1b00 	vstr	d1, [sp]
 8012472:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012476:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801247a:	ea5a 0001 	orrs.w	r0, sl, r1
 801247e:	ec57 6b10 	vmov	r6, r7, d0
 8012482:	d113      	bne.n	80124ac <__ieee754_pow+0x44>
 8012484:	19b3      	adds	r3, r6, r6
 8012486:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801248a:	4152      	adcs	r2, r2
 801248c:	4298      	cmp	r0, r3
 801248e:	4b98      	ldr	r3, [pc, #608]	@ (80126f0 <__ieee754_pow+0x288>)
 8012490:	4193      	sbcs	r3, r2
 8012492:	f080 84ea 	bcs.w	8012e6a <__ieee754_pow+0xa02>
 8012496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801249a:	4630      	mov	r0, r6
 801249c:	4639      	mov	r1, r7
 801249e:	f7ed ff05 	bl	80002ac <__adddf3>
 80124a2:	ec41 0b10 	vmov	d0, r0, r1
 80124a6:	b011      	add	sp, #68	@ 0x44
 80124a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ac:	4a91      	ldr	r2, [pc, #580]	@ (80126f4 <__ieee754_pow+0x28c>)
 80124ae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80124b2:	4590      	cmp	r8, r2
 80124b4:	463d      	mov	r5, r7
 80124b6:	4633      	mov	r3, r6
 80124b8:	d806      	bhi.n	80124c8 <__ieee754_pow+0x60>
 80124ba:	d101      	bne.n	80124c0 <__ieee754_pow+0x58>
 80124bc:	2e00      	cmp	r6, #0
 80124be:	d1ea      	bne.n	8012496 <__ieee754_pow+0x2e>
 80124c0:	4592      	cmp	sl, r2
 80124c2:	d801      	bhi.n	80124c8 <__ieee754_pow+0x60>
 80124c4:	d10e      	bne.n	80124e4 <__ieee754_pow+0x7c>
 80124c6:	b169      	cbz	r1, 80124e4 <__ieee754_pow+0x7c>
 80124c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80124cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80124d0:	431d      	orrs	r5, r3
 80124d2:	d1e0      	bne.n	8012496 <__ieee754_pow+0x2e>
 80124d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124d8:	18db      	adds	r3, r3, r3
 80124da:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80124de:	4152      	adcs	r2, r2
 80124e0:	429d      	cmp	r5, r3
 80124e2:	e7d4      	b.n	801248e <__ieee754_pow+0x26>
 80124e4:	2d00      	cmp	r5, #0
 80124e6:	46c3      	mov	fp, r8
 80124e8:	da3a      	bge.n	8012560 <__ieee754_pow+0xf8>
 80124ea:	4a83      	ldr	r2, [pc, #524]	@ (80126f8 <__ieee754_pow+0x290>)
 80124ec:	4592      	cmp	sl, r2
 80124ee:	d84d      	bhi.n	801258c <__ieee754_pow+0x124>
 80124f0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80124f4:	4592      	cmp	sl, r2
 80124f6:	f240 84c7 	bls.w	8012e88 <__ieee754_pow+0xa20>
 80124fa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80124fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012502:	2a14      	cmp	r2, #20
 8012504:	dd0f      	ble.n	8012526 <__ieee754_pow+0xbe>
 8012506:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801250a:	fa21 f402 	lsr.w	r4, r1, r2
 801250e:	fa04 f202 	lsl.w	r2, r4, r2
 8012512:	428a      	cmp	r2, r1
 8012514:	f040 84b8 	bne.w	8012e88 <__ieee754_pow+0xa20>
 8012518:	f004 0401 	and.w	r4, r4, #1
 801251c:	f1c4 0402 	rsb	r4, r4, #2
 8012520:	2900      	cmp	r1, #0
 8012522:	d158      	bne.n	80125d6 <__ieee754_pow+0x16e>
 8012524:	e00e      	b.n	8012544 <__ieee754_pow+0xdc>
 8012526:	2900      	cmp	r1, #0
 8012528:	d154      	bne.n	80125d4 <__ieee754_pow+0x16c>
 801252a:	f1c2 0214 	rsb	r2, r2, #20
 801252e:	fa4a f402 	asr.w	r4, sl, r2
 8012532:	fa04 f202 	lsl.w	r2, r4, r2
 8012536:	4552      	cmp	r2, sl
 8012538:	f040 84a3 	bne.w	8012e82 <__ieee754_pow+0xa1a>
 801253c:	f004 0401 	and.w	r4, r4, #1
 8012540:	f1c4 0402 	rsb	r4, r4, #2
 8012544:	4a6d      	ldr	r2, [pc, #436]	@ (80126fc <__ieee754_pow+0x294>)
 8012546:	4592      	cmp	sl, r2
 8012548:	d12e      	bne.n	80125a8 <__ieee754_pow+0x140>
 801254a:	f1b9 0f00 	cmp.w	r9, #0
 801254e:	f280 8494 	bge.w	8012e7a <__ieee754_pow+0xa12>
 8012552:	496a      	ldr	r1, [pc, #424]	@ (80126fc <__ieee754_pow+0x294>)
 8012554:	4632      	mov	r2, r6
 8012556:	463b      	mov	r3, r7
 8012558:	2000      	movs	r0, #0
 801255a:	f7ee f987 	bl	800086c <__aeabi_ddiv>
 801255e:	e7a0      	b.n	80124a2 <__ieee754_pow+0x3a>
 8012560:	2400      	movs	r4, #0
 8012562:	bbc1      	cbnz	r1, 80125d6 <__ieee754_pow+0x16e>
 8012564:	4a63      	ldr	r2, [pc, #396]	@ (80126f4 <__ieee754_pow+0x28c>)
 8012566:	4592      	cmp	sl, r2
 8012568:	d1ec      	bne.n	8012544 <__ieee754_pow+0xdc>
 801256a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801256e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012572:	431a      	orrs	r2, r3
 8012574:	f000 8479 	beq.w	8012e6a <__ieee754_pow+0xa02>
 8012578:	4b61      	ldr	r3, [pc, #388]	@ (8012700 <__ieee754_pow+0x298>)
 801257a:	4598      	cmp	r8, r3
 801257c:	d908      	bls.n	8012590 <__ieee754_pow+0x128>
 801257e:	f1b9 0f00 	cmp.w	r9, #0
 8012582:	f2c0 8476 	blt.w	8012e72 <__ieee754_pow+0xa0a>
 8012586:	e9dd 0100 	ldrd	r0, r1, [sp]
 801258a:	e78a      	b.n	80124a2 <__ieee754_pow+0x3a>
 801258c:	2402      	movs	r4, #2
 801258e:	e7e8      	b.n	8012562 <__ieee754_pow+0xfa>
 8012590:	f1b9 0f00 	cmp.w	r9, #0
 8012594:	f04f 0000 	mov.w	r0, #0
 8012598:	f04f 0100 	mov.w	r1, #0
 801259c:	da81      	bge.n	80124a2 <__ieee754_pow+0x3a>
 801259e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80125a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80125a6:	e77c      	b.n	80124a2 <__ieee754_pow+0x3a>
 80125a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80125ac:	d106      	bne.n	80125bc <__ieee754_pow+0x154>
 80125ae:	4632      	mov	r2, r6
 80125b0:	463b      	mov	r3, r7
 80125b2:	4630      	mov	r0, r6
 80125b4:	4639      	mov	r1, r7
 80125b6:	f7ee f82f 	bl	8000618 <__aeabi_dmul>
 80125ba:	e772      	b.n	80124a2 <__ieee754_pow+0x3a>
 80125bc:	4a51      	ldr	r2, [pc, #324]	@ (8012704 <__ieee754_pow+0x29c>)
 80125be:	4591      	cmp	r9, r2
 80125c0:	d109      	bne.n	80125d6 <__ieee754_pow+0x16e>
 80125c2:	2d00      	cmp	r5, #0
 80125c4:	db07      	blt.n	80125d6 <__ieee754_pow+0x16e>
 80125c6:	ec47 6b10 	vmov	d0, r6, r7
 80125ca:	b011      	add	sp, #68	@ 0x44
 80125cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d0:	f000 bd52 	b.w	8013078 <__ieee754_sqrt>
 80125d4:	2400      	movs	r4, #0
 80125d6:	ec47 6b10 	vmov	d0, r6, r7
 80125da:	9302      	str	r3, [sp, #8]
 80125dc:	f000 fc88 	bl	8012ef0 <fabs>
 80125e0:	9b02      	ldr	r3, [sp, #8]
 80125e2:	ec51 0b10 	vmov	r0, r1, d0
 80125e6:	bb53      	cbnz	r3, 801263e <__ieee754_pow+0x1d6>
 80125e8:	4b44      	ldr	r3, [pc, #272]	@ (80126fc <__ieee754_pow+0x294>)
 80125ea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d002      	beq.n	80125f8 <__ieee754_pow+0x190>
 80125f2:	f1b8 0f00 	cmp.w	r8, #0
 80125f6:	d122      	bne.n	801263e <__ieee754_pow+0x1d6>
 80125f8:	f1b9 0f00 	cmp.w	r9, #0
 80125fc:	da05      	bge.n	801260a <__ieee754_pow+0x1a2>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	2000      	movs	r0, #0
 8012604:	493d      	ldr	r1, [pc, #244]	@ (80126fc <__ieee754_pow+0x294>)
 8012606:	f7ee f931 	bl	800086c <__aeabi_ddiv>
 801260a:	2d00      	cmp	r5, #0
 801260c:	f6bf af49 	bge.w	80124a2 <__ieee754_pow+0x3a>
 8012610:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012614:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012618:	ea58 0804 	orrs.w	r8, r8, r4
 801261c:	d108      	bne.n	8012630 <__ieee754_pow+0x1c8>
 801261e:	4602      	mov	r2, r0
 8012620:	460b      	mov	r3, r1
 8012622:	4610      	mov	r0, r2
 8012624:	4619      	mov	r1, r3
 8012626:	f7ed fe3f 	bl	80002a8 <__aeabi_dsub>
 801262a:	4602      	mov	r2, r0
 801262c:	460b      	mov	r3, r1
 801262e:	e794      	b.n	801255a <__ieee754_pow+0xf2>
 8012630:	2c01      	cmp	r4, #1
 8012632:	f47f af36 	bne.w	80124a2 <__ieee754_pow+0x3a>
 8012636:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801263a:	4619      	mov	r1, r3
 801263c:	e731      	b.n	80124a2 <__ieee754_pow+0x3a>
 801263e:	0feb      	lsrs	r3, r5, #31
 8012640:	3b01      	subs	r3, #1
 8012642:	ea53 0204 	orrs.w	r2, r3, r4
 8012646:	d102      	bne.n	801264e <__ieee754_pow+0x1e6>
 8012648:	4632      	mov	r2, r6
 801264a:	463b      	mov	r3, r7
 801264c:	e7e9      	b.n	8012622 <__ieee754_pow+0x1ba>
 801264e:	3c01      	subs	r4, #1
 8012650:	431c      	orrs	r4, r3
 8012652:	d016      	beq.n	8012682 <__ieee754_pow+0x21a>
 8012654:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80126e0 <__ieee754_pow+0x278>
 8012658:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801265c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012660:	f240 8112 	bls.w	8012888 <__ieee754_pow+0x420>
 8012664:	4b28      	ldr	r3, [pc, #160]	@ (8012708 <__ieee754_pow+0x2a0>)
 8012666:	459a      	cmp	sl, r3
 8012668:	4b25      	ldr	r3, [pc, #148]	@ (8012700 <__ieee754_pow+0x298>)
 801266a:	d916      	bls.n	801269a <__ieee754_pow+0x232>
 801266c:	4598      	cmp	r8, r3
 801266e:	d80b      	bhi.n	8012688 <__ieee754_pow+0x220>
 8012670:	f1b9 0f00 	cmp.w	r9, #0
 8012674:	da0b      	bge.n	801268e <__ieee754_pow+0x226>
 8012676:	2000      	movs	r0, #0
 8012678:	b011      	add	sp, #68	@ 0x44
 801267a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267e:	f000 bcf3 	b.w	8013068 <__math_oflow>
 8012682:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80126e8 <__ieee754_pow+0x280>
 8012686:	e7e7      	b.n	8012658 <__ieee754_pow+0x1f0>
 8012688:	f1b9 0f00 	cmp.w	r9, #0
 801268c:	dcf3      	bgt.n	8012676 <__ieee754_pow+0x20e>
 801268e:	2000      	movs	r0, #0
 8012690:	b011      	add	sp, #68	@ 0x44
 8012692:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012696:	f000 bcdf 	b.w	8013058 <__math_uflow>
 801269a:	4598      	cmp	r8, r3
 801269c:	d20c      	bcs.n	80126b8 <__ieee754_pow+0x250>
 801269e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126a2:	2200      	movs	r2, #0
 80126a4:	2300      	movs	r3, #0
 80126a6:	f7ee fa29 	bl	8000afc <__aeabi_dcmplt>
 80126aa:	3800      	subs	r0, #0
 80126ac:	bf18      	it	ne
 80126ae:	2001      	movne	r0, #1
 80126b0:	f1b9 0f00 	cmp.w	r9, #0
 80126b4:	daec      	bge.n	8012690 <__ieee754_pow+0x228>
 80126b6:	e7df      	b.n	8012678 <__ieee754_pow+0x210>
 80126b8:	4b10      	ldr	r3, [pc, #64]	@ (80126fc <__ieee754_pow+0x294>)
 80126ba:	4598      	cmp	r8, r3
 80126bc:	f04f 0200 	mov.w	r2, #0
 80126c0:	d924      	bls.n	801270c <__ieee754_pow+0x2a4>
 80126c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126c6:	2300      	movs	r3, #0
 80126c8:	f7ee fa18 	bl	8000afc <__aeabi_dcmplt>
 80126cc:	3800      	subs	r0, #0
 80126ce:	bf18      	it	ne
 80126d0:	2001      	movne	r0, #1
 80126d2:	f1b9 0f00 	cmp.w	r9, #0
 80126d6:	dccf      	bgt.n	8012678 <__ieee754_pow+0x210>
 80126d8:	e7da      	b.n	8012690 <__ieee754_pow+0x228>
 80126da:	bf00      	nop
 80126dc:	f3af 8000 	nop.w
 80126e0:	00000000 	.word	0x00000000
 80126e4:	3ff00000 	.word	0x3ff00000
 80126e8:	00000000 	.word	0x00000000
 80126ec:	bff00000 	.word	0xbff00000
 80126f0:	fff00000 	.word	0xfff00000
 80126f4:	7ff00000 	.word	0x7ff00000
 80126f8:	433fffff 	.word	0x433fffff
 80126fc:	3ff00000 	.word	0x3ff00000
 8012700:	3fefffff 	.word	0x3fefffff
 8012704:	3fe00000 	.word	0x3fe00000
 8012708:	43f00000 	.word	0x43f00000
 801270c:	4b5a      	ldr	r3, [pc, #360]	@ (8012878 <__ieee754_pow+0x410>)
 801270e:	f7ed fdcb 	bl	80002a8 <__aeabi_dsub>
 8012712:	a351      	add	r3, pc, #324	@ (adr r3, 8012858 <__ieee754_pow+0x3f0>)
 8012714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012718:	4604      	mov	r4, r0
 801271a:	460d      	mov	r5, r1
 801271c:	f7ed ff7c 	bl	8000618 <__aeabi_dmul>
 8012720:	a34f      	add	r3, pc, #316	@ (adr r3, 8012860 <__ieee754_pow+0x3f8>)
 8012722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012726:	4606      	mov	r6, r0
 8012728:	460f      	mov	r7, r1
 801272a:	4620      	mov	r0, r4
 801272c:	4629      	mov	r1, r5
 801272e:	f7ed ff73 	bl	8000618 <__aeabi_dmul>
 8012732:	4b52      	ldr	r3, [pc, #328]	@ (801287c <__ieee754_pow+0x414>)
 8012734:	4682      	mov	sl, r0
 8012736:	468b      	mov	fp, r1
 8012738:	2200      	movs	r2, #0
 801273a:	4620      	mov	r0, r4
 801273c:	4629      	mov	r1, r5
 801273e:	f7ed ff6b 	bl	8000618 <__aeabi_dmul>
 8012742:	4602      	mov	r2, r0
 8012744:	460b      	mov	r3, r1
 8012746:	a148      	add	r1, pc, #288	@ (adr r1, 8012868 <__ieee754_pow+0x400>)
 8012748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801274c:	f7ed fdac 	bl	80002a8 <__aeabi_dsub>
 8012750:	4622      	mov	r2, r4
 8012752:	462b      	mov	r3, r5
 8012754:	f7ed ff60 	bl	8000618 <__aeabi_dmul>
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	2000      	movs	r0, #0
 801275e:	4948      	ldr	r1, [pc, #288]	@ (8012880 <__ieee754_pow+0x418>)
 8012760:	f7ed fda2 	bl	80002a8 <__aeabi_dsub>
 8012764:	4622      	mov	r2, r4
 8012766:	4680      	mov	r8, r0
 8012768:	4689      	mov	r9, r1
 801276a:	462b      	mov	r3, r5
 801276c:	4620      	mov	r0, r4
 801276e:	4629      	mov	r1, r5
 8012770:	f7ed ff52 	bl	8000618 <__aeabi_dmul>
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	4640      	mov	r0, r8
 801277a:	4649      	mov	r1, r9
 801277c:	f7ed ff4c 	bl	8000618 <__aeabi_dmul>
 8012780:	a33b      	add	r3, pc, #236	@ (adr r3, 8012870 <__ieee754_pow+0x408>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed ff47 	bl	8000618 <__aeabi_dmul>
 801278a:	4602      	mov	r2, r0
 801278c:	460b      	mov	r3, r1
 801278e:	4650      	mov	r0, sl
 8012790:	4659      	mov	r1, fp
 8012792:	f7ed fd89 	bl	80002a8 <__aeabi_dsub>
 8012796:	4602      	mov	r2, r0
 8012798:	460b      	mov	r3, r1
 801279a:	4680      	mov	r8, r0
 801279c:	4689      	mov	r9, r1
 801279e:	4630      	mov	r0, r6
 80127a0:	4639      	mov	r1, r7
 80127a2:	f7ed fd83 	bl	80002ac <__adddf3>
 80127a6:	2400      	movs	r4, #0
 80127a8:	4632      	mov	r2, r6
 80127aa:	463b      	mov	r3, r7
 80127ac:	4620      	mov	r0, r4
 80127ae:	460d      	mov	r5, r1
 80127b0:	f7ed fd7a 	bl	80002a8 <__aeabi_dsub>
 80127b4:	4602      	mov	r2, r0
 80127b6:	460b      	mov	r3, r1
 80127b8:	4640      	mov	r0, r8
 80127ba:	4649      	mov	r1, r9
 80127bc:	f7ed fd74 	bl	80002a8 <__aeabi_dsub>
 80127c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80127c8:	2300      	movs	r3, #0
 80127ca:	9304      	str	r3, [sp, #16]
 80127cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80127d0:	4606      	mov	r6, r0
 80127d2:	460f      	mov	r7, r1
 80127d4:	4652      	mov	r2, sl
 80127d6:	465b      	mov	r3, fp
 80127d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127dc:	f7ed fd64 	bl	80002a8 <__aeabi_dsub>
 80127e0:	4622      	mov	r2, r4
 80127e2:	462b      	mov	r3, r5
 80127e4:	f7ed ff18 	bl	8000618 <__aeabi_dmul>
 80127e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ec:	4680      	mov	r8, r0
 80127ee:	4689      	mov	r9, r1
 80127f0:	4630      	mov	r0, r6
 80127f2:	4639      	mov	r1, r7
 80127f4:	f7ed ff10 	bl	8000618 <__aeabi_dmul>
 80127f8:	4602      	mov	r2, r0
 80127fa:	460b      	mov	r3, r1
 80127fc:	4640      	mov	r0, r8
 80127fe:	4649      	mov	r1, r9
 8012800:	f7ed fd54 	bl	80002ac <__adddf3>
 8012804:	4652      	mov	r2, sl
 8012806:	465b      	mov	r3, fp
 8012808:	4606      	mov	r6, r0
 801280a:	460f      	mov	r7, r1
 801280c:	4620      	mov	r0, r4
 801280e:	4629      	mov	r1, r5
 8012810:	f7ed ff02 	bl	8000618 <__aeabi_dmul>
 8012814:	460b      	mov	r3, r1
 8012816:	4602      	mov	r2, r0
 8012818:	4680      	mov	r8, r0
 801281a:	4689      	mov	r9, r1
 801281c:	4630      	mov	r0, r6
 801281e:	4639      	mov	r1, r7
 8012820:	f7ed fd44 	bl	80002ac <__adddf3>
 8012824:	4b17      	ldr	r3, [pc, #92]	@ (8012884 <__ieee754_pow+0x41c>)
 8012826:	4299      	cmp	r1, r3
 8012828:	4604      	mov	r4, r0
 801282a:	460d      	mov	r5, r1
 801282c:	468a      	mov	sl, r1
 801282e:	468b      	mov	fp, r1
 8012830:	f340 82ef 	ble.w	8012e12 <__ieee754_pow+0x9aa>
 8012834:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012838:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801283c:	4303      	orrs	r3, r0
 801283e:	f000 81e8 	beq.w	8012c12 <__ieee754_pow+0x7aa>
 8012842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012846:	2200      	movs	r2, #0
 8012848:	2300      	movs	r3, #0
 801284a:	f7ee f957 	bl	8000afc <__aeabi_dcmplt>
 801284e:	3800      	subs	r0, #0
 8012850:	bf18      	it	ne
 8012852:	2001      	movne	r0, #1
 8012854:	e710      	b.n	8012678 <__ieee754_pow+0x210>
 8012856:	bf00      	nop
 8012858:	60000000 	.word	0x60000000
 801285c:	3ff71547 	.word	0x3ff71547
 8012860:	f85ddf44 	.word	0xf85ddf44
 8012864:	3e54ae0b 	.word	0x3e54ae0b
 8012868:	55555555 	.word	0x55555555
 801286c:	3fd55555 	.word	0x3fd55555
 8012870:	652b82fe 	.word	0x652b82fe
 8012874:	3ff71547 	.word	0x3ff71547
 8012878:	3ff00000 	.word	0x3ff00000
 801287c:	3fd00000 	.word	0x3fd00000
 8012880:	3fe00000 	.word	0x3fe00000
 8012884:	408fffff 	.word	0x408fffff
 8012888:	4bd5      	ldr	r3, [pc, #852]	@ (8012be0 <__ieee754_pow+0x778>)
 801288a:	402b      	ands	r3, r5
 801288c:	2200      	movs	r2, #0
 801288e:	b92b      	cbnz	r3, 801289c <__ieee754_pow+0x434>
 8012890:	4bd4      	ldr	r3, [pc, #848]	@ (8012be4 <__ieee754_pow+0x77c>)
 8012892:	f7ed fec1 	bl	8000618 <__aeabi_dmul>
 8012896:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801289a:	468b      	mov	fp, r1
 801289c:	ea4f 532b 	mov.w	r3, fp, asr #20
 80128a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80128a4:	4413      	add	r3, r2
 80128a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128a8:	4bcf      	ldr	r3, [pc, #828]	@ (8012be8 <__ieee754_pow+0x780>)
 80128aa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80128ae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80128b2:	459b      	cmp	fp, r3
 80128b4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80128b8:	dd08      	ble.n	80128cc <__ieee754_pow+0x464>
 80128ba:	4bcc      	ldr	r3, [pc, #816]	@ (8012bec <__ieee754_pow+0x784>)
 80128bc:	459b      	cmp	fp, r3
 80128be:	f340 81a5 	ble.w	8012c0c <__ieee754_pow+0x7a4>
 80128c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128c4:	3301      	adds	r3, #1
 80128c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128c8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80128cc:	f04f 0a00 	mov.w	sl, #0
 80128d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80128d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128d6:	4bc6      	ldr	r3, [pc, #792]	@ (8012bf0 <__ieee754_pow+0x788>)
 80128d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80128dc:	ed93 7b00 	vldr	d7, [r3]
 80128e0:	4629      	mov	r1, r5
 80128e2:	ec53 2b17 	vmov	r2, r3, d7
 80128e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128ee:	f7ed fcdb 	bl	80002a8 <__aeabi_dsub>
 80128f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128f6:	4606      	mov	r6, r0
 80128f8:	460f      	mov	r7, r1
 80128fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128fe:	f7ed fcd5 	bl	80002ac <__adddf3>
 8012902:	4602      	mov	r2, r0
 8012904:	460b      	mov	r3, r1
 8012906:	2000      	movs	r0, #0
 8012908:	49ba      	ldr	r1, [pc, #744]	@ (8012bf4 <__ieee754_pow+0x78c>)
 801290a:	f7ed ffaf 	bl	800086c <__aeabi_ddiv>
 801290e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	f7ed fe7d 	bl	8000618 <__aeabi_dmul>
 801291e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012922:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012926:	106d      	asrs	r5, r5, #1
 8012928:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801292c:	f04f 0b00 	mov.w	fp, #0
 8012930:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012934:	4661      	mov	r1, ip
 8012936:	2200      	movs	r2, #0
 8012938:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801293c:	4658      	mov	r0, fp
 801293e:	46e1      	mov	r9, ip
 8012940:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012944:	4614      	mov	r4, r2
 8012946:	461d      	mov	r5, r3
 8012948:	f7ed fe66 	bl	8000618 <__aeabi_dmul>
 801294c:	4602      	mov	r2, r0
 801294e:	460b      	mov	r3, r1
 8012950:	4630      	mov	r0, r6
 8012952:	4639      	mov	r1, r7
 8012954:	f7ed fca8 	bl	80002a8 <__aeabi_dsub>
 8012958:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801295c:	4606      	mov	r6, r0
 801295e:	460f      	mov	r7, r1
 8012960:	4620      	mov	r0, r4
 8012962:	4629      	mov	r1, r5
 8012964:	f7ed fca0 	bl	80002a8 <__aeabi_dsub>
 8012968:	4602      	mov	r2, r0
 801296a:	460b      	mov	r3, r1
 801296c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012970:	f7ed fc9a 	bl	80002a8 <__aeabi_dsub>
 8012974:	465a      	mov	r2, fp
 8012976:	464b      	mov	r3, r9
 8012978:	f7ed fe4e 	bl	8000618 <__aeabi_dmul>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	4630      	mov	r0, r6
 8012982:	4639      	mov	r1, r7
 8012984:	f7ed fc90 	bl	80002a8 <__aeabi_dsub>
 8012988:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801298c:	f7ed fe44 	bl	8000618 <__aeabi_dmul>
 8012990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012994:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012998:	4610      	mov	r0, r2
 801299a:	4619      	mov	r1, r3
 801299c:	f7ed fe3c 	bl	8000618 <__aeabi_dmul>
 80129a0:	a37d      	add	r3, pc, #500	@ (adr r3, 8012b98 <__ieee754_pow+0x730>)
 80129a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a6:	4604      	mov	r4, r0
 80129a8:	460d      	mov	r5, r1
 80129aa:	f7ed fe35 	bl	8000618 <__aeabi_dmul>
 80129ae:	a37c      	add	r3, pc, #496	@ (adr r3, 8012ba0 <__ieee754_pow+0x738>)
 80129b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b4:	f7ed fc7a 	bl	80002ac <__adddf3>
 80129b8:	4622      	mov	r2, r4
 80129ba:	462b      	mov	r3, r5
 80129bc:	f7ed fe2c 	bl	8000618 <__aeabi_dmul>
 80129c0:	a379      	add	r3, pc, #484	@ (adr r3, 8012ba8 <__ieee754_pow+0x740>)
 80129c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c6:	f7ed fc71 	bl	80002ac <__adddf3>
 80129ca:	4622      	mov	r2, r4
 80129cc:	462b      	mov	r3, r5
 80129ce:	f7ed fe23 	bl	8000618 <__aeabi_dmul>
 80129d2:	a377      	add	r3, pc, #476	@ (adr r3, 8012bb0 <__ieee754_pow+0x748>)
 80129d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d8:	f7ed fc68 	bl	80002ac <__adddf3>
 80129dc:	4622      	mov	r2, r4
 80129de:	462b      	mov	r3, r5
 80129e0:	f7ed fe1a 	bl	8000618 <__aeabi_dmul>
 80129e4:	a374      	add	r3, pc, #464	@ (adr r3, 8012bb8 <__ieee754_pow+0x750>)
 80129e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ea:	f7ed fc5f 	bl	80002ac <__adddf3>
 80129ee:	4622      	mov	r2, r4
 80129f0:	462b      	mov	r3, r5
 80129f2:	f7ed fe11 	bl	8000618 <__aeabi_dmul>
 80129f6:	a372      	add	r3, pc, #456	@ (adr r3, 8012bc0 <__ieee754_pow+0x758>)
 80129f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fc:	f7ed fc56 	bl	80002ac <__adddf3>
 8012a00:	4622      	mov	r2, r4
 8012a02:	4606      	mov	r6, r0
 8012a04:	460f      	mov	r7, r1
 8012a06:	462b      	mov	r3, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	f7ed fe04 	bl	8000618 <__aeabi_dmul>
 8012a10:	4602      	mov	r2, r0
 8012a12:	460b      	mov	r3, r1
 8012a14:	4630      	mov	r0, r6
 8012a16:	4639      	mov	r1, r7
 8012a18:	f7ed fdfe 	bl	8000618 <__aeabi_dmul>
 8012a1c:	465a      	mov	r2, fp
 8012a1e:	4604      	mov	r4, r0
 8012a20:	460d      	mov	r5, r1
 8012a22:	464b      	mov	r3, r9
 8012a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a28:	f7ed fc40 	bl	80002ac <__adddf3>
 8012a2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012a30:	f7ed fdf2 	bl	8000618 <__aeabi_dmul>
 8012a34:	4622      	mov	r2, r4
 8012a36:	462b      	mov	r3, r5
 8012a38:	f7ed fc38 	bl	80002ac <__adddf3>
 8012a3c:	465a      	mov	r2, fp
 8012a3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012a42:	464b      	mov	r3, r9
 8012a44:	4658      	mov	r0, fp
 8012a46:	4649      	mov	r1, r9
 8012a48:	f7ed fde6 	bl	8000618 <__aeabi_dmul>
 8012a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8012bf8 <__ieee754_pow+0x790>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	4606      	mov	r6, r0
 8012a52:	460f      	mov	r7, r1
 8012a54:	f7ed fc2a 	bl	80002ac <__adddf3>
 8012a58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012a5c:	f7ed fc26 	bl	80002ac <__adddf3>
 8012a60:	46d8      	mov	r8, fp
 8012a62:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012a66:	460d      	mov	r5, r1
 8012a68:	465a      	mov	r2, fp
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	4640      	mov	r0, r8
 8012a6e:	4649      	mov	r1, r9
 8012a70:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012a74:	f7ed fdd0 	bl	8000618 <__aeabi_dmul>
 8012a78:	465c      	mov	r4, fp
 8012a7a:	4680      	mov	r8, r0
 8012a7c:	4689      	mov	r9, r1
 8012a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8012bf8 <__ieee754_pow+0x790>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	4620      	mov	r0, r4
 8012a84:	4629      	mov	r1, r5
 8012a86:	f7ed fc0f 	bl	80002a8 <__aeabi_dsub>
 8012a8a:	4632      	mov	r2, r6
 8012a8c:	463b      	mov	r3, r7
 8012a8e:	f7ed fc0b 	bl	80002a8 <__aeabi_dsub>
 8012a92:	4602      	mov	r2, r0
 8012a94:	460b      	mov	r3, r1
 8012a96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012a9a:	f7ed fc05 	bl	80002a8 <__aeabi_dsub>
 8012a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aa2:	f7ed fdb9 	bl	8000618 <__aeabi_dmul>
 8012aa6:	4622      	mov	r2, r4
 8012aa8:	4606      	mov	r6, r0
 8012aaa:	460f      	mov	r7, r1
 8012aac:	462b      	mov	r3, r5
 8012aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ab2:	f7ed fdb1 	bl	8000618 <__aeabi_dmul>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	460b      	mov	r3, r1
 8012aba:	4630      	mov	r0, r6
 8012abc:	4639      	mov	r1, r7
 8012abe:	f7ed fbf5 	bl	80002ac <__adddf3>
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460f      	mov	r7, r1
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	4640      	mov	r0, r8
 8012acc:	4649      	mov	r1, r9
 8012ace:	f7ed fbed 	bl	80002ac <__adddf3>
 8012ad2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012ad6:	a33c      	add	r3, pc, #240	@ (adr r3, 8012bc8 <__ieee754_pow+0x760>)
 8012ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012adc:	4658      	mov	r0, fp
 8012ade:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	f7ed fd98 	bl	8000618 <__aeabi_dmul>
 8012ae8:	465c      	mov	r4, fp
 8012aea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012aee:	4642      	mov	r2, r8
 8012af0:	464b      	mov	r3, r9
 8012af2:	4620      	mov	r0, r4
 8012af4:	4629      	mov	r1, r5
 8012af6:	f7ed fbd7 	bl	80002a8 <__aeabi_dsub>
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	4630      	mov	r0, r6
 8012b00:	4639      	mov	r1, r7
 8012b02:	f7ed fbd1 	bl	80002a8 <__aeabi_dsub>
 8012b06:	a332      	add	r3, pc, #200	@ (adr r3, 8012bd0 <__ieee754_pow+0x768>)
 8012b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0c:	f7ed fd84 	bl	8000618 <__aeabi_dmul>
 8012b10:	a331      	add	r3, pc, #196	@ (adr r3, 8012bd8 <__ieee754_pow+0x770>)
 8012b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b16:	4606      	mov	r6, r0
 8012b18:	460f      	mov	r7, r1
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	f7ed fd7b 	bl	8000618 <__aeabi_dmul>
 8012b22:	4602      	mov	r2, r0
 8012b24:	460b      	mov	r3, r1
 8012b26:	4630      	mov	r0, r6
 8012b28:	4639      	mov	r1, r7
 8012b2a:	f7ed fbbf 	bl	80002ac <__adddf3>
 8012b2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b30:	4b32      	ldr	r3, [pc, #200]	@ (8012bfc <__ieee754_pow+0x794>)
 8012b32:	4413      	add	r3, r2
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fbb8 	bl	80002ac <__adddf3>
 8012b3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012b40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012b42:	f7ed fcff 	bl	8000544 <__aeabi_i2d>
 8012b46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b48:	4b2d      	ldr	r3, [pc, #180]	@ (8012c00 <__ieee754_pow+0x798>)
 8012b4a:	4413      	add	r3, r2
 8012b4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b50:	4606      	mov	r6, r0
 8012b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b56:	460f      	mov	r7, r1
 8012b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b5c:	f7ed fba6 	bl	80002ac <__adddf3>
 8012b60:	4642      	mov	r2, r8
 8012b62:	464b      	mov	r3, r9
 8012b64:	f7ed fba2 	bl	80002ac <__adddf3>
 8012b68:	4632      	mov	r2, r6
 8012b6a:	463b      	mov	r3, r7
 8012b6c:	f7ed fb9e 	bl	80002ac <__adddf3>
 8012b70:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012b74:	4632      	mov	r2, r6
 8012b76:	463b      	mov	r3, r7
 8012b78:	4658      	mov	r0, fp
 8012b7a:	460d      	mov	r5, r1
 8012b7c:	f7ed fb94 	bl	80002a8 <__aeabi_dsub>
 8012b80:	4642      	mov	r2, r8
 8012b82:	464b      	mov	r3, r9
 8012b84:	f7ed fb90 	bl	80002a8 <__aeabi_dsub>
 8012b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b8c:	f7ed fb8c 	bl	80002a8 <__aeabi_dsub>
 8012b90:	465c      	mov	r4, fp
 8012b92:	4602      	mov	r2, r0
 8012b94:	e036      	b.n	8012c04 <__ieee754_pow+0x79c>
 8012b96:	bf00      	nop
 8012b98:	4a454eef 	.word	0x4a454eef
 8012b9c:	3fca7e28 	.word	0x3fca7e28
 8012ba0:	93c9db65 	.word	0x93c9db65
 8012ba4:	3fcd864a 	.word	0x3fcd864a
 8012ba8:	a91d4101 	.word	0xa91d4101
 8012bac:	3fd17460 	.word	0x3fd17460
 8012bb0:	518f264d 	.word	0x518f264d
 8012bb4:	3fd55555 	.word	0x3fd55555
 8012bb8:	db6fabff 	.word	0xdb6fabff
 8012bbc:	3fdb6db6 	.word	0x3fdb6db6
 8012bc0:	33333303 	.word	0x33333303
 8012bc4:	3fe33333 	.word	0x3fe33333
 8012bc8:	e0000000 	.word	0xe0000000
 8012bcc:	3feec709 	.word	0x3feec709
 8012bd0:	dc3a03fd 	.word	0xdc3a03fd
 8012bd4:	3feec709 	.word	0x3feec709
 8012bd8:	145b01f5 	.word	0x145b01f5
 8012bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8012be0:	7ff00000 	.word	0x7ff00000
 8012be4:	43400000 	.word	0x43400000
 8012be8:	0003988e 	.word	0x0003988e
 8012bec:	000bb679 	.word	0x000bb679
 8012bf0:	08013fd0 	.word	0x08013fd0
 8012bf4:	3ff00000 	.word	0x3ff00000
 8012bf8:	40080000 	.word	0x40080000
 8012bfc:	08013fb0 	.word	0x08013fb0
 8012c00:	08013fc0 	.word	0x08013fc0
 8012c04:	460b      	mov	r3, r1
 8012c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c0a:	e5d7      	b.n	80127bc <__ieee754_pow+0x354>
 8012c0c:	f04f 0a01 	mov.w	sl, #1
 8012c10:	e65e      	b.n	80128d0 <__ieee754_pow+0x468>
 8012c12:	a3b4      	add	r3, pc, #720	@ (adr r3, 8012ee4 <__ieee754_pow+0xa7c>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	4630      	mov	r0, r6
 8012c1a:	4639      	mov	r1, r7
 8012c1c:	f7ed fb46 	bl	80002ac <__adddf3>
 8012c20:	4642      	mov	r2, r8
 8012c22:	e9cd 0100 	strd	r0, r1, [sp]
 8012c26:	464b      	mov	r3, r9
 8012c28:	4620      	mov	r0, r4
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	f7ed fb3c 	bl	80002a8 <__aeabi_dsub>
 8012c30:	4602      	mov	r2, r0
 8012c32:	460b      	mov	r3, r1
 8012c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c38:	f7ed ff7e 	bl	8000b38 <__aeabi_dcmpgt>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	f47f ae00 	bne.w	8012842 <__ieee754_pow+0x3da>
 8012c42:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8012c46:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012c4a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012c4e:	fa43 fa0a 	asr.w	sl, r3, sl
 8012c52:	44da      	add	sl, fp
 8012c54:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012c58:	489d      	ldr	r0, [pc, #628]	@ (8012ed0 <__ieee754_pow+0xa68>)
 8012c5a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012c5e:	4108      	asrs	r0, r1
 8012c60:	ea00 030a 	and.w	r3, r0, sl
 8012c64:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012c68:	f1c1 0114 	rsb	r1, r1, #20
 8012c6c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012c70:	fa4a fa01 	asr.w	sl, sl, r1
 8012c74:	f1bb 0f00 	cmp.w	fp, #0
 8012c78:	4640      	mov	r0, r8
 8012c7a:	4649      	mov	r1, r9
 8012c7c:	f04f 0200 	mov.w	r2, #0
 8012c80:	bfb8      	it	lt
 8012c82:	f1ca 0a00 	rsblt	sl, sl, #0
 8012c86:	f7ed fb0f 	bl	80002a8 <__aeabi_dsub>
 8012c8a:	4680      	mov	r8, r0
 8012c8c:	4689      	mov	r9, r1
 8012c8e:	4632      	mov	r2, r6
 8012c90:	463b      	mov	r3, r7
 8012c92:	4640      	mov	r0, r8
 8012c94:	4649      	mov	r1, r9
 8012c96:	f7ed fb09 	bl	80002ac <__adddf3>
 8012c9a:	2400      	movs	r4, #0
 8012c9c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012e90 <__ieee754_pow+0xa28>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	f7ed fcb7 	bl	8000618 <__aeabi_dmul>
 8012caa:	4642      	mov	r2, r8
 8012cac:	e9cd 0100 	strd	r0, r1, [sp]
 8012cb0:	464b      	mov	r3, r9
 8012cb2:	4620      	mov	r0, r4
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	f7ed faf7 	bl	80002a8 <__aeabi_dsub>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	f7ed faf1 	bl	80002a8 <__aeabi_dsub>
 8012cc6:	a374      	add	r3, pc, #464	@ (adr r3, 8012e98 <__ieee754_pow+0xa30>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	f7ed fca4 	bl	8000618 <__aeabi_dmul>
 8012cd0:	a373      	add	r3, pc, #460	@ (adr r3, 8012ea0 <__ieee754_pow+0xa38>)
 8012cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	4689      	mov	r9, r1
 8012cda:	4620      	mov	r0, r4
 8012cdc:	4629      	mov	r1, r5
 8012cde:	f7ed fc9b 	bl	8000618 <__aeabi_dmul>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	4640      	mov	r0, r8
 8012ce8:	4649      	mov	r1, r9
 8012cea:	f7ed fadf 	bl	80002ac <__adddf3>
 8012cee:	4604      	mov	r4, r0
 8012cf0:	460d      	mov	r5, r1
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cfa:	f7ed fad7 	bl	80002ac <__adddf3>
 8012cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d02:	4680      	mov	r8, r0
 8012d04:	4689      	mov	r9, r1
 8012d06:	f7ed facf 	bl	80002a8 <__aeabi_dsub>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	4620      	mov	r0, r4
 8012d10:	4629      	mov	r1, r5
 8012d12:	f7ed fac9 	bl	80002a8 <__aeabi_dsub>
 8012d16:	4642      	mov	r2, r8
 8012d18:	4606      	mov	r6, r0
 8012d1a:	460f      	mov	r7, r1
 8012d1c:	464b      	mov	r3, r9
 8012d1e:	4640      	mov	r0, r8
 8012d20:	4649      	mov	r1, r9
 8012d22:	f7ed fc79 	bl	8000618 <__aeabi_dmul>
 8012d26:	a360      	add	r3, pc, #384	@ (adr r3, 8012ea8 <__ieee754_pow+0xa40>)
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	460d      	mov	r5, r1
 8012d30:	f7ed fc72 	bl	8000618 <__aeabi_dmul>
 8012d34:	a35e      	add	r3, pc, #376	@ (adr r3, 8012eb0 <__ieee754_pow+0xa48>)
 8012d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3a:	f7ed fab5 	bl	80002a8 <__aeabi_dsub>
 8012d3e:	4622      	mov	r2, r4
 8012d40:	462b      	mov	r3, r5
 8012d42:	f7ed fc69 	bl	8000618 <__aeabi_dmul>
 8012d46:	a35c      	add	r3, pc, #368	@ (adr r3, 8012eb8 <__ieee754_pow+0xa50>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	f7ed faae 	bl	80002ac <__adddf3>
 8012d50:	4622      	mov	r2, r4
 8012d52:	462b      	mov	r3, r5
 8012d54:	f7ed fc60 	bl	8000618 <__aeabi_dmul>
 8012d58:	a359      	add	r3, pc, #356	@ (adr r3, 8012ec0 <__ieee754_pow+0xa58>)
 8012d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5e:	f7ed faa3 	bl	80002a8 <__aeabi_dsub>
 8012d62:	4622      	mov	r2, r4
 8012d64:	462b      	mov	r3, r5
 8012d66:	f7ed fc57 	bl	8000618 <__aeabi_dmul>
 8012d6a:	a357      	add	r3, pc, #348	@ (adr r3, 8012ec8 <__ieee754_pow+0xa60>)
 8012d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d70:	f7ed fa9c 	bl	80002ac <__adddf3>
 8012d74:	4622      	mov	r2, r4
 8012d76:	462b      	mov	r3, r5
 8012d78:	f7ed fc4e 	bl	8000618 <__aeabi_dmul>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	4640      	mov	r0, r8
 8012d82:	4649      	mov	r1, r9
 8012d84:	f7ed fa90 	bl	80002a8 <__aeabi_dsub>
 8012d88:	4604      	mov	r4, r0
 8012d8a:	460d      	mov	r5, r1
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	460b      	mov	r3, r1
 8012d90:	4640      	mov	r0, r8
 8012d92:	4649      	mov	r1, r9
 8012d94:	f7ed fc40 	bl	8000618 <__aeabi_dmul>
 8012d98:	2200      	movs	r2, #0
 8012d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8012d9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012da2:	4620      	mov	r0, r4
 8012da4:	4629      	mov	r1, r5
 8012da6:	f7ed fa7f 	bl	80002a8 <__aeabi_dsub>
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012db2:	f7ed fd5b 	bl	800086c <__aeabi_ddiv>
 8012db6:	4632      	mov	r2, r6
 8012db8:	4604      	mov	r4, r0
 8012dba:	460d      	mov	r5, r1
 8012dbc:	463b      	mov	r3, r7
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	4649      	mov	r1, r9
 8012dc2:	f7ed fc29 	bl	8000618 <__aeabi_dmul>
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	463b      	mov	r3, r7
 8012dca:	f7ed fa6f 	bl	80002ac <__adddf3>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	4629      	mov	r1, r5
 8012dd6:	f7ed fa67 	bl	80002a8 <__aeabi_dsub>
 8012dda:	4642      	mov	r2, r8
 8012ddc:	464b      	mov	r3, r9
 8012dde:	f7ed fa63 	bl	80002a8 <__aeabi_dsub>
 8012de2:	460b      	mov	r3, r1
 8012de4:	4602      	mov	r2, r0
 8012de6:	493b      	ldr	r1, [pc, #236]	@ (8012ed4 <__ieee754_pow+0xa6c>)
 8012de8:	2000      	movs	r0, #0
 8012dea:	f7ed fa5d 	bl	80002a8 <__aeabi_dsub>
 8012dee:	ec41 0b10 	vmov	d0, r0, r1
 8012df2:	ee10 3a90 	vmov	r3, s1
 8012df6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012dfe:	da30      	bge.n	8012e62 <__ieee754_pow+0x9fa>
 8012e00:	4650      	mov	r0, sl
 8012e02:	f000 f87d 	bl	8012f00 <scalbn>
 8012e06:	ec51 0b10 	vmov	r0, r1, d0
 8012e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e0e:	f7ff bbd2 	b.w	80125b6 <__ieee754_pow+0x14e>
 8012e12:	4c31      	ldr	r4, [pc, #196]	@ (8012ed8 <__ieee754_pow+0xa70>)
 8012e14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012e18:	42a3      	cmp	r3, r4
 8012e1a:	d91a      	bls.n	8012e52 <__ieee754_pow+0x9ea>
 8012e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8012edc <__ieee754_pow+0xa74>)
 8012e1e:	440b      	add	r3, r1
 8012e20:	4303      	orrs	r3, r0
 8012e22:	d009      	beq.n	8012e38 <__ieee754_pow+0x9d0>
 8012e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	f7ed fe66 	bl	8000afc <__aeabi_dcmplt>
 8012e30:	3800      	subs	r0, #0
 8012e32:	bf18      	it	ne
 8012e34:	2001      	movne	r0, #1
 8012e36:	e42b      	b.n	8012690 <__ieee754_pow+0x228>
 8012e38:	4642      	mov	r2, r8
 8012e3a:	464b      	mov	r3, r9
 8012e3c:	f7ed fa34 	bl	80002a8 <__aeabi_dsub>
 8012e40:	4632      	mov	r2, r6
 8012e42:	463b      	mov	r3, r7
 8012e44:	f7ed fe6e 	bl	8000b24 <__aeabi_dcmpge>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d1eb      	bne.n	8012e24 <__ieee754_pow+0x9bc>
 8012e4c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8012eec <__ieee754_pow+0xa84>
 8012e50:	e6f7      	b.n	8012c42 <__ieee754_pow+0x7da>
 8012e52:	469a      	mov	sl, r3
 8012e54:	4b22      	ldr	r3, [pc, #136]	@ (8012ee0 <__ieee754_pow+0xa78>)
 8012e56:	459a      	cmp	sl, r3
 8012e58:	f63f aef3 	bhi.w	8012c42 <__ieee754_pow+0x7da>
 8012e5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012e60:	e715      	b.n	8012c8e <__ieee754_pow+0x826>
 8012e62:	ec51 0b10 	vmov	r0, r1, d0
 8012e66:	4619      	mov	r1, r3
 8012e68:	e7cf      	b.n	8012e0a <__ieee754_pow+0x9a2>
 8012e6a:	491a      	ldr	r1, [pc, #104]	@ (8012ed4 <__ieee754_pow+0xa6c>)
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	f7ff bb18 	b.w	80124a2 <__ieee754_pow+0x3a>
 8012e72:	2000      	movs	r0, #0
 8012e74:	2100      	movs	r1, #0
 8012e76:	f7ff bb14 	b.w	80124a2 <__ieee754_pow+0x3a>
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	f7ff bb10 	b.w	80124a2 <__ieee754_pow+0x3a>
 8012e82:	460c      	mov	r4, r1
 8012e84:	f7ff bb5e 	b.w	8012544 <__ieee754_pow+0xdc>
 8012e88:	2400      	movs	r4, #0
 8012e8a:	f7ff bb49 	b.w	8012520 <__ieee754_pow+0xb8>
 8012e8e:	bf00      	nop
 8012e90:	00000000 	.word	0x00000000
 8012e94:	3fe62e43 	.word	0x3fe62e43
 8012e98:	fefa39ef 	.word	0xfefa39ef
 8012e9c:	3fe62e42 	.word	0x3fe62e42
 8012ea0:	0ca86c39 	.word	0x0ca86c39
 8012ea4:	be205c61 	.word	0xbe205c61
 8012ea8:	72bea4d0 	.word	0x72bea4d0
 8012eac:	3e663769 	.word	0x3e663769
 8012eb0:	c5d26bf1 	.word	0xc5d26bf1
 8012eb4:	3ebbbd41 	.word	0x3ebbbd41
 8012eb8:	af25de2c 	.word	0xaf25de2c
 8012ebc:	3f11566a 	.word	0x3f11566a
 8012ec0:	16bebd93 	.word	0x16bebd93
 8012ec4:	3f66c16c 	.word	0x3f66c16c
 8012ec8:	5555553e 	.word	0x5555553e
 8012ecc:	3fc55555 	.word	0x3fc55555
 8012ed0:	fff00000 	.word	0xfff00000
 8012ed4:	3ff00000 	.word	0x3ff00000
 8012ed8:	4090cbff 	.word	0x4090cbff
 8012edc:	3f6f3400 	.word	0x3f6f3400
 8012ee0:	3fe00000 	.word	0x3fe00000
 8012ee4:	652b82fe 	.word	0x652b82fe
 8012ee8:	3c971547 	.word	0x3c971547
 8012eec:	4090cc00 	.word	0x4090cc00

08012ef0 <fabs>:
 8012ef0:	ec51 0b10 	vmov	r0, r1, d0
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012efa:	ec43 2b10 	vmov	d0, r2, r3
 8012efe:	4770      	bx	lr

08012f00 <scalbn>:
 8012f00:	b570      	push	{r4, r5, r6, lr}
 8012f02:	ec55 4b10 	vmov	r4, r5, d0
 8012f06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	462b      	mov	r3, r5
 8012f0e:	b991      	cbnz	r1, 8012f36 <scalbn+0x36>
 8012f10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012f14:	4323      	orrs	r3, r4
 8012f16:	d03d      	beq.n	8012f94 <scalbn+0x94>
 8012f18:	4b35      	ldr	r3, [pc, #212]	@ (8012ff0 <scalbn+0xf0>)
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	4629      	mov	r1, r5
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f7ed fb7a 	bl	8000618 <__aeabi_dmul>
 8012f24:	4b33      	ldr	r3, [pc, #204]	@ (8012ff4 <scalbn+0xf4>)
 8012f26:	429e      	cmp	r6, r3
 8012f28:	4604      	mov	r4, r0
 8012f2a:	460d      	mov	r5, r1
 8012f2c:	da0f      	bge.n	8012f4e <scalbn+0x4e>
 8012f2e:	a328      	add	r3, pc, #160	@ (adr r3, 8012fd0 <scalbn+0xd0>)
 8012f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f34:	e01e      	b.n	8012f74 <scalbn+0x74>
 8012f36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012f3a:	4291      	cmp	r1, r2
 8012f3c:	d10b      	bne.n	8012f56 <scalbn+0x56>
 8012f3e:	4622      	mov	r2, r4
 8012f40:	4620      	mov	r0, r4
 8012f42:	4629      	mov	r1, r5
 8012f44:	f7ed f9b2 	bl	80002ac <__adddf3>
 8012f48:	4604      	mov	r4, r0
 8012f4a:	460d      	mov	r5, r1
 8012f4c:	e022      	b.n	8012f94 <scalbn+0x94>
 8012f4e:	460b      	mov	r3, r1
 8012f50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012f54:	3936      	subs	r1, #54	@ 0x36
 8012f56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012f5a:	4296      	cmp	r6, r2
 8012f5c:	dd0d      	ble.n	8012f7a <scalbn+0x7a>
 8012f5e:	2d00      	cmp	r5, #0
 8012f60:	a11d      	add	r1, pc, #116	@ (adr r1, 8012fd8 <scalbn+0xd8>)
 8012f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f66:	da02      	bge.n	8012f6e <scalbn+0x6e>
 8012f68:	a11d      	add	r1, pc, #116	@ (adr r1, 8012fe0 <scalbn+0xe0>)
 8012f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8012fd8 <scalbn+0xd8>)
 8012f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f74:	f7ed fb50 	bl	8000618 <__aeabi_dmul>
 8012f78:	e7e6      	b.n	8012f48 <scalbn+0x48>
 8012f7a:	1872      	adds	r2, r6, r1
 8012f7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012f80:	428a      	cmp	r2, r1
 8012f82:	dcec      	bgt.n	8012f5e <scalbn+0x5e>
 8012f84:	2a00      	cmp	r2, #0
 8012f86:	dd08      	ble.n	8012f9a <scalbn+0x9a>
 8012f88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012f8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012f90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f94:	ec45 4b10 	vmov	d0, r4, r5
 8012f98:	bd70      	pop	{r4, r5, r6, pc}
 8012f9a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012f9e:	da08      	bge.n	8012fb2 <scalbn+0xb2>
 8012fa0:	2d00      	cmp	r5, #0
 8012fa2:	a10b      	add	r1, pc, #44	@ (adr r1, 8012fd0 <scalbn+0xd0>)
 8012fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fa8:	dac1      	bge.n	8012f2e <scalbn+0x2e>
 8012faa:	a10f      	add	r1, pc, #60	@ (adr r1, 8012fe8 <scalbn+0xe8>)
 8012fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fb0:	e7bd      	b.n	8012f2e <scalbn+0x2e>
 8012fb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012fb6:	3236      	adds	r2, #54	@ 0x36
 8012fb8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012fbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012ff8 <scalbn+0xf8>)
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	e7d4      	b.n	8012f74 <scalbn+0x74>
 8012fca:	bf00      	nop
 8012fcc:	f3af 8000 	nop.w
 8012fd0:	c2f8f359 	.word	0xc2f8f359
 8012fd4:	01a56e1f 	.word	0x01a56e1f
 8012fd8:	8800759c 	.word	0x8800759c
 8012fdc:	7e37e43c 	.word	0x7e37e43c
 8012fe0:	8800759c 	.word	0x8800759c
 8012fe4:	fe37e43c 	.word	0xfe37e43c
 8012fe8:	c2f8f359 	.word	0xc2f8f359
 8012fec:	81a56e1f 	.word	0x81a56e1f
 8012ff0:	43500000 	.word	0x43500000
 8012ff4:	ffff3cb0 	.word	0xffff3cb0
 8012ff8:	3c900000 	.word	0x3c900000

08012ffc <with_errno>:
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	ed2d 8b02 	vpush	{d8}
 8013002:	eeb0 8a40 	vmov.f32	s16, s0
 8013006:	eef0 8a60 	vmov.f32	s17, s1
 801300a:	4604      	mov	r4, r0
 801300c:	f7fc fd84 	bl	800fb18 <__errno>
 8013010:	eeb0 0a48 	vmov.f32	s0, s16
 8013014:	eef0 0a68 	vmov.f32	s1, s17
 8013018:	ecbd 8b02 	vpop	{d8}
 801301c:	6004      	str	r4, [r0, #0]
 801301e:	bd10      	pop	{r4, pc}

08013020 <xflow>:
 8013020:	4603      	mov	r3, r0
 8013022:	b507      	push	{r0, r1, r2, lr}
 8013024:	ec51 0b10 	vmov	r0, r1, d0
 8013028:	b183      	cbz	r3, 801304c <xflow+0x2c>
 801302a:	4602      	mov	r2, r0
 801302c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013030:	e9cd 2300 	strd	r2, r3, [sp]
 8013034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013038:	f7ed faee 	bl	8000618 <__aeabi_dmul>
 801303c:	ec41 0b10 	vmov	d0, r0, r1
 8013040:	2022      	movs	r0, #34	@ 0x22
 8013042:	b003      	add	sp, #12
 8013044:	f85d eb04 	ldr.w	lr, [sp], #4
 8013048:	f7ff bfd8 	b.w	8012ffc <with_errno>
 801304c:	4602      	mov	r2, r0
 801304e:	460b      	mov	r3, r1
 8013050:	e7ee      	b.n	8013030 <xflow+0x10>
 8013052:	0000      	movs	r0, r0
 8013054:	0000      	movs	r0, r0
	...

08013058 <__math_uflow>:
 8013058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013060 <__math_uflow+0x8>
 801305c:	f7ff bfe0 	b.w	8013020 <xflow>
 8013060:	00000000 	.word	0x00000000
 8013064:	10000000 	.word	0x10000000

08013068 <__math_oflow>:
 8013068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013070 <__math_oflow+0x8>
 801306c:	f7ff bfd8 	b.w	8013020 <xflow>
 8013070:	00000000 	.word	0x00000000
 8013074:	70000000 	.word	0x70000000

08013078 <__ieee754_sqrt>:
 8013078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307c:	4a68      	ldr	r2, [pc, #416]	@ (8013220 <__ieee754_sqrt+0x1a8>)
 801307e:	ec55 4b10 	vmov	r4, r5, d0
 8013082:	43aa      	bics	r2, r5
 8013084:	462b      	mov	r3, r5
 8013086:	4621      	mov	r1, r4
 8013088:	d110      	bne.n	80130ac <__ieee754_sqrt+0x34>
 801308a:	4622      	mov	r2, r4
 801308c:	4620      	mov	r0, r4
 801308e:	4629      	mov	r1, r5
 8013090:	f7ed fac2 	bl	8000618 <__aeabi_dmul>
 8013094:	4602      	mov	r2, r0
 8013096:	460b      	mov	r3, r1
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed f906 	bl	80002ac <__adddf3>
 80130a0:	4604      	mov	r4, r0
 80130a2:	460d      	mov	r5, r1
 80130a4:	ec45 4b10 	vmov	d0, r4, r5
 80130a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ac:	2d00      	cmp	r5, #0
 80130ae:	dc0e      	bgt.n	80130ce <__ieee754_sqrt+0x56>
 80130b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80130b4:	4322      	orrs	r2, r4
 80130b6:	d0f5      	beq.n	80130a4 <__ieee754_sqrt+0x2c>
 80130b8:	b19d      	cbz	r5, 80130e2 <__ieee754_sqrt+0x6a>
 80130ba:	4622      	mov	r2, r4
 80130bc:	4620      	mov	r0, r4
 80130be:	4629      	mov	r1, r5
 80130c0:	f7ed f8f2 	bl	80002a8 <__aeabi_dsub>
 80130c4:	4602      	mov	r2, r0
 80130c6:	460b      	mov	r3, r1
 80130c8:	f7ed fbd0 	bl	800086c <__aeabi_ddiv>
 80130cc:	e7e8      	b.n	80130a0 <__ieee754_sqrt+0x28>
 80130ce:	152a      	asrs	r2, r5, #20
 80130d0:	d115      	bne.n	80130fe <__ieee754_sqrt+0x86>
 80130d2:	2000      	movs	r0, #0
 80130d4:	e009      	b.n	80130ea <__ieee754_sqrt+0x72>
 80130d6:	0acb      	lsrs	r3, r1, #11
 80130d8:	3a15      	subs	r2, #21
 80130da:	0549      	lsls	r1, r1, #21
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d0fa      	beq.n	80130d6 <__ieee754_sqrt+0x5e>
 80130e0:	e7f7      	b.n	80130d2 <__ieee754_sqrt+0x5a>
 80130e2:	462a      	mov	r2, r5
 80130e4:	e7fa      	b.n	80130dc <__ieee754_sqrt+0x64>
 80130e6:	005b      	lsls	r3, r3, #1
 80130e8:	3001      	adds	r0, #1
 80130ea:	02dc      	lsls	r4, r3, #11
 80130ec:	d5fb      	bpl.n	80130e6 <__ieee754_sqrt+0x6e>
 80130ee:	1e44      	subs	r4, r0, #1
 80130f0:	1b12      	subs	r2, r2, r4
 80130f2:	f1c0 0420 	rsb	r4, r0, #32
 80130f6:	fa21 f404 	lsr.w	r4, r1, r4
 80130fa:	4323      	orrs	r3, r4
 80130fc:	4081      	lsls	r1, r0
 80130fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013102:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801310a:	07d2      	lsls	r2, r2, #31
 801310c:	bf5c      	itt	pl
 801310e:	005b      	lslpl	r3, r3, #1
 8013110:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013114:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013118:	bf58      	it	pl
 801311a:	0049      	lslpl	r1, r1, #1
 801311c:	2600      	movs	r6, #0
 801311e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013122:	106d      	asrs	r5, r5, #1
 8013124:	0049      	lsls	r1, r1, #1
 8013126:	2016      	movs	r0, #22
 8013128:	4632      	mov	r2, r6
 801312a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801312e:	1917      	adds	r7, r2, r4
 8013130:	429f      	cmp	r7, r3
 8013132:	bfde      	ittt	le
 8013134:	193a      	addle	r2, r7, r4
 8013136:	1bdb      	suble	r3, r3, r7
 8013138:	1936      	addle	r6, r6, r4
 801313a:	0fcf      	lsrs	r7, r1, #31
 801313c:	3801      	subs	r0, #1
 801313e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013142:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013146:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801314a:	d1f0      	bne.n	801312e <__ieee754_sqrt+0xb6>
 801314c:	4604      	mov	r4, r0
 801314e:	2720      	movs	r7, #32
 8013150:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013154:	429a      	cmp	r2, r3
 8013156:	eb00 0e0c 	add.w	lr, r0, ip
 801315a:	db02      	blt.n	8013162 <__ieee754_sqrt+0xea>
 801315c:	d113      	bne.n	8013186 <__ieee754_sqrt+0x10e>
 801315e:	458e      	cmp	lr, r1
 8013160:	d811      	bhi.n	8013186 <__ieee754_sqrt+0x10e>
 8013162:	f1be 0f00 	cmp.w	lr, #0
 8013166:	eb0e 000c 	add.w	r0, lr, ip
 801316a:	da42      	bge.n	80131f2 <__ieee754_sqrt+0x17a>
 801316c:	2800      	cmp	r0, #0
 801316e:	db40      	blt.n	80131f2 <__ieee754_sqrt+0x17a>
 8013170:	f102 0801 	add.w	r8, r2, #1
 8013174:	1a9b      	subs	r3, r3, r2
 8013176:	458e      	cmp	lr, r1
 8013178:	bf88      	it	hi
 801317a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801317e:	eba1 010e 	sub.w	r1, r1, lr
 8013182:	4464      	add	r4, ip
 8013184:	4642      	mov	r2, r8
 8013186:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801318a:	3f01      	subs	r7, #1
 801318c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013190:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013194:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013198:	d1dc      	bne.n	8013154 <__ieee754_sqrt+0xdc>
 801319a:	4319      	orrs	r1, r3
 801319c:	d01b      	beq.n	80131d6 <__ieee754_sqrt+0x15e>
 801319e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013224 <__ieee754_sqrt+0x1ac>
 80131a2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013228 <__ieee754_sqrt+0x1b0>
 80131a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80131aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80131ae:	f7ed f87b 	bl	80002a8 <__aeabi_dsub>
 80131b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80131b6:	4602      	mov	r2, r0
 80131b8:	460b      	mov	r3, r1
 80131ba:	4640      	mov	r0, r8
 80131bc:	4649      	mov	r1, r9
 80131be:	f7ed fca7 	bl	8000b10 <__aeabi_dcmple>
 80131c2:	b140      	cbz	r0, 80131d6 <__ieee754_sqrt+0x15e>
 80131c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80131c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80131cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80131d0:	d111      	bne.n	80131f6 <__ieee754_sqrt+0x17e>
 80131d2:	3601      	adds	r6, #1
 80131d4:	463c      	mov	r4, r7
 80131d6:	1072      	asrs	r2, r6, #1
 80131d8:	0863      	lsrs	r3, r4, #1
 80131da:	07f1      	lsls	r1, r6, #31
 80131dc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80131e0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80131e4:	bf48      	it	mi
 80131e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80131ea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80131ee:	4618      	mov	r0, r3
 80131f0:	e756      	b.n	80130a0 <__ieee754_sqrt+0x28>
 80131f2:	4690      	mov	r8, r2
 80131f4:	e7be      	b.n	8013174 <__ieee754_sqrt+0xfc>
 80131f6:	f7ed f859 	bl	80002ac <__adddf3>
 80131fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80131fe:	4602      	mov	r2, r0
 8013200:	460b      	mov	r3, r1
 8013202:	4640      	mov	r0, r8
 8013204:	4649      	mov	r1, r9
 8013206:	f7ed fc79 	bl	8000afc <__aeabi_dcmplt>
 801320a:	b120      	cbz	r0, 8013216 <__ieee754_sqrt+0x19e>
 801320c:	1ca0      	adds	r0, r4, #2
 801320e:	bf08      	it	eq
 8013210:	3601      	addeq	r6, #1
 8013212:	3402      	adds	r4, #2
 8013214:	e7df      	b.n	80131d6 <__ieee754_sqrt+0x15e>
 8013216:	1c63      	adds	r3, r4, #1
 8013218:	f023 0401 	bic.w	r4, r3, #1
 801321c:	e7db      	b.n	80131d6 <__ieee754_sqrt+0x15e>
 801321e:	bf00      	nop
 8013220:	7ff00000 	.word	0x7ff00000
 8013224:	200001e8 	.word	0x200001e8
 8013228:	200001e0 	.word	0x200001e0

0801322c <_sbrk>:
 801322c:	4a04      	ldr	r2, [pc, #16]	@ (8013240 <_sbrk+0x14>)
 801322e:	6811      	ldr	r1, [r2, #0]
 8013230:	4603      	mov	r3, r0
 8013232:	b909      	cbnz	r1, 8013238 <_sbrk+0xc>
 8013234:	4903      	ldr	r1, [pc, #12]	@ (8013244 <_sbrk+0x18>)
 8013236:	6011      	str	r1, [r2, #0]
 8013238:	6810      	ldr	r0, [r2, #0]
 801323a:	4403      	add	r3, r0
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	4770      	bx	lr
 8013240:	200155d8 	.word	0x200155d8
 8013244:	200155e0 	.word	0x200155e0

08013248 <_init>:
 8013248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801324a:	bf00      	nop
 801324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801324e:	bc08      	pop	{r3}
 8013250:	469e      	mov	lr, r3
 8013252:	4770      	bx	lr

08013254 <_fini>:
 8013254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013256:	bf00      	nop
 8013258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801325a:	bc08      	pop	{r3}
 801325c:	469e      	mov	lr, r3
 801325e:	4770      	bx	lr

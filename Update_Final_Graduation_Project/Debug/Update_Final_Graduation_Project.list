
Update_Final_Graduation_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae8  08040190  08040190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0804cc78  0804cc78  0000dc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804d250  0804d250  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0804d250  0804d250  0000e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804d258  0804d258  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804d258  0804d258  0000e258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804d25c  0804d25c  0000e25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0804d260  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f0  2**0
                  CONTENTS
 10 .bss          000130d0  200001f0  200001f0  0000f1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200132c0  200132c0  0000f1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a5e  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be2  00000000  00000000  00028c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0002c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001285  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026309  00000000  00000000  0002f2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4ec  00000000  00000000  000555ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5132  00000000  00000000  00073a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158bcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000788c  00000000  00000000  00158c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0016049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	@ (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	@ (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	@ (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	200001f0 	.word	0x200001f0
 80401ac:	00000000 	.word	0x00000000
 80401b0:	0804cc60 	.word	0x0804cc60

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	@ (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	@ (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	@ (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	200001f4 	.word	0x200001f4
 80401cc:	0804cc60 	.word	0x0804cc60

080401d0 <strcmp>:
 80401d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80401d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80401d8:	2a01      	cmp	r2, #1
 80401da:	bf28      	it	cs
 80401dc:	429a      	cmpcs	r2, r3
 80401de:	d0f7      	beq.n	80401d0 <strcmp>
 80401e0:	1ad0      	subs	r0, r2, r3
 80401e2:	4770      	bx	lr
	...

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <strlen>:
 8040290:	4603      	mov	r3, r0
 8040292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040296:	2a00      	cmp	r2, #0
 8040298:	d1fb      	bne.n	8040292 <strlen+0x2>
 804029a:	1a18      	subs	r0, r3, r0
 804029c:	3801      	subs	r0, #1
 804029e:	4770      	bx	lr

080402a0 <__aeabi_drsub>:
 80402a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80402a4:	e002      	b.n	80402ac <__adddf3>
 80402a6:	bf00      	nop

080402a8 <__aeabi_dsub>:
 80402a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080402ac <__adddf3>:
 80402ac:	b530      	push	{r4, r5, lr}
 80402ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80402b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80402b6:	ea94 0f05 	teq	r4, r5
 80402ba:	bf08      	it	eq
 80402bc:	ea90 0f02 	teqeq	r0, r2
 80402c0:	bf1f      	itttt	ne
 80402c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402d2:	f000 80e2 	beq.w	804049a <__adddf3+0x1ee>
 80402d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402de:	bfb8      	it	lt
 80402e0:	426d      	neglt	r5, r5
 80402e2:	dd0c      	ble.n	80402fe <__adddf3+0x52>
 80402e4:	442c      	add	r4, r5
 80402e6:	ea80 0202 	eor.w	r2, r0, r2
 80402ea:	ea81 0303 	eor.w	r3, r1, r3
 80402ee:	ea82 0000 	eor.w	r0, r2, r0
 80402f2:	ea83 0101 	eor.w	r1, r3, r1
 80402f6:	ea80 0202 	eor.w	r2, r0, r2
 80402fa:	ea81 0303 	eor.w	r3, r1, r3
 80402fe:	2d36      	cmp	r5, #54	@ 0x36
 8040300:	bf88      	it	hi
 8040302:	bd30      	pophi	{r4, r5, pc}
 8040304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8040308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8040310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040314:	d002      	beq.n	804031c <__adddf3+0x70>
 8040316:	4240      	negs	r0, r0
 8040318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8040320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040328:	d002      	beq.n	8040330 <__adddf3+0x84>
 804032a:	4252      	negs	r2, r2
 804032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040330:	ea94 0f05 	teq	r4, r5
 8040334:	f000 80a7 	beq.w	8040486 <__adddf3+0x1da>
 8040338:	f1a4 0401 	sub.w	r4, r4, #1
 804033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040340:	db0d      	blt.n	804035e <__adddf3+0xb2>
 8040342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040346:	fa22 f205 	lsr.w	r2, r2, r5
 804034a:	1880      	adds	r0, r0, r2
 804034c:	f141 0100 	adc.w	r1, r1, #0
 8040350:	fa03 f20e 	lsl.w	r2, r3, lr
 8040354:	1880      	adds	r0, r0, r2
 8040356:	fa43 f305 	asr.w	r3, r3, r5
 804035a:	4159      	adcs	r1, r3
 804035c:	e00e      	b.n	804037c <__adddf3+0xd0>
 804035e:	f1a5 0520 	sub.w	r5, r5, #32
 8040362:	f10e 0e20 	add.w	lr, lr, #32
 8040366:	2a01      	cmp	r2, #1
 8040368:	fa03 fc0e 	lsl.w	ip, r3, lr
 804036c:	bf28      	it	cs
 804036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040372:	fa43 f305 	asr.w	r3, r3, r5
 8040376:	18c0      	adds	r0, r0, r3
 8040378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8040380:	d507      	bpl.n	8040392 <__adddf3+0xe6>
 8040382:	f04f 0e00 	mov.w	lr, #0
 8040386:	f1dc 0c00 	rsbs	ip, ip, #0
 804038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8040396:	d31b      	bcc.n	80403d0 <__adddf3+0x124>
 8040398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 804039c:	d30c      	bcc.n	80403b8 <__adddf3+0x10c>
 804039e:	0849      	lsrs	r1, r1, #1
 80403a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80403a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80403a8:	f104 0401 	add.w	r4, r4, #1
 80403ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80403b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80403b4:	f080 809a 	bcs.w	80404ec <__adddf3+0x240>
 80403b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80403bc:	bf08      	it	eq
 80403be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403c2:	f150 0000 	adcs.w	r0, r0, #0
 80403c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403ca:	ea41 0105 	orr.w	r1, r1, r5
 80403ce:	bd30      	pop	{r4, r5, pc}
 80403d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403d4:	4140      	adcs	r0, r0
 80403d6:	eb41 0101 	adc.w	r1, r1, r1
 80403da:	3c01      	subs	r4, #1
 80403dc:	bf28      	it	cs
 80403de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80403e2:	d2e9      	bcs.n	80403b8 <__adddf3+0x10c>
 80403e4:	f091 0f00 	teq	r1, #0
 80403e8:	bf04      	itt	eq
 80403ea:	4601      	moveq	r1, r0
 80403ec:	2000      	moveq	r0, #0
 80403ee:	fab1 f381 	clz	r3, r1
 80403f2:	bf08      	it	eq
 80403f4:	3320      	addeq	r3, #32
 80403f6:	f1a3 030b 	sub.w	r3, r3, #11
 80403fa:	f1b3 0220 	subs.w	r2, r3, #32
 80403fe:	da0c      	bge.n	804041a <__adddf3+0x16e>
 8040400:	320c      	adds	r2, #12
 8040402:	dd08      	ble.n	8040416 <__adddf3+0x16a>
 8040404:	f102 0c14 	add.w	ip, r2, #20
 8040408:	f1c2 020c 	rsb	r2, r2, #12
 804040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040410:	fa21 f102 	lsr.w	r1, r1, r2
 8040414:	e00c      	b.n	8040430 <__adddf3+0x184>
 8040416:	f102 0214 	add.w	r2, r2, #20
 804041a:	bfd8      	it	le
 804041c:	f1c2 0c20 	rsble	ip, r2, #32
 8040420:	fa01 f102 	lsl.w	r1, r1, r2
 8040424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040428:	bfdc      	itt	le
 804042a:	ea41 010c 	orrle.w	r1, r1, ip
 804042e:	4090      	lslle	r0, r2
 8040430:	1ae4      	subs	r4, r4, r3
 8040432:	bfa2      	ittt	ge
 8040434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040438:	4329      	orrge	r1, r5
 804043a:	bd30      	popge	{r4, r5, pc}
 804043c:	ea6f 0404 	mvn.w	r4, r4
 8040440:	3c1f      	subs	r4, #31
 8040442:	da1c      	bge.n	804047e <__adddf3+0x1d2>
 8040444:	340c      	adds	r4, #12
 8040446:	dc0e      	bgt.n	8040466 <__adddf3+0x1ba>
 8040448:	f104 0414 	add.w	r4, r4, #20
 804044c:	f1c4 0220 	rsb	r2, r4, #32
 8040450:	fa20 f004 	lsr.w	r0, r0, r4
 8040454:	fa01 f302 	lsl.w	r3, r1, r2
 8040458:	ea40 0003 	orr.w	r0, r0, r3
 804045c:	fa21 f304 	lsr.w	r3, r1, r4
 8040460:	ea45 0103 	orr.w	r1, r5, r3
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f1c4 040c 	rsb	r4, r4, #12
 804046a:	f1c4 0220 	rsb	r2, r4, #32
 804046e:	fa20 f002 	lsr.w	r0, r0, r2
 8040472:	fa01 f304 	lsl.w	r3, r1, r4
 8040476:	ea40 0003 	orr.w	r0, r0, r3
 804047a:	4629      	mov	r1, r5
 804047c:	bd30      	pop	{r4, r5, pc}
 804047e:	fa21 f004 	lsr.w	r0, r1, r4
 8040482:	4629      	mov	r1, r5
 8040484:	bd30      	pop	{r4, r5, pc}
 8040486:	f094 0f00 	teq	r4, #0
 804048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 804048e:	bf06      	itte	eq
 8040490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8040494:	3401      	addeq	r4, #1
 8040496:	3d01      	subne	r5, #1
 8040498:	e74e      	b.n	8040338 <__adddf3+0x8c>
 804049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804049e:	bf18      	it	ne
 80404a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80404a4:	d029      	beq.n	80404fa <__adddf3+0x24e>
 80404a6:	ea94 0f05 	teq	r4, r5
 80404aa:	bf08      	it	eq
 80404ac:	ea90 0f02 	teqeq	r0, r2
 80404b0:	d005      	beq.n	80404be <__adddf3+0x212>
 80404b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80404b6:	bf04      	itt	eq
 80404b8:	4619      	moveq	r1, r3
 80404ba:	4610      	moveq	r0, r2
 80404bc:	bd30      	pop	{r4, r5, pc}
 80404be:	ea91 0f03 	teq	r1, r3
 80404c2:	bf1e      	ittt	ne
 80404c4:	2100      	movne	r1, #0
 80404c6:	2000      	movne	r0, #0
 80404c8:	bd30      	popne	{r4, r5, pc}
 80404ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ce:	d105      	bne.n	80404dc <__adddf3+0x230>
 80404d0:	0040      	lsls	r0, r0, #1
 80404d2:	4149      	adcs	r1, r1
 80404d4:	bf28      	it	cs
 80404d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80404da:	bd30      	pop	{r4, r5, pc}
 80404dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80404e0:	bf3c      	itt	cc
 80404e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80404e6:	bd30      	popcc	{r4, r5, pc}
 80404e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80404ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80404f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80404f4:	f04f 0000 	mov.w	r0, #0
 80404f8:	bd30      	pop	{r4, r5, pc}
 80404fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404fe:	bf1a      	itte	ne
 8040500:	4619      	movne	r1, r3
 8040502:	4610      	movne	r0, r2
 8040504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040508:	bf1c      	itt	ne
 804050a:	460b      	movne	r3, r1
 804050c:	4602      	movne	r2, r0
 804050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040512:	bf06      	itte	eq
 8040514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040518:	ea91 0f03 	teqeq	r1, r3
 804051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8040520:	bd30      	pop	{r4, r5, pc}
 8040522:	bf00      	nop

08040524 <__aeabi_ui2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8040538:	f04f 0500 	mov.w	r5, #0
 804053c:	f04f 0100 	mov.w	r1, #0
 8040540:	e750      	b.n	80403e4 <__adddf3+0x138>
 8040542:	bf00      	nop

08040544 <__aeabi_i2d>:
 8040544:	f090 0f00 	teq	r0, #0
 8040548:	bf04      	itt	eq
 804054a:	2100      	moveq	r1, #0
 804054c:	4770      	bxeq	lr
 804054e:	b530      	push	{r4, r5, lr}
 8040550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8040554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8040558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 804055c:	bf48      	it	mi
 804055e:	4240      	negmi	r0, r0
 8040560:	f04f 0100 	mov.w	r1, #0
 8040564:	e73e      	b.n	80403e4 <__adddf3+0x138>
 8040566:	bf00      	nop

08040568 <__aeabi_f2d>:
 8040568:	0042      	lsls	r2, r0, #1
 804056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040576:	bf1f      	itttt	ne
 8040578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 804057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8040580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8040584:	4770      	bxne	lr
 8040586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 804058a:	bf08      	it	eq
 804058c:	4770      	bxeq	lr
 804058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8040592:	bf04      	itt	eq
 8040594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8040598:	4770      	bxeq	lr
 804059a:	b530      	push	{r4, r5, lr}
 804059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80405a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80405a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80405a8:	e71c      	b.n	80403e4 <__adddf3+0x138>
 80405aa:	bf00      	nop

080405ac <__aeabi_ul2d>:
 80405ac:	ea50 0201 	orrs.w	r2, r0, r1
 80405b0:	bf08      	it	eq
 80405b2:	4770      	bxeq	lr
 80405b4:	b530      	push	{r4, r5, lr}
 80405b6:	f04f 0500 	mov.w	r5, #0
 80405ba:	e00a      	b.n	80405d2 <__aeabi_l2d+0x16>

080405bc <__aeabi_l2d>:
 80405bc:	ea50 0201 	orrs.w	r2, r0, r1
 80405c0:	bf08      	it	eq
 80405c2:	4770      	bxeq	lr
 80405c4:	b530      	push	{r4, r5, lr}
 80405c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80405ca:	d502      	bpl.n	80405d2 <__aeabi_l2d+0x16>
 80405cc:	4240      	negs	r0, r0
 80405ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80405d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80405da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405de:	f43f aed8 	beq.w	8040392 <__adddf3+0xe6>
 80405e2:	f04f 0203 	mov.w	r2, #3
 80405e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ea:	bf18      	it	ne
 80405ec:	3203      	addne	r2, #3
 80405ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405f2:	bf18      	it	ne
 80405f4:	3203      	addne	r2, #3
 80405f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405fa:	f1c2 0320 	rsb	r3, r2, #32
 80405fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8040602:	fa20 f002 	lsr.w	r0, r0, r2
 8040606:	fa01 fe03 	lsl.w	lr, r1, r3
 804060a:	ea40 000e 	orr.w	r0, r0, lr
 804060e:	fa21 f102 	lsr.w	r1, r1, r2
 8040612:	4414      	add	r4, r2
 8040614:	e6bd      	b.n	8040392 <__adddf3+0xe6>
 8040616:	bf00      	nop

08040618 <__aeabi_dmul>:
 8040618:	b570      	push	{r4, r5, r6, lr}
 804061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 804061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8040622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040626:	bf1d      	ittte	ne
 8040628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804062c:	ea94 0f0c 	teqne	r4, ip
 8040630:	ea95 0f0c 	teqne	r5, ip
 8040634:	f000 f8de 	bleq	80407f4 <__aeabi_dmul+0x1dc>
 8040638:	442c      	add	r4, r5
 804063a:	ea81 0603 	eor.w	r6, r1, r3
 804063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804064a:	bf18      	it	ne
 804064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8040654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8040658:	d038      	beq.n	80406cc <__aeabi_dmul+0xb4>
 804065a:	fba0 ce02 	umull	ip, lr, r0, r2
 804065e:	f04f 0500 	mov.w	r5, #0
 8040662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 804066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804066e:	f04f 0600 	mov.w	r6, #0
 8040672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040676:	f09c 0f00 	teq	ip, #0
 804067a:	bf18      	it	ne
 804067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8040684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8040688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 804068c:	d204      	bcs.n	8040698 <__aeabi_dmul+0x80>
 804068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040692:	416d      	adcs	r5, r5
 8040694:	eb46 0606 	adc.w	r6, r6, r6
 8040698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80406a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80406a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80406a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80406ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80406b0:	bf88      	it	hi
 80406b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80406b6:	d81e      	bhi.n	80406f6 <__aeabi_dmul+0xde>
 80406b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80406bc:	bf08      	it	eq
 80406be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406c2:	f150 0000 	adcs.w	r0, r0, #0
 80406c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	pop	{r4, r5, r6, pc}
 80406cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80406d0:	ea46 0101 	orr.w	r1, r6, r1
 80406d4:	ea40 0002 	orr.w	r0, r0, r2
 80406d8:	ea81 0103 	eor.w	r1, r1, r3
 80406dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406e0:	bfc2      	ittt	gt
 80406e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ea:	bd70      	popgt	{r4, r5, r6, pc}
 80406ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80406f0:	f04f 0e00 	mov.w	lr, #0
 80406f4:	3c01      	subs	r4, #1
 80406f6:	f300 80ab 	bgt.w	8040850 <__aeabi_dmul+0x238>
 80406fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80406fe:	bfde      	ittt	le
 8040700:	2000      	movle	r0, #0
 8040702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8040706:	bd70      	pople	{r4, r5, r6, pc}
 8040708:	f1c4 0400 	rsb	r4, r4, #0
 804070c:	3c20      	subs	r4, #32
 804070e:	da35      	bge.n	804077c <__aeabi_dmul+0x164>
 8040710:	340c      	adds	r4, #12
 8040712:	dc1b      	bgt.n	804074c <__aeabi_dmul+0x134>
 8040714:	f104 0414 	add.w	r4, r4, #20
 8040718:	f1c4 0520 	rsb	r5, r4, #32
 804071c:	fa00 f305 	lsl.w	r3, r0, r5
 8040720:	fa20 f004 	lsr.w	r0, r0, r4
 8040724:	fa01 f205 	lsl.w	r2, r1, r5
 8040728:	ea40 0002 	orr.w	r0, r0, r2
 804072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8040730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8040734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040738:	fa21 f604 	lsr.w	r6, r1, r4
 804073c:	eb42 0106 	adc.w	r1, r2, r6
 8040740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040744:	bf08      	it	eq
 8040746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804074a:	bd70      	pop	{r4, r5, r6, pc}
 804074c:	f1c4 040c 	rsb	r4, r4, #12
 8040750:	f1c4 0520 	rsb	r5, r4, #32
 8040754:	fa00 f304 	lsl.w	r3, r0, r4
 8040758:	fa20 f005 	lsr.w	r0, r0, r5
 804075c:	fa01 f204 	lsl.w	r2, r1, r4
 8040760:	ea40 0002 	orr.w	r0, r0, r2
 8040764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8040768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804076c:	f141 0100 	adc.w	r1, r1, #0
 8040770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040774:	bf08      	it	eq
 8040776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804077a:	bd70      	pop	{r4, r5, r6, pc}
 804077c:	f1c4 0520 	rsb	r5, r4, #32
 8040780:	fa00 f205 	lsl.w	r2, r0, r5
 8040784:	ea4e 0e02 	orr.w	lr, lr, r2
 8040788:	fa20 f304 	lsr.w	r3, r0, r4
 804078c:	fa01 f205 	lsl.w	r2, r1, r5
 8040790:	ea43 0302 	orr.w	r3, r3, r2
 8040794:	fa21 f004 	lsr.w	r0, r1, r4
 8040798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 804079c:	fa21 f204 	lsr.w	r2, r1, r4
 80407a0:	ea20 0002 	bic.w	r0, r0, r2
 80407a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80407a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80407ac:	bf08      	it	eq
 80407ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80407b2:	bd70      	pop	{r4, r5, r6, pc}
 80407b4:	f094 0f00 	teq	r4, #0
 80407b8:	d10f      	bne.n	80407da <__aeabi_dmul+0x1c2>
 80407ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80407be:	0040      	lsls	r0, r0, #1
 80407c0:	eb41 0101 	adc.w	r1, r1, r1
 80407c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3c01      	subeq	r4, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1a6>
 80407ce:	ea41 0106 	orr.w	r1, r1, r6
 80407d2:	f095 0f00 	teq	r5, #0
 80407d6:	bf18      	it	ne
 80407d8:	4770      	bxne	lr
 80407da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80407de:	0052      	lsls	r2, r2, #1
 80407e0:	eb43 0303 	adc.w	r3, r3, r3
 80407e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80407e8:	bf08      	it	eq
 80407ea:	3d01      	subeq	r5, #1
 80407ec:	d0f7      	beq.n	80407de <__aeabi_dmul+0x1c6>
 80407ee:	ea43 0306 	orr.w	r3, r3, r6
 80407f2:	4770      	bx	lr
 80407f4:	ea94 0f0c 	teq	r4, ip
 80407f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407fc:	bf18      	it	ne
 80407fe:	ea95 0f0c 	teqne	r5, ip
 8040802:	d00c      	beq.n	804081e <__aeabi_dmul+0x206>
 8040804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040808:	bf18      	it	ne
 804080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080e:	d1d1      	bne.n	80407b4 <__aeabi_dmul+0x19c>
 8040810:	ea81 0103 	eor.w	r1, r1, r3
 8040814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8040818:	f04f 0000 	mov.w	r0, #0
 804081c:	bd70      	pop	{r4, r5, r6, pc}
 804081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040822:	bf06      	itte	eq
 8040824:	4610      	moveq	r0, r2
 8040826:	4619      	moveq	r1, r3
 8040828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804082c:	d019      	beq.n	8040862 <__aeabi_dmul+0x24a>
 804082e:	ea94 0f0c 	teq	r4, ip
 8040832:	d102      	bne.n	804083a <__aeabi_dmul+0x222>
 8040834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040838:	d113      	bne.n	8040862 <__aeabi_dmul+0x24a>
 804083a:	ea95 0f0c 	teq	r5, ip
 804083e:	d105      	bne.n	804084c <__aeabi_dmul+0x234>
 8040840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040844:	bf1c      	itt	ne
 8040846:	4610      	movne	r0, r2
 8040848:	4619      	movne	r1, r3
 804084a:	d10a      	bne.n	8040862 <__aeabi_dmul+0x24a>
 804084c:	ea81 0103 	eor.w	r1, r1, r3
 8040850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8040854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8040858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 804085c:	f04f 0000 	mov.w	r0, #0
 8040860:	bd70      	pop	{r4, r5, r6, pc}
 8040862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8040866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 804086a:	bd70      	pop	{r4, r5, r6, pc}

0804086c <__aeabi_ddiv>:
 804086c:	b570      	push	{r4, r5, r6, lr}
 804086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8040872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8040876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804087a:	bf1d      	ittte	ne
 804087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040880:	ea94 0f0c 	teqne	r4, ip
 8040884:	ea95 0f0c 	teqne	r5, ip
 8040888:	f000 f8a7 	bleq	80409da <__aeabi_ddiv+0x16e>
 804088c:	eba4 0405 	sub.w	r4, r4, r5
 8040890:	ea81 0e03 	eor.w	lr, r1, r3
 8040894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804089c:	f000 8088 	beq.w	80409b0 <__aeabi_ddiv+0x144>
 80408a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80408a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80408a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80408ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80408b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80408b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80408b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80408bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80408c4:	429d      	cmp	r5, r3
 80408c6:	bf08      	it	eq
 80408c8:	4296      	cmpeq	r6, r2
 80408ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80408ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80408d2:	d202      	bcs.n	80408da <__aeabi_ddiv+0x6e>
 80408d4:	085b      	lsrs	r3, r3, #1
 80408d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408da:	1ab6      	subs	r6, r6, r2
 80408dc:	eb65 0503 	sbc.w	r5, r5, r3
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80408ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80408ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80408f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408f6:	bf22      	ittt	cs
 80408f8:	1ab6      	subcs	r6, r6, r2
 80408fa:	4675      	movcs	r5, lr
 80408fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8040900:	085b      	lsrs	r3, r3, #1
 8040902:	ea4f 0232 	mov.w	r2, r2, rrx
 8040906:	ebb6 0e02 	subs.w	lr, r6, r2
 804090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804090e:	bf22      	ittt	cs
 8040910:	1ab6      	subcs	r6, r6, r2
 8040912:	4675      	movcs	r5, lr
 8040914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040918:	085b      	lsrs	r3, r3, #1
 804091a:	ea4f 0232 	mov.w	r2, r2, rrx
 804091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040926:	bf22      	ittt	cs
 8040928:	1ab6      	subcs	r6, r6, r2
 804092a:	4675      	movcs	r5, lr
 804092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040930:	085b      	lsrs	r3, r3, #1
 8040932:	ea4f 0232 	mov.w	r2, r2, rrx
 8040936:	ebb6 0e02 	subs.w	lr, r6, r2
 804093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804093e:	bf22      	ittt	cs
 8040940:	1ab6      	subcs	r6, r6, r2
 8040942:	4675      	movcs	r5, lr
 8040944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040948:	ea55 0e06 	orrs.w	lr, r5, r6
 804094c:	d018      	beq.n	8040980 <__aeabi_ddiv+0x114>
 804094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804096a:	d1c0      	bne.n	80408ee <__aeabi_ddiv+0x82>
 804096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8040970:	d10b      	bne.n	804098a <__aeabi_ddiv+0x11e>
 8040972:	ea41 0100 	orr.w	r1, r1, r0
 8040976:	f04f 0000 	mov.w	r0, #0
 804097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 804097e:	e7b6      	b.n	80408ee <__aeabi_ddiv+0x82>
 8040980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8040984:	bf04      	itt	eq
 8040986:	4301      	orreq	r1, r0
 8040988:	2000      	moveq	r0, #0
 804098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 804098e:	bf88      	it	hi
 8040990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8040994:	f63f aeaf 	bhi.w	80406f6 <__aeabi_dmul+0xde>
 8040998:	ebb5 0c03 	subs.w	ip, r5, r3
 804099c:	bf04      	itt	eq
 804099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80409a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80409a6:	f150 0000 	adcs.w	r0, r0, #0
 80409aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80409ae:	bd70      	pop	{r4, r5, r6, pc}
 80409b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80409b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80409b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80409bc:	bfc2      	ittt	gt
 80409be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409c6:	bd70      	popgt	{r4, r5, r6, pc}
 80409c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80409cc:	f04f 0e00 	mov.w	lr, #0
 80409d0:	3c01      	subs	r4, #1
 80409d2:	e690      	b.n	80406f6 <__aeabi_dmul+0xde>
 80409d4:	ea45 0e06 	orr.w	lr, r5, r6
 80409d8:	e68d      	b.n	80406f6 <__aeabi_dmul+0xde>
 80409da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409de:	ea94 0f0c 	teq	r4, ip
 80409e2:	bf08      	it	eq
 80409e4:	ea95 0f0c 	teqeq	r5, ip
 80409e8:	f43f af3b 	beq.w	8040862 <__aeabi_dmul+0x24a>
 80409ec:	ea94 0f0c 	teq	r4, ip
 80409f0:	d10a      	bne.n	8040a08 <__aeabi_ddiv+0x19c>
 80409f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409f6:	f47f af34 	bne.w	8040862 <__aeabi_dmul+0x24a>
 80409fa:	ea95 0f0c 	teq	r5, ip
 80409fe:	f47f af25 	bne.w	804084c <__aeabi_dmul+0x234>
 8040a02:	4610      	mov	r0, r2
 8040a04:	4619      	mov	r1, r3
 8040a06:	e72c      	b.n	8040862 <__aeabi_dmul+0x24a>
 8040a08:	ea95 0f0c 	teq	r5, ip
 8040a0c:	d106      	bne.n	8040a1c <__aeabi_ddiv+0x1b0>
 8040a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040a12:	f43f aefd 	beq.w	8040810 <__aeabi_dmul+0x1f8>
 8040a16:	4610      	mov	r0, r2
 8040a18:	4619      	mov	r1, r3
 8040a1a:	e722      	b.n	8040862 <__aeabi_dmul+0x24a>
 8040a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a20:	bf18      	it	ne
 8040a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a26:	f47f aec5 	bne.w	80407b4 <__aeabi_dmul+0x19c>
 8040a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a2e:	f47f af0d 	bne.w	804084c <__aeabi_dmul+0x234>
 8040a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a36:	f47f aeeb 	bne.w	8040810 <__aeabi_dmul+0x1f8>
 8040a3a:	e712      	b.n	8040862 <__aeabi_dmul+0x24a>

08040a3c <__gedf2>:
 8040a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a40:	e006      	b.n	8040a50 <__cmpdf2+0x4>
 8040a42:	bf00      	nop

08040a44 <__ledf2>:
 8040a44:	f04f 0c01 	mov.w	ip, #1
 8040a48:	e002      	b.n	8040a50 <__cmpdf2+0x4>
 8040a4a:	bf00      	nop

08040a4c <__cmpdf2>:
 8040a4c:	f04f 0c01 	mov.w	ip, #1
 8040a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a60:	bf18      	it	ne
 8040a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a66:	d01b      	beq.n	8040aa0 <__cmpdf2+0x54>
 8040a68:	b001      	add	sp, #4
 8040a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a6e:	bf0c      	ite	eq
 8040a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a74:	ea91 0f03 	teqne	r1, r3
 8040a78:	bf02      	ittt	eq
 8040a7a:	ea90 0f02 	teqeq	r0, r2
 8040a7e:	2000      	moveq	r0, #0
 8040a80:	4770      	bxeq	lr
 8040a82:	f110 0f00 	cmn.w	r0, #0
 8040a86:	ea91 0f03 	teq	r1, r3
 8040a8a:	bf58      	it	pl
 8040a8c:	4299      	cmppl	r1, r3
 8040a8e:	bf08      	it	eq
 8040a90:	4290      	cmpeq	r0, r2
 8040a92:	bf2c      	ite	cs
 8040a94:	17d8      	asrcs	r0, r3, #31
 8040a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a9a:	f040 0001 	orr.w	r0, r0, #1
 8040a9e:	4770      	bx	lr
 8040aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040aa8:	d102      	bne.n	8040ab0 <__cmpdf2+0x64>
 8040aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040aae:	d107      	bne.n	8040ac0 <__cmpdf2+0x74>
 8040ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ab8:	d1d6      	bne.n	8040a68 <__cmpdf2+0x1c>
 8040aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040abe:	d0d3      	beq.n	8040a68 <__cmpdf2+0x1c>
 8040ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040ac4:	4770      	bx	lr
 8040ac6:	bf00      	nop

08040ac8 <__aeabi_cdrcmple>:
 8040ac8:	4684      	mov	ip, r0
 8040aca:	4610      	mov	r0, r2
 8040acc:	4662      	mov	r2, ip
 8040ace:	468c      	mov	ip, r1
 8040ad0:	4619      	mov	r1, r3
 8040ad2:	4663      	mov	r3, ip
 8040ad4:	e000      	b.n	8040ad8 <__aeabi_cdcmpeq>
 8040ad6:	bf00      	nop

08040ad8 <__aeabi_cdcmpeq>:
 8040ad8:	b501      	push	{r0, lr}
 8040ada:	f7ff ffb7 	bl	8040a4c <__cmpdf2>
 8040ade:	2800      	cmp	r0, #0
 8040ae0:	bf48      	it	mi
 8040ae2:	f110 0f00 	cmnmi.w	r0, #0
 8040ae6:	bd01      	pop	{r0, pc}

08040ae8 <__aeabi_dcmpeq>:
 8040ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040aec:	f7ff fff4 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040af0:	bf0c      	ite	eq
 8040af2:	2001      	moveq	r0, #1
 8040af4:	2000      	movne	r0, #0
 8040af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040afa:	bf00      	nop

08040afc <__aeabi_dcmplt>:
 8040afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b00:	f7ff ffea 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040b04:	bf34      	ite	cc
 8040b06:	2001      	movcc	r0, #1
 8040b08:	2000      	movcs	r0, #0
 8040b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b0e:	bf00      	nop

08040b10 <__aeabi_dcmple>:
 8040b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b14:	f7ff ffe0 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040b18:	bf94      	ite	ls
 8040b1a:	2001      	movls	r0, #1
 8040b1c:	2000      	movhi	r0, #0
 8040b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b22:	bf00      	nop

08040b24 <__aeabi_dcmpge>:
 8040b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b28:	f7ff ffce 	bl	8040ac8 <__aeabi_cdrcmple>
 8040b2c:	bf94      	ite	ls
 8040b2e:	2001      	movls	r0, #1
 8040b30:	2000      	movhi	r0, #0
 8040b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b36:	bf00      	nop

08040b38 <__aeabi_dcmpgt>:
 8040b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b3c:	f7ff ffc4 	bl	8040ac8 <__aeabi_cdrcmple>
 8040b40:	bf34      	ite	cc
 8040b42:	2001      	movcc	r0, #1
 8040b44:	2000      	movcs	r0, #0
 8040b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b4a:	bf00      	nop

08040b4c <__aeabi_dcmpun>:
 8040b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b54:	d102      	bne.n	8040b5c <__aeabi_dcmpun+0x10>
 8040b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b5a:	d10a      	bne.n	8040b72 <__aeabi_dcmpun+0x26>
 8040b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b64:	d102      	bne.n	8040b6c <__aeabi_dcmpun+0x20>
 8040b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b6a:	d102      	bne.n	8040b72 <__aeabi_dcmpun+0x26>
 8040b6c:	f04f 0000 	mov.w	r0, #0
 8040b70:	4770      	bx	lr
 8040b72:	f04f 0001 	mov.w	r0, #1
 8040b76:	4770      	bx	lr

08040b78 <__aeabi_d2iz>:
 8040b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8040b80:	d215      	bcs.n	8040bae <__aeabi_d2iz+0x36>
 8040b82:	d511      	bpl.n	8040ba8 <__aeabi_d2iz+0x30>
 8040b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8040b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b8c:	d912      	bls.n	8040bb4 <__aeabi_d2iz+0x3c>
 8040b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8040b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8040b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8040ba2:	bf18      	it	ne
 8040ba4:	4240      	negne	r0, r0
 8040ba6:	4770      	bx	lr
 8040ba8:	f04f 0000 	mov.w	r0, #0
 8040bac:	4770      	bx	lr
 8040bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bb2:	d105      	bne.n	8040bc0 <__aeabi_d2iz+0x48>
 8040bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8040bb8:	bf08      	it	eq
 8040bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8040bbe:	4770      	bx	lr
 8040bc0:	f04f 0000 	mov.w	r0, #0
 8040bc4:	4770      	bx	lr
 8040bc6:	bf00      	nop

08040bc8 <__aeabi_d2f>:
 8040bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8040bd0:	bf24      	itt	cs
 8040bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8040bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8040bda:	d90d      	bls.n	8040bf8 <__aeabi_d2f+0x30>
 8040bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8040be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8040bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040bf0:	bf08      	it	eq
 8040bf2:	f020 0001 	biceq.w	r0, r0, #1
 8040bf6:	4770      	bx	lr
 8040bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8040bfc:	d121      	bne.n	8040c42 <__aeabi_d2f+0x7a>
 8040bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8040c02:	bfbc      	itt	lt
 8040c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8040c08:	4770      	bxlt	lr
 8040c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8040c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040c12:	f1c2 0218 	rsb	r2, r2, #24
 8040c16:	f1c2 0c20 	rsb	ip, r2, #32
 8040c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8040c22:	bf18      	it	ne
 8040c24:	f040 0001 	orrne.w	r0, r0, #1
 8040c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c34:	ea40 000c 	orr.w	r0, r0, ip
 8040c38:	fa23 f302 	lsr.w	r3, r3, r2
 8040c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c40:	e7cc      	b.n	8040bdc <__aeabi_d2f+0x14>
 8040c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c46:	d107      	bne.n	8040c58 <__aeabi_d2f+0x90>
 8040c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c4c:	bf1e      	ittt	ne
 8040c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8040c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8040c56:	4770      	bxne	lr
 8040c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8040c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8040c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8040c64:	4770      	bx	lr
 8040c66:	bf00      	nop

08040c68 <__aeabi_uldivmod>:
 8040c68:	b953      	cbnz	r3, 8040c80 <__aeabi_uldivmod+0x18>
 8040c6a:	b94a      	cbnz	r2, 8040c80 <__aeabi_uldivmod+0x18>
 8040c6c:	2900      	cmp	r1, #0
 8040c6e:	bf08      	it	eq
 8040c70:	2800      	cmpeq	r0, #0
 8040c72:	bf1c      	itt	ne
 8040c74:	f04f 31ff 	movne.w	r1, #4294967295
 8040c78:	f04f 30ff 	movne.w	r0, #4294967295
 8040c7c:	f000 b96a 	b.w	8040f54 <__aeabi_idiv0>
 8040c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8040c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040c88:	f000 f806 	bl	8040c98 <__udivmoddi4>
 8040c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040c94:	b004      	add	sp, #16
 8040c96:	4770      	bx	lr

08040c98 <__udivmoddi4>:
 8040c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040c9c:	9d08      	ldr	r5, [sp, #32]
 8040c9e:	460c      	mov	r4, r1
 8040ca0:	2b00      	cmp	r3, #0
 8040ca2:	d14e      	bne.n	8040d42 <__udivmoddi4+0xaa>
 8040ca4:	4694      	mov	ip, r2
 8040ca6:	458c      	cmp	ip, r1
 8040ca8:	4686      	mov	lr, r0
 8040caa:	fab2 f282 	clz	r2, r2
 8040cae:	d962      	bls.n	8040d76 <__udivmoddi4+0xde>
 8040cb0:	b14a      	cbz	r2, 8040cc6 <__udivmoddi4+0x2e>
 8040cb2:	f1c2 0320 	rsb	r3, r2, #32
 8040cb6:	4091      	lsls	r1, r2
 8040cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8040cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8040cc0:	4319      	orrs	r1, r3
 8040cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8040cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040cca:	fa1f f68c 	uxth.w	r6, ip
 8040cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8040cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8040cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8040cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040cde:	fb04 f106 	mul.w	r1, r4, r6
 8040ce2:	4299      	cmp	r1, r3
 8040ce4:	d90a      	bls.n	8040cfc <__udivmoddi4+0x64>
 8040ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8040cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8040cee:	f080 8112 	bcs.w	8040f16 <__udivmoddi4+0x27e>
 8040cf2:	4299      	cmp	r1, r3
 8040cf4:	f240 810f 	bls.w	8040f16 <__udivmoddi4+0x27e>
 8040cf8:	3c02      	subs	r4, #2
 8040cfa:	4463      	add	r3, ip
 8040cfc:	1a59      	subs	r1, r3, r1
 8040cfe:	fa1f f38e 	uxth.w	r3, lr
 8040d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8040d06:	fb07 1110 	mls	r1, r7, r0, r1
 8040d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040d0e:	fb00 f606 	mul.w	r6, r0, r6
 8040d12:	429e      	cmp	r6, r3
 8040d14:	d90a      	bls.n	8040d2c <__udivmoddi4+0x94>
 8040d16:	eb1c 0303 	adds.w	r3, ip, r3
 8040d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8040d1e:	f080 80fc 	bcs.w	8040f1a <__udivmoddi4+0x282>
 8040d22:	429e      	cmp	r6, r3
 8040d24:	f240 80f9 	bls.w	8040f1a <__udivmoddi4+0x282>
 8040d28:	4463      	add	r3, ip
 8040d2a:	3802      	subs	r0, #2
 8040d2c:	1b9b      	subs	r3, r3, r6
 8040d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8040d32:	2100      	movs	r1, #0
 8040d34:	b11d      	cbz	r5, 8040d3e <__udivmoddi4+0xa6>
 8040d36:	40d3      	lsrs	r3, r2
 8040d38:	2200      	movs	r2, #0
 8040d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8040d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040d42:	428b      	cmp	r3, r1
 8040d44:	d905      	bls.n	8040d52 <__udivmoddi4+0xba>
 8040d46:	b10d      	cbz	r5, 8040d4c <__udivmoddi4+0xb4>
 8040d48:	e9c5 0100 	strd	r0, r1, [r5]
 8040d4c:	2100      	movs	r1, #0
 8040d4e:	4608      	mov	r0, r1
 8040d50:	e7f5      	b.n	8040d3e <__udivmoddi4+0xa6>
 8040d52:	fab3 f183 	clz	r1, r3
 8040d56:	2900      	cmp	r1, #0
 8040d58:	d146      	bne.n	8040de8 <__udivmoddi4+0x150>
 8040d5a:	42a3      	cmp	r3, r4
 8040d5c:	d302      	bcc.n	8040d64 <__udivmoddi4+0xcc>
 8040d5e:	4290      	cmp	r0, r2
 8040d60:	f0c0 80f0 	bcc.w	8040f44 <__udivmoddi4+0x2ac>
 8040d64:	1a86      	subs	r6, r0, r2
 8040d66:	eb64 0303 	sbc.w	r3, r4, r3
 8040d6a:	2001      	movs	r0, #1
 8040d6c:	2d00      	cmp	r5, #0
 8040d6e:	d0e6      	beq.n	8040d3e <__udivmoddi4+0xa6>
 8040d70:	e9c5 6300 	strd	r6, r3, [r5]
 8040d74:	e7e3      	b.n	8040d3e <__udivmoddi4+0xa6>
 8040d76:	2a00      	cmp	r2, #0
 8040d78:	f040 8090 	bne.w	8040e9c <__udivmoddi4+0x204>
 8040d7c:	eba1 040c 	sub.w	r4, r1, ip
 8040d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040d84:	fa1f f78c 	uxth.w	r7, ip
 8040d88:	2101      	movs	r1, #1
 8040d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8040d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8040d92:	fb08 4416 	mls	r4, r8, r6, r4
 8040d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040d9a:	fb07 f006 	mul.w	r0, r7, r6
 8040d9e:	4298      	cmp	r0, r3
 8040da0:	d908      	bls.n	8040db4 <__udivmoddi4+0x11c>
 8040da2:	eb1c 0303 	adds.w	r3, ip, r3
 8040da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8040daa:	d202      	bcs.n	8040db2 <__udivmoddi4+0x11a>
 8040dac:	4298      	cmp	r0, r3
 8040dae:	f200 80cd 	bhi.w	8040f4c <__udivmoddi4+0x2b4>
 8040db2:	4626      	mov	r6, r4
 8040db4:	1a1c      	subs	r4, r3, r0
 8040db6:	fa1f f38e 	uxth.w	r3, lr
 8040dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8040dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8040dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040dc6:	fb00 f707 	mul.w	r7, r0, r7
 8040dca:	429f      	cmp	r7, r3
 8040dcc:	d908      	bls.n	8040de0 <__udivmoddi4+0x148>
 8040dce:	eb1c 0303 	adds.w	r3, ip, r3
 8040dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8040dd6:	d202      	bcs.n	8040dde <__udivmoddi4+0x146>
 8040dd8:	429f      	cmp	r7, r3
 8040dda:	f200 80b0 	bhi.w	8040f3e <__udivmoddi4+0x2a6>
 8040dde:	4620      	mov	r0, r4
 8040de0:	1bdb      	subs	r3, r3, r7
 8040de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040de6:	e7a5      	b.n	8040d34 <__udivmoddi4+0x9c>
 8040de8:	f1c1 0620 	rsb	r6, r1, #32
 8040dec:	408b      	lsls	r3, r1
 8040dee:	fa22 f706 	lsr.w	r7, r2, r6
 8040df2:	431f      	orrs	r7, r3
 8040df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8040df8:	fa04 f301 	lsl.w	r3, r4, r1
 8040dfc:	ea43 030c 	orr.w	r3, r3, ip
 8040e00:	40f4      	lsrs	r4, r6
 8040e02:	fa00 f801 	lsl.w	r8, r0, r1
 8040e06:	0c38      	lsrs	r0, r7, #16
 8040e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8040e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8040e10:	fa1f fc87 	uxth.w	ip, r7
 8040e14:	fb00 441e 	mls	r4, r0, lr, r4
 8040e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8040e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8040e20:	45a1      	cmp	r9, r4
 8040e22:	fa02 f201 	lsl.w	r2, r2, r1
 8040e26:	d90a      	bls.n	8040e3e <__udivmoddi4+0x1a6>
 8040e28:	193c      	adds	r4, r7, r4
 8040e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8040e2e:	f080 8084 	bcs.w	8040f3a <__udivmoddi4+0x2a2>
 8040e32:	45a1      	cmp	r9, r4
 8040e34:	f240 8081 	bls.w	8040f3a <__udivmoddi4+0x2a2>
 8040e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8040e3c:	443c      	add	r4, r7
 8040e3e:	eba4 0409 	sub.w	r4, r4, r9
 8040e42:	fa1f f983 	uxth.w	r9, r3
 8040e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8040e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8040e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8040e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8040e56:	45a4      	cmp	ip, r4
 8040e58:	d907      	bls.n	8040e6a <__udivmoddi4+0x1d2>
 8040e5a:	193c      	adds	r4, r7, r4
 8040e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8040e60:	d267      	bcs.n	8040f32 <__udivmoddi4+0x29a>
 8040e62:	45a4      	cmp	ip, r4
 8040e64:	d965      	bls.n	8040f32 <__udivmoddi4+0x29a>
 8040e66:	3b02      	subs	r3, #2
 8040e68:	443c      	add	r4, r7
 8040e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8040e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8040e72:	eba4 040c 	sub.w	r4, r4, ip
 8040e76:	429c      	cmp	r4, r3
 8040e78:	46ce      	mov	lr, r9
 8040e7a:	469c      	mov	ip, r3
 8040e7c:	d351      	bcc.n	8040f22 <__udivmoddi4+0x28a>
 8040e7e:	d04e      	beq.n	8040f1e <__udivmoddi4+0x286>
 8040e80:	b155      	cbz	r5, 8040e98 <__udivmoddi4+0x200>
 8040e82:	ebb8 030e 	subs.w	r3, r8, lr
 8040e86:	eb64 040c 	sbc.w	r4, r4, ip
 8040e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8040e8e:	40cb      	lsrs	r3, r1
 8040e90:	431e      	orrs	r6, r3
 8040e92:	40cc      	lsrs	r4, r1
 8040e94:	e9c5 6400 	strd	r6, r4, [r5]
 8040e98:	2100      	movs	r1, #0
 8040e9a:	e750      	b.n	8040d3e <__udivmoddi4+0xa6>
 8040e9c:	f1c2 0320 	rsb	r3, r2, #32
 8040ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8040ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8040ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8040eac:	4094      	lsls	r4, r2
 8040eae:	430c      	orrs	r4, r1
 8040eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8040eb8:	fa1f f78c 	uxth.w	r7, ip
 8040ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8040ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8040ec4:	0c23      	lsrs	r3, r4, #16
 8040ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040eca:	fb00 f107 	mul.w	r1, r0, r7
 8040ece:	4299      	cmp	r1, r3
 8040ed0:	d908      	bls.n	8040ee4 <__udivmoddi4+0x24c>
 8040ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8040ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8040eda:	d22c      	bcs.n	8040f36 <__udivmoddi4+0x29e>
 8040edc:	4299      	cmp	r1, r3
 8040ede:	d92a      	bls.n	8040f36 <__udivmoddi4+0x29e>
 8040ee0:	3802      	subs	r0, #2
 8040ee2:	4463      	add	r3, ip
 8040ee4:	1a5b      	subs	r3, r3, r1
 8040ee6:	b2a4      	uxth	r4, r4
 8040ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8040eec:	fb08 3311 	mls	r3, r8, r1, r3
 8040ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040ef4:	fb01 f307 	mul.w	r3, r1, r7
 8040ef8:	42a3      	cmp	r3, r4
 8040efa:	d908      	bls.n	8040f0e <__udivmoddi4+0x276>
 8040efc:	eb1c 0404 	adds.w	r4, ip, r4
 8040f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8040f04:	d213      	bcs.n	8040f2e <__udivmoddi4+0x296>
 8040f06:	42a3      	cmp	r3, r4
 8040f08:	d911      	bls.n	8040f2e <__udivmoddi4+0x296>
 8040f0a:	3902      	subs	r1, #2
 8040f0c:	4464      	add	r4, ip
 8040f0e:	1ae4      	subs	r4, r4, r3
 8040f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040f14:	e739      	b.n	8040d8a <__udivmoddi4+0xf2>
 8040f16:	4604      	mov	r4, r0
 8040f18:	e6f0      	b.n	8040cfc <__udivmoddi4+0x64>
 8040f1a:	4608      	mov	r0, r1
 8040f1c:	e706      	b.n	8040d2c <__udivmoddi4+0x94>
 8040f1e:	45c8      	cmp	r8, r9
 8040f20:	d2ae      	bcs.n	8040e80 <__udivmoddi4+0x1e8>
 8040f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8040f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8040f2a:	3801      	subs	r0, #1
 8040f2c:	e7a8      	b.n	8040e80 <__udivmoddi4+0x1e8>
 8040f2e:	4631      	mov	r1, r6
 8040f30:	e7ed      	b.n	8040f0e <__udivmoddi4+0x276>
 8040f32:	4603      	mov	r3, r0
 8040f34:	e799      	b.n	8040e6a <__udivmoddi4+0x1d2>
 8040f36:	4630      	mov	r0, r6
 8040f38:	e7d4      	b.n	8040ee4 <__udivmoddi4+0x24c>
 8040f3a:	46d6      	mov	lr, sl
 8040f3c:	e77f      	b.n	8040e3e <__udivmoddi4+0x1a6>
 8040f3e:	4463      	add	r3, ip
 8040f40:	3802      	subs	r0, #2
 8040f42:	e74d      	b.n	8040de0 <__udivmoddi4+0x148>
 8040f44:	4606      	mov	r6, r0
 8040f46:	4623      	mov	r3, r4
 8040f48:	4608      	mov	r0, r1
 8040f4a:	e70f      	b.n	8040d6c <__udivmoddi4+0xd4>
 8040f4c:	3e02      	subs	r6, #2
 8040f4e:	4463      	add	r3, ip
 8040f50:	e730      	b.n	8040db4 <__udivmoddi4+0x11c>
 8040f52:	bf00      	nop

08040f54 <__aeabi_idiv0>:
 8040f54:	4770      	bx	lr
 8040f56:	bf00      	nop

08040f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040f58:	b580      	push	{r7, lr}
 8040f5a:	b082      	sub	sp, #8
 8040f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040f5e:	f001 fa93 	bl	8042488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040f62:	f000 f89d 	bl	80410a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040f66:	f000 fa01 	bl	804136c <MX_GPIO_Init>
  MX_ADC1_Init();
 8040f6a:	f000 f901 	bl	8041170 <MX_ADC1_Init>
  MX_I2C1_Init();
 8040f6e:	f000 f951 	bl	8041214 <MX_I2C1_Init>
  MX_TIM1_Init();
 8040f72:	f000 f97d 	bl	8041270 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8040f76:	f000 f9cf 	bl	8041318 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 8040f7a:	2201      	movs	r2, #1
 8040f7c:	492f      	ldr	r1, [pc, #188]	@ (804103c <main+0xe4>)
 8040f7e:	4830      	ldr	r0, [pc, #192]	@ (8041040 <main+0xe8>)
 8040f80:	f004 f883 	bl	804508a <HAL_UART_Receive_IT>

  xTaskCreate(handle_cmd_task, "Handle command", 200, NULL, 2, &cmd_task);
 8040f84:	4b2f      	ldr	r3, [pc, #188]	@ (8041044 <main+0xec>)
 8040f86:	9301      	str	r3, [sp, #4]
 8040f88:	2302      	movs	r3, #2
 8040f8a:	9300      	str	r3, [sp, #0]
 8040f8c:	2300      	movs	r3, #0
 8040f8e:	22c8      	movs	r2, #200	@ 0xc8
 8040f90:	492d      	ldr	r1, [pc, #180]	@ (8041048 <main+0xf0>)
 8040f92:	482e      	ldr	r0, [pc, #184]	@ (804104c <main+0xf4>)
 8040f94:	f005 ffd6 	bl	8046f44 <xTaskCreate>

  xTaskCreate(handle_measure_task, "measure qual of env ", 200, NULL, 2, &measure_task);
 8040f98:	4b2d      	ldr	r3, [pc, #180]	@ (8041050 <main+0xf8>)
 8040f9a:	9301      	str	r3, [sp, #4]
 8040f9c:	2302      	movs	r3, #2
 8040f9e:	9300      	str	r3, [sp, #0]
 8040fa0:	2300      	movs	r3, #0
 8040fa2:	22c8      	movs	r2, #200	@ 0xc8
 8040fa4:	492b      	ldr	r1, [pc, #172]	@ (8041054 <main+0xfc>)
 8040fa6:	482c      	ldr	r0, [pc, #176]	@ (8041058 <main+0x100>)
 8040fa8:	f005 ffcc 	bl	8046f44 <xTaskCreate>

  xTaskCreate(printmsg, "Display menu", 200, NULL, 2, &msg_task);
 8040fac:	4b2b      	ldr	r3, [pc, #172]	@ (804105c <main+0x104>)
 8040fae:	9301      	str	r3, [sp, #4]
 8040fb0:	2302      	movs	r3, #2
 8040fb2:	9300      	str	r3, [sp, #0]
 8040fb4:	2300      	movs	r3, #0
 8040fb6:	22c8      	movs	r2, #200	@ 0xc8
 8040fb8:	4929      	ldr	r1, [pc, #164]	@ (8041060 <main+0x108>)
 8040fba:	482a      	ldr	r0, [pc, #168]	@ (8041064 <main+0x10c>)
 8040fbc:	f005 ffc2 	bl	8046f44 <xTaskCreate>

  xTaskCreate(handle_menu_task, "Menu options", 200, NULL, 2, &menu_task);
 8040fc0:	4b29      	ldr	r3, [pc, #164]	@ (8041068 <main+0x110>)
 8040fc2:	9301      	str	r3, [sp, #4]
 8040fc4:	2302      	movs	r3, #2
 8040fc6:	9300      	str	r3, [sp, #0]
 8040fc8:	2300      	movs	r3, #0
 8040fca:	22c8      	movs	r2, #200	@ 0xc8
 8040fcc:	4927      	ldr	r1, [pc, #156]	@ (804106c <main+0x114>)
 8040fce:	4828      	ldr	r0, [pc, #160]	@ (8041070 <main+0x118>)
 8040fd0:	f005 ffb8 	bl	8046f44 <xTaskCreate>

  xTaskCreate(handle_led_task, "LED blinking", 200, NULL, 2, &led_task);
 8040fd4:	4b27      	ldr	r3, [pc, #156]	@ (8041074 <main+0x11c>)
 8040fd6:	9301      	str	r3, [sp, #4]
 8040fd8:	2302      	movs	r3, #2
 8040fda:	9300      	str	r3, [sp, #0]
 8040fdc:	2300      	movs	r3, #0
 8040fde:	22c8      	movs	r2, #200	@ 0xc8
 8040fe0:	4925      	ldr	r1, [pc, #148]	@ (8041078 <main+0x120>)
 8040fe2:	4826      	ldr	r0, [pc, #152]	@ (804107c <main+0x124>)
 8040fe4:	f005 ffae 	bl	8046f44 <xTaskCreate>

  xTaskCreate(handle_DC_task, "Control motor", 200, NULL, 2, &DC_task);
 8040fe8:	4b25      	ldr	r3, [pc, #148]	@ (8041080 <main+0x128>)
 8040fea:	9301      	str	r3, [sp, #4]
 8040fec:	2302      	movs	r3, #2
 8040fee:	9300      	str	r3, [sp, #0]
 8040ff0:	2300      	movs	r3, #0
 8040ff2:	22c8      	movs	r2, #200	@ 0xc8
 8040ff4:	4923      	ldr	r1, [pc, #140]	@ (8041084 <main+0x12c>)
 8040ff6:	4824      	ldr	r0, [pc, #144]	@ (8041088 <main+0x130>)
 8040ff8:	f005 ffa4 	bl	8046f44 <xTaskCreate>

  xTimer = xTimerCreate("Timer", pdMS_TO_TICKS(500), pdTRUE, 1, vTimerCallback);
 8040ffc:	4b23      	ldr	r3, [pc, #140]	@ (804108c <main+0x134>)
 8040ffe:	9300      	str	r3, [sp, #0]
 8041000:	2301      	movs	r3, #1
 8041002:	2201      	movs	r2, #1
 8041004:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8041008:	4821      	ldr	r0, [pc, #132]	@ (8041090 <main+0x138>)
 804100a:	f007 f8cb 	bl	80481a4 <xTimerCreate>
 804100e:	4603      	mov	r3, r0
 8041010:	4a20      	ldr	r2, [pc, #128]	@ (8041094 <main+0x13c>)
 8041012:	6013      	str	r3, [r2, #0]

  q_print = xQueueCreate(10, sizeof(size_t));
 8041014:	2200      	movs	r2, #0
 8041016:	2104      	movs	r1, #4
 8041018:	200a      	movs	r0, #10
 804101a:	f005 fa53 	bl	80464c4 <xQueueGenericCreate>
 804101e:	4603      	mov	r3, r0
 8041020:	4a1d      	ldr	r2, [pc, #116]	@ (8041098 <main+0x140>)
 8041022:	6013      	str	r3, [r2, #0]

  q_data = xQueueCreate(11, sizeof(uint8_t));
 8041024:	2200      	movs	r2, #0
 8041026:	2101      	movs	r1, #1
 8041028:	200b      	movs	r0, #11
 804102a:	f005 fa4b 	bl	80464c4 <xQueueGenericCreate>
 804102e:	4603      	mov	r3, r0
 8041030:	4a1a      	ldr	r2, [pc, #104]	@ (804109c <main+0x144>)
 8041032:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 8041034:	f006 f902 	bl	804723c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8041038:	bf00      	nop
 804103a:	e7fd      	b.n	8041038 <main+0xe0>
 804103c:	2000034f 	.word	0x2000034f
 8041040:	200002f0 	.word	0x200002f0
 8041044:	20000350 	.word	0x20000350
 8041048:	0804cc78 	.word	0x0804cc78
 804104c:	08042191 	.word	0x08042191
 8041050:	20000354 	.word	0x20000354
 8041054:	0804cc88 	.word	0x0804cc88
 8041058:	08041499 	.word	0x08041499
 804105c:	20000358 	.word	0x20000358
 8041060:	0804cca0 	.word	0x0804cca0
 8041064:	080423f5 	.word	0x080423f5
 8041068:	2000035c 	.word	0x2000035c
 804106c:	0804ccb0 	.word	0x0804ccb0
 8041070:	080420d1 	.word	0x080420d1
 8041074:	20000360 	.word	0x20000360
 8041078:	0804ccc0 	.word	0x0804ccc0
 804107c:	0804226d 	.word	0x0804226d
 8041080:	20000364 	.word	0x20000364
 8041084:	0804ccd0 	.word	0x0804ccd0
 8041088:	08042351 	.word	0x08042351
 804108c:	08041475 	.word	0x08041475
 8041090:	0804cce0 	.word	0x0804cce0
 8041094:	20000370 	.word	0x20000370
 8041098:	20000368 	.word	0x20000368
 804109c:	2000036c 	.word	0x2000036c

080410a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80410a0:	b580      	push	{r7, lr}
 80410a2:	b094      	sub	sp, #80	@ 0x50
 80410a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80410a6:	f107 0320 	add.w	r3, r7, #32
 80410aa:	2230      	movs	r2, #48	@ 0x30
 80410ac:	2100      	movs	r1, #0
 80410ae:	4618      	mov	r0, r3
 80410b0:	f008 fd9d 	bl	8049bee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80410b4:	f107 030c 	add.w	r3, r7, #12
 80410b8:	2200      	movs	r2, #0
 80410ba:	601a      	str	r2, [r3, #0]
 80410bc:	605a      	str	r2, [r3, #4]
 80410be:	609a      	str	r2, [r3, #8]
 80410c0:	60da      	str	r2, [r3, #12]
 80410c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80410c4:	2300      	movs	r3, #0
 80410c6:	60bb      	str	r3, [r7, #8]
 80410c8:	4b27      	ldr	r3, [pc, #156]	@ (8041168 <SystemClock_Config+0xc8>)
 80410ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80410cc:	4a26      	ldr	r2, [pc, #152]	@ (8041168 <SystemClock_Config+0xc8>)
 80410ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80410d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80410d4:	4b24      	ldr	r3, [pc, #144]	@ (8041168 <SystemClock_Config+0xc8>)
 80410d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80410d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80410dc:	60bb      	str	r3, [r7, #8]
 80410de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80410e0:	2300      	movs	r3, #0
 80410e2:	607b      	str	r3, [r7, #4]
 80410e4:	4b21      	ldr	r3, [pc, #132]	@ (804116c <SystemClock_Config+0xcc>)
 80410e6:	681b      	ldr	r3, [r3, #0]
 80410e8:	4a20      	ldr	r2, [pc, #128]	@ (804116c <SystemClock_Config+0xcc>)
 80410ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80410ee:	6013      	str	r3, [r2, #0]
 80410f0:	4b1e      	ldr	r3, [pc, #120]	@ (804116c <SystemClock_Config+0xcc>)
 80410f2:	681b      	ldr	r3, [r3, #0]
 80410f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80410f8:	607b      	str	r3, [r7, #4]
 80410fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80410fc:	2301      	movs	r3, #1
 80410fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8041100:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8041104:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8041106:	2302      	movs	r3, #2
 8041108:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804110a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 804110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8041110:	2304      	movs	r3, #4
 8041112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8041114:	2348      	movs	r3, #72	@ 0x48
 8041116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8041118:	2302      	movs	r3, #2
 804111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 804111c:	2304      	movs	r3, #4
 804111e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8041120:	f107 0320 	add.w	r3, r7, #32
 8041124:	4618      	mov	r0, r3
 8041126:	f002 fd2d 	bl	8043b84 <HAL_RCC_OscConfig>
 804112a:	4603      	mov	r3, r0
 804112c:	2b00      	cmp	r3, #0
 804112e:	d001      	beq.n	8041134 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8041130:	f000 fc30 	bl	8041994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8041134:	230f      	movs	r3, #15
 8041136:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8041138:	2302      	movs	r3, #2
 804113a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804113c:	2300      	movs	r3, #0
 804113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8041140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8041144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8041146:	2300      	movs	r3, #0
 8041148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 804114a:	f107 030c 	add.w	r3, r7, #12
 804114e:	2102      	movs	r1, #2
 8041150:	4618      	mov	r0, r3
 8041152:	f002 ff8f 	bl	8044074 <HAL_RCC_ClockConfig>
 8041156:	4603      	mov	r3, r0
 8041158:	2b00      	cmp	r3, #0
 804115a:	d001      	beq.n	8041160 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 804115c:	f000 fc1a 	bl	8041994 <Error_Handler>
  }
}
 8041160:	bf00      	nop
 8041162:	3750      	adds	r7, #80	@ 0x50
 8041164:	46bd      	mov	sp, r7
 8041166:	bd80      	pop	{r7, pc}
 8041168:	40023800 	.word	0x40023800
 804116c:	40007000 	.word	0x40007000

08041170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8041170:	b580      	push	{r7, lr}
 8041172:	b084      	sub	sp, #16
 8041174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8041176:	463b      	mov	r3, r7
 8041178:	2200      	movs	r2, #0
 804117a:	601a      	str	r2, [r3, #0]
 804117c:	605a      	str	r2, [r3, #4]
 804117e:	609a      	str	r2, [r3, #8]
 8041180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8041182:	4b21      	ldr	r3, [pc, #132]	@ (8041208 <MX_ADC1_Init+0x98>)
 8041184:	4a21      	ldr	r2, [pc, #132]	@ (804120c <MX_ADC1_Init+0x9c>)
 8041186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8041188:	4b1f      	ldr	r3, [pc, #124]	@ (8041208 <MX_ADC1_Init+0x98>)
 804118a:	2200      	movs	r2, #0
 804118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 804118e:	4b1e      	ldr	r3, [pc, #120]	@ (8041208 <MX_ADC1_Init+0x98>)
 8041190:	2200      	movs	r2, #0
 8041192:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8041194:	4b1c      	ldr	r3, [pc, #112]	@ (8041208 <MX_ADC1_Init+0x98>)
 8041196:	2200      	movs	r2, #0
 8041198:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 804119a:	4b1b      	ldr	r3, [pc, #108]	@ (8041208 <MX_ADC1_Init+0x98>)
 804119c:	2200      	movs	r2, #0
 804119e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80411a0:	4b19      	ldr	r3, [pc, #100]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411a2:	2200      	movs	r2, #0
 80411a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80411a8:	4b17      	ldr	r3, [pc, #92]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411aa:	2200      	movs	r2, #0
 80411ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80411ae:	4b16      	ldr	r3, [pc, #88]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411b0:	4a17      	ldr	r2, [pc, #92]	@ (8041210 <MX_ADC1_Init+0xa0>)
 80411b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80411b4:	4b14      	ldr	r3, [pc, #80]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411b6:	2200      	movs	r2, #0
 80411b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80411ba:	4b13      	ldr	r3, [pc, #76]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411bc:	2201      	movs	r2, #1
 80411be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80411c0:	4b11      	ldr	r3, [pc, #68]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411c2:	2200      	movs	r2, #0
 80411c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80411c8:	4b0f      	ldr	r3, [pc, #60]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411ca:	2201      	movs	r2, #1
 80411cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80411ce:	480e      	ldr	r0, [pc, #56]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411d0:	f001 f99c 	bl	804250c <HAL_ADC_Init>
 80411d4:	4603      	mov	r3, r0
 80411d6:	2b00      	cmp	r3, #0
 80411d8:	d001      	beq.n	80411de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80411da:	f000 fbdb 	bl	8041994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80411de:	2305      	movs	r3, #5
 80411e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80411e2:	2301      	movs	r3, #1
 80411e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80411e6:	2300      	movs	r3, #0
 80411e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80411ea:	463b      	mov	r3, r7
 80411ec:	4619      	mov	r1, r3
 80411ee:	4806      	ldr	r0, [pc, #24]	@ (8041208 <MX_ADC1_Init+0x98>)
 80411f0:	f001 fab0 	bl	8042754 <HAL_ADC_ConfigChannel>
 80411f4:	4603      	mov	r3, r0
 80411f6:	2b00      	cmp	r3, #0
 80411f8:	d001      	beq.n	80411fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80411fa:	f000 fbcb 	bl	8041994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80411fe:	bf00      	nop
 8041200:	3710      	adds	r7, #16
 8041202:	46bd      	mov	sp, r7
 8041204:	bd80      	pop	{r7, pc}
 8041206:	bf00      	nop
 8041208:	2000020c 	.word	0x2000020c
 804120c:	40012000 	.word	0x40012000
 8041210:	0f000001 	.word	0x0f000001

08041214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8041214:	b580      	push	{r7, lr}
 8041216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8041218:	4b12      	ldr	r3, [pc, #72]	@ (8041264 <MX_I2C1_Init+0x50>)
 804121a:	4a13      	ldr	r2, [pc, #76]	@ (8041268 <MX_I2C1_Init+0x54>)
 804121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 804121e:	4b11      	ldr	r3, [pc, #68]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041220:	4a12      	ldr	r2, [pc, #72]	@ (804126c <MX_I2C1_Init+0x58>)
 8041222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8041224:	4b0f      	ldr	r3, [pc, #60]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041226:	2200      	movs	r2, #0
 8041228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 804122a:	4b0e      	ldr	r3, [pc, #56]	@ (8041264 <MX_I2C1_Init+0x50>)
 804122c:	2200      	movs	r2, #0
 804122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8041230:	4b0c      	ldr	r3, [pc, #48]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8041236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8041238:	4b0a      	ldr	r3, [pc, #40]	@ (8041264 <MX_I2C1_Init+0x50>)
 804123a:	2200      	movs	r2, #0
 804123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 804123e:	4b09      	ldr	r3, [pc, #36]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041240:	2200      	movs	r2, #0
 8041242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8041244:	4b07      	ldr	r3, [pc, #28]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041246:	2200      	movs	r2, #0
 8041248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804124a:	4b06      	ldr	r3, [pc, #24]	@ (8041264 <MX_I2C1_Init+0x50>)
 804124c:	2200      	movs	r2, #0
 804124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8041250:	4804      	ldr	r0, [pc, #16]	@ (8041264 <MX_I2C1_Init+0x50>)
 8041252:	f001 fff9 	bl	8043248 <HAL_I2C_Init>
 8041256:	4603      	mov	r3, r0
 8041258:	2b00      	cmp	r3, #0
 804125a:	d001      	beq.n	8041260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 804125c:	f000 fb9a 	bl	8041994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8041260:	bf00      	nop
 8041262:	bd80      	pop	{r7, pc}
 8041264:	20000254 	.word	0x20000254
 8041268:	40005400 	.word	0x40005400
 804126c:	000186a0 	.word	0x000186a0

08041270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8041270:	b580      	push	{r7, lr}
 8041272:	b086      	sub	sp, #24
 8041274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8041276:	f107 0308 	add.w	r3, r7, #8
 804127a:	2200      	movs	r2, #0
 804127c:	601a      	str	r2, [r3, #0]
 804127e:	605a      	str	r2, [r3, #4]
 8041280:	609a      	str	r2, [r3, #8]
 8041282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8041284:	463b      	mov	r3, r7
 8041286:	2200      	movs	r2, #0
 8041288:	601a      	str	r2, [r3, #0]
 804128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 804128c:	4b20      	ldr	r3, [pc, #128]	@ (8041310 <MX_TIM1_Init+0xa0>)
 804128e:	4a21      	ldr	r2, [pc, #132]	@ (8041314 <MX_TIM1_Init+0xa4>)
 8041290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8041292:	4b1f      	ldr	r3, [pc, #124]	@ (8041310 <MX_TIM1_Init+0xa0>)
 8041294:	2247      	movs	r2, #71	@ 0x47
 8041296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041298:	4b1d      	ldr	r3, [pc, #116]	@ (8041310 <MX_TIM1_Init+0xa0>)
 804129a:	2200      	movs	r2, #0
 804129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 804129e:	4b1c      	ldr	r3, [pc, #112]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80412a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80412a6:	4b1a      	ldr	r3, [pc, #104]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412a8:	2200      	movs	r2, #0
 80412aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80412ac:	4b18      	ldr	r3, [pc, #96]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412ae:	2200      	movs	r2, #0
 80412b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80412b2:	4b17      	ldr	r3, [pc, #92]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412b4:	2200      	movs	r2, #0
 80412b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80412b8:	4815      	ldr	r0, [pc, #84]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412ba:	f003 f92d 	bl	8044518 <HAL_TIM_Base_Init>
 80412be:	4603      	mov	r3, r0
 80412c0:	2b00      	cmp	r3, #0
 80412c2:	d001      	beq.n	80412c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80412c4:	f000 fb66 	bl	8041994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80412c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80412cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80412ce:	f107 0308 	add.w	r3, r7, #8
 80412d2:	4619      	mov	r1, r3
 80412d4:	480e      	ldr	r0, [pc, #56]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412d6:	f003 fb37 	bl	8044948 <HAL_TIM_ConfigClockSource>
 80412da:	4603      	mov	r3, r0
 80412dc:	2b00      	cmp	r3, #0
 80412de:	d001      	beq.n	80412e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80412e0:	f000 fb58 	bl	8041994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80412e4:	2300      	movs	r3, #0
 80412e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80412e8:	2300      	movs	r3, #0
 80412ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80412ec:	463b      	mov	r3, r7
 80412ee:	4619      	mov	r1, r3
 80412f0:	4807      	ldr	r0, [pc, #28]	@ (8041310 <MX_TIM1_Init+0xa0>)
 80412f2:	f003 fd5f 	bl	8044db4 <HAL_TIMEx_MasterConfigSynchronization>
 80412f6:	4603      	mov	r3, r0
 80412f8:	2b00      	cmp	r3, #0
 80412fa:	d001      	beq.n	8041300 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80412fc:	f000 fb4a 	bl	8041994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8041300:	4803      	ldr	r0, [pc, #12]	@ (8041310 <MX_TIM1_Init+0xa0>)
 8041302:	f003 f959 	bl	80445b8 <HAL_TIM_Base_Start>

  /* USER CODE END TIM1_Init 2 */

}
 8041306:	bf00      	nop
 8041308:	3718      	adds	r7, #24
 804130a:	46bd      	mov	sp, r7
 804130c:	bd80      	pop	{r7, pc}
 804130e:	bf00      	nop
 8041310:	200002a8 	.word	0x200002a8
 8041314:	40010000 	.word	0x40010000

08041318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8041318:	b580      	push	{r7, lr}
 804131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 804131c:	4b11      	ldr	r3, [pc, #68]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 804131e:	4a12      	ldr	r2, [pc, #72]	@ (8041368 <MX_USART2_UART_Init+0x50>)
 8041320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8041322:	4b10      	ldr	r3, [pc, #64]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 8041324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8041328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 804132a:	4b0e      	ldr	r3, [pc, #56]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 804132c:	2200      	movs	r2, #0
 804132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8041330:	4b0c      	ldr	r3, [pc, #48]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 8041332:	2200      	movs	r2, #0
 8041334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8041336:	4b0b      	ldr	r3, [pc, #44]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 8041338:	2200      	movs	r2, #0
 804133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 804133c:	4b09      	ldr	r3, [pc, #36]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 804133e:	220c      	movs	r2, #12
 8041340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041342:	4b08      	ldr	r3, [pc, #32]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 8041344:	2200      	movs	r2, #0
 8041346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8041348:	4b06      	ldr	r3, [pc, #24]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 804134a:	2200      	movs	r2, #0
 804134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 804134e:	4805      	ldr	r0, [pc, #20]	@ (8041364 <MX_USART2_UART_Init+0x4c>)
 8041350:	f003 fdc0 	bl	8044ed4 <HAL_UART_Init>
 8041354:	4603      	mov	r3, r0
 8041356:	2b00      	cmp	r3, #0
 8041358:	d001      	beq.n	804135e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 804135a:	f000 fb1b 	bl	8041994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 804135e:	bf00      	nop
 8041360:	bd80      	pop	{r7, pc}
 8041362:	bf00      	nop
 8041364:	200002f0 	.word	0x200002f0
 8041368:	40004400 	.word	0x40004400

0804136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804136c:	b580      	push	{r7, lr}
 804136e:	b08a      	sub	sp, #40	@ 0x28
 8041370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041372:	f107 0314 	add.w	r3, r7, #20
 8041376:	2200      	movs	r2, #0
 8041378:	601a      	str	r2, [r3, #0]
 804137a:	605a      	str	r2, [r3, #4]
 804137c:	609a      	str	r2, [r3, #8]
 804137e:	60da      	str	r2, [r3, #12]
 8041380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8041382:	2300      	movs	r3, #0
 8041384:	613b      	str	r3, [r7, #16]
 8041386:	4b38      	ldr	r3, [pc, #224]	@ (8041468 <MX_GPIO_Init+0xfc>)
 8041388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804138a:	4a37      	ldr	r2, [pc, #220]	@ (8041468 <MX_GPIO_Init+0xfc>)
 804138c:	f043 0304 	orr.w	r3, r3, #4
 8041390:	6313      	str	r3, [r2, #48]	@ 0x30
 8041392:	4b35      	ldr	r3, [pc, #212]	@ (8041468 <MX_GPIO_Init+0xfc>)
 8041394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041396:	f003 0304 	and.w	r3, r3, #4
 804139a:	613b      	str	r3, [r7, #16]
 804139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804139e:	2300      	movs	r3, #0
 80413a0:	60fb      	str	r3, [r7, #12]
 80413a2:	4b31      	ldr	r3, [pc, #196]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413a6:	4a30      	ldr	r2, [pc, #192]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80413ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80413ae:	4b2e      	ldr	r3, [pc, #184]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80413b6:	60fb      	str	r3, [r7, #12]
 80413b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80413ba:	2300      	movs	r3, #0
 80413bc:	60bb      	str	r3, [r7, #8]
 80413be:	4b2a      	ldr	r3, [pc, #168]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413c2:	4a29      	ldr	r2, [pc, #164]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413c4:	f043 0301 	orr.w	r3, r3, #1
 80413c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80413ca:	4b27      	ldr	r3, [pc, #156]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413ce:	f003 0301 	and.w	r3, r3, #1
 80413d2:	60bb      	str	r3, [r7, #8]
 80413d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80413d6:	2300      	movs	r3, #0
 80413d8:	607b      	str	r3, [r7, #4]
 80413da:	4b23      	ldr	r3, [pc, #140]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413de:	4a22      	ldr	r2, [pc, #136]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413e0:	f043 0308 	orr.w	r3, r3, #8
 80413e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80413e6:	4b20      	ldr	r3, [pc, #128]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413ea:	f003 0308 	and.w	r3, r3, #8
 80413ee:	607b      	str	r3, [r7, #4]
 80413f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80413f2:	2300      	movs	r3, #0
 80413f4:	603b      	str	r3, [r7, #0]
 80413f6:	4b1c      	ldr	r3, [pc, #112]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80413fa:	4a1b      	ldr	r2, [pc, #108]	@ (8041468 <MX_GPIO_Init+0xfc>)
 80413fc:	f043 0302 	orr.w	r3, r3, #2
 8041400:	6313      	str	r3, [r2, #48]	@ 0x30
 8041402:	4b19      	ldr	r3, [pc, #100]	@ (8041468 <MX_GPIO_Init+0xfc>)
 8041404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041406:	f003 0302 	and.w	r3, r3, #2
 804140a:	603b      	str	r3, [r7, #0]
 804140c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 804140e:	2200      	movs	r2, #0
 8041410:	2140      	movs	r1, #64	@ 0x40
 8041412:	4816      	ldr	r0, [pc, #88]	@ (804146c <MX_GPIO_Init+0x100>)
 8041414:	f001 fee4 	bl	80431e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8041418:	2200      	movs	r2, #0
 804141a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 804141e:	4814      	ldr	r0, [pc, #80]	@ (8041470 <MX_GPIO_Init+0x104>)
 8041420:	f001 fede 	bl	80431e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8041424:	2340      	movs	r3, #64	@ 0x40
 8041426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041428:	2301      	movs	r3, #1
 804142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804142c:	2300      	movs	r3, #0
 804142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041430:	2300      	movs	r3, #0
 8041432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041434:	f107 0314 	add.w	r3, r7, #20
 8041438:	4619      	mov	r1, r3
 804143a:	480c      	ldr	r0, [pc, #48]	@ (804146c <MX_GPIO_Init+0x100>)
 804143c:	f001 fd1c 	bl	8042e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8041440:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8041444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041446:	2301      	movs	r3, #1
 8041448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804144a:	2300      	movs	r3, #0
 804144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804144e:	2300      	movs	r3, #0
 8041450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041452:	f107 0314 	add.w	r3, r7, #20
 8041456:	4619      	mov	r1, r3
 8041458:	4805      	ldr	r0, [pc, #20]	@ (8041470 <MX_GPIO_Init+0x104>)
 804145a:	f001 fd0d 	bl	8042e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 804145e:	bf00      	nop
 8041460:	3728      	adds	r7, #40	@ 0x28
 8041462:	46bd      	mov	sp, r7
 8041464:	bd80      	pop	{r7, pc}
 8041466:	bf00      	nop
 8041468:	40023800 	.word	0x40023800
 804146c:	40020000 	.word	0x40020000
 8041470:	40020c00 	.word	0x40020c00

08041474 <vTimerCallback>:

/* USER CODE BEGIN 4 */

void vTimerCallback (TimerHandle_t xTimer)
{
 8041474:	b580      	push	{r7, lr}
 8041476:	b082      	sub	sp, #8
 8041478:	af00      	add	r7, sp, #0
 804147a:	6078      	str	r0, [r7, #4]
	Set_Pin_Output(GPIOA, GPIO_PIN_6);
 804147c:	2140      	movs	r1, #64	@ 0x40
 804147e:	4805      	ldr	r0, [pc, #20]	@ (8041494 <vTimerCallback+0x20>)
 8041480:	f000 f8d0 	bl	8041624 <Set_Pin_Output>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8041484:	2140      	movs	r1, #64	@ 0x40
 8041486:	4803      	ldr	r0, [pc, #12]	@ (8041494 <vTimerCallback+0x20>)
 8041488:	f001 fec3 	bl	8043212 <HAL_GPIO_TogglePin>
}
 804148c:	bf00      	nop
 804148e:	3708      	adds	r7, #8
 8041490:	46bd      	mov	sp, r7
 8041492:	bd80      	pop	{r7, pc}
 8041494:	40020000 	.word	0x40020000

08041498 <handle_measure_task>:

void handle_measure_task(void *params)
{
 8041498:	b580      	push	{r7, lr}
 804149a:	b08e      	sub	sp, #56	@ 0x38
 804149c:	af00      	add	r7, sp, #0
 804149e:	6078      	str	r0, [r7, #4]
	char str[40];
	float co2_sense = 0;
 80414a0:	f04f 0300 	mov.w	r3, #0
 80414a4:	637b      	str	r3, [r7, #52]	@ 0x34
	I2C_LCD_Init(MyI2C_LCD);
 80414a6:	2000      	movs	r0, #0
 80414a8:	f004 fe24 	bl	80460f4 <I2C_LCD_Init>
	while(1)
	{
		DHT_GetData(&DHT11_Data);
 80414ac:	4837      	ldr	r0, [pc, #220]	@ (804158c <handle_measure_task+0xf4>)
 80414ae:	f000 f995 	bl	80417dc <DHT_GetData>
		Temperature = DHT11_Data.Temperature;
 80414b2:	4b36      	ldr	r3, [pc, #216]	@ (804158c <handle_measure_task+0xf4>)
 80414b4:	681b      	ldr	r3, [r3, #0]
 80414b6:	4a36      	ldr	r2, [pc, #216]	@ (8041590 <handle_measure_task+0xf8>)
 80414b8:	6013      	str	r3, [r2, #0]
		Humidity = DHT11_Data.Humidity;
 80414ba:	4b34      	ldr	r3, [pc, #208]	@ (804158c <handle_measure_task+0xf4>)
 80414bc:	685b      	ldr	r3, [r3, #4]
 80414be:	4a35      	ldr	r2, [pc, #212]	@ (8041594 <handle_measure_task+0xfc>)
 80414c0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1);
 80414c2:	4835      	ldr	r0, [pc, #212]	@ (8041598 <handle_measure_task+0x100>)
 80414c4:	f001 f866 	bl	8042594 <HAL_ADC_Start>
		co2_sense = getCorrectedPPM(Temperature, Humidity);
 80414c8:	4b31      	ldr	r3, [pc, #196]	@ (8041590 <handle_measure_task+0xf8>)
 80414ca:	edd3 7a00 	vldr	s15, [r3]
 80414ce:	4b31      	ldr	r3, [pc, #196]	@ (8041594 <handle_measure_task+0xfc>)
 80414d0:	ed93 7a00 	vldr	s14, [r3]
 80414d4:	eef0 0a47 	vmov.f32	s1, s14
 80414d8:	eeb0 0a67 	vmov.f32	s0, s15
 80414dc:	f000 fb40 	bl	8041b60 <getCorrectedPPM>
 80414e0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		sprintf(str, "Temperature: %.0f", Temperature);
 80414e4:	4b2a      	ldr	r3, [pc, #168]	@ (8041590 <handle_measure_task+0xf8>)
 80414e6:	681b      	ldr	r3, [r3, #0]
 80414e8:	4618      	mov	r0, r3
 80414ea:	f7ff f83d 	bl	8040568 <__aeabi_f2d>
 80414ee:	4602      	mov	r2, r0
 80414f0:	460b      	mov	r3, r1
 80414f2:	f107 000c 	add.w	r0, r7, #12
 80414f6:	4929      	ldr	r1, [pc, #164]	@ (804159c <handle_measure_task+0x104>)
 80414f8:	f008 fb16 	bl	8049b28 <siprintf>
		I2C_LCD_Clear(MyI2C_LCD);
 80414fc:	2000      	movs	r0, #0
 80414fe:	f004 fe43 	bl	8046188 <I2C_LCD_Clear>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8041502:	2200      	movs	r2, #0
 8041504:	2100      	movs	r1, #0
 8041506:	2000      	movs	r0, #0
 8041508:	f004 fe50 	bl	80461ac <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 804150c:	f107 030c 	add.w	r3, r7, #12
 8041510:	4619      	mov	r1, r3
 8041512:	2000      	movs	r0, #0
 8041514:	f004 fe9e 	bl	8046254 <I2C_LCD_WriteString>
		I2C_LCD_WriteChar(MyI2C_LCD, (char)223);
 8041518:	21df      	movs	r1, #223	@ 0xdf
 804151a:	2000      	movs	r0, #0
 804151c:	f004 fe88 	bl	8046230 <I2C_LCD_WriteChar>
		I2C_LCD_WriteChar(MyI2C_LCD, 'C');
 8041520:	2143      	movs	r1, #67	@ 0x43
 8041522:	2000      	movs	r0, #0
 8041524:	f004 fe84 	bl	8046230 <I2C_LCD_WriteChar>
		sprintf(str, "Humidity: %.0fRH", Humidity);
 8041528:	4b1a      	ldr	r3, [pc, #104]	@ (8041594 <handle_measure_task+0xfc>)
 804152a:	681b      	ldr	r3, [r3, #0]
 804152c:	4618      	mov	r0, r3
 804152e:	f7ff f81b 	bl	8040568 <__aeabi_f2d>
 8041532:	4602      	mov	r2, r0
 8041534:	460b      	mov	r3, r1
 8041536:	f107 000c 	add.w	r0, r7, #12
 804153a:	4919      	ldr	r1, [pc, #100]	@ (80415a0 <handle_measure_task+0x108>)
 804153c:	f008 faf4 	bl	8049b28 <siprintf>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8041540:	2201      	movs	r2, #1
 8041542:	2100      	movs	r1, #0
 8041544:	2000      	movs	r0, #0
 8041546:	f004 fe31 	bl	80461ac <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 804154a:	f107 030c 	add.w	r3, r7, #12
 804154e:	4619      	mov	r1, r3
 8041550:	2000      	movs	r0, #0
 8041552:	f004 fe7f 	bl	8046254 <I2C_LCD_WriteString>
		sprintf(str, "accu_ppm: %.4f", co2_sense);
 8041556:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8041558:	f7ff f806 	bl	8040568 <__aeabi_f2d>
 804155c:	4602      	mov	r2, r0
 804155e:	460b      	mov	r3, r1
 8041560:	f107 000c 	add.w	r0, r7, #12
 8041564:	490f      	ldr	r1, [pc, #60]	@ (80415a4 <handle_measure_task+0x10c>)
 8041566:	f008 fadf 	bl	8049b28 <siprintf>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 2);
 804156a:	2202      	movs	r2, #2
 804156c:	2100      	movs	r1, #0
 804156e:	2000      	movs	r0, #0
 8041570:	f004 fe1c 	bl	80461ac <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, str);
 8041574:	f107 030c 	add.w	r3, r7, #12
 8041578:	4619      	mov	r1, r3
 804157a:	2000      	movs	r0, #0
 804157c:	f004 fe6a 	bl	8046254 <I2C_LCD_WriteString>
//		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8041580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8041584:	f005 fe24 	bl	80471d0 <vTaskDelay>
		DHT_GetData(&DHT11_Data);
 8041588:	bf00      	nop
 804158a:	e78f      	b.n	80414ac <handle_measure_task+0x14>
 804158c:	20000338 	.word	0x20000338
 8041590:	20000340 	.word	0x20000340
 8041594:	20000344 	.word	0x20000344
 8041598:	2000020c 	.word	0x2000020c
 804159c:	0804cce8 	.word	0x0804cce8
 80415a0:	0804ccfc 	.word	0x0804ccfc
 80415a4:	0804cd10 	.word	0x0804cd10

080415a8 <delay_us>:

	}
}

void delay_us(volatile uint16_t us)
{
 80415a8:	b480      	push	{r7}
 80415aa:	b083      	sub	sp, #12
 80415ac:	af00      	add	r7, sp, #0
 80415ae:	4603      	mov	r3, r0
 80415b0:	80fb      	strh	r3, [r7, #6]
//	taskENTER_CRITICAL();
	htim1.Instance->CNT = 0;
 80415b2:	4b09      	ldr	r3, [pc, #36]	@ (80415d8 <delay_us+0x30>)
 80415b4:	681b      	ldr	r3, [r3, #0]
 80415b6:	2200      	movs	r2, #0
 80415b8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (htim1.Instance->CNT < us);
 80415ba:	bf00      	nop
 80415bc:	4b06      	ldr	r3, [pc, #24]	@ (80415d8 <delay_us+0x30>)
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80415c2:	88fa      	ldrh	r2, [r7, #6]
 80415c4:	b292      	uxth	r2, r2
 80415c6:	4293      	cmp	r3, r2
 80415c8:	d3f8      	bcc.n	80415bc <delay_us+0x14>
//	taskEXIT_CRITICAL();
}
 80415ca:	bf00      	nop
 80415cc:	bf00      	nop
 80415ce:	370c      	adds	r7, #12
 80415d0:	46bd      	mov	sp, r7
 80415d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415d6:	4770      	bx	lr
 80415d8:	200002a8 	.word	0x200002a8

080415dc <delay_ms>:

void delay_ms(volatile uint16_t ms)
{
 80415dc:	b480      	push	{r7}
 80415de:	b083      	sub	sp, #12
 80415e0:	af00      	add	r7, sp, #0
 80415e2:	4603      	mov	r3, r0
 80415e4:	80fb      	strh	r3, [r7, #6]
//	taskENTER_CRITICAL();
	while(ms > 0)
 80415e6:	e00f      	b.n	8041608 <delay_ms+0x2c>
	{
		htim1.Instance->CNT = 0;
 80415e8:	4b0d      	ldr	r3, [pc, #52]	@ (8041620 <delay_ms+0x44>)
 80415ea:	681b      	ldr	r3, [r3, #0]
 80415ec:	2200      	movs	r2, #0
 80415ee:	625a      	str	r2, [r3, #36]	@ 0x24
		ms--;
 80415f0:	88fb      	ldrh	r3, [r7, #6]
 80415f2:	b29b      	uxth	r3, r3
 80415f4:	3b01      	subs	r3, #1
 80415f6:	b29b      	uxth	r3, r3
 80415f8:	80fb      	strh	r3, [r7, #6]
		while (htim1.Instance->CNT < 1000);
 80415fa:	bf00      	nop
 80415fc:	4b08      	ldr	r3, [pc, #32]	@ (8041620 <delay_ms+0x44>)
 80415fe:	681b      	ldr	r3, [r3, #0]
 8041600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8041606:	d3f9      	bcc.n	80415fc <delay_ms+0x20>
	while(ms > 0)
 8041608:	88fb      	ldrh	r3, [r7, #6]
 804160a:	b29b      	uxth	r3, r3
 804160c:	2b00      	cmp	r3, #0
 804160e:	d1eb      	bne.n	80415e8 <delay_ms+0xc>
	}
//	taskEXIT_CRITICAL();
}
 8041610:	bf00      	nop
 8041612:	bf00      	nop
 8041614:	370c      	adds	r7, #12
 8041616:	46bd      	mov	sp, r7
 8041618:	f85d 7b04 	ldr.w	r7, [sp], #4
 804161c:	4770      	bx	lr
 804161e:	bf00      	nop
 8041620:	200002a8 	.word	0x200002a8

08041624 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8041624:	b580      	push	{r7, lr}
 8041626:	b088      	sub	sp, #32
 8041628:	af00      	add	r7, sp, #0
 804162a:	6078      	str	r0, [r7, #4]
 804162c:	460b      	mov	r3, r1
 804162e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041630:	f107 030c 	add.w	r3, r7, #12
 8041634:	2200      	movs	r2, #0
 8041636:	601a      	str	r2, [r3, #0]
 8041638:	605a      	str	r2, [r3, #4]
 804163a:	609a      	str	r2, [r3, #8]
 804163c:	60da      	str	r2, [r3, #12]
 804163e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8041640:	887b      	ldrh	r3, [r7, #2]
 8041642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041644:	2301      	movs	r3, #1
 8041646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041648:	2300      	movs	r3, #0
 804164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804164c:	2300      	movs	r3, #0
 804164e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8041650:	f107 030c 	add.w	r3, r7, #12
 8041654:	4619      	mov	r1, r3
 8041656:	6878      	ldr	r0, [r7, #4]
 8041658:	f001 fc0e 	bl	8042e78 <HAL_GPIO_Init>
}
 804165c:	bf00      	nop
 804165e:	3720      	adds	r7, #32
 8041660:	46bd      	mov	sp, r7
 8041662:	bd80      	pop	{r7, pc}

08041664 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8041664:	b580      	push	{r7, lr}
 8041666:	b088      	sub	sp, #32
 8041668:	af00      	add	r7, sp, #0
 804166a:	6078      	str	r0, [r7, #4]
 804166c:	460b      	mov	r3, r1
 804166e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041670:	f107 030c 	add.w	r3, r7, #12
 8041674:	2200      	movs	r2, #0
 8041676:	601a      	str	r2, [r3, #0]
 8041678:	605a      	str	r2, [r3, #4]
 804167a:	609a      	str	r2, [r3, #8]
 804167c:	60da      	str	r2, [r3, #12]
 804167e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8041680:	887b      	ldrh	r3, [r7, #2]
 8041682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8041684:	2300      	movs	r3, #0
 8041686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041688:	2300      	movs	r3, #0
 804168a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 804168c:	f107 030c 	add.w	r3, r7, #12
 8041690:	4619      	mov	r1, r3
 8041692:	6878      	ldr	r0, [r7, #4]
 8041694:	f001 fbf0 	bl	8042e78 <HAL_GPIO_Init>
}
 8041698:	bf00      	nop
 804169a:	3720      	adds	r7, #32
 804169c:	46bd      	mov	sp, r7
 804169e:	bd80      	pop	{r7, pc}

080416a0 <DHT_Start>:

// DHT11 start signal
void DHT_Start(void) {
 80416a0:	b580      	push	{r7, lr}
 80416a2:	af00      	add	r7, sp, #0
    Set_Pin_Output(GPIOB, GPIO_PIN_15); // Set pin as output
 80416a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80416a8:	480d      	ldr	r0, [pc, #52]	@ (80416e0 <DHT_Start+0x40>)
 80416aa:	f7ff ffbb 	bl	8041624 <Set_Pin_Output>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // Pull low
 80416ae:	2200      	movs	r2, #0
 80416b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80416b4:	480a      	ldr	r0, [pc, #40]	@ (80416e0 <DHT_Start+0x40>)
 80416b6:	f001 fd93 	bl	80431e0 <HAL_GPIO_WritePin>
    delay_ms(18); // Wait 18 ms
 80416ba:	2012      	movs	r0, #18
 80416bc:	f7ff ff8e 	bl	80415dc <delay_ms>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // Pull high
 80416c0:	2201      	movs	r2, #1
 80416c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80416c6:	4806      	ldr	r0, [pc, #24]	@ (80416e0 <DHT_Start+0x40>)
 80416c8:	f001 fd8a 	bl	80431e0 <HAL_GPIO_WritePin>
    delay_us(30); // Wait 20–40 µs (30 µs is a safe midpoint)
 80416cc:	201e      	movs	r0, #30
 80416ce:	f7ff ff6b 	bl	80415a8 <delay_us>
    Set_Pin_Input(GPIOB, GPIO_PIN_15); // Set pin as input
 80416d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80416d6:	4802      	ldr	r0, [pc, #8]	@ (80416e0 <DHT_Start+0x40>)
 80416d8:	f7ff ffc4 	bl	8041664 <Set_Pin_Input>
}
 80416dc:	bf00      	nop
 80416de:	bd80      	pop	{r7, pc}
 80416e0:	40020400 	.word	0x40020400

080416e4 <DHT_Check_Response>:

// Check DHT11 response
uint8_t DHT_Check_Response(void) {
 80416e4:	b580      	push	{r7, lr}
 80416e6:	b082      	sub	sp, #8
 80416e8:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 80416ea:	2300      	movs	r3, #0
 80416ec:	71fb      	strb	r3, [r7, #7]
    delay_us(40); // Wait for end of 80 µs low pulse
 80416ee:	2028      	movs	r0, #40	@ 0x28
 80416f0:	f7ff ff5a 	bl	80415a8 <delay_us>
    if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) { // Low pulse detected
 80416f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80416f8:	4811      	ldr	r0, [pc, #68]	@ (8041740 <DHT_Check_Response+0x5c>)
 80416fa:	f001 fd59 	bl	80431b0 <HAL_GPIO_ReadPin>
 80416fe:	4603      	mov	r3, r0
 8041700:	2b00      	cmp	r3, #0
 8041702:	d10f      	bne.n	8041724 <DHT_Check_Response+0x40>
        delay_us(80); // Wait for 80 µs high pulse
 8041704:	2050      	movs	r0, #80	@ 0x50
 8041706:	f7ff ff4f 	bl	80415a8 <delay_us>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) { // High pulse detected
 804170a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 804170e:	480c      	ldr	r0, [pc, #48]	@ (8041740 <DHT_Check_Response+0x5c>)
 8041710:	f001 fd4e 	bl	80431b0 <HAL_GPIO_ReadPin>
 8041714:	4603      	mov	r3, r0
 8041716:	2b00      	cmp	r3, #0
 8041718:	d002      	beq.n	8041720 <DHT_Check_Response+0x3c>
            Response = 1; // Valid response
 804171a:	2301      	movs	r3, #1
 804171c:	71fb      	strb	r3, [r7, #7]
 804171e:	e001      	b.n	8041724 <DHT_Check_Response+0x40>
        } else {
            Response = 0; // No high pulse
 8041720:	2300      	movs	r3, #0
 8041722:	71fb      	strb	r3, [r7, #7]
        }
    }
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8041724:	bf00      	nop
 8041726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 804172a:	4805      	ldr	r0, [pc, #20]	@ (8041740 <DHT_Check_Response+0x5c>)
 804172c:	f001 fd40 	bl	80431b0 <HAL_GPIO_ReadPin>
 8041730:	4603      	mov	r3, r0
 8041732:	2b00      	cmp	r3, #0
 8041734:	d1f7      	bne.n	8041726 <DHT_Check_Response+0x42>
    return Response;
 8041736:	79fb      	ldrb	r3, [r7, #7]
}
 8041738:	4618      	mov	r0, r3
 804173a:	3708      	adds	r7, #8
 804173c:	46bd      	mov	sp, r7
 804173e:	bd80      	pop	{r7, pc}
 8041740:	40020400 	.word	0x40020400

08041744 <DHT_Read>:

// Read one byte from DHT11
uint8_t DHT_Read(void) {
 8041744:	b580      	push	{r7, lr}
 8041746:	b082      	sub	sp, #8
 8041748:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 804174a:	2300      	movs	r3, #0
 804174c:	71bb      	strb	r3, [r7, #6]
 804174e:	e03a      	b.n	80417c6 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait for the pin to go high
 8041750:	bf00      	nop
 8041752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8041756:	4820      	ldr	r0, [pc, #128]	@ (80417d8 <DHT_Read+0x94>)
 8041758:	f001 fd2a 	bl	80431b0 <HAL_GPIO_ReadPin>
 804175c:	4603      	mov	r3, r0
 804175e:	2b00      	cmp	r3, #0
 8041760:	d0f7      	beq.n	8041752 <DHT_Read+0xe>
		delay_us(40);   // wait for 40 us
 8041762:	2028      	movs	r0, #40	@ 0x28
 8041764:	f7ff ff20 	bl	80415a8 <delay_us>
		if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the pin is low
 8041768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 804176c:	481a      	ldr	r0, [pc, #104]	@ (80417d8 <DHT_Read+0x94>)
 804176e:	f001 fd1f 	bl	80431b0 <HAL_GPIO_ReadPin>
 8041772:	4603      	mov	r3, r0
 8041774:	2b00      	cmp	r3, #0
 8041776:	d10e      	bne.n	8041796 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8041778:	79bb      	ldrb	r3, [r7, #6]
 804177a:	f1c3 0307 	rsb	r3, r3, #7
 804177e:	2201      	movs	r2, #1
 8041780:	fa02 f303 	lsl.w	r3, r2, r3
 8041784:	b25b      	sxtb	r3, r3
 8041786:	43db      	mvns	r3, r3
 8041788:	b25a      	sxtb	r2, r3
 804178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804178e:	4013      	ands	r3, r2
 8041790:	b25b      	sxtb	r3, r3
 8041792:	71fb      	strb	r3, [r7, #7]
 8041794:	e00b      	b.n	80417ae <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8041796:	79bb      	ldrb	r3, [r7, #6]
 8041798:	f1c3 0307 	rsb	r3, r3, #7
 804179c:	2201      	movs	r2, #1
 804179e:	fa02 f303 	lsl.w	r3, r2, r3
 80417a2:	b25a      	sxtb	r2, r3
 80417a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80417a8:	4313      	orrs	r3, r2
 80417aa:	b25b      	sxtb	r3, r3
 80417ac:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));  // wait for the pin to go low
 80417ae:	bf00      	nop
 80417b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80417b4:	4808      	ldr	r0, [pc, #32]	@ (80417d8 <DHT_Read+0x94>)
 80417b6:	f001 fcfb 	bl	80431b0 <HAL_GPIO_ReadPin>
 80417ba:	4603      	mov	r3, r0
 80417bc:	2b00      	cmp	r3, #0
 80417be:	d1f7      	bne.n	80417b0 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80417c0:	79bb      	ldrb	r3, [r7, #6]
 80417c2:	3301      	adds	r3, #1
 80417c4:	71bb      	strb	r3, [r7, #6]
 80417c6:	79bb      	ldrb	r3, [r7, #6]
 80417c8:	2b07      	cmp	r3, #7
 80417ca:	d9c1      	bls.n	8041750 <DHT_Read+0xc>
	}
	return i;
 80417cc:	79fb      	ldrb	r3, [r7, #7]
}
 80417ce:	4618      	mov	r0, r3
 80417d0:	3708      	adds	r7, #8
 80417d2:	46bd      	mov	sp, r7
 80417d4:	bd80      	pop	{r7, pc}
 80417d6:	bf00      	nop
 80417d8:	40020400 	.word	0x40020400

080417dc <DHT_GetData>:
void DHT_GetData(DHT_DataTypedef *DHT_Data)
{
 80417dc:	b580      	push	{r7, lr}
 80417de:	b082      	sub	sp, #8
 80417e0:	af00      	add	r7, sp, #0
 80417e2:	6078      	str	r0, [r7, #4]
	DHT_Start();
 80417e4:	f7ff ff5c 	bl	80416a0 <DHT_Start>
	Presence = DHT_Check_Response ();
 80417e8:	f7ff ff7c 	bl	80416e4 <DHT_Check_Response>
 80417ec:	4603      	mov	r3, r0
 80417ee:	461a      	mov	r2, r3
 80417f0:	4b23      	ldr	r3, [pc, #140]	@ (8041880 <DHT_GetData+0xa4>)
 80417f2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80417f4:	f7ff ffa6 	bl	8041744 <DHT_Read>
 80417f8:	4603      	mov	r3, r0
 80417fa:	461a      	mov	r2, r3
 80417fc:	4b21      	ldr	r3, [pc, #132]	@ (8041884 <DHT_GetData+0xa8>)
 80417fe:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8041800:	f7ff ffa0 	bl	8041744 <DHT_Read>
 8041804:	4603      	mov	r3, r0
 8041806:	461a      	mov	r2, r3
 8041808:	4b1f      	ldr	r3, [pc, #124]	@ (8041888 <DHT_GetData+0xac>)
 804180a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 804180c:	f7ff ff9a 	bl	8041744 <DHT_Read>
 8041810:	4603      	mov	r3, r0
 8041812:	461a      	mov	r2, r3
 8041814:	4b1d      	ldr	r3, [pc, #116]	@ (804188c <DHT_GetData+0xb0>)
 8041816:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8041818:	f7ff ff94 	bl	8041744 <DHT_Read>
 804181c:	4603      	mov	r3, r0
 804181e:	461a      	mov	r2, r3
 8041820:	4b1b      	ldr	r3, [pc, #108]	@ (8041890 <DHT_GetData+0xb4>)
 8041822:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8041824:	f7ff ff8e 	bl	8041744 <DHT_Read>
 8041828:	4603      	mov	r3, r0
 804182a:	461a      	mov	r2, r3
 804182c:	4b19      	ldr	r3, [pc, #100]	@ (8041894 <DHT_GetData+0xb8>)
 804182e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8041830:	4b18      	ldr	r3, [pc, #96]	@ (8041894 <DHT_GetData+0xb8>)
 8041832:	881b      	ldrh	r3, [r3, #0]
 8041834:	4619      	mov	r1, r3
 8041836:	4b13      	ldr	r3, [pc, #76]	@ (8041884 <DHT_GetData+0xa8>)
 8041838:	781b      	ldrb	r3, [r3, #0]
 804183a:	461a      	mov	r2, r3
 804183c:	4b12      	ldr	r3, [pc, #72]	@ (8041888 <DHT_GetData+0xac>)
 804183e:	781b      	ldrb	r3, [r3, #0]
 8041840:	4413      	add	r3, r2
 8041842:	4a12      	ldr	r2, [pc, #72]	@ (804188c <DHT_GetData+0xb0>)
 8041844:	7812      	ldrb	r2, [r2, #0]
 8041846:	4413      	add	r3, r2
 8041848:	4a11      	ldr	r2, [pc, #68]	@ (8041890 <DHT_GetData+0xb4>)
 804184a:	7812      	ldrb	r2, [r2, #0]
 804184c:	4413      	add	r3, r2
 804184e:	4299      	cmp	r1, r3
 8041850:	d111      	bne.n	8041876 <DHT_GetData+0x9a>
	{
			DHT_Data->Temperature = Temp_byte1;
 8041852:	4b0e      	ldr	r3, [pc, #56]	@ (804188c <DHT_GetData+0xb0>)
 8041854:	781b      	ldrb	r3, [r3, #0]
 8041856:	ee07 3a90 	vmov	s15, r3
 804185a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804185e:	687b      	ldr	r3, [r7, #4]
 8041860:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8041864:	4b07      	ldr	r3, [pc, #28]	@ (8041884 <DHT_GetData+0xa8>)
 8041866:	781b      	ldrb	r3, [r3, #0]
 8041868:	ee07 3a90 	vmov	s15, r3
 804186c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041870:	687b      	ldr	r3, [r7, #4]
 8041872:	edc3 7a01 	vstr	s15, [r3, #4]

	}
}
 8041876:	bf00      	nop
 8041878:	3708      	adds	r7, #8
 804187a:	46bd      	mov	sp, r7
 804187c:	bd80      	pop	{r7, pc}
 804187e:	bf00      	nop
 8041880:	2000034e 	.word	0x2000034e
 8041884:	20000348 	.word	0x20000348
 8041888:	20000349 	.word	0x20000349
 804188c:	2000034a 	.word	0x2000034a
 8041890:	2000034b 	.word	0x2000034b
 8041894:	2000034c 	.word	0x2000034c

08041898 <turn_on_dc>:

void turn_on_dc(void){
 8041898:	b580      	push	{r7, lr}
 804189a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 804189c:	2201      	movs	r2, #1
 804189e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80418a2:	4805      	ldr	r0, [pc, #20]	@ (80418b8 <turn_on_dc+0x20>)
 80418a4:	f001 fc9c 	bl	80431e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80418a8:	2200      	movs	r2, #0
 80418aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80418ae:	4802      	ldr	r0, [pc, #8]	@ (80418b8 <turn_on_dc+0x20>)
 80418b0:	f001 fc96 	bl	80431e0 <HAL_GPIO_WritePin>
}
 80418b4:	bf00      	nop
 80418b6:	bd80      	pop	{r7, pc}
 80418b8:	40020c00 	.word	0x40020c00

080418bc <turn_off_dc>:

void turn_off_dc(void){
 80418bc:	b580      	push	{r7, lr}
 80418be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80418c0:	2200      	movs	r2, #0
 80418c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80418c6:	4805      	ldr	r0, [pc, #20]	@ (80418dc <turn_off_dc+0x20>)
 80418c8:	f001 fc8a 	bl	80431e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80418cc:	2200      	movs	r2, #0
 80418ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80418d2:	4802      	ldr	r0, [pc, #8]	@ (80418dc <turn_off_dc+0x20>)
 80418d4:	f001 fc84 	bl	80431e0 <HAL_GPIO_WritePin>
}
 80418d8:	bf00      	nop
 80418da:	bd80      	pop	{r7, pc}
 80418dc:	40020c00 	.word	0x40020c00

080418e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80418e0:	b580      	push	{r7, lr}
 80418e2:	b086      	sub	sp, #24
 80418e4:	af02      	add	r7, sp, #8
 80418e6:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(xQueueIsQueueFullFromISR(q_data) == pdFALSE)
 80418e8:	4b1d      	ldr	r3, [pc, #116]	@ (8041960 <HAL_UART_RxCpltCallback+0x80>)
 80418ea:	681b      	ldr	r3, [r3, #0]
 80418ec:	4618      	mov	r0, r3
 80418ee:	f005 faa3 	bl	8046e38 <xQueueIsQueueFullFromISR>
 80418f2:	4603      	mov	r3, r0
 80418f4:	2b00      	cmp	r3, #0
 80418f6:	d107      	bne.n	8041908 <HAL_UART_RxCpltCallback+0x28>
	{
		xQueueSendFromISR(q_data, &data, NULL);
 80418f8:	4b19      	ldr	r3, [pc, #100]	@ (8041960 <HAL_UART_RxCpltCallback+0x80>)
 80418fa:	6818      	ldr	r0, [r3, #0]
 80418fc:	2300      	movs	r3, #0
 80418fe:	2200      	movs	r2, #0
 8041900:	4918      	ldr	r1, [pc, #96]	@ (8041964 <HAL_UART_RxCpltCallback+0x84>)
 8041902:	f004 ff67 	bl	80467d4 <xQueueGenericSendFromISR>
 8041906:	e012      	b.n	804192e <HAL_UART_RxCpltCallback+0x4e>
	}
	else
	{
		if (data == '\n')
 8041908:	4b16      	ldr	r3, [pc, #88]	@ (8041964 <HAL_UART_RxCpltCallback+0x84>)
 804190a:	781b      	ldrb	r3, [r3, #0]
 804190c:	2b0a      	cmp	r3, #10
 804190e:	d10e      	bne.n	804192e <HAL_UART_RxCpltCallback+0x4e>
		{
			xQueueReceiveFromISR(q_data, &dummy, NULL);
 8041910:	4b13      	ldr	r3, [pc, #76]	@ (8041960 <HAL_UART_RxCpltCallback+0x80>)
 8041912:	681b      	ldr	r3, [r3, #0]
 8041914:	f107 010f 	add.w	r1, r7, #15
 8041918:	2200      	movs	r2, #0
 804191a:	4618      	mov	r0, r3
 804191c:	f005 f8ea 	bl	8046af4 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, &data, NULL);
 8041920:	4b0f      	ldr	r3, [pc, #60]	@ (8041960 <HAL_UART_RxCpltCallback+0x80>)
 8041922:	6818      	ldr	r0, [r3, #0]
 8041924:	2300      	movs	r3, #0
 8041926:	2200      	movs	r2, #0
 8041928:	490e      	ldr	r1, [pc, #56]	@ (8041964 <HAL_UART_RxCpltCallback+0x84>)
 804192a:	f004 ff53 	bl	80467d4 <xQueueGenericSendFromISR>
		}

	}
	if (data == '\n')
 804192e:	4b0d      	ldr	r3, [pc, #52]	@ (8041964 <HAL_UART_RxCpltCallback+0x84>)
 8041930:	781b      	ldrb	r3, [r3, #0]
 8041932:	2b0a      	cmp	r3, #10
 8041934:	d10a      	bne.n	804194c <HAL_UART_RxCpltCallback+0x6c>
	{
		xTaskNotifyFromISR(cmd_task, 0, eNoAction, NULL);
 8041936:	4b0c      	ldr	r3, [pc, #48]	@ (8041968 <HAL_UART_RxCpltCallback+0x88>)
 8041938:	6818      	ldr	r0, [r3, #0]
 804193a:	2300      	movs	r3, #0
 804193c:	9301      	str	r3, [sp, #4]
 804193e:	2300      	movs	r3, #0
 8041940:	9300      	str	r3, [sp, #0]
 8041942:	2300      	movs	r3, #0
 8041944:	2200      	movs	r2, #0
 8041946:	2100      	movs	r1, #0
 8041948:	f006 fa8c 	bl	8047e64 <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 804194c:	2201      	movs	r2, #1
 804194e:	4905      	ldr	r1, [pc, #20]	@ (8041964 <HAL_UART_RxCpltCallback+0x84>)
 8041950:	4806      	ldr	r0, [pc, #24]	@ (804196c <HAL_UART_RxCpltCallback+0x8c>)
 8041952:	f003 fb9a 	bl	804508a <HAL_UART_Receive_IT>
}
 8041956:	bf00      	nop
 8041958:	3710      	adds	r7, #16
 804195a:	46bd      	mov	sp, r7
 804195c:	bd80      	pop	{r7, pc}
 804195e:	bf00      	nop
 8041960:	2000036c 	.word	0x2000036c
 8041964:	2000034f 	.word	0x2000034f
 8041968:	20000350 	.word	0x20000350
 804196c:	200002f0 	.word	0x200002f0

08041970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041970:	b580      	push	{r7, lr}
 8041972:	b082      	sub	sp, #8
 8041974:	af00      	add	r7, sp, #0
 8041976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	681b      	ldr	r3, [r3, #0]
 804197c:	4a04      	ldr	r2, [pc, #16]	@ (8041990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 804197e:	4293      	cmp	r3, r2
 8041980:	d101      	bne.n	8041986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8041982:	f000 fda3 	bl	80424cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041986:	bf00      	nop
 8041988:	3708      	adds	r7, #8
 804198a:	46bd      	mov	sp, r7
 804198c:	bd80      	pop	{r7, pc}
 804198e:	bf00      	nop
 8041990:	40001000 	.word	0x40001000

08041994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041994:	b480      	push	{r7}
 8041996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8041998:	b672      	cpsid	i
}
 804199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 804199c:	bf00      	nop
 804199e:	e7fd      	b.n	804199c <Error_Handler+0x8>

080419a0 <getCorrectionFactor>:
@param[in] h  The relative humidity

@return The calculated correction factor
*/
/**************************************************************************/
float getCorrectionFactor(float t, float h) {
 80419a0:	b5b0      	push	{r4, r5, r7, lr}
 80419a2:	b082      	sub	sp, #8
 80419a4:	af00      	add	r7, sp, #0
 80419a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80419aa:	edc7 0a00 	vstr	s1, [r7]
  return CORA * t * t - CORB * t + CORC - (h-33.)*CORD;
 80419ae:	6878      	ldr	r0, [r7, #4]
 80419b0:	f7fe fdda 	bl	8040568 <__aeabi_f2d>
 80419b4:	a32d      	add	r3, pc, #180	@ (adr r3, 8041a6c <getCorrectionFactor+0xcc>)
 80419b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80419ba:	f7fe fe2d 	bl	8040618 <__aeabi_dmul>
 80419be:	4602      	mov	r2, r0
 80419c0:	460b      	mov	r3, r1
 80419c2:	4614      	mov	r4, r2
 80419c4:	461d      	mov	r5, r3
 80419c6:	6878      	ldr	r0, [r7, #4]
 80419c8:	f7fe fdce 	bl	8040568 <__aeabi_f2d>
 80419cc:	4602      	mov	r2, r0
 80419ce:	460b      	mov	r3, r1
 80419d0:	4620      	mov	r0, r4
 80419d2:	4629      	mov	r1, r5
 80419d4:	f7fe fe20 	bl	8040618 <__aeabi_dmul>
 80419d8:	4602      	mov	r2, r0
 80419da:	460b      	mov	r3, r1
 80419dc:	4614      	mov	r4, r2
 80419de:	461d      	mov	r5, r3
 80419e0:	6878      	ldr	r0, [r7, #4]
 80419e2:	f7fe fdc1 	bl	8040568 <__aeabi_f2d>
 80419e6:	a323      	add	r3, pc, #140	@ (adr r3, 8041a74 <getCorrectionFactor+0xd4>)
 80419e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80419ec:	f7fe fe14 	bl	8040618 <__aeabi_dmul>
 80419f0:	4602      	mov	r2, r0
 80419f2:	460b      	mov	r3, r1
 80419f4:	4620      	mov	r0, r4
 80419f6:	4629      	mov	r1, r5
 80419f8:	f7fe fc56 	bl	80402a8 <__aeabi_dsub>
 80419fc:	4602      	mov	r2, r0
 80419fe:	460b      	mov	r3, r1
 8041a00:	4610      	mov	r0, r2
 8041a02:	4619      	mov	r1, r3
 8041a04:	a31d      	add	r3, pc, #116	@ (adr r3, 8041a7c <getCorrectionFactor+0xdc>)
 8041a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041a0a:	f7fe fc4f 	bl	80402ac <__adddf3>
 8041a0e:	4602      	mov	r2, r0
 8041a10:	460b      	mov	r3, r1
 8041a12:	4614      	mov	r4, r2
 8041a14:	461d      	mov	r5, r3
 8041a16:	6838      	ldr	r0, [r7, #0]
 8041a18:	f7fe fda6 	bl	8040568 <__aeabi_f2d>
 8041a1c:	f04f 0200 	mov.w	r2, #0
 8041a20:	4b11      	ldr	r3, [pc, #68]	@ (8041a68 <getCorrectionFactor+0xc8>)
 8041a22:	f7fe fc41 	bl	80402a8 <__aeabi_dsub>
 8041a26:	4602      	mov	r2, r0
 8041a28:	460b      	mov	r3, r1
 8041a2a:	4610      	mov	r0, r2
 8041a2c:	4619      	mov	r1, r3
 8041a2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8041a60 <getCorrectionFactor+0xc0>)
 8041a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041a34:	f7fe fdf0 	bl	8040618 <__aeabi_dmul>
 8041a38:	4602      	mov	r2, r0
 8041a3a:	460b      	mov	r3, r1
 8041a3c:	4620      	mov	r0, r4
 8041a3e:	4629      	mov	r1, r5
 8041a40:	f7fe fc32 	bl	80402a8 <__aeabi_dsub>
 8041a44:	4602      	mov	r2, r0
 8041a46:	460b      	mov	r3, r1
 8041a48:	4610      	mov	r0, r2
 8041a4a:	4619      	mov	r1, r3
 8041a4c:	f7ff f8bc 	bl	8040bc8 <__aeabi_d2f>
 8041a50:	4603      	mov	r3, r0
 8041a52:	ee07 3a90 	vmov	s15, r3
}
 8041a56:	eeb0 0a67 	vmov.f32	s0, s15
 8041a5a:	3708      	adds	r7, #8
 8041a5c:	46bd      	mov	sp, r7
 8041a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8041a60:	487fcb92 	.word	0x487fcb92
 8041a64:	3f5d7dbf 	.word	0x3f5d7dbf
 8041a68:	40408000 	.word	0x40408000
 8041a6c:	8db8bac7 	.word	0x8db8bac7
 8041a70:	3f36f006 	.word	0x3f36f006
 8041a74:	ec6bce85 	.word	0xec6bce85
 8041a78:	3f9bd512 	.word	0x3f9bd512
 8041a7c:	fa97e133 	.word	0xfa97e133
 8041a80:	3ff65379 	.word	0x3ff65379
 8041a84:	00000000 	.word	0x00000000

08041a88 <getResistance>:
@brief  Get the resistance of the sensor, ie. the measurement value

@return The sensor resistance in kOhm
*/
/**************************************************************************/
float getResistance() {
 8041a88:	b580      	push	{r7, lr}
 8041a8a:	b082      	sub	sp, #8
 8041a8c:	af00      	add	r7, sp, #0
  size_t val = HAL_ADC_GetValue(&hadc1);
 8041a8e:	4820      	ldr	r0, [pc, #128]	@ (8041b10 <getResistance+0x88>)
 8041a90:	f000 fe52 	bl	8042738 <HAL_ADC_GetValue>
 8041a94:	6078      	str	r0, [r7, #4]
  return ((1023./(float)val) * 5. - 1.)*RLOAD;
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	ee07 3a90 	vmov	s15, r3
 8041a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041aa0:	ee17 0a90 	vmov	r0, s15
 8041aa4:	f7fe fd60 	bl	8040568 <__aeabi_f2d>
 8041aa8:	4602      	mov	r2, r0
 8041aaa:	460b      	mov	r3, r1
 8041aac:	a116      	add	r1, pc, #88	@ (adr r1, 8041b08 <getResistance+0x80>)
 8041aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8041ab2:	f7fe fedb 	bl	804086c <__aeabi_ddiv>
 8041ab6:	4602      	mov	r2, r0
 8041ab8:	460b      	mov	r3, r1
 8041aba:	4610      	mov	r0, r2
 8041abc:	4619      	mov	r1, r3
 8041abe:	f04f 0200 	mov.w	r2, #0
 8041ac2:	4b14      	ldr	r3, [pc, #80]	@ (8041b14 <getResistance+0x8c>)
 8041ac4:	f7fe fda8 	bl	8040618 <__aeabi_dmul>
 8041ac8:	4602      	mov	r2, r0
 8041aca:	460b      	mov	r3, r1
 8041acc:	4610      	mov	r0, r2
 8041ace:	4619      	mov	r1, r3
 8041ad0:	f04f 0200 	mov.w	r2, #0
 8041ad4:	4b10      	ldr	r3, [pc, #64]	@ (8041b18 <getResistance+0x90>)
 8041ad6:	f7fe fbe7 	bl	80402a8 <__aeabi_dsub>
 8041ada:	4602      	mov	r2, r0
 8041adc:	460b      	mov	r3, r1
 8041ade:	4610      	mov	r0, r2
 8041ae0:	4619      	mov	r1, r3
 8041ae2:	f04f 0200 	mov.w	r2, #0
 8041ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8041b1c <getResistance+0x94>)
 8041ae8:	f7fe fd96 	bl	8040618 <__aeabi_dmul>
 8041aec:	4602      	mov	r2, r0
 8041aee:	460b      	mov	r3, r1
 8041af0:	4610      	mov	r0, r2
 8041af2:	4619      	mov	r1, r3
 8041af4:	f7ff f868 	bl	8040bc8 <__aeabi_d2f>
 8041af8:	4603      	mov	r3, r0
 8041afa:	ee07 3a90 	vmov	s15, r3
}
 8041afe:	eeb0 0a67 	vmov.f32	s0, s15
 8041b02:	3708      	adds	r7, #8
 8041b04:	46bd      	mov	sp, r7
 8041b06:	bd80      	pop	{r7, pc}
 8041b08:	00000000 	.word	0x00000000
 8041b0c:	408ff800 	.word	0x408ff800
 8041b10:	2000020c 	.word	0x2000020c
 8041b14:	40140000 	.word	0x40140000
 8041b18:	3ff00000 	.word	0x3ff00000
 8041b1c:	40240000 	.word	0x40240000

08041b20 <getCorrectedResistance>:
@param[in] h  The relative humidity

@return The corrected sensor resistance kOhm
*/
/**************************************************************************/
float getCorrectedResistance(float t, float h) {
 8041b20:	b580      	push	{r7, lr}
 8041b22:	ed2d 8b02 	vpush	{d8}
 8041b26:	b082      	sub	sp, #8
 8041b28:	af00      	add	r7, sp, #0
 8041b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8041b2e:	edc7 0a00 	vstr	s1, [r7]
  return getResistance()/getCorrectionFactor(t, h);
 8041b32:	f7ff ffa9 	bl	8041a88 <getResistance>
 8041b36:	eeb0 8a40 	vmov.f32	s16, s0
 8041b3a:	edd7 0a00 	vldr	s1, [r7]
 8041b3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8041b42:	f7ff ff2d 	bl	80419a0 <getCorrectionFactor>
 8041b46:	eef0 7a40 	vmov.f32	s15, s0
 8041b4a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8041b4e:	eef0 7a47 	vmov.f32	s15, s14
}
 8041b52:	eeb0 0a67 	vmov.f32	s0, s15
 8041b56:	3708      	adds	r7, #8
 8041b58:	46bd      	mov	sp, r7
 8041b5a:	ecbd 8b02 	vpop	{d8}
 8041b5e:	bd80      	pop	{r7, pc}

08041b60 <getCorrectedPPM>:
@param[in] h  The relative humidity

@return The ppm of CO2 in the air
*/
/**************************************************************************/
float getCorrectedPPM(float t, float h) {
 8041b60:	b580      	push	{r7, lr}
 8041b62:	b082      	sub	sp, #8
 8041b64:	af00      	add	r7, sp, #0
 8041b66:	ed87 0a01 	vstr	s0, [r7, #4]
 8041b6a:	edc7 0a00 	vstr	s1, [r7]
  return PARA * pow((getCorrectedResistance(t, h)/RZERO), -PARB);
 8041b6e:	edd7 0a00 	vldr	s1, [r7]
 8041b72:	ed97 0a01 	vldr	s0, [r7, #4]
 8041b76:	f7ff ffd3 	bl	8041b20 <getCorrectedResistance>
 8041b7a:	ee10 3a10 	vmov	r3, s0
 8041b7e:	4618      	mov	r0, r3
 8041b80:	f7fe fcf2 	bl	8040568 <__aeabi_f2d>
 8041b84:	a314      	add	r3, pc, #80	@ (adr r3, 8041bd8 <getCorrectedPPM+0x78>)
 8041b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041b8a:	f7fe fe6f 	bl	804086c <__aeabi_ddiv>
 8041b8e:	4602      	mov	r2, r0
 8041b90:	460b      	mov	r3, r1
 8041b92:	ec43 2b17 	vmov	d7, r2, r3
 8041b96:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8041bd0 <getCorrectedPPM+0x70>
 8041b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8041b9e:	eef0 0a67 	vmov.f32	s1, s15
 8041ba2:	f00a f8ef 	bl	804bd84 <pow>
 8041ba6:	ec51 0b10 	vmov	r0, r1, d0
 8041baa:	a30d      	add	r3, pc, #52	@ (adr r3, 8041be0 <getCorrectedPPM+0x80>)
 8041bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041bb0:	f7fe fd32 	bl	8040618 <__aeabi_dmul>
 8041bb4:	4602      	mov	r2, r0
 8041bb6:	460b      	mov	r3, r1
 8041bb8:	4610      	mov	r0, r2
 8041bba:	4619      	mov	r1, r3
 8041bbc:	f7ff f804 	bl	8040bc8 <__aeabi_d2f>
 8041bc0:	4603      	mov	r3, r0
 8041bc2:	ee07 3a90 	vmov	s15, r3
}
 8041bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8041bca:	3708      	adds	r7, #8
 8041bcc:	46bd      	mov	sp, r7
 8041bce:	bd80      	pop	{r7, pc}
 8041bd0:	bf42646d 	.word	0xbf42646d
 8041bd4:	c00626fb 	.word	0xc00626fb
 8041bd8:	eb851eb8 	.word	0xeb851eb8
 8041bdc:	40532851 	.word	0x40532851
 8041be0:	490f3d8b 	.word	0x490f3d8b
 8041be4:	405d2688 	.word	0x405d2688

08041be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041be8:	b480      	push	{r7}
 8041bea:	b083      	sub	sp, #12
 8041bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041bee:	2300      	movs	r3, #0
 8041bf0:	607b      	str	r3, [r7, #4]
 8041bf2:	4b10      	ldr	r3, [pc, #64]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8041bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8041bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8041c06:	607b      	str	r3, [r7, #4]
 8041c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8041c0a:	2300      	movs	r3, #0
 8041c0c:	603b      	str	r3, [r7, #0]
 8041c0e:	4b09      	ldr	r3, [pc, #36]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c12:	4a08      	ldr	r2, [pc, #32]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8041c1a:	4b06      	ldr	r3, [pc, #24]	@ (8041c34 <HAL_MspInit+0x4c>)
 8041c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041c22:	603b      	str	r3, [r7, #0]
 8041c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8041c26:	bf00      	nop
 8041c28:	370c      	adds	r7, #12
 8041c2a:	46bd      	mov	sp, r7
 8041c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c30:	4770      	bx	lr
 8041c32:	bf00      	nop
 8041c34:	40023800 	.word	0x40023800

08041c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8041c38:	b580      	push	{r7, lr}
 8041c3a:	b08a      	sub	sp, #40	@ 0x28
 8041c3c:	af00      	add	r7, sp, #0
 8041c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041c40:	f107 0314 	add.w	r3, r7, #20
 8041c44:	2200      	movs	r2, #0
 8041c46:	601a      	str	r2, [r3, #0]
 8041c48:	605a      	str	r2, [r3, #4]
 8041c4a:	609a      	str	r2, [r3, #8]
 8041c4c:	60da      	str	r2, [r3, #12]
 8041c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8041c50:	687b      	ldr	r3, [r7, #4]
 8041c52:	681b      	ldr	r3, [r3, #0]
 8041c54:	4a17      	ldr	r2, [pc, #92]	@ (8041cb4 <HAL_ADC_MspInit+0x7c>)
 8041c56:	4293      	cmp	r3, r2
 8041c58:	d127      	bne.n	8041caa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8041c5a:	2300      	movs	r3, #0
 8041c5c:	613b      	str	r3, [r7, #16]
 8041c5e:	4b16      	ldr	r3, [pc, #88]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041c62:	4a15      	ldr	r2, [pc, #84]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8041c6a:	4b13      	ldr	r3, [pc, #76]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041c72:	613b      	str	r3, [r7, #16]
 8041c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041c76:	2300      	movs	r3, #0
 8041c78:	60fb      	str	r3, [r7, #12]
 8041c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c80:	f043 0301 	orr.w	r3, r3, #1
 8041c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8041c86:	4b0c      	ldr	r3, [pc, #48]	@ (8041cb8 <HAL_ADC_MspInit+0x80>)
 8041c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c8a:	f003 0301 	and.w	r3, r3, #1
 8041c8e:	60fb      	str	r3, [r7, #12]
 8041c90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8041c92:	2320      	movs	r3, #32
 8041c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8041c96:	2303      	movs	r3, #3
 8041c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041c9a:	2300      	movs	r3, #0
 8041c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041c9e:	f107 0314 	add.w	r3, r7, #20
 8041ca2:	4619      	mov	r1, r3
 8041ca4:	4805      	ldr	r0, [pc, #20]	@ (8041cbc <HAL_ADC_MspInit+0x84>)
 8041ca6:	f001 f8e7 	bl	8042e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8041caa:	bf00      	nop
 8041cac:	3728      	adds	r7, #40	@ 0x28
 8041cae:	46bd      	mov	sp, r7
 8041cb0:	bd80      	pop	{r7, pc}
 8041cb2:	bf00      	nop
 8041cb4:	40012000 	.word	0x40012000
 8041cb8:	40023800 	.word	0x40023800
 8041cbc:	40020000 	.word	0x40020000

08041cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8041cc0:	b580      	push	{r7, lr}
 8041cc2:	b08a      	sub	sp, #40	@ 0x28
 8041cc4:	af00      	add	r7, sp, #0
 8041cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041cc8:	f107 0314 	add.w	r3, r7, #20
 8041ccc:	2200      	movs	r2, #0
 8041cce:	601a      	str	r2, [r3, #0]
 8041cd0:	605a      	str	r2, [r3, #4]
 8041cd2:	609a      	str	r2, [r3, #8]
 8041cd4:	60da      	str	r2, [r3, #12]
 8041cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	681b      	ldr	r3, [r3, #0]
 8041cdc:	4a19      	ldr	r2, [pc, #100]	@ (8041d44 <HAL_I2C_MspInit+0x84>)
 8041cde:	4293      	cmp	r3, r2
 8041ce0:	d12b      	bne.n	8041d3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041ce2:	2300      	movs	r3, #0
 8041ce4:	613b      	str	r3, [r7, #16]
 8041ce6:	4b18      	ldr	r3, [pc, #96]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041cea:	4a17      	ldr	r2, [pc, #92]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041cec:	f043 0302 	orr.w	r3, r3, #2
 8041cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8041cf2:	4b15      	ldr	r3, [pc, #84]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041cf6:	f003 0302 	and.w	r3, r3, #2
 8041cfa:	613b      	str	r3, [r7, #16]
 8041cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8041cfe:	23c0      	movs	r3, #192	@ 0xc0
 8041d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041d02:	2312      	movs	r3, #18
 8041d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041d06:	2300      	movs	r3, #0
 8041d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041d0a:	2303      	movs	r3, #3
 8041d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8041d0e:	2304      	movs	r3, #4
 8041d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041d12:	f107 0314 	add.w	r3, r7, #20
 8041d16:	4619      	mov	r1, r3
 8041d18:	480c      	ldr	r0, [pc, #48]	@ (8041d4c <HAL_I2C_MspInit+0x8c>)
 8041d1a:	f001 f8ad 	bl	8042e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8041d1e:	2300      	movs	r3, #0
 8041d20:	60fb      	str	r3, [r7, #12]
 8041d22:	4b09      	ldr	r3, [pc, #36]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041d26:	4a08      	ldr	r2, [pc, #32]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041d28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8041d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8041d2e:	4b06      	ldr	r3, [pc, #24]	@ (8041d48 <HAL_I2C_MspInit+0x88>)
 8041d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041d36:	60fb      	str	r3, [r7, #12]
 8041d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8041d3a:	bf00      	nop
 8041d3c:	3728      	adds	r7, #40	@ 0x28
 8041d3e:	46bd      	mov	sp, r7
 8041d40:	bd80      	pop	{r7, pc}
 8041d42:	bf00      	nop
 8041d44:	40005400 	.word	0x40005400
 8041d48:	40023800 	.word	0x40023800
 8041d4c:	40020400 	.word	0x40020400

08041d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041d50:	b480      	push	{r7}
 8041d52:	b085      	sub	sp, #20
 8041d54:	af00      	add	r7, sp, #0
 8041d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8041d58:	687b      	ldr	r3, [r7, #4]
 8041d5a:	681b      	ldr	r3, [r3, #0]
 8041d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8041d8c <HAL_TIM_Base_MspInit+0x3c>)
 8041d5e:	4293      	cmp	r3, r2
 8041d60:	d10d      	bne.n	8041d7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041d62:	2300      	movs	r3, #0
 8041d64:	60fb      	str	r3, [r7, #12]
 8041d66:	4b0a      	ldr	r3, [pc, #40]	@ (8041d90 <HAL_TIM_Base_MspInit+0x40>)
 8041d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041d6a:	4a09      	ldr	r2, [pc, #36]	@ (8041d90 <HAL_TIM_Base_MspInit+0x40>)
 8041d6c:	f043 0301 	orr.w	r3, r3, #1
 8041d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8041d72:	4b07      	ldr	r3, [pc, #28]	@ (8041d90 <HAL_TIM_Base_MspInit+0x40>)
 8041d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041d76:	f003 0301 	and.w	r3, r3, #1
 8041d7a:	60fb      	str	r3, [r7, #12]
 8041d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8041d7e:	bf00      	nop
 8041d80:	3714      	adds	r7, #20
 8041d82:	46bd      	mov	sp, r7
 8041d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d88:	4770      	bx	lr
 8041d8a:	bf00      	nop
 8041d8c:	40010000 	.word	0x40010000
 8041d90:	40023800 	.word	0x40023800

08041d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041d94:	b580      	push	{r7, lr}
 8041d96:	b08a      	sub	sp, #40	@ 0x28
 8041d98:	af00      	add	r7, sp, #0
 8041d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041d9c:	f107 0314 	add.w	r3, r7, #20
 8041da0:	2200      	movs	r2, #0
 8041da2:	601a      	str	r2, [r3, #0]
 8041da4:	605a      	str	r2, [r3, #4]
 8041da6:	609a      	str	r2, [r3, #8]
 8041da8:	60da      	str	r2, [r3, #12]
 8041daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8041dac:	687b      	ldr	r3, [r7, #4]
 8041dae:	681b      	ldr	r3, [r3, #0]
 8041db0:	4a1d      	ldr	r2, [pc, #116]	@ (8041e28 <HAL_UART_MspInit+0x94>)
 8041db2:	4293      	cmp	r3, r2
 8041db4:	d133      	bne.n	8041e1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8041db6:	2300      	movs	r3, #0
 8041db8:	613b      	str	r3, [r7, #16]
 8041dba:	4b1c      	ldr	r3, [pc, #112]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8041dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8041dc6:	4b19      	ldr	r3, [pc, #100]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041dce:	613b      	str	r3, [r7, #16]
 8041dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041dd2:	2300      	movs	r3, #0
 8041dd4:	60fb      	str	r3, [r7, #12]
 8041dd6:	4b15      	ldr	r3, [pc, #84]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041dda:	4a14      	ldr	r2, [pc, #80]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041ddc:	f043 0301 	orr.w	r3, r3, #1
 8041de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8041de2:	4b12      	ldr	r3, [pc, #72]	@ (8041e2c <HAL_UART_MspInit+0x98>)
 8041de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041de6:	f003 0301 	and.w	r3, r3, #1
 8041dea:	60fb      	str	r3, [r7, #12]
 8041dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8041dee:	230c      	movs	r3, #12
 8041df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041df2:	2302      	movs	r3, #2
 8041df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041df6:	2300      	movs	r3, #0
 8041df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041dfa:	2303      	movs	r3, #3
 8041dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8041dfe:	2307      	movs	r3, #7
 8041e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041e02:	f107 0314 	add.w	r3, r7, #20
 8041e06:	4619      	mov	r1, r3
 8041e08:	4809      	ldr	r0, [pc, #36]	@ (8041e30 <HAL_UART_MspInit+0x9c>)
 8041e0a:	f001 f835 	bl	8042e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8041e0e:	2200      	movs	r2, #0
 8041e10:	2106      	movs	r1, #6
 8041e12:	2026      	movs	r0, #38	@ 0x26
 8041e14:	f000 ff74 	bl	8042d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8041e18:	2026      	movs	r0, #38	@ 0x26
 8041e1a:	f000 ff8d 	bl	8042d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8041e1e:	bf00      	nop
 8041e20:	3728      	adds	r7, #40	@ 0x28
 8041e22:	46bd      	mov	sp, r7
 8041e24:	bd80      	pop	{r7, pc}
 8041e26:	bf00      	nop
 8041e28:	40004400 	.word	0x40004400
 8041e2c:	40023800 	.word	0x40023800
 8041e30:	40020000 	.word	0x40020000

08041e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041e34:	b580      	push	{r7, lr}
 8041e36:	b08e      	sub	sp, #56	@ 0x38
 8041e38:	af00      	add	r7, sp, #0
 8041e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041e3c:	2300      	movs	r3, #0
 8041e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041e40:	2300      	movs	r3, #0
 8041e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041e44:	2300      	movs	r3, #0
 8041e46:	60fb      	str	r3, [r7, #12]
 8041e48:	4b33      	ldr	r3, [pc, #204]	@ (8041f18 <HAL_InitTick+0xe4>)
 8041e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041e4c:	4a32      	ldr	r2, [pc, #200]	@ (8041f18 <HAL_InitTick+0xe4>)
 8041e4e:	f043 0310 	orr.w	r3, r3, #16
 8041e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8041e54:	4b30      	ldr	r3, [pc, #192]	@ (8041f18 <HAL_InitTick+0xe4>)
 8041e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041e58:	f003 0310 	and.w	r3, r3, #16
 8041e5c:	60fb      	str	r3, [r7, #12]
 8041e5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041e60:	f107 0210 	add.w	r2, r7, #16
 8041e64:	f107 0314 	add.w	r3, r7, #20
 8041e68:	4611      	mov	r1, r2
 8041e6a:	4618      	mov	r0, r3
 8041e6c:	f002 fb22 	bl	80444b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041e70:	6a3b      	ldr	r3, [r7, #32]
 8041e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8041e76:	2b00      	cmp	r3, #0
 8041e78:	d103      	bne.n	8041e82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041e7a:	f002 faf3 	bl	8044464 <HAL_RCC_GetPCLK1Freq>
 8041e7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8041e80:	e004      	b.n	8041e8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041e82:	f002 faef 	bl	8044464 <HAL_RCC_GetPCLK1Freq>
 8041e86:	4603      	mov	r3, r0
 8041e88:	005b      	lsls	r3, r3, #1
 8041e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8041e8e:	4a23      	ldr	r2, [pc, #140]	@ (8041f1c <HAL_InitTick+0xe8>)
 8041e90:	fba2 2303 	umull	r2, r3, r2, r3
 8041e94:	0c9b      	lsrs	r3, r3, #18
 8041e96:	3b01      	subs	r3, #1
 8041e98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041e9a:	4b21      	ldr	r3, [pc, #132]	@ (8041f20 <HAL_InitTick+0xec>)
 8041e9c:	4a21      	ldr	r2, [pc, #132]	@ (8041f24 <HAL_InitTick+0xf0>)
 8041e9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8041f20 <HAL_InitTick+0xec>)
 8041ea2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8041ea6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8041f20 <HAL_InitTick+0xec>)
 8041eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041eac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041eae:	4b1c      	ldr	r3, [pc, #112]	@ (8041f20 <HAL_InitTick+0xec>)
 8041eb0:	2200      	movs	r2, #0
 8041eb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8041f20 <HAL_InitTick+0xec>)
 8041eb6:	2200      	movs	r2, #0
 8041eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041eba:	4b19      	ldr	r3, [pc, #100]	@ (8041f20 <HAL_InitTick+0xec>)
 8041ebc:	2200      	movs	r2, #0
 8041ebe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041ec0:	4817      	ldr	r0, [pc, #92]	@ (8041f20 <HAL_InitTick+0xec>)
 8041ec2:	f002 fb29 	bl	8044518 <HAL_TIM_Base_Init>
 8041ec6:	4603      	mov	r3, r0
 8041ec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8041ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8041ed0:	2b00      	cmp	r3, #0
 8041ed2:	d11b      	bne.n	8041f0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8041ed4:	4812      	ldr	r0, [pc, #72]	@ (8041f20 <HAL_InitTick+0xec>)
 8041ed6:	f002 fbd7 	bl	8044688 <HAL_TIM_Base_Start_IT>
 8041eda:	4603      	mov	r3, r0
 8041edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8041ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8041ee4:	2b00      	cmp	r3, #0
 8041ee6:	d111      	bne.n	8041f0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041ee8:	2036      	movs	r0, #54	@ 0x36
 8041eea:	f000 ff25 	bl	8042d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041eee:	687b      	ldr	r3, [r7, #4]
 8041ef0:	2b0f      	cmp	r3, #15
 8041ef2:	d808      	bhi.n	8041f06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041ef4:	2200      	movs	r2, #0
 8041ef6:	6879      	ldr	r1, [r7, #4]
 8041ef8:	2036      	movs	r0, #54	@ 0x36
 8041efa:	f000 ff01 	bl	8042d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041efe:	4a0a      	ldr	r2, [pc, #40]	@ (8041f28 <HAL_InitTick+0xf4>)
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	6013      	str	r3, [r2, #0]
 8041f04:	e002      	b.n	8041f0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8041f06:	2301      	movs	r3, #1
 8041f08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8041f10:	4618      	mov	r0, r3
 8041f12:	3738      	adds	r7, #56	@ 0x38
 8041f14:	46bd      	mov	sp, r7
 8041f16:	bd80      	pop	{r7, pc}
 8041f18:	40023800 	.word	0x40023800
 8041f1c:	431bde83 	.word	0x431bde83
 8041f20:	20000378 	.word	0x20000378
 8041f24:	40001000 	.word	0x40001000
 8041f28:	20000008 	.word	0x20000008

08041f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041f2c:	b480      	push	{r7}
 8041f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8041f30:	bf00      	nop
 8041f32:	e7fd      	b.n	8041f30 <NMI_Handler+0x4>

08041f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041f34:	b480      	push	{r7}
 8041f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041f38:	bf00      	nop
 8041f3a:	e7fd      	b.n	8041f38 <HardFault_Handler+0x4>

08041f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041f3c:	b480      	push	{r7}
 8041f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041f40:	bf00      	nop
 8041f42:	e7fd      	b.n	8041f40 <MemManage_Handler+0x4>

08041f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041f44:	b480      	push	{r7}
 8041f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041f48:	bf00      	nop
 8041f4a:	e7fd      	b.n	8041f48 <BusFault_Handler+0x4>

08041f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041f4c:	b480      	push	{r7}
 8041f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041f50:	bf00      	nop
 8041f52:	e7fd      	b.n	8041f50 <UsageFault_Handler+0x4>

08041f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041f54:	b480      	push	{r7}
 8041f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041f58:	bf00      	nop
 8041f5a:	46bd      	mov	sp, r7
 8041f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f60:	4770      	bx	lr
	...

08041f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8041f64:	b580      	push	{r7, lr}
 8041f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8041f68:	4802      	ldr	r0, [pc, #8]	@ (8041f74 <USART2_IRQHandler+0x10>)
 8041f6a:	f003 f8b3 	bl	80450d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8041f6e:	bf00      	nop
 8041f70:	bd80      	pop	{r7, pc}
 8041f72:	bf00      	nop
 8041f74:	200002f0 	.word	0x200002f0

08041f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041f78:	b580      	push	{r7, lr}
 8041f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041f7c:	4802      	ldr	r0, [pc, #8]	@ (8041f88 <TIM6_DAC_IRQHandler+0x10>)
 8041f7e:	f002 fbf3 	bl	8044768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041f82:	bf00      	nop
 8041f84:	bd80      	pop	{r7, pc}
 8041f86:	bf00      	nop
 8041f88:	20000378 	.word	0x20000378

08041f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8041f8c:	b480      	push	{r7}
 8041f8e:	af00      	add	r7, sp, #0
  return 1;
 8041f90:	2301      	movs	r3, #1
}
 8041f92:	4618      	mov	r0, r3
 8041f94:	46bd      	mov	sp, r7
 8041f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f9a:	4770      	bx	lr

08041f9c <_kill>:

int _kill(int pid, int sig)
{
 8041f9c:	b580      	push	{r7, lr}
 8041f9e:	b082      	sub	sp, #8
 8041fa0:	af00      	add	r7, sp, #0
 8041fa2:	6078      	str	r0, [r7, #4]
 8041fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8041fa6:	f007 fe75 	bl	8049c94 <__errno>
 8041faa:	4603      	mov	r3, r0
 8041fac:	2216      	movs	r2, #22
 8041fae:	601a      	str	r2, [r3, #0]
  return -1;
 8041fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041fb4:	4618      	mov	r0, r3
 8041fb6:	3708      	adds	r7, #8
 8041fb8:	46bd      	mov	sp, r7
 8041fba:	bd80      	pop	{r7, pc}

08041fbc <_exit>:

void _exit (int status)
{
 8041fbc:	b580      	push	{r7, lr}
 8041fbe:	b082      	sub	sp, #8
 8041fc0:	af00      	add	r7, sp, #0
 8041fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8041fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8041fc8:	6878      	ldr	r0, [r7, #4]
 8041fca:	f7ff ffe7 	bl	8041f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8041fce:	bf00      	nop
 8041fd0:	e7fd      	b.n	8041fce <_exit+0x12>

08041fd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041fd2:	b580      	push	{r7, lr}
 8041fd4:	b086      	sub	sp, #24
 8041fd6:	af00      	add	r7, sp, #0
 8041fd8:	60f8      	str	r0, [r7, #12]
 8041fda:	60b9      	str	r1, [r7, #8]
 8041fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041fde:	2300      	movs	r3, #0
 8041fe0:	617b      	str	r3, [r7, #20]
 8041fe2:	e00a      	b.n	8041ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8041fe4:	f3af 8000 	nop.w
 8041fe8:	4601      	mov	r1, r0
 8041fea:	68bb      	ldr	r3, [r7, #8]
 8041fec:	1c5a      	adds	r2, r3, #1
 8041fee:	60ba      	str	r2, [r7, #8]
 8041ff0:	b2ca      	uxtb	r2, r1
 8041ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041ff4:	697b      	ldr	r3, [r7, #20]
 8041ff6:	3301      	adds	r3, #1
 8041ff8:	617b      	str	r3, [r7, #20]
 8041ffa:	697a      	ldr	r2, [r7, #20]
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	429a      	cmp	r2, r3
 8042000:	dbf0      	blt.n	8041fe4 <_read+0x12>
  }

  return len;
 8042002:	687b      	ldr	r3, [r7, #4]
}
 8042004:	4618      	mov	r0, r3
 8042006:	3718      	adds	r7, #24
 8042008:	46bd      	mov	sp, r7
 804200a:	bd80      	pop	{r7, pc}

0804200c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804200c:	b580      	push	{r7, lr}
 804200e:	b086      	sub	sp, #24
 8042010:	af00      	add	r7, sp, #0
 8042012:	60f8      	str	r0, [r7, #12]
 8042014:	60b9      	str	r1, [r7, #8]
 8042016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042018:	2300      	movs	r3, #0
 804201a:	617b      	str	r3, [r7, #20]
 804201c:	e009      	b.n	8042032 <_write+0x26>
  {
    __io_putchar(*ptr++);
 804201e:	68bb      	ldr	r3, [r7, #8]
 8042020:	1c5a      	adds	r2, r3, #1
 8042022:	60ba      	str	r2, [r7, #8]
 8042024:	781b      	ldrb	r3, [r3, #0]
 8042026:	4618      	mov	r0, r3
 8042028:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804202c:	697b      	ldr	r3, [r7, #20]
 804202e:	3301      	adds	r3, #1
 8042030:	617b      	str	r3, [r7, #20]
 8042032:	697a      	ldr	r2, [r7, #20]
 8042034:	687b      	ldr	r3, [r7, #4]
 8042036:	429a      	cmp	r2, r3
 8042038:	dbf1      	blt.n	804201e <_write+0x12>
  }
  return len;
 804203a:	687b      	ldr	r3, [r7, #4]
}
 804203c:	4618      	mov	r0, r3
 804203e:	3718      	adds	r7, #24
 8042040:	46bd      	mov	sp, r7
 8042042:	bd80      	pop	{r7, pc}

08042044 <_close>:

int _close(int file)
{
 8042044:	b480      	push	{r7}
 8042046:	b083      	sub	sp, #12
 8042048:	af00      	add	r7, sp, #0
 804204a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 804204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8042050:	4618      	mov	r0, r3
 8042052:	370c      	adds	r7, #12
 8042054:	46bd      	mov	sp, r7
 8042056:	f85d 7b04 	ldr.w	r7, [sp], #4
 804205a:	4770      	bx	lr

0804205c <_fstat>:


int _fstat(int file, struct stat *st)
{
 804205c:	b480      	push	{r7}
 804205e:	b083      	sub	sp, #12
 8042060:	af00      	add	r7, sp, #0
 8042062:	6078      	str	r0, [r7, #4]
 8042064:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8042066:	683b      	ldr	r3, [r7, #0]
 8042068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 804206c:	605a      	str	r2, [r3, #4]
  return 0;
 804206e:	2300      	movs	r3, #0
}
 8042070:	4618      	mov	r0, r3
 8042072:	370c      	adds	r7, #12
 8042074:	46bd      	mov	sp, r7
 8042076:	f85d 7b04 	ldr.w	r7, [sp], #4
 804207a:	4770      	bx	lr

0804207c <_isatty>:

int _isatty(int file)
{
 804207c:	b480      	push	{r7}
 804207e:	b083      	sub	sp, #12
 8042080:	af00      	add	r7, sp, #0
 8042082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8042084:	2301      	movs	r3, #1
}
 8042086:	4618      	mov	r0, r3
 8042088:	370c      	adds	r7, #12
 804208a:	46bd      	mov	sp, r7
 804208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042090:	4770      	bx	lr

08042092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8042092:	b480      	push	{r7}
 8042094:	b085      	sub	sp, #20
 8042096:	af00      	add	r7, sp, #0
 8042098:	60f8      	str	r0, [r7, #12]
 804209a:	60b9      	str	r1, [r7, #8]
 804209c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 804209e:	2300      	movs	r3, #0
}
 80420a0:	4618      	mov	r0, r3
 80420a2:	3714      	adds	r7, #20
 80420a4:	46bd      	mov	sp, r7
 80420a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420aa:	4770      	bx	lr

080420ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80420ac:	b480      	push	{r7}
 80420ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80420b0:	4b06      	ldr	r3, [pc, #24]	@ (80420cc <SystemInit+0x20>)
 80420b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80420b6:	4a05      	ldr	r2, [pc, #20]	@ (80420cc <SystemInit+0x20>)
 80420b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80420bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80420c0:	bf00      	nop
 80420c2:	46bd      	mov	sp, r7
 80420c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420c8:	4770      	bx	lr
 80420ca:	bf00      	nop
 80420cc:	e000ed00 	.word	0xe000ed00

080420d0 <handle_menu_task>:
volatile float vin = 0;
volatile uint32_t AD_RES = 0;

const char *msg_err = "====== Invalid command ======\n";
void handle_menu_task(void *params)
{
 80420d0:	b580      	push	{r7, lr}
 80420d2:	b088      	sub	sp, #32
 80420d4:	af02      	add	r7, sp, #8
 80420d6:	6078      	str	r0, [r7, #4]
	const char* menu = "=========================\n"
 80420d8:	4b27      	ldr	r3, [pc, #156]	@ (8042178 <handle_menu_task+0xa8>)
 80420da:	613b      	str	r3, [r7, #16]
						"Enter your choice here	: ";
	uint32_t addr_cmd;
	command_t *cmd;
	while(1)
	{
		xQueueSend(q_print, &menu, portMAX_DELAY);
 80420dc:	4b27      	ldr	r3, [pc, #156]	@ (804217c <handle_menu_task+0xac>)
 80420de:	6818      	ldr	r0, [r3, #0]
 80420e0:	f107 0110 	add.w	r1, r7, #16
 80420e4:	2300      	movs	r3, #0
 80420e6:	f04f 32ff 	mov.w	r2, #4294967295
 80420ea:	f004 fa71 	bl	80465d0 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&addr_cmd,portMAX_DELAY);
 80420ee:	f107 030c 	add.w	r3, r7, #12
 80420f2:	f04f 32ff 	mov.w	r2, #4294967295
 80420f6:	9200      	str	r2, [sp, #0]
 80420f8:	2200      	movs	r2, #0
 80420fa:	2100      	movs	r1, #0
 80420fc:	2000      	movs	r0, #0
 80420fe:	f005 fd4d 	bl	8047b9c <xTaskGenericNotifyWait>
		cmd = ((command_t*) addr_cmd);
 8042102:	68fb      	ldr	r3, [r7, #12]
 8042104:	617b      	str	r3, [r7, #20]
		if (cmd->len == 1)
 8042106:	697b      	ldr	r3, [r7, #20]
 8042108:	7a9b      	ldrb	r3, [r3, #10]
 804210a:	2b01      	cmp	r3, #1
 804210c:	d121      	bne.n	8042152 <handle_menu_task+0x82>
 		{
			if (cmd->buf[0] == '0')
 804210e:	697b      	ldr	r3, [r7, #20]
 8042110:	781b      	ldrb	r3, [r3, #0]
 8042112:	2b30      	cmp	r3, #48	@ 0x30
 8042114:	d10c      	bne.n	8042130 <handle_menu_task+0x60>
			{
				curr_state = sLed;
 8042116:	4b1a      	ldr	r3, [pc, #104]	@ (8042180 <handle_menu_task+0xb0>)
 8042118:	2201      	movs	r2, #1
 804211a:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task, 0, eNoAction);
 804211c:	4b19      	ldr	r3, [pc, #100]	@ (8042184 <handle_menu_task+0xb4>)
 804211e:	6818      	ldr	r0, [r3, #0]
 8042120:	2300      	movs	r3, #0
 8042122:	9300      	str	r3, [sp, #0]
 8042124:	2300      	movs	r3, #0
 8042126:	2200      	movs	r2, #0
 8042128:	2100      	movs	r1, #0
 804212a:	f005 fdb7 	bl	8047c9c <xTaskGenericNotify>
 804212e:	e018      	b.n	8042162 <handle_menu_task+0x92>
			}

			else if (cmd->buf[0] == '1')
 8042130:	697b      	ldr	r3, [r7, #20]
 8042132:	781b      	ldrb	r3, [r3, #0]
 8042134:	2b31      	cmp	r3, #49	@ 0x31
 8042136:	d114      	bne.n	8042162 <handle_menu_task+0x92>
			{
				curr_state = sDC;
 8042138:	4b11      	ldr	r3, [pc, #68]	@ (8042180 <handle_menu_task+0xb0>)
 804213a:	2202      	movs	r2, #2
 804213c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(DC_task, 0, eNoAction);
 804213e:	4b12      	ldr	r3, [pc, #72]	@ (8042188 <handle_menu_task+0xb8>)
 8042140:	6818      	ldr	r0, [r3, #0]
 8042142:	2300      	movs	r3, #0
 8042144:	9300      	str	r3, [sp, #0]
 8042146:	2300      	movs	r3, #0
 8042148:	2200      	movs	r2, #0
 804214a:	2100      	movs	r1, #0
 804214c:	f005 fda6 	bl	8047c9c <xTaskGenericNotify>
 8042150:	e007      	b.n	8042162 <handle_menu_task+0x92>

		}

		else
		{
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8042152:	4b0a      	ldr	r3, [pc, #40]	@ (804217c <handle_menu_task+0xac>)
 8042154:	6818      	ldr	r0, [r3, #0]
 8042156:	2300      	movs	r3, #0
 8042158:	f04f 32ff 	mov.w	r2, #4294967295
 804215c:	490b      	ldr	r1, [pc, #44]	@ (804218c <handle_menu_task+0xbc>)
 804215e:	f004 fa37 	bl	80465d0 <xQueueGenericSend>
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8042162:	f04f 33ff 	mov.w	r3, #4294967295
 8042166:	9300      	str	r3, [sp, #0]
 8042168:	2300      	movs	r3, #0
 804216a:	2200      	movs	r2, #0
 804216c:	2100      	movs	r1, #0
 804216e:	2000      	movs	r0, #0
 8042170:	f005 fd14 	bl	8047b9c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu, portMAX_DELAY);
 8042174:	e7b2      	b.n	80420dc <handle_menu_task+0xc>
 8042176:	bf00      	nop
 8042178:	0804cd40 	.word	0x0804cd40
 804217c:	20000368 	.word	0x20000368
 8042180:	20000374 	.word	0x20000374
 8042184:	20000360 	.word	0x20000360
 8042188:	20000364 	.word	0x20000364
 804218c:	20000004 	.word	0x20000004

08042190 <handle_cmd_task>:

	}
}

void handle_cmd_task(void *params)
{
 8042190:	b580      	push	{r7, lr}
 8042192:	b088      	sub	sp, #32
 8042194:	af02      	add	r7, sp, #8
 8042196:	6078      	str	r0, [r7, #4]
	command_t cmd;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8042198:	f04f 33ff 	mov.w	r3, #4294967295
 804219c:	9300      	str	r3, [sp, #0]
 804219e:	2300      	movs	r3, #0
 80421a0:	2200      	movs	r2, #0
 80421a2:	2100      	movs	r1, #0
 80421a4:	2000      	movs	r0, #0
 80421a6:	f005 fcf9 	bl	8047b9c <xTaskGenericNotifyWait>
		process_command(&cmd);
 80421aa:	f107 030c 	add.w	r3, r7, #12
 80421ae:	4618      	mov	r0, r3
 80421b0:	f000 f802 	bl	80421b8 <process_command>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80421b4:	bf00      	nop
 80421b6:	e7ef      	b.n	8042198 <handle_cmd_task+0x8>

080421b8 <process_command>:
	}
}

void process_command(command_t *cmd)
{
 80421b8:	b580      	push	{r7, lr}
 80421ba:	b086      	sub	sp, #24
 80421bc:	af02      	add	r7, sp, #8
 80421be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80421c0:	2300      	movs	r3, #0
 80421c2:	60fb      	str	r3, [r7, #12]
	uint8_t temp;
	do{
		xQueueReceive(q_data, &temp, portMAX_DELAY);
 80421c4:	4b24      	ldr	r3, [pc, #144]	@ (8042258 <process_command+0xa0>)
 80421c6:	681b      	ldr	r3, [r3, #0]
 80421c8:	f107 010b 	add.w	r1, r7, #11
 80421cc:	f04f 32ff 	mov.w	r2, #4294967295
 80421d0:	4618      	mov	r0, r3
 80421d2:	f004 fbad 	bl	8046930 <xQueueReceive>
		cmd->buf[i++] = temp;
 80421d6:	68fb      	ldr	r3, [r7, #12]
 80421d8:	1c5a      	adds	r2, r3, #1
 80421da:	60fa      	str	r2, [r7, #12]
 80421dc:	7af9      	ldrb	r1, [r7, #11]
 80421de:	687a      	ldr	r2, [r7, #4]
 80421e0:	54d1      	strb	r1, [r2, r3]
	}while(temp != '\n');
 80421e2:	7afb      	ldrb	r3, [r7, #11]
 80421e4:	2b0a      	cmp	r3, #10
 80421e6:	d1ed      	bne.n	80421c4 <process_command+0xc>
	cmd->len = i-1;
 80421e8:	68fb      	ldr	r3, [r7, #12]
 80421ea:	b2db      	uxtb	r3, r3
 80421ec:	3b01      	subs	r3, #1
 80421ee:	b2da      	uxtb	r2, r3
 80421f0:	687b      	ldr	r3, [r7, #4]
 80421f2:	729a      	strb	r2, [r3, #10]
	cmd->buf[i-1] = '\0';
 80421f4:	68fb      	ldr	r3, [r7, #12]
 80421f6:	3b01      	subs	r3, #1
 80421f8:	687a      	ldr	r2, [r7, #4]
 80421fa:	2100      	movs	r1, #0
 80421fc:	54d1      	strb	r1, [r2, r3]
	switch(curr_state)
 80421fe:	4b17      	ldr	r3, [pc, #92]	@ (804225c <process_command+0xa4>)
 8042200:	781b      	ldrb	r3, [r3, #0]
 8042202:	2b02      	cmp	r3, #2
 8042204:	d01a      	beq.n	804223c <process_command+0x84>
 8042206:	2b02      	cmp	r3, #2
 8042208:	dc22      	bgt.n	8042250 <process_command+0x98>
 804220a:	2b00      	cmp	r3, #0
 804220c:	d002      	beq.n	8042214 <process_command+0x5c>
 804220e:	2b01      	cmp	r3, #1
 8042210:	d00a      	beq.n	8042228 <process_command+0x70>
		break;
	case sDC:
		xTaskNotify(DC_task, cmd, eSetValueWithOverwrite);
		break;
	}
}
 8042212:	e01d      	b.n	8042250 <process_command+0x98>
		xTaskNotify(menu_task, cmd, eSetValueWithOverwrite);
 8042214:	4b12      	ldr	r3, [pc, #72]	@ (8042260 <process_command+0xa8>)
 8042216:	6818      	ldr	r0, [r3, #0]
 8042218:	687a      	ldr	r2, [r7, #4]
 804221a:	2300      	movs	r3, #0
 804221c:	9300      	str	r3, [sp, #0]
 804221e:	2303      	movs	r3, #3
 8042220:	2100      	movs	r1, #0
 8042222:	f005 fd3b 	bl	8047c9c <xTaskGenericNotify>
		break;
 8042226:	e013      	b.n	8042250 <process_command+0x98>
		xTaskNotify(led_task, cmd, eSetValueWithOverwrite);
 8042228:	4b0e      	ldr	r3, [pc, #56]	@ (8042264 <process_command+0xac>)
 804222a:	6818      	ldr	r0, [r3, #0]
 804222c:	687a      	ldr	r2, [r7, #4]
 804222e:	2300      	movs	r3, #0
 8042230:	9300      	str	r3, [sp, #0]
 8042232:	2303      	movs	r3, #3
 8042234:	2100      	movs	r1, #0
 8042236:	f005 fd31 	bl	8047c9c <xTaskGenericNotify>
		break;
 804223a:	e009      	b.n	8042250 <process_command+0x98>
		xTaskNotify(DC_task, cmd, eSetValueWithOverwrite);
 804223c:	4b0a      	ldr	r3, [pc, #40]	@ (8042268 <process_command+0xb0>)
 804223e:	6818      	ldr	r0, [r3, #0]
 8042240:	687a      	ldr	r2, [r7, #4]
 8042242:	2300      	movs	r3, #0
 8042244:	9300      	str	r3, [sp, #0]
 8042246:	2303      	movs	r3, #3
 8042248:	2100      	movs	r1, #0
 804224a:	f005 fd27 	bl	8047c9c <xTaskGenericNotify>
		break;
 804224e:	bf00      	nop
}
 8042250:	bf00      	nop
 8042252:	3710      	adds	r7, #16
 8042254:	46bd      	mov	sp, r7
 8042256:	bd80      	pop	{r7, pc}
 8042258:	2000036c 	.word	0x2000036c
 804225c:	20000374 	.word	0x20000374
 8042260:	2000035c 	.word	0x2000035c
 8042264:	20000360 	.word	0x20000360
 8042268:	20000364 	.word	0x20000364

0804226c <handle_led_task>:

void handle_led_task(void *params)
{
 804226c:	b590      	push	{r4, r7, lr}
 804226e:	b089      	sub	sp, #36	@ 0x24
 8042270:	af02      	add	r7, sp, #8
 8042272:	6078      	str	r0, [r7, #4]
	const char *led_effect = "Start blinking	----> e1\n"
 8042274:	4b2e      	ldr	r3, [pc, #184]	@ (8042330 <handle_led_task+0xc4>)
 8042276:	613b      	str	r3, [r7, #16]
						"Enter your choice here: ";
	uint32_t addr_buf;
	command_t *addr;
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8042278:	f04f 33ff 	mov.w	r3, #4294967295
 804227c:	9300      	str	r3, [sp, #0]
 804227e:	2300      	movs	r3, #0
 8042280:	2200      	movs	r2, #0
 8042282:	2100      	movs	r1, #0
 8042284:	2000      	movs	r0, #0
 8042286:	f005 fc89 	bl	8047b9c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &led_effect, portMAX_DELAY);
 804228a:	4b2a      	ldr	r3, [pc, #168]	@ (8042334 <handle_led_task+0xc8>)
 804228c:	6818      	ldr	r0, [r3, #0]
 804228e:	f107 0110 	add.w	r1, r7, #16
 8042292:	2300      	movs	r3, #0
 8042294:	f04f 32ff 	mov.w	r2, #4294967295
 8042298:	f004 f99a 	bl	80465d0 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&addr_buf,portMAX_DELAY);
 804229c:	f107 030c 	add.w	r3, r7, #12
 80422a0:	f04f 32ff 	mov.w	r2, #4294967295
 80422a4:	9200      	str	r2, [sp, #0]
 80422a6:	2200      	movs	r2, #0
 80422a8:	2100      	movs	r1, #0
 80422aa:	2000      	movs	r0, #0
 80422ac:	f005 fc76 	bl	8047b9c <xTaskGenericNotifyWait>
		addr = ((command_t*)addr_buf);
 80422b0:	68fb      	ldr	r3, [r7, #12]
 80422b2:	617b      	str	r3, [r7, #20]
		if (!strcmp((char*)addr->buf, "e1"))
 80422b4:	697b      	ldr	r3, [r7, #20]
 80422b6:	4920      	ldr	r1, [pc, #128]	@ (8042338 <handle_led_task+0xcc>)
 80422b8:	4618      	mov	r0, r3
 80422ba:	f7fd ff89 	bl	80401d0 <strcmp>
 80422be:	4603      	mov	r3, r0
 80422c0:	2b00      	cmp	r3, #0
 80422c2:	d10d      	bne.n	80422e0 <handle_led_task+0x74>
			xTimerStart(xTimer, portMAX_DELAY);
 80422c4:	4b1d      	ldr	r3, [pc, #116]	@ (804233c <handle_led_task+0xd0>)
 80422c6:	681c      	ldr	r4, [r3, #0]
 80422c8:	f005 f8b6 	bl	8047438 <xTaskGetTickCount>
 80422cc:	4602      	mov	r2, r0
 80422ce:	f04f 33ff 	mov.w	r3, #4294967295
 80422d2:	9300      	str	r3, [sp, #0]
 80422d4:	2300      	movs	r3, #0
 80422d6:	2101      	movs	r1, #1
 80422d8:	4620      	mov	r0, r4
 80422da:	f005 ffc1 	bl	8048260 <xTimerGenericCommand>
 80422de:	e01a      	b.n	8042316 <handle_led_task+0xaa>
		else if (!strcmp((char*)addr->buf, "e2"))
 80422e0:	697b      	ldr	r3, [r7, #20]
 80422e2:	4917      	ldr	r1, [pc, #92]	@ (8042340 <handle_led_task+0xd4>)
 80422e4:	4618      	mov	r0, r3
 80422e6:	f7fd ff73 	bl	80401d0 <strcmp>
 80422ea:	4603      	mov	r3, r0
 80422ec:	2b00      	cmp	r3, #0
 80422ee:	d10a      	bne.n	8042306 <handle_led_task+0x9a>
			xTimerStop(xTimer, portMAX_DELAY);
 80422f0:	4b12      	ldr	r3, [pc, #72]	@ (804233c <handle_led_task+0xd0>)
 80422f2:	6818      	ldr	r0, [r3, #0]
 80422f4:	f04f 33ff 	mov.w	r3, #4294967295
 80422f8:	9300      	str	r3, [sp, #0]
 80422fa:	2300      	movs	r3, #0
 80422fc:	2200      	movs	r2, #0
 80422fe:	2103      	movs	r1, #3
 8042300:	f005 ffae 	bl	8048260 <xTimerGenericCommand>
 8042304:	e007      	b.n	8042316 <handle_led_task+0xaa>
		else
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 8042306:	4b0b      	ldr	r3, [pc, #44]	@ (8042334 <handle_led_task+0xc8>)
 8042308:	6818      	ldr	r0, [r3, #0]
 804230a:	2300      	movs	r3, #0
 804230c:	f04f 32ff 	mov.w	r2, #4294967295
 8042310:	490c      	ldr	r1, [pc, #48]	@ (8042344 <handle_led_task+0xd8>)
 8042312:	f004 f95d 	bl	80465d0 <xQueueGenericSend>
		curr_state = sMenu;
 8042316:	4b0c      	ldr	r3, [pc, #48]	@ (8042348 <handle_led_task+0xdc>)
 8042318:	2200      	movs	r2, #0
 804231a:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_task, 0, eNoAction);
 804231c:	4b0b      	ldr	r3, [pc, #44]	@ (804234c <handle_led_task+0xe0>)
 804231e:	6818      	ldr	r0, [r3, #0]
 8042320:	2300      	movs	r3, #0
 8042322:	9300      	str	r3, [sp, #0]
 8042324:	2300      	movs	r3, #0
 8042326:	2200      	movs	r2, #0
 8042328:	2100      	movs	r1, #0
 804232a:	f005 fcb7 	bl	8047c9c <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 804232e:	e7a3      	b.n	8042278 <handle_led_task+0xc>
 8042330:	0804cdd4 	.word	0x0804cdd4
 8042334:	20000368 	.word	0x20000368
 8042338:	0804ce1c 	.word	0x0804ce1c
 804233c:	20000370 	.word	0x20000370
 8042340:	0804ce20 	.word	0x0804ce20
 8042344:	20000004 	.word	0x20000004
 8042348:	20000374 	.word	0x20000374
 804234c:	2000035c 	.word	0x2000035c

08042350 <handle_DC_task>:
	}
}

void handle_DC_task(void *params)
{
 8042350:	b580      	push	{r7, lr}
 8042352:	b088      	sub	sp, #32
 8042354:	af02      	add	r7, sp, #8
 8042356:	6078      	str	r0, [r7, #4]
	const char *menu_msg = "Turn on motor	-->1\n"
 8042358:	4b21      	ldr	r3, [pc, #132]	@ (80423e0 <handle_DC_task+0x90>)
 804235a:	613b      	str	r3, [r7, #16]
							"Turn off motor	-->2\n"
							"Enter your choice here: ";
	uint32_t addr_buf;
	command_t *addr;
	while(1){
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 804235c:	f04f 33ff 	mov.w	r3, #4294967295
 8042360:	9300      	str	r3, [sp, #0]
 8042362:	2300      	movs	r3, #0
 8042364:	2200      	movs	r2, #0
 8042366:	2100      	movs	r1, #0
 8042368:	2000      	movs	r0, #0
 804236a:	f005 fc17 	bl	8047b9c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 804236e:	4b1d      	ldr	r3, [pc, #116]	@ (80423e4 <handle_DC_task+0x94>)
 8042370:	6818      	ldr	r0, [r3, #0]
 8042372:	f107 0110 	add.w	r1, r7, #16
 8042376:	2300      	movs	r3, #0
 8042378:	f04f 32ff 	mov.w	r2, #4294967295
 804237c:	f004 f928 	bl	80465d0 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&addr_buf,portMAX_DELAY);
 8042380:	f107 030c 	add.w	r3, r7, #12
 8042384:	f04f 32ff 	mov.w	r2, #4294967295
 8042388:	9200      	str	r2, [sp, #0]
 804238a:	2200      	movs	r2, #0
 804238c:	2100      	movs	r1, #0
 804238e:	2000      	movs	r0, #0
 8042390:	f005 fc04 	bl	8047b9c <xTaskGenericNotifyWait>
		addr = ((command_t*)addr_buf);
 8042394:	68fb      	ldr	r3, [r7, #12]
 8042396:	617b      	str	r3, [r7, #20]
		if (addr->buf[0] == '1')
 8042398:	697b      	ldr	r3, [r7, #20]
 804239a:	781b      	ldrb	r3, [r3, #0]
 804239c:	2b31      	cmp	r3, #49	@ 0x31
 804239e:	d102      	bne.n	80423a6 <handle_DC_task+0x56>
			turn_on_dc();
 80423a0:	f7ff fa7a 	bl	8041898 <turn_on_dc>
 80423a4:	e00e      	b.n	80423c4 <handle_DC_task+0x74>
		else if (addr->buf[0] == '2')
 80423a6:	697b      	ldr	r3, [r7, #20]
 80423a8:	781b      	ldrb	r3, [r3, #0]
 80423aa:	2b32      	cmp	r3, #50	@ 0x32
 80423ac:	d102      	bne.n	80423b4 <handle_DC_task+0x64>
			turn_off_dc();
 80423ae:	f7ff fa85 	bl	80418bc <turn_off_dc>
 80423b2:	e007      	b.n	80423c4 <handle_DC_task+0x74>
		else
			xQueueSend(q_print, &msg_err, portMAX_DELAY);
 80423b4:	4b0b      	ldr	r3, [pc, #44]	@ (80423e4 <handle_DC_task+0x94>)
 80423b6:	6818      	ldr	r0, [r3, #0]
 80423b8:	2300      	movs	r3, #0
 80423ba:	f04f 32ff 	mov.w	r2, #4294967295
 80423be:	490a      	ldr	r1, [pc, #40]	@ (80423e8 <handle_DC_task+0x98>)
 80423c0:	f004 f906 	bl	80465d0 <xQueueGenericSend>
		curr_state = sMenu;
 80423c4:	4b09      	ldr	r3, [pc, #36]	@ (80423ec <handle_DC_task+0x9c>)
 80423c6:	2200      	movs	r2, #0
 80423c8:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_task, 0, eNoAction);
 80423ca:	4b09      	ldr	r3, [pc, #36]	@ (80423f0 <handle_DC_task+0xa0>)
 80423cc:	6818      	ldr	r0, [r3, #0]
 80423ce:	2300      	movs	r3, #0
 80423d0:	9300      	str	r3, [sp, #0]
 80423d2:	2300      	movs	r3, #0
 80423d4:	2200      	movs	r2, #0
 80423d6:	2100      	movs	r1, #0
 80423d8:	f005 fc60 	bl	8047c9c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 80423dc:	e7be      	b.n	804235c <handle_DC_task+0xc>
 80423de:	bf00      	nop
 80423e0:	0804ce24 	.word	0x0804ce24
 80423e4:	20000368 	.word	0x20000368
 80423e8:	20000004 	.word	0x20000004
 80423ec:	20000374 	.word	0x20000374
 80423f0:	2000035c 	.word	0x2000035c

080423f4 <printmsg>:
	}
}

void printmsg(void *params)
{
 80423f4:	b590      	push	{r4, r7, lr}
 80423f6:	b085      	sub	sp, #20
 80423f8:	af00      	add	r7, sp, #0
 80423fa:	6078      	str	r0, [r7, #4]
	while(1){
		char *str;
		xQueueReceive(q_print, &str, portMAX_DELAY);
 80423fc:	4b0b      	ldr	r3, [pc, #44]	@ (804242c <printmsg+0x38>)
 80423fe:	681b      	ldr	r3, [r3, #0]
 8042400:	f107 010c 	add.w	r1, r7, #12
 8042404:	f04f 32ff 	mov.w	r2, #4294967295
 8042408:	4618      	mov	r0, r3
 804240a:	f004 fa91 	bl	8046930 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 804240e:	68fc      	ldr	r4, [r7, #12]
 8042410:	68fb      	ldr	r3, [r7, #12]
 8042412:	4618      	mov	r0, r3
 8042414:	f7fd ff3c 	bl	8040290 <strlen>
 8042418:	4603      	mov	r3, r0
 804241a:	b29a      	uxth	r2, r3
 804241c:	f04f 33ff 	mov.w	r3, #4294967295
 8042420:	4621      	mov	r1, r4
 8042422:	4803      	ldr	r0, [pc, #12]	@ (8042430 <printmsg+0x3c>)
 8042424:	f002 fda6 	bl	8044f74 <HAL_UART_Transmit>
	while(1){
 8042428:	bf00      	nop
 804242a:	e7e7      	b.n	80423fc <printmsg+0x8>
 804242c:	20000368 	.word	0x20000368
 8042430:	200002f0 	.word	0x200002f0

08042434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8042434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 804246c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8042438:	f7ff fe38 	bl	80420ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 804243c:	480c      	ldr	r0, [pc, #48]	@ (8042470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 804243e:	490d      	ldr	r1, [pc, #52]	@ (8042474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8042440:	4a0d      	ldr	r2, [pc, #52]	@ (8042478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8042442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8042444:	e002      	b.n	804244c <LoopCopyDataInit>

08042446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8042446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8042448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804244a:	3304      	adds	r3, #4

0804244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 804244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8042450:	d3f9      	bcc.n	8042446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8042452:	4a0a      	ldr	r2, [pc, #40]	@ (804247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8042454:	4c0a      	ldr	r4, [pc, #40]	@ (8042480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8042456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8042458:	e001      	b.n	804245e <LoopFillZerobss>

0804245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 804245c:	3204      	adds	r2, #4

0804245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8042460:	d3fb      	bcc.n	804245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8042462:	f007 fc1d 	bl	8049ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8042466:	f7fe fd77 	bl	8040f58 <main>
  bx  lr    
 804246a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804246c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8042470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8042474:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8042478:	0804d260 	.word	0x0804d260
  ldr r2, =_sbss
 804247c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8042480:	200132c0 	.word	0x200132c0

08042484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8042484:	e7fe      	b.n	8042484 <ADC_IRQHandler>
	...

08042488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042488:	b580      	push	{r7, lr}
 804248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804248c:	4b0e      	ldr	r3, [pc, #56]	@ (80424c8 <HAL_Init+0x40>)
 804248e:	681b      	ldr	r3, [r3, #0]
 8042490:	4a0d      	ldr	r2, [pc, #52]	@ (80424c8 <HAL_Init+0x40>)
 8042492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8042496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042498:	4b0b      	ldr	r3, [pc, #44]	@ (80424c8 <HAL_Init+0x40>)
 804249a:	681b      	ldr	r3, [r3, #0]
 804249c:	4a0a      	ldr	r2, [pc, #40]	@ (80424c8 <HAL_Init+0x40>)
 804249e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80424a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80424a4:	4b08      	ldr	r3, [pc, #32]	@ (80424c8 <HAL_Init+0x40>)
 80424a6:	681b      	ldr	r3, [r3, #0]
 80424a8:	4a07      	ldr	r2, [pc, #28]	@ (80424c8 <HAL_Init+0x40>)
 80424aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80424ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80424b0:	2003      	movs	r0, #3
 80424b2:	f000 fc1a 	bl	8042cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80424b6:	200f      	movs	r0, #15
 80424b8:	f7ff fcbc 	bl	8041e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80424bc:	f7ff fb94 	bl	8041be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80424c0:	2300      	movs	r3, #0
}
 80424c2:	4618      	mov	r0, r3
 80424c4:	bd80      	pop	{r7, pc}
 80424c6:	bf00      	nop
 80424c8:	40023c00 	.word	0x40023c00

080424cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80424cc:	b480      	push	{r7}
 80424ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80424d0:	4b06      	ldr	r3, [pc, #24]	@ (80424ec <HAL_IncTick+0x20>)
 80424d2:	781b      	ldrb	r3, [r3, #0]
 80424d4:	461a      	mov	r2, r3
 80424d6:	4b06      	ldr	r3, [pc, #24]	@ (80424f0 <HAL_IncTick+0x24>)
 80424d8:	681b      	ldr	r3, [r3, #0]
 80424da:	4413      	add	r3, r2
 80424dc:	4a04      	ldr	r2, [pc, #16]	@ (80424f0 <HAL_IncTick+0x24>)
 80424de:	6013      	str	r3, [r2, #0]
}
 80424e0:	bf00      	nop
 80424e2:	46bd      	mov	sp, r7
 80424e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424e8:	4770      	bx	lr
 80424ea:	bf00      	nop
 80424ec:	2000000c 	.word	0x2000000c
 80424f0:	200003c0 	.word	0x200003c0

080424f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80424f4:	b480      	push	{r7}
 80424f6:	af00      	add	r7, sp, #0
  return uwTick;
 80424f8:	4b03      	ldr	r3, [pc, #12]	@ (8042508 <HAL_GetTick+0x14>)
 80424fa:	681b      	ldr	r3, [r3, #0]
}
 80424fc:	4618      	mov	r0, r3
 80424fe:	46bd      	mov	sp, r7
 8042500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042504:	4770      	bx	lr
 8042506:	bf00      	nop
 8042508:	200003c0 	.word	0x200003c0

0804250c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 804250c:	b580      	push	{r7, lr}
 804250e:	b084      	sub	sp, #16
 8042510:	af00      	add	r7, sp, #0
 8042512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8042514:	2300      	movs	r3, #0
 8042516:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8042518:	687b      	ldr	r3, [r7, #4]
 804251a:	2b00      	cmp	r3, #0
 804251c:	d101      	bne.n	8042522 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 804251e:	2301      	movs	r3, #1
 8042520:	e033      	b.n	804258a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042526:	2b00      	cmp	r3, #0
 8042528:	d109      	bne.n	804253e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 804252a:	6878      	ldr	r0, [r7, #4]
 804252c:	f7ff fb84 	bl	8041c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8042530:	687b      	ldr	r3, [r7, #4]
 8042532:	2200      	movs	r2, #0
 8042534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8042536:	687b      	ldr	r3, [r7, #4]
 8042538:	2200      	movs	r2, #0
 804253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 804253e:	687b      	ldr	r3, [r7, #4]
 8042540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042542:	f003 0310 	and.w	r3, r3, #16
 8042546:	2b00      	cmp	r3, #0
 8042548:	d118      	bne.n	804257c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 804254a:	687b      	ldr	r3, [r7, #4]
 804254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804254e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8042552:	f023 0302 	bic.w	r3, r3, #2
 8042556:	f043 0202 	orr.w	r2, r3, #2
 804255a:	687b      	ldr	r3, [r7, #4]
 804255c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 804255e:	6878      	ldr	r0, [r7, #4]
 8042560:	f000 fa1a 	bl	8042998 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	2200      	movs	r2, #0
 8042568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 804256a:	687b      	ldr	r3, [r7, #4]
 804256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804256e:	f023 0303 	bic.w	r3, r3, #3
 8042572:	f043 0201 	orr.w	r2, r3, #1
 8042576:	687b      	ldr	r3, [r7, #4]
 8042578:	641a      	str	r2, [r3, #64]	@ 0x40
 804257a:	e001      	b.n	8042580 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 804257c:	2301      	movs	r3, #1
 804257e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8042580:	687b      	ldr	r3, [r7, #4]
 8042582:	2200      	movs	r2, #0
 8042584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8042588:	7bfb      	ldrb	r3, [r7, #15]
}
 804258a:	4618      	mov	r0, r3
 804258c:	3710      	adds	r7, #16
 804258e:	46bd      	mov	sp, r7
 8042590:	bd80      	pop	{r7, pc}
	...

08042594 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8042594:	b480      	push	{r7}
 8042596:	b085      	sub	sp, #20
 8042598:	af00      	add	r7, sp, #0
 804259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 804259c:	2300      	movs	r3, #0
 804259e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80425a6:	2b01      	cmp	r3, #1
 80425a8:	d101      	bne.n	80425ae <HAL_ADC_Start+0x1a>
 80425aa:	2302      	movs	r3, #2
 80425ac:	e0b2      	b.n	8042714 <HAL_ADC_Start+0x180>
 80425ae:	687b      	ldr	r3, [r7, #4]
 80425b0:	2201      	movs	r2, #1
 80425b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80425b6:	687b      	ldr	r3, [r7, #4]
 80425b8:	681b      	ldr	r3, [r3, #0]
 80425ba:	689b      	ldr	r3, [r3, #8]
 80425bc:	f003 0301 	and.w	r3, r3, #1
 80425c0:	2b01      	cmp	r3, #1
 80425c2:	d018      	beq.n	80425f6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80425c4:	687b      	ldr	r3, [r7, #4]
 80425c6:	681b      	ldr	r3, [r3, #0]
 80425c8:	689a      	ldr	r2, [r3, #8]
 80425ca:	687b      	ldr	r3, [r7, #4]
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	f042 0201 	orr.w	r2, r2, #1
 80425d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80425d4:	4b52      	ldr	r3, [pc, #328]	@ (8042720 <HAL_ADC_Start+0x18c>)
 80425d6:	681b      	ldr	r3, [r3, #0]
 80425d8:	4a52      	ldr	r2, [pc, #328]	@ (8042724 <HAL_ADC_Start+0x190>)
 80425da:	fba2 2303 	umull	r2, r3, r2, r3
 80425de:	0c9a      	lsrs	r2, r3, #18
 80425e0:	4613      	mov	r3, r2
 80425e2:	005b      	lsls	r3, r3, #1
 80425e4:	4413      	add	r3, r2
 80425e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80425e8:	e002      	b.n	80425f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80425ea:	68bb      	ldr	r3, [r7, #8]
 80425ec:	3b01      	subs	r3, #1
 80425ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80425f0:	68bb      	ldr	r3, [r7, #8]
 80425f2:	2b00      	cmp	r3, #0
 80425f4:	d1f9      	bne.n	80425ea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80425f6:	687b      	ldr	r3, [r7, #4]
 80425f8:	681b      	ldr	r3, [r3, #0]
 80425fa:	689b      	ldr	r3, [r3, #8]
 80425fc:	f003 0301 	and.w	r3, r3, #1
 8042600:	2b01      	cmp	r3, #1
 8042602:	d17a      	bne.n	80426fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8042604:	687b      	ldr	r3, [r7, #4]
 8042606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042608:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 804260c:	f023 0301 	bic.w	r3, r3, #1
 8042610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8042618:	687b      	ldr	r3, [r7, #4]
 804261a:	681b      	ldr	r3, [r3, #0]
 804261c:	685b      	ldr	r3, [r3, #4]
 804261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8042622:	2b00      	cmp	r3, #0
 8042624:	d007      	beq.n	8042636 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8042626:	687b      	ldr	r3, [r7, #4]
 8042628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804262a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 804262e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8042632:	687b      	ldr	r3, [r7, #4]
 8042634:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8042636:	687b      	ldr	r3, [r7, #4]
 8042638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804263a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 804263e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042642:	d106      	bne.n	8042652 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042648:	f023 0206 	bic.w	r2, r3, #6
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	645a      	str	r2, [r3, #68]	@ 0x44
 8042650:	e002      	b.n	8042658 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8042652:	687b      	ldr	r3, [r7, #4]
 8042654:	2200      	movs	r2, #0
 8042656:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	2200      	movs	r2, #0
 804265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8042660:	4b31      	ldr	r3, [pc, #196]	@ (8042728 <HAL_ADC_Start+0x194>)
 8042662:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8042664:	687b      	ldr	r3, [r7, #4]
 8042666:	681b      	ldr	r3, [r3, #0]
 8042668:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 804266c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 804266e:	68fb      	ldr	r3, [r7, #12]
 8042670:	685b      	ldr	r3, [r3, #4]
 8042672:	f003 031f 	and.w	r3, r3, #31
 8042676:	2b00      	cmp	r3, #0
 8042678:	d12a      	bne.n	80426d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	681b      	ldr	r3, [r3, #0]
 804267e:	4a2b      	ldr	r2, [pc, #172]	@ (804272c <HAL_ADC_Start+0x198>)
 8042680:	4293      	cmp	r3, r2
 8042682:	d015      	beq.n	80426b0 <HAL_ADC_Start+0x11c>
 8042684:	687b      	ldr	r3, [r7, #4]
 8042686:	681b      	ldr	r3, [r3, #0]
 8042688:	4a29      	ldr	r2, [pc, #164]	@ (8042730 <HAL_ADC_Start+0x19c>)
 804268a:	4293      	cmp	r3, r2
 804268c:	d105      	bne.n	804269a <HAL_ADC_Start+0x106>
 804268e:	4b26      	ldr	r3, [pc, #152]	@ (8042728 <HAL_ADC_Start+0x194>)
 8042690:	685b      	ldr	r3, [r3, #4]
 8042692:	f003 031f 	and.w	r3, r3, #31
 8042696:	2b00      	cmp	r3, #0
 8042698:	d00a      	beq.n	80426b0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 804269a:	687b      	ldr	r3, [r7, #4]
 804269c:	681b      	ldr	r3, [r3, #0]
 804269e:	4a25      	ldr	r2, [pc, #148]	@ (8042734 <HAL_ADC_Start+0x1a0>)
 80426a0:	4293      	cmp	r3, r2
 80426a2:	d136      	bne.n	8042712 <HAL_ADC_Start+0x17e>
 80426a4:	4b20      	ldr	r3, [pc, #128]	@ (8042728 <HAL_ADC_Start+0x194>)
 80426a6:	685b      	ldr	r3, [r3, #4]
 80426a8:	f003 0310 	and.w	r3, r3, #16
 80426ac:	2b00      	cmp	r3, #0
 80426ae:	d130      	bne.n	8042712 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80426b0:	687b      	ldr	r3, [r7, #4]
 80426b2:	681b      	ldr	r3, [r3, #0]
 80426b4:	689b      	ldr	r3, [r3, #8]
 80426b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80426ba:	2b00      	cmp	r3, #0
 80426bc:	d129      	bne.n	8042712 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	681b      	ldr	r3, [r3, #0]
 80426c2:	689a      	ldr	r2, [r3, #8]
 80426c4:	687b      	ldr	r3, [r7, #4]
 80426c6:	681b      	ldr	r3, [r3, #0]
 80426c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80426cc:	609a      	str	r2, [r3, #8]
 80426ce:	e020      	b.n	8042712 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	4a15      	ldr	r2, [pc, #84]	@ (804272c <HAL_ADC_Start+0x198>)
 80426d6:	4293      	cmp	r3, r2
 80426d8:	d11b      	bne.n	8042712 <HAL_ADC_Start+0x17e>
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	681b      	ldr	r3, [r3, #0]
 80426de:	689b      	ldr	r3, [r3, #8]
 80426e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80426e4:	2b00      	cmp	r3, #0
 80426e6:	d114      	bne.n	8042712 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80426e8:	687b      	ldr	r3, [r7, #4]
 80426ea:	681b      	ldr	r3, [r3, #0]
 80426ec:	689a      	ldr	r2, [r3, #8]
 80426ee:	687b      	ldr	r3, [r7, #4]
 80426f0:	681b      	ldr	r3, [r3, #0]
 80426f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80426f6:	609a      	str	r2, [r3, #8]
 80426f8:	e00b      	b.n	8042712 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80426fa:	687b      	ldr	r3, [r7, #4]
 80426fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80426fe:	f043 0210 	orr.w	r2, r3, #16
 8042702:	687b      	ldr	r3, [r7, #4]
 8042704:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8042706:	687b      	ldr	r3, [r7, #4]
 8042708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804270a:	f043 0201 	orr.w	r2, r3, #1
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8042712:	2300      	movs	r3, #0
}
 8042714:	4618      	mov	r0, r3
 8042716:	3714      	adds	r7, #20
 8042718:	46bd      	mov	sp, r7
 804271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804271e:	4770      	bx	lr
 8042720:	20000000 	.word	0x20000000
 8042724:	431bde83 	.word	0x431bde83
 8042728:	40012300 	.word	0x40012300
 804272c:	40012000 	.word	0x40012000
 8042730:	40012100 	.word	0x40012100
 8042734:	40012200 	.word	0x40012200

08042738 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8042738:	b480      	push	{r7}
 804273a:	b083      	sub	sp, #12
 804273c:	af00      	add	r7, sp, #0
 804273e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8042740:	687b      	ldr	r3, [r7, #4]
 8042742:	681b      	ldr	r3, [r3, #0]
 8042744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8042746:	4618      	mov	r0, r3
 8042748:	370c      	adds	r7, #12
 804274a:	46bd      	mov	sp, r7
 804274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042750:	4770      	bx	lr
	...

08042754 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8042754:	b480      	push	{r7}
 8042756:	b085      	sub	sp, #20
 8042758:	af00      	add	r7, sp, #0
 804275a:	6078      	str	r0, [r7, #4]
 804275c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 804275e:	2300      	movs	r3, #0
 8042760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8042762:	687b      	ldr	r3, [r7, #4]
 8042764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8042768:	2b01      	cmp	r3, #1
 804276a:	d101      	bne.n	8042770 <HAL_ADC_ConfigChannel+0x1c>
 804276c:	2302      	movs	r3, #2
 804276e:	e105      	b.n	804297c <HAL_ADC_ConfigChannel+0x228>
 8042770:	687b      	ldr	r3, [r7, #4]
 8042772:	2201      	movs	r2, #1
 8042774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8042778:	683b      	ldr	r3, [r7, #0]
 804277a:	681b      	ldr	r3, [r3, #0]
 804277c:	2b09      	cmp	r3, #9
 804277e:	d925      	bls.n	80427cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	681b      	ldr	r3, [r3, #0]
 8042784:	68d9      	ldr	r1, [r3, #12]
 8042786:	683b      	ldr	r3, [r7, #0]
 8042788:	681b      	ldr	r3, [r3, #0]
 804278a:	b29b      	uxth	r3, r3
 804278c:	461a      	mov	r2, r3
 804278e:	4613      	mov	r3, r2
 8042790:	005b      	lsls	r3, r3, #1
 8042792:	4413      	add	r3, r2
 8042794:	3b1e      	subs	r3, #30
 8042796:	2207      	movs	r2, #7
 8042798:	fa02 f303 	lsl.w	r3, r2, r3
 804279c:	43da      	mvns	r2, r3
 804279e:	687b      	ldr	r3, [r7, #4]
 80427a0:	681b      	ldr	r3, [r3, #0]
 80427a2:	400a      	ands	r2, r1
 80427a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80427a6:	687b      	ldr	r3, [r7, #4]
 80427a8:	681b      	ldr	r3, [r3, #0]
 80427aa:	68d9      	ldr	r1, [r3, #12]
 80427ac:	683b      	ldr	r3, [r7, #0]
 80427ae:	689a      	ldr	r2, [r3, #8]
 80427b0:	683b      	ldr	r3, [r7, #0]
 80427b2:	681b      	ldr	r3, [r3, #0]
 80427b4:	b29b      	uxth	r3, r3
 80427b6:	4618      	mov	r0, r3
 80427b8:	4603      	mov	r3, r0
 80427ba:	005b      	lsls	r3, r3, #1
 80427bc:	4403      	add	r3, r0
 80427be:	3b1e      	subs	r3, #30
 80427c0:	409a      	lsls	r2, r3
 80427c2:	687b      	ldr	r3, [r7, #4]
 80427c4:	681b      	ldr	r3, [r3, #0]
 80427c6:	430a      	orrs	r2, r1
 80427c8:	60da      	str	r2, [r3, #12]
 80427ca:	e022      	b.n	8042812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80427cc:	687b      	ldr	r3, [r7, #4]
 80427ce:	681b      	ldr	r3, [r3, #0]
 80427d0:	6919      	ldr	r1, [r3, #16]
 80427d2:	683b      	ldr	r3, [r7, #0]
 80427d4:	681b      	ldr	r3, [r3, #0]
 80427d6:	b29b      	uxth	r3, r3
 80427d8:	461a      	mov	r2, r3
 80427da:	4613      	mov	r3, r2
 80427dc:	005b      	lsls	r3, r3, #1
 80427de:	4413      	add	r3, r2
 80427e0:	2207      	movs	r2, #7
 80427e2:	fa02 f303 	lsl.w	r3, r2, r3
 80427e6:	43da      	mvns	r2, r3
 80427e8:	687b      	ldr	r3, [r7, #4]
 80427ea:	681b      	ldr	r3, [r3, #0]
 80427ec:	400a      	ands	r2, r1
 80427ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80427f0:	687b      	ldr	r3, [r7, #4]
 80427f2:	681b      	ldr	r3, [r3, #0]
 80427f4:	6919      	ldr	r1, [r3, #16]
 80427f6:	683b      	ldr	r3, [r7, #0]
 80427f8:	689a      	ldr	r2, [r3, #8]
 80427fa:	683b      	ldr	r3, [r7, #0]
 80427fc:	681b      	ldr	r3, [r3, #0]
 80427fe:	b29b      	uxth	r3, r3
 8042800:	4618      	mov	r0, r3
 8042802:	4603      	mov	r3, r0
 8042804:	005b      	lsls	r3, r3, #1
 8042806:	4403      	add	r3, r0
 8042808:	409a      	lsls	r2, r3
 804280a:	687b      	ldr	r3, [r7, #4]
 804280c:	681b      	ldr	r3, [r3, #0]
 804280e:	430a      	orrs	r2, r1
 8042810:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8042812:	683b      	ldr	r3, [r7, #0]
 8042814:	685b      	ldr	r3, [r3, #4]
 8042816:	2b06      	cmp	r3, #6
 8042818:	d824      	bhi.n	8042864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 804281a:	687b      	ldr	r3, [r7, #4]
 804281c:	681b      	ldr	r3, [r3, #0]
 804281e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8042820:	683b      	ldr	r3, [r7, #0]
 8042822:	685a      	ldr	r2, [r3, #4]
 8042824:	4613      	mov	r3, r2
 8042826:	009b      	lsls	r3, r3, #2
 8042828:	4413      	add	r3, r2
 804282a:	3b05      	subs	r3, #5
 804282c:	221f      	movs	r2, #31
 804282e:	fa02 f303 	lsl.w	r3, r2, r3
 8042832:	43da      	mvns	r2, r3
 8042834:	687b      	ldr	r3, [r7, #4]
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	400a      	ands	r2, r1
 804283a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 804283c:	687b      	ldr	r3, [r7, #4]
 804283e:	681b      	ldr	r3, [r3, #0]
 8042840:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8042842:	683b      	ldr	r3, [r7, #0]
 8042844:	681b      	ldr	r3, [r3, #0]
 8042846:	b29b      	uxth	r3, r3
 8042848:	4618      	mov	r0, r3
 804284a:	683b      	ldr	r3, [r7, #0]
 804284c:	685a      	ldr	r2, [r3, #4]
 804284e:	4613      	mov	r3, r2
 8042850:	009b      	lsls	r3, r3, #2
 8042852:	4413      	add	r3, r2
 8042854:	3b05      	subs	r3, #5
 8042856:	fa00 f203 	lsl.w	r2, r0, r3
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	681b      	ldr	r3, [r3, #0]
 804285e:	430a      	orrs	r2, r1
 8042860:	635a      	str	r2, [r3, #52]	@ 0x34
 8042862:	e04c      	b.n	80428fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8042864:	683b      	ldr	r3, [r7, #0]
 8042866:	685b      	ldr	r3, [r3, #4]
 8042868:	2b0c      	cmp	r3, #12
 804286a:	d824      	bhi.n	80428b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 804286c:	687b      	ldr	r3, [r7, #4]
 804286e:	681b      	ldr	r3, [r3, #0]
 8042870:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8042872:	683b      	ldr	r3, [r7, #0]
 8042874:	685a      	ldr	r2, [r3, #4]
 8042876:	4613      	mov	r3, r2
 8042878:	009b      	lsls	r3, r3, #2
 804287a:	4413      	add	r3, r2
 804287c:	3b23      	subs	r3, #35	@ 0x23
 804287e:	221f      	movs	r2, #31
 8042880:	fa02 f303 	lsl.w	r3, r2, r3
 8042884:	43da      	mvns	r2, r3
 8042886:	687b      	ldr	r3, [r7, #4]
 8042888:	681b      	ldr	r3, [r3, #0]
 804288a:	400a      	ands	r2, r1
 804288c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 804288e:	687b      	ldr	r3, [r7, #4]
 8042890:	681b      	ldr	r3, [r3, #0]
 8042892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8042894:	683b      	ldr	r3, [r7, #0]
 8042896:	681b      	ldr	r3, [r3, #0]
 8042898:	b29b      	uxth	r3, r3
 804289a:	4618      	mov	r0, r3
 804289c:	683b      	ldr	r3, [r7, #0]
 804289e:	685a      	ldr	r2, [r3, #4]
 80428a0:	4613      	mov	r3, r2
 80428a2:	009b      	lsls	r3, r3, #2
 80428a4:	4413      	add	r3, r2
 80428a6:	3b23      	subs	r3, #35	@ 0x23
 80428a8:	fa00 f203 	lsl.w	r2, r0, r3
 80428ac:	687b      	ldr	r3, [r7, #4]
 80428ae:	681b      	ldr	r3, [r3, #0]
 80428b0:	430a      	orrs	r2, r1
 80428b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80428b4:	e023      	b.n	80428fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80428b6:	687b      	ldr	r3, [r7, #4]
 80428b8:	681b      	ldr	r3, [r3, #0]
 80428ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80428bc:	683b      	ldr	r3, [r7, #0]
 80428be:	685a      	ldr	r2, [r3, #4]
 80428c0:	4613      	mov	r3, r2
 80428c2:	009b      	lsls	r3, r3, #2
 80428c4:	4413      	add	r3, r2
 80428c6:	3b41      	subs	r3, #65	@ 0x41
 80428c8:	221f      	movs	r2, #31
 80428ca:	fa02 f303 	lsl.w	r3, r2, r3
 80428ce:	43da      	mvns	r2, r3
 80428d0:	687b      	ldr	r3, [r7, #4]
 80428d2:	681b      	ldr	r3, [r3, #0]
 80428d4:	400a      	ands	r2, r1
 80428d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80428d8:	687b      	ldr	r3, [r7, #4]
 80428da:	681b      	ldr	r3, [r3, #0]
 80428dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80428de:	683b      	ldr	r3, [r7, #0]
 80428e0:	681b      	ldr	r3, [r3, #0]
 80428e2:	b29b      	uxth	r3, r3
 80428e4:	4618      	mov	r0, r3
 80428e6:	683b      	ldr	r3, [r7, #0]
 80428e8:	685a      	ldr	r2, [r3, #4]
 80428ea:	4613      	mov	r3, r2
 80428ec:	009b      	lsls	r3, r3, #2
 80428ee:	4413      	add	r3, r2
 80428f0:	3b41      	subs	r3, #65	@ 0x41
 80428f2:	fa00 f203 	lsl.w	r2, r0, r3
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	681b      	ldr	r3, [r3, #0]
 80428fa:	430a      	orrs	r2, r1
 80428fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80428fe:	4b22      	ldr	r3, [pc, #136]	@ (8042988 <HAL_ADC_ConfigChannel+0x234>)
 8042900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8042902:	687b      	ldr	r3, [r7, #4]
 8042904:	681b      	ldr	r3, [r3, #0]
 8042906:	4a21      	ldr	r2, [pc, #132]	@ (804298c <HAL_ADC_ConfigChannel+0x238>)
 8042908:	4293      	cmp	r3, r2
 804290a:	d109      	bne.n	8042920 <HAL_ADC_ConfigChannel+0x1cc>
 804290c:	683b      	ldr	r3, [r7, #0]
 804290e:	681b      	ldr	r3, [r3, #0]
 8042910:	2b12      	cmp	r3, #18
 8042912:	d105      	bne.n	8042920 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8042914:	68fb      	ldr	r3, [r7, #12]
 8042916:	685b      	ldr	r3, [r3, #4]
 8042918:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 804291c:	68fb      	ldr	r3, [r7, #12]
 804291e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8042920:	687b      	ldr	r3, [r7, #4]
 8042922:	681b      	ldr	r3, [r3, #0]
 8042924:	4a19      	ldr	r2, [pc, #100]	@ (804298c <HAL_ADC_ConfigChannel+0x238>)
 8042926:	4293      	cmp	r3, r2
 8042928:	d123      	bne.n	8042972 <HAL_ADC_ConfigChannel+0x21e>
 804292a:	683b      	ldr	r3, [r7, #0]
 804292c:	681b      	ldr	r3, [r3, #0]
 804292e:	2b10      	cmp	r3, #16
 8042930:	d003      	beq.n	804293a <HAL_ADC_ConfigChannel+0x1e6>
 8042932:	683b      	ldr	r3, [r7, #0]
 8042934:	681b      	ldr	r3, [r3, #0]
 8042936:	2b11      	cmp	r3, #17
 8042938:	d11b      	bne.n	8042972 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 804293a:	68fb      	ldr	r3, [r7, #12]
 804293c:	685b      	ldr	r3, [r3, #4]
 804293e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8042942:	68fb      	ldr	r3, [r7, #12]
 8042944:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8042946:	683b      	ldr	r3, [r7, #0]
 8042948:	681b      	ldr	r3, [r3, #0]
 804294a:	2b10      	cmp	r3, #16
 804294c:	d111      	bne.n	8042972 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 804294e:	4b10      	ldr	r3, [pc, #64]	@ (8042990 <HAL_ADC_ConfigChannel+0x23c>)
 8042950:	681b      	ldr	r3, [r3, #0]
 8042952:	4a10      	ldr	r2, [pc, #64]	@ (8042994 <HAL_ADC_ConfigChannel+0x240>)
 8042954:	fba2 2303 	umull	r2, r3, r2, r3
 8042958:	0c9a      	lsrs	r2, r3, #18
 804295a:	4613      	mov	r3, r2
 804295c:	009b      	lsls	r3, r3, #2
 804295e:	4413      	add	r3, r2
 8042960:	005b      	lsls	r3, r3, #1
 8042962:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8042964:	e002      	b.n	804296c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8042966:	68bb      	ldr	r3, [r7, #8]
 8042968:	3b01      	subs	r3, #1
 804296a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 804296c:	68bb      	ldr	r3, [r7, #8]
 804296e:	2b00      	cmp	r3, #0
 8042970:	d1f9      	bne.n	8042966 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8042972:	687b      	ldr	r3, [r7, #4]
 8042974:	2200      	movs	r2, #0
 8042976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 804297a:	2300      	movs	r3, #0
}
 804297c:	4618      	mov	r0, r3
 804297e:	3714      	adds	r7, #20
 8042980:	46bd      	mov	sp, r7
 8042982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042986:	4770      	bx	lr
 8042988:	40012300 	.word	0x40012300
 804298c:	40012000 	.word	0x40012000
 8042990:	20000000 	.word	0x20000000
 8042994:	431bde83 	.word	0x431bde83

08042998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8042998:	b480      	push	{r7}
 804299a:	b085      	sub	sp, #20
 804299c:	af00      	add	r7, sp, #0
 804299e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80429a0:	4b79      	ldr	r3, [pc, #484]	@ (8042b88 <ADC_Init+0x1f0>)
 80429a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80429a4:	68fb      	ldr	r3, [r7, #12]
 80429a6:	685b      	ldr	r3, [r3, #4]
 80429a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80429ac:	68fb      	ldr	r3, [r7, #12]
 80429ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80429b0:	68fb      	ldr	r3, [r7, #12]
 80429b2:	685a      	ldr	r2, [r3, #4]
 80429b4:	687b      	ldr	r3, [r7, #4]
 80429b6:	685b      	ldr	r3, [r3, #4]
 80429b8:	431a      	orrs	r2, r3
 80429ba:	68fb      	ldr	r3, [r7, #12]
 80429bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80429be:	687b      	ldr	r3, [r7, #4]
 80429c0:	681b      	ldr	r3, [r3, #0]
 80429c2:	685a      	ldr	r2, [r3, #4]
 80429c4:	687b      	ldr	r3, [r7, #4]
 80429c6:	681b      	ldr	r3, [r3, #0]
 80429c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80429cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80429ce:	687b      	ldr	r3, [r7, #4]
 80429d0:	681b      	ldr	r3, [r3, #0]
 80429d2:	6859      	ldr	r1, [r3, #4]
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	691b      	ldr	r3, [r3, #16]
 80429d8:	021a      	lsls	r2, r3, #8
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	681b      	ldr	r3, [r3, #0]
 80429de:	430a      	orrs	r2, r1
 80429e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80429e2:	687b      	ldr	r3, [r7, #4]
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	685a      	ldr	r2, [r3, #4]
 80429e8:	687b      	ldr	r3, [r7, #4]
 80429ea:	681b      	ldr	r3, [r3, #0]
 80429ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80429f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	681b      	ldr	r3, [r3, #0]
 80429f6:	6859      	ldr	r1, [r3, #4]
 80429f8:	687b      	ldr	r3, [r7, #4]
 80429fa:	689a      	ldr	r2, [r3, #8]
 80429fc:	687b      	ldr	r3, [r7, #4]
 80429fe:	681b      	ldr	r3, [r3, #0]
 8042a00:	430a      	orrs	r2, r1
 8042a02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	681b      	ldr	r3, [r3, #0]
 8042a08:	689a      	ldr	r2, [r3, #8]
 8042a0a:	687b      	ldr	r3, [r7, #4]
 8042a0c:	681b      	ldr	r3, [r3, #0]
 8042a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8042a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8042a14:	687b      	ldr	r3, [r7, #4]
 8042a16:	681b      	ldr	r3, [r3, #0]
 8042a18:	6899      	ldr	r1, [r3, #8]
 8042a1a:	687b      	ldr	r3, [r7, #4]
 8042a1c:	68da      	ldr	r2, [r3, #12]
 8042a1e:	687b      	ldr	r3, [r7, #4]
 8042a20:	681b      	ldr	r3, [r3, #0]
 8042a22:	430a      	orrs	r2, r1
 8042a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042a2a:	4a58      	ldr	r2, [pc, #352]	@ (8042b8c <ADC_Init+0x1f4>)
 8042a2c:	4293      	cmp	r3, r2
 8042a2e:	d022      	beq.n	8042a76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8042a30:	687b      	ldr	r3, [r7, #4]
 8042a32:	681b      	ldr	r3, [r3, #0]
 8042a34:	689a      	ldr	r2, [r3, #8]
 8042a36:	687b      	ldr	r3, [r7, #4]
 8042a38:	681b      	ldr	r3, [r3, #0]
 8042a3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8042a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	681b      	ldr	r3, [r3, #0]
 8042a44:	6899      	ldr	r1, [r3, #8]
 8042a46:	687b      	ldr	r3, [r7, #4]
 8042a48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8042a4a:	687b      	ldr	r3, [r7, #4]
 8042a4c:	681b      	ldr	r3, [r3, #0]
 8042a4e:	430a      	orrs	r2, r1
 8042a50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8042a52:	687b      	ldr	r3, [r7, #4]
 8042a54:	681b      	ldr	r3, [r3, #0]
 8042a56:	689a      	ldr	r2, [r3, #8]
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8042a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8042a62:	687b      	ldr	r3, [r7, #4]
 8042a64:	681b      	ldr	r3, [r3, #0]
 8042a66:	6899      	ldr	r1, [r3, #8]
 8042a68:	687b      	ldr	r3, [r7, #4]
 8042a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042a6c:	687b      	ldr	r3, [r7, #4]
 8042a6e:	681b      	ldr	r3, [r3, #0]
 8042a70:	430a      	orrs	r2, r1
 8042a72:	609a      	str	r2, [r3, #8]
 8042a74:	e00f      	b.n	8042a96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8042a76:	687b      	ldr	r3, [r7, #4]
 8042a78:	681b      	ldr	r3, [r3, #0]
 8042a7a:	689a      	ldr	r2, [r3, #8]
 8042a7c:	687b      	ldr	r3, [r7, #4]
 8042a7e:	681b      	ldr	r3, [r3, #0]
 8042a80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8042a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8042a86:	687b      	ldr	r3, [r7, #4]
 8042a88:	681b      	ldr	r3, [r3, #0]
 8042a8a:	689a      	ldr	r2, [r3, #8]
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	681b      	ldr	r3, [r3, #0]
 8042a90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8042a94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8042a96:	687b      	ldr	r3, [r7, #4]
 8042a98:	681b      	ldr	r3, [r3, #0]
 8042a9a:	689a      	ldr	r2, [r3, #8]
 8042a9c:	687b      	ldr	r3, [r7, #4]
 8042a9e:	681b      	ldr	r3, [r3, #0]
 8042aa0:	f022 0202 	bic.w	r2, r2, #2
 8042aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	681b      	ldr	r3, [r3, #0]
 8042aaa:	6899      	ldr	r1, [r3, #8]
 8042aac:	687b      	ldr	r3, [r7, #4]
 8042aae:	7e1b      	ldrb	r3, [r3, #24]
 8042ab0:	005a      	lsls	r2, r3, #1
 8042ab2:	687b      	ldr	r3, [r7, #4]
 8042ab4:	681b      	ldr	r3, [r3, #0]
 8042ab6:	430a      	orrs	r2, r1
 8042ab8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8042aba:	687b      	ldr	r3, [r7, #4]
 8042abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8042ac0:	2b00      	cmp	r3, #0
 8042ac2:	d01b      	beq.n	8042afc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	681b      	ldr	r3, [r3, #0]
 8042ac8:	685a      	ldr	r2, [r3, #4]
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	681b      	ldr	r3, [r3, #0]
 8042ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8042ad2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	681b      	ldr	r3, [r3, #0]
 8042ad8:	685a      	ldr	r2, [r3, #4]
 8042ada:	687b      	ldr	r3, [r7, #4]
 8042adc:	681b      	ldr	r3, [r3, #0]
 8042ade:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8042ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8042ae4:	687b      	ldr	r3, [r7, #4]
 8042ae6:	681b      	ldr	r3, [r3, #0]
 8042ae8:	6859      	ldr	r1, [r3, #4]
 8042aea:	687b      	ldr	r3, [r7, #4]
 8042aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042aee:	3b01      	subs	r3, #1
 8042af0:	035a      	lsls	r2, r3, #13
 8042af2:	687b      	ldr	r3, [r7, #4]
 8042af4:	681b      	ldr	r3, [r3, #0]
 8042af6:	430a      	orrs	r2, r1
 8042af8:	605a      	str	r2, [r3, #4]
 8042afa:	e007      	b.n	8042b0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	681b      	ldr	r3, [r3, #0]
 8042b00:	685a      	ldr	r2, [r3, #4]
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	681b      	ldr	r3, [r3, #0]
 8042b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8042b0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8042b0c:	687b      	ldr	r3, [r7, #4]
 8042b0e:	681b      	ldr	r3, [r3, #0]
 8042b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042b12:	687b      	ldr	r3, [r7, #4]
 8042b14:	681b      	ldr	r3, [r3, #0]
 8042b16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8042b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8042b1c:	687b      	ldr	r3, [r7, #4]
 8042b1e:	681b      	ldr	r3, [r3, #0]
 8042b20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8042b22:	687b      	ldr	r3, [r7, #4]
 8042b24:	69db      	ldr	r3, [r3, #28]
 8042b26:	3b01      	subs	r3, #1
 8042b28:	051a      	lsls	r2, r3, #20
 8042b2a:	687b      	ldr	r3, [r7, #4]
 8042b2c:	681b      	ldr	r3, [r3, #0]
 8042b2e:	430a      	orrs	r2, r1
 8042b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8042b32:	687b      	ldr	r3, [r7, #4]
 8042b34:	681b      	ldr	r3, [r3, #0]
 8042b36:	689a      	ldr	r2, [r3, #8]
 8042b38:	687b      	ldr	r3, [r7, #4]
 8042b3a:	681b      	ldr	r3, [r3, #0]
 8042b3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8042b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	681b      	ldr	r3, [r3, #0]
 8042b46:	6899      	ldr	r1, [r3, #8]
 8042b48:	687b      	ldr	r3, [r7, #4]
 8042b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8042b4e:	025a      	lsls	r2, r3, #9
 8042b50:	687b      	ldr	r3, [r7, #4]
 8042b52:	681b      	ldr	r3, [r3, #0]
 8042b54:	430a      	orrs	r2, r1
 8042b56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8042b58:	687b      	ldr	r3, [r7, #4]
 8042b5a:	681b      	ldr	r3, [r3, #0]
 8042b5c:	689a      	ldr	r2, [r3, #8]
 8042b5e:	687b      	ldr	r3, [r7, #4]
 8042b60:	681b      	ldr	r3, [r3, #0]
 8042b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8042b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	681b      	ldr	r3, [r3, #0]
 8042b6c:	6899      	ldr	r1, [r3, #8]
 8042b6e:	687b      	ldr	r3, [r7, #4]
 8042b70:	695b      	ldr	r3, [r3, #20]
 8042b72:	029a      	lsls	r2, r3, #10
 8042b74:	687b      	ldr	r3, [r7, #4]
 8042b76:	681b      	ldr	r3, [r3, #0]
 8042b78:	430a      	orrs	r2, r1
 8042b7a:	609a      	str	r2, [r3, #8]
}
 8042b7c:	bf00      	nop
 8042b7e:	3714      	adds	r7, #20
 8042b80:	46bd      	mov	sp, r7
 8042b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b86:	4770      	bx	lr
 8042b88:	40012300 	.word	0x40012300
 8042b8c:	0f000001 	.word	0x0f000001

08042b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042b90:	b480      	push	{r7}
 8042b92:	b085      	sub	sp, #20
 8042b94:	af00      	add	r7, sp, #0
 8042b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042b98:	687b      	ldr	r3, [r7, #4]
 8042b9a:	f003 0307 	and.w	r3, r3, #7
 8042b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8042bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8042ba2:	68db      	ldr	r3, [r3, #12]
 8042ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042ba6:	68ba      	ldr	r2, [r7, #8]
 8042ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8042bac:	4013      	ands	r3, r2
 8042bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042bb0:	68fb      	ldr	r3, [r7, #12]
 8042bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042bb4:	68bb      	ldr	r3, [r7, #8]
 8042bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8042bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042bc2:	4a04      	ldr	r2, [pc, #16]	@ (8042bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8042bc4:	68bb      	ldr	r3, [r7, #8]
 8042bc6:	60d3      	str	r3, [r2, #12]
}
 8042bc8:	bf00      	nop
 8042bca:	3714      	adds	r7, #20
 8042bcc:	46bd      	mov	sp, r7
 8042bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bd2:	4770      	bx	lr
 8042bd4:	e000ed00 	.word	0xe000ed00

08042bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042bd8:	b480      	push	{r7}
 8042bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042bdc:	4b04      	ldr	r3, [pc, #16]	@ (8042bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8042bde:	68db      	ldr	r3, [r3, #12]
 8042be0:	0a1b      	lsrs	r3, r3, #8
 8042be2:	f003 0307 	and.w	r3, r3, #7
}
 8042be6:	4618      	mov	r0, r3
 8042be8:	46bd      	mov	sp, r7
 8042bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bee:	4770      	bx	lr
 8042bf0:	e000ed00 	.word	0xe000ed00

08042bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042bf4:	b480      	push	{r7}
 8042bf6:	b083      	sub	sp, #12
 8042bf8:	af00      	add	r7, sp, #0
 8042bfa:	4603      	mov	r3, r0
 8042bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c02:	2b00      	cmp	r3, #0
 8042c04:	db0b      	blt.n	8042c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042c06:	79fb      	ldrb	r3, [r7, #7]
 8042c08:	f003 021f 	and.w	r2, r3, #31
 8042c0c:	4907      	ldr	r1, [pc, #28]	@ (8042c2c <__NVIC_EnableIRQ+0x38>)
 8042c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c12:	095b      	lsrs	r3, r3, #5
 8042c14:	2001      	movs	r0, #1
 8042c16:	fa00 f202 	lsl.w	r2, r0, r2
 8042c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8042c1e:	bf00      	nop
 8042c20:	370c      	adds	r7, #12
 8042c22:	46bd      	mov	sp, r7
 8042c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c28:	4770      	bx	lr
 8042c2a:	bf00      	nop
 8042c2c:	e000e100 	.word	0xe000e100

08042c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8042c30:	b480      	push	{r7}
 8042c32:	b083      	sub	sp, #12
 8042c34:	af00      	add	r7, sp, #0
 8042c36:	4603      	mov	r3, r0
 8042c38:	6039      	str	r1, [r7, #0]
 8042c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c40:	2b00      	cmp	r3, #0
 8042c42:	db0a      	blt.n	8042c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042c44:	683b      	ldr	r3, [r7, #0]
 8042c46:	b2da      	uxtb	r2, r3
 8042c48:	490c      	ldr	r1, [pc, #48]	@ (8042c7c <__NVIC_SetPriority+0x4c>)
 8042c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c4e:	0112      	lsls	r2, r2, #4
 8042c50:	b2d2      	uxtb	r2, r2
 8042c52:	440b      	add	r3, r1
 8042c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042c58:	e00a      	b.n	8042c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042c5a:	683b      	ldr	r3, [r7, #0]
 8042c5c:	b2da      	uxtb	r2, r3
 8042c5e:	4908      	ldr	r1, [pc, #32]	@ (8042c80 <__NVIC_SetPriority+0x50>)
 8042c60:	79fb      	ldrb	r3, [r7, #7]
 8042c62:	f003 030f 	and.w	r3, r3, #15
 8042c66:	3b04      	subs	r3, #4
 8042c68:	0112      	lsls	r2, r2, #4
 8042c6a:	b2d2      	uxtb	r2, r2
 8042c6c:	440b      	add	r3, r1
 8042c6e:	761a      	strb	r2, [r3, #24]
}
 8042c70:	bf00      	nop
 8042c72:	370c      	adds	r7, #12
 8042c74:	46bd      	mov	sp, r7
 8042c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c7a:	4770      	bx	lr
 8042c7c:	e000e100 	.word	0xe000e100
 8042c80:	e000ed00 	.word	0xe000ed00

08042c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042c84:	b480      	push	{r7}
 8042c86:	b089      	sub	sp, #36	@ 0x24
 8042c88:	af00      	add	r7, sp, #0
 8042c8a:	60f8      	str	r0, [r7, #12]
 8042c8c:	60b9      	str	r1, [r7, #8]
 8042c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042c90:	68fb      	ldr	r3, [r7, #12]
 8042c92:	f003 0307 	and.w	r3, r3, #7
 8042c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042c98:	69fb      	ldr	r3, [r7, #28]
 8042c9a:	f1c3 0307 	rsb	r3, r3, #7
 8042c9e:	2b04      	cmp	r3, #4
 8042ca0:	bf28      	it	cs
 8042ca2:	2304      	movcs	r3, #4
 8042ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042ca6:	69fb      	ldr	r3, [r7, #28]
 8042ca8:	3304      	adds	r3, #4
 8042caa:	2b06      	cmp	r3, #6
 8042cac:	d902      	bls.n	8042cb4 <NVIC_EncodePriority+0x30>
 8042cae:	69fb      	ldr	r3, [r7, #28]
 8042cb0:	3b03      	subs	r3, #3
 8042cb2:	e000      	b.n	8042cb6 <NVIC_EncodePriority+0x32>
 8042cb4:	2300      	movs	r3, #0
 8042cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8042cbc:	69bb      	ldr	r3, [r7, #24]
 8042cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8042cc2:	43da      	mvns	r2, r3
 8042cc4:	68bb      	ldr	r3, [r7, #8]
 8042cc6:	401a      	ands	r2, r3
 8042cc8:	697b      	ldr	r3, [r7, #20]
 8042cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8042cd0:	697b      	ldr	r3, [r7, #20]
 8042cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8042cd6:	43d9      	mvns	r1, r3
 8042cd8:	687b      	ldr	r3, [r7, #4]
 8042cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042cdc:	4313      	orrs	r3, r2
         );
}
 8042cde:	4618      	mov	r0, r3
 8042ce0:	3724      	adds	r7, #36	@ 0x24
 8042ce2:	46bd      	mov	sp, r7
 8042ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ce8:	4770      	bx	lr

08042cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042cea:	b580      	push	{r7, lr}
 8042cec:	b082      	sub	sp, #8
 8042cee:	af00      	add	r7, sp, #0
 8042cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042cf2:	6878      	ldr	r0, [r7, #4]
 8042cf4:	f7ff ff4c 	bl	8042b90 <__NVIC_SetPriorityGrouping>
}
 8042cf8:	bf00      	nop
 8042cfa:	3708      	adds	r7, #8
 8042cfc:	46bd      	mov	sp, r7
 8042cfe:	bd80      	pop	{r7, pc}

08042d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042d00:	b580      	push	{r7, lr}
 8042d02:	b086      	sub	sp, #24
 8042d04:	af00      	add	r7, sp, #0
 8042d06:	4603      	mov	r3, r0
 8042d08:	60b9      	str	r1, [r7, #8]
 8042d0a:	607a      	str	r2, [r7, #4]
 8042d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8042d0e:	2300      	movs	r3, #0
 8042d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042d12:	f7ff ff61 	bl	8042bd8 <__NVIC_GetPriorityGrouping>
 8042d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042d18:	687a      	ldr	r2, [r7, #4]
 8042d1a:	68b9      	ldr	r1, [r7, #8]
 8042d1c:	6978      	ldr	r0, [r7, #20]
 8042d1e:	f7ff ffb1 	bl	8042c84 <NVIC_EncodePriority>
 8042d22:	4602      	mov	r2, r0
 8042d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042d28:	4611      	mov	r1, r2
 8042d2a:	4618      	mov	r0, r3
 8042d2c:	f7ff ff80 	bl	8042c30 <__NVIC_SetPriority>
}
 8042d30:	bf00      	nop
 8042d32:	3718      	adds	r7, #24
 8042d34:	46bd      	mov	sp, r7
 8042d36:	bd80      	pop	{r7, pc}

08042d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042d38:	b580      	push	{r7, lr}
 8042d3a:	b082      	sub	sp, #8
 8042d3c:	af00      	add	r7, sp, #0
 8042d3e:	4603      	mov	r3, r0
 8042d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042d46:	4618      	mov	r0, r3
 8042d48:	f7ff ff54 	bl	8042bf4 <__NVIC_EnableIRQ>
}
 8042d4c:	bf00      	nop
 8042d4e:	3708      	adds	r7, #8
 8042d50:	46bd      	mov	sp, r7
 8042d52:	bd80      	pop	{r7, pc}

08042d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8042d54:	b580      	push	{r7, lr}
 8042d56:	b084      	sub	sp, #16
 8042d58:	af00      	add	r7, sp, #0
 8042d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8042d5c:	687b      	ldr	r3, [r7, #4]
 8042d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8042d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8042d62:	f7ff fbc7 	bl	80424f4 <HAL_GetTick>
 8042d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8042d68:	687b      	ldr	r3, [r7, #4]
 8042d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8042d6e:	b2db      	uxtb	r3, r3
 8042d70:	2b02      	cmp	r3, #2
 8042d72:	d008      	beq.n	8042d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8042d74:	687b      	ldr	r3, [r7, #4]
 8042d76:	2280      	movs	r2, #128	@ 0x80
 8042d78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8042d7a:	687b      	ldr	r3, [r7, #4]
 8042d7c:	2200      	movs	r2, #0
 8042d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8042d82:	2301      	movs	r3, #1
 8042d84:	e052      	b.n	8042e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8042d86:	687b      	ldr	r3, [r7, #4]
 8042d88:	681b      	ldr	r3, [r3, #0]
 8042d8a:	681a      	ldr	r2, [r3, #0]
 8042d8c:	687b      	ldr	r3, [r7, #4]
 8042d8e:	681b      	ldr	r3, [r3, #0]
 8042d90:	f022 0216 	bic.w	r2, r2, #22
 8042d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8042d96:	687b      	ldr	r3, [r7, #4]
 8042d98:	681b      	ldr	r3, [r3, #0]
 8042d9a:	695a      	ldr	r2, [r3, #20]
 8042d9c:	687b      	ldr	r3, [r7, #4]
 8042d9e:	681b      	ldr	r3, [r3, #0]
 8042da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8042da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8042da6:	687b      	ldr	r3, [r7, #4]
 8042da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042daa:	2b00      	cmp	r3, #0
 8042dac:	d103      	bne.n	8042db6 <HAL_DMA_Abort+0x62>
 8042dae:	687b      	ldr	r3, [r7, #4]
 8042db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8042db2:	2b00      	cmp	r3, #0
 8042db4:	d007      	beq.n	8042dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8042db6:	687b      	ldr	r3, [r7, #4]
 8042db8:	681b      	ldr	r3, [r3, #0]
 8042dba:	681a      	ldr	r2, [r3, #0]
 8042dbc:	687b      	ldr	r3, [r7, #4]
 8042dbe:	681b      	ldr	r3, [r3, #0]
 8042dc0:	f022 0208 	bic.w	r2, r2, #8
 8042dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8042dc6:	687b      	ldr	r3, [r7, #4]
 8042dc8:	681b      	ldr	r3, [r3, #0]
 8042dca:	681a      	ldr	r2, [r3, #0]
 8042dcc:	687b      	ldr	r3, [r7, #4]
 8042dce:	681b      	ldr	r3, [r3, #0]
 8042dd0:	f022 0201 	bic.w	r2, r2, #1
 8042dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042dd6:	e013      	b.n	8042e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8042dd8:	f7ff fb8c 	bl	80424f4 <HAL_GetTick>
 8042ddc:	4602      	mov	r2, r0
 8042dde:	68bb      	ldr	r3, [r7, #8]
 8042de0:	1ad3      	subs	r3, r2, r3
 8042de2:	2b05      	cmp	r3, #5
 8042de4:	d90c      	bls.n	8042e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8042de6:	687b      	ldr	r3, [r7, #4]
 8042de8:	2220      	movs	r2, #32
 8042dea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8042dec:	687b      	ldr	r3, [r7, #4]
 8042dee:	2203      	movs	r2, #3
 8042df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8042df4:	687b      	ldr	r3, [r7, #4]
 8042df6:	2200      	movs	r2, #0
 8042df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8042dfc:	2303      	movs	r3, #3
 8042dfe:	e015      	b.n	8042e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042e00:	687b      	ldr	r3, [r7, #4]
 8042e02:	681b      	ldr	r3, [r3, #0]
 8042e04:	681b      	ldr	r3, [r3, #0]
 8042e06:	f003 0301 	and.w	r3, r3, #1
 8042e0a:	2b00      	cmp	r3, #0
 8042e0c:	d1e4      	bne.n	8042dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8042e0e:	687b      	ldr	r3, [r7, #4]
 8042e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8042e12:	223f      	movs	r2, #63	@ 0x3f
 8042e14:	409a      	lsls	r2, r3
 8042e16:	68fb      	ldr	r3, [r7, #12]
 8042e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8042e1a:	687b      	ldr	r3, [r7, #4]
 8042e1c:	2201      	movs	r2, #1
 8042e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8042e22:	687b      	ldr	r3, [r7, #4]
 8042e24:	2200      	movs	r2, #0
 8042e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8042e2a:	2300      	movs	r3, #0
}
 8042e2c:	4618      	mov	r0, r3
 8042e2e:	3710      	adds	r7, #16
 8042e30:	46bd      	mov	sp, r7
 8042e32:	bd80      	pop	{r7, pc}

08042e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8042e34:	b480      	push	{r7}
 8042e36:	b083      	sub	sp, #12
 8042e38:	af00      	add	r7, sp, #0
 8042e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8042e3c:	687b      	ldr	r3, [r7, #4]
 8042e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8042e42:	b2db      	uxtb	r3, r3
 8042e44:	2b02      	cmp	r3, #2
 8042e46:	d004      	beq.n	8042e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8042e48:	687b      	ldr	r3, [r7, #4]
 8042e4a:	2280      	movs	r2, #128	@ 0x80
 8042e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8042e4e:	2301      	movs	r3, #1
 8042e50:	e00c      	b.n	8042e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8042e52:	687b      	ldr	r3, [r7, #4]
 8042e54:	2205      	movs	r2, #5
 8042e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8042e5a:	687b      	ldr	r3, [r7, #4]
 8042e5c:	681b      	ldr	r3, [r3, #0]
 8042e5e:	681a      	ldr	r2, [r3, #0]
 8042e60:	687b      	ldr	r3, [r7, #4]
 8042e62:	681b      	ldr	r3, [r3, #0]
 8042e64:	f022 0201 	bic.w	r2, r2, #1
 8042e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8042e6a:	2300      	movs	r3, #0
}
 8042e6c:	4618      	mov	r0, r3
 8042e6e:	370c      	adds	r7, #12
 8042e70:	46bd      	mov	sp, r7
 8042e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e76:	4770      	bx	lr

08042e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8042e78:	b480      	push	{r7}
 8042e7a:	b089      	sub	sp, #36	@ 0x24
 8042e7c:	af00      	add	r7, sp, #0
 8042e7e:	6078      	str	r0, [r7, #4]
 8042e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8042e82:	2300      	movs	r3, #0
 8042e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8042e86:	2300      	movs	r3, #0
 8042e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8042e8a:	2300      	movs	r3, #0
 8042e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8042e8e:	2300      	movs	r3, #0
 8042e90:	61fb      	str	r3, [r7, #28]
 8042e92:	e16b      	b.n	804316c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8042e94:	2201      	movs	r2, #1
 8042e96:	69fb      	ldr	r3, [r7, #28]
 8042e98:	fa02 f303 	lsl.w	r3, r2, r3
 8042e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8042e9e:	683b      	ldr	r3, [r7, #0]
 8042ea0:	681b      	ldr	r3, [r3, #0]
 8042ea2:	697a      	ldr	r2, [r7, #20]
 8042ea4:	4013      	ands	r3, r2
 8042ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8042ea8:	693a      	ldr	r2, [r7, #16]
 8042eaa:	697b      	ldr	r3, [r7, #20]
 8042eac:	429a      	cmp	r2, r3
 8042eae:	f040 815a 	bne.w	8043166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8042eb2:	683b      	ldr	r3, [r7, #0]
 8042eb4:	685b      	ldr	r3, [r3, #4]
 8042eb6:	f003 0303 	and.w	r3, r3, #3
 8042eba:	2b01      	cmp	r3, #1
 8042ebc:	d005      	beq.n	8042eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042ebe:	683b      	ldr	r3, [r7, #0]
 8042ec0:	685b      	ldr	r3, [r3, #4]
 8042ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8042ec6:	2b02      	cmp	r3, #2
 8042ec8:	d130      	bne.n	8042f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8042eca:	687b      	ldr	r3, [r7, #4]
 8042ecc:	689b      	ldr	r3, [r3, #8]
 8042ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8042ed0:	69fb      	ldr	r3, [r7, #28]
 8042ed2:	005b      	lsls	r3, r3, #1
 8042ed4:	2203      	movs	r2, #3
 8042ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8042eda:	43db      	mvns	r3, r3
 8042edc:	69ba      	ldr	r2, [r7, #24]
 8042ede:	4013      	ands	r3, r2
 8042ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8042ee2:	683b      	ldr	r3, [r7, #0]
 8042ee4:	68da      	ldr	r2, [r3, #12]
 8042ee6:	69fb      	ldr	r3, [r7, #28]
 8042ee8:	005b      	lsls	r3, r3, #1
 8042eea:	fa02 f303 	lsl.w	r3, r2, r3
 8042eee:	69ba      	ldr	r2, [r7, #24]
 8042ef0:	4313      	orrs	r3, r2
 8042ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8042ef4:	687b      	ldr	r3, [r7, #4]
 8042ef6:	69ba      	ldr	r2, [r7, #24]
 8042ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8042efa:	687b      	ldr	r3, [r7, #4]
 8042efc:	685b      	ldr	r3, [r3, #4]
 8042efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8042f00:	2201      	movs	r2, #1
 8042f02:	69fb      	ldr	r3, [r7, #28]
 8042f04:	fa02 f303 	lsl.w	r3, r2, r3
 8042f08:	43db      	mvns	r3, r3
 8042f0a:	69ba      	ldr	r2, [r7, #24]
 8042f0c:	4013      	ands	r3, r2
 8042f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8042f10:	683b      	ldr	r3, [r7, #0]
 8042f12:	685b      	ldr	r3, [r3, #4]
 8042f14:	091b      	lsrs	r3, r3, #4
 8042f16:	f003 0201 	and.w	r2, r3, #1
 8042f1a:	69fb      	ldr	r3, [r7, #28]
 8042f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8042f20:	69ba      	ldr	r2, [r7, #24]
 8042f22:	4313      	orrs	r3, r2
 8042f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8042f26:	687b      	ldr	r3, [r7, #4]
 8042f28:	69ba      	ldr	r2, [r7, #24]
 8042f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8042f2c:	683b      	ldr	r3, [r7, #0]
 8042f2e:	685b      	ldr	r3, [r3, #4]
 8042f30:	f003 0303 	and.w	r3, r3, #3
 8042f34:	2b03      	cmp	r3, #3
 8042f36:	d017      	beq.n	8042f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8042f38:	687b      	ldr	r3, [r7, #4]
 8042f3a:	68db      	ldr	r3, [r3, #12]
 8042f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8042f3e:	69fb      	ldr	r3, [r7, #28]
 8042f40:	005b      	lsls	r3, r3, #1
 8042f42:	2203      	movs	r2, #3
 8042f44:	fa02 f303 	lsl.w	r3, r2, r3
 8042f48:	43db      	mvns	r3, r3
 8042f4a:	69ba      	ldr	r2, [r7, #24]
 8042f4c:	4013      	ands	r3, r2
 8042f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8042f50:	683b      	ldr	r3, [r7, #0]
 8042f52:	689a      	ldr	r2, [r3, #8]
 8042f54:	69fb      	ldr	r3, [r7, #28]
 8042f56:	005b      	lsls	r3, r3, #1
 8042f58:	fa02 f303 	lsl.w	r3, r2, r3
 8042f5c:	69ba      	ldr	r2, [r7, #24]
 8042f5e:	4313      	orrs	r3, r2
 8042f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8042f62:	687b      	ldr	r3, [r7, #4]
 8042f64:	69ba      	ldr	r2, [r7, #24]
 8042f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042f68:	683b      	ldr	r3, [r7, #0]
 8042f6a:	685b      	ldr	r3, [r3, #4]
 8042f6c:	f003 0303 	and.w	r3, r3, #3
 8042f70:	2b02      	cmp	r3, #2
 8042f72:	d123      	bne.n	8042fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8042f74:	69fb      	ldr	r3, [r7, #28]
 8042f76:	08da      	lsrs	r2, r3, #3
 8042f78:	687b      	ldr	r3, [r7, #4]
 8042f7a:	3208      	adds	r2, #8
 8042f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8042f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8042f82:	69fb      	ldr	r3, [r7, #28]
 8042f84:	f003 0307 	and.w	r3, r3, #7
 8042f88:	009b      	lsls	r3, r3, #2
 8042f8a:	220f      	movs	r2, #15
 8042f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8042f90:	43db      	mvns	r3, r3
 8042f92:	69ba      	ldr	r2, [r7, #24]
 8042f94:	4013      	ands	r3, r2
 8042f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8042f98:	683b      	ldr	r3, [r7, #0]
 8042f9a:	691a      	ldr	r2, [r3, #16]
 8042f9c:	69fb      	ldr	r3, [r7, #28]
 8042f9e:	f003 0307 	and.w	r3, r3, #7
 8042fa2:	009b      	lsls	r3, r3, #2
 8042fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8042fa8:	69ba      	ldr	r2, [r7, #24]
 8042faa:	4313      	orrs	r3, r2
 8042fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8042fae:	69fb      	ldr	r3, [r7, #28]
 8042fb0:	08da      	lsrs	r2, r3, #3
 8042fb2:	687b      	ldr	r3, [r7, #4]
 8042fb4:	3208      	adds	r2, #8
 8042fb6:	69b9      	ldr	r1, [r7, #24]
 8042fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8042fbc:	687b      	ldr	r3, [r7, #4]
 8042fbe:	681b      	ldr	r3, [r3, #0]
 8042fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8042fc2:	69fb      	ldr	r3, [r7, #28]
 8042fc4:	005b      	lsls	r3, r3, #1
 8042fc6:	2203      	movs	r2, #3
 8042fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8042fcc:	43db      	mvns	r3, r3
 8042fce:	69ba      	ldr	r2, [r7, #24]
 8042fd0:	4013      	ands	r3, r2
 8042fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8042fd4:	683b      	ldr	r3, [r7, #0]
 8042fd6:	685b      	ldr	r3, [r3, #4]
 8042fd8:	f003 0203 	and.w	r2, r3, #3
 8042fdc:	69fb      	ldr	r3, [r7, #28]
 8042fde:	005b      	lsls	r3, r3, #1
 8042fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8042fe4:	69ba      	ldr	r2, [r7, #24]
 8042fe6:	4313      	orrs	r3, r2
 8042fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8042fea:	687b      	ldr	r3, [r7, #4]
 8042fec:	69ba      	ldr	r2, [r7, #24]
 8042fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8042ff0:	683b      	ldr	r3, [r7, #0]
 8042ff2:	685b      	ldr	r3, [r3, #4]
 8042ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8042ff8:	2b00      	cmp	r3, #0
 8042ffa:	f000 80b4 	beq.w	8043166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042ffe:	2300      	movs	r3, #0
 8043000:	60fb      	str	r3, [r7, #12]
 8043002:	4b60      	ldr	r3, [pc, #384]	@ (8043184 <HAL_GPIO_Init+0x30c>)
 8043004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8043006:	4a5f      	ldr	r2, [pc, #380]	@ (8043184 <HAL_GPIO_Init+0x30c>)
 8043008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 804300c:	6453      	str	r3, [r2, #68]	@ 0x44
 804300e:	4b5d      	ldr	r3, [pc, #372]	@ (8043184 <HAL_GPIO_Init+0x30c>)
 8043010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8043012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8043016:	60fb      	str	r3, [r7, #12]
 8043018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804301a:	4a5b      	ldr	r2, [pc, #364]	@ (8043188 <HAL_GPIO_Init+0x310>)
 804301c:	69fb      	ldr	r3, [r7, #28]
 804301e:	089b      	lsrs	r3, r3, #2
 8043020:	3302      	adds	r3, #2
 8043022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043028:	69fb      	ldr	r3, [r7, #28]
 804302a:	f003 0303 	and.w	r3, r3, #3
 804302e:	009b      	lsls	r3, r3, #2
 8043030:	220f      	movs	r2, #15
 8043032:	fa02 f303 	lsl.w	r3, r2, r3
 8043036:	43db      	mvns	r3, r3
 8043038:	69ba      	ldr	r2, [r7, #24]
 804303a:	4013      	ands	r3, r2
 804303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804303e:	687b      	ldr	r3, [r7, #4]
 8043040:	4a52      	ldr	r2, [pc, #328]	@ (804318c <HAL_GPIO_Init+0x314>)
 8043042:	4293      	cmp	r3, r2
 8043044:	d02b      	beq.n	804309e <HAL_GPIO_Init+0x226>
 8043046:	687b      	ldr	r3, [r7, #4]
 8043048:	4a51      	ldr	r2, [pc, #324]	@ (8043190 <HAL_GPIO_Init+0x318>)
 804304a:	4293      	cmp	r3, r2
 804304c:	d025      	beq.n	804309a <HAL_GPIO_Init+0x222>
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	4a50      	ldr	r2, [pc, #320]	@ (8043194 <HAL_GPIO_Init+0x31c>)
 8043052:	4293      	cmp	r3, r2
 8043054:	d01f      	beq.n	8043096 <HAL_GPIO_Init+0x21e>
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	4a4f      	ldr	r2, [pc, #316]	@ (8043198 <HAL_GPIO_Init+0x320>)
 804305a:	4293      	cmp	r3, r2
 804305c:	d019      	beq.n	8043092 <HAL_GPIO_Init+0x21a>
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	4a4e      	ldr	r2, [pc, #312]	@ (804319c <HAL_GPIO_Init+0x324>)
 8043062:	4293      	cmp	r3, r2
 8043064:	d013      	beq.n	804308e <HAL_GPIO_Init+0x216>
 8043066:	687b      	ldr	r3, [r7, #4]
 8043068:	4a4d      	ldr	r2, [pc, #308]	@ (80431a0 <HAL_GPIO_Init+0x328>)
 804306a:	4293      	cmp	r3, r2
 804306c:	d00d      	beq.n	804308a <HAL_GPIO_Init+0x212>
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	4a4c      	ldr	r2, [pc, #304]	@ (80431a4 <HAL_GPIO_Init+0x32c>)
 8043072:	4293      	cmp	r3, r2
 8043074:	d007      	beq.n	8043086 <HAL_GPIO_Init+0x20e>
 8043076:	687b      	ldr	r3, [r7, #4]
 8043078:	4a4b      	ldr	r2, [pc, #300]	@ (80431a8 <HAL_GPIO_Init+0x330>)
 804307a:	4293      	cmp	r3, r2
 804307c:	d101      	bne.n	8043082 <HAL_GPIO_Init+0x20a>
 804307e:	2307      	movs	r3, #7
 8043080:	e00e      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 8043082:	2308      	movs	r3, #8
 8043084:	e00c      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 8043086:	2306      	movs	r3, #6
 8043088:	e00a      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 804308a:	2305      	movs	r3, #5
 804308c:	e008      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 804308e:	2304      	movs	r3, #4
 8043090:	e006      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 8043092:	2303      	movs	r3, #3
 8043094:	e004      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 8043096:	2302      	movs	r3, #2
 8043098:	e002      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 804309a:	2301      	movs	r3, #1
 804309c:	e000      	b.n	80430a0 <HAL_GPIO_Init+0x228>
 804309e:	2300      	movs	r3, #0
 80430a0:	69fa      	ldr	r2, [r7, #28]
 80430a2:	f002 0203 	and.w	r2, r2, #3
 80430a6:	0092      	lsls	r2, r2, #2
 80430a8:	4093      	lsls	r3, r2
 80430aa:	69ba      	ldr	r2, [r7, #24]
 80430ac:	4313      	orrs	r3, r2
 80430ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80430b0:	4935      	ldr	r1, [pc, #212]	@ (8043188 <HAL_GPIO_Init+0x310>)
 80430b2:	69fb      	ldr	r3, [r7, #28]
 80430b4:	089b      	lsrs	r3, r3, #2
 80430b6:	3302      	adds	r3, #2
 80430b8:	69ba      	ldr	r2, [r7, #24]
 80430ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80430be:	4b3b      	ldr	r3, [pc, #236]	@ (80431ac <HAL_GPIO_Init+0x334>)
 80430c0:	689b      	ldr	r3, [r3, #8]
 80430c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80430c4:	693b      	ldr	r3, [r7, #16]
 80430c6:	43db      	mvns	r3, r3
 80430c8:	69ba      	ldr	r2, [r7, #24]
 80430ca:	4013      	ands	r3, r2
 80430cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80430ce:	683b      	ldr	r3, [r7, #0]
 80430d0:	685b      	ldr	r3, [r3, #4]
 80430d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80430d6:	2b00      	cmp	r3, #0
 80430d8:	d003      	beq.n	80430e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80430da:	69ba      	ldr	r2, [r7, #24]
 80430dc:	693b      	ldr	r3, [r7, #16]
 80430de:	4313      	orrs	r3, r2
 80430e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80430e2:	4a32      	ldr	r2, [pc, #200]	@ (80431ac <HAL_GPIO_Init+0x334>)
 80430e4:	69bb      	ldr	r3, [r7, #24]
 80430e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80430e8:	4b30      	ldr	r3, [pc, #192]	@ (80431ac <HAL_GPIO_Init+0x334>)
 80430ea:	68db      	ldr	r3, [r3, #12]
 80430ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80430ee:	693b      	ldr	r3, [r7, #16]
 80430f0:	43db      	mvns	r3, r3
 80430f2:	69ba      	ldr	r2, [r7, #24]
 80430f4:	4013      	ands	r3, r2
 80430f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80430f8:	683b      	ldr	r3, [r7, #0]
 80430fa:	685b      	ldr	r3, [r3, #4]
 80430fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8043100:	2b00      	cmp	r3, #0
 8043102:	d003      	beq.n	804310c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8043104:	69ba      	ldr	r2, [r7, #24]
 8043106:	693b      	ldr	r3, [r7, #16]
 8043108:	4313      	orrs	r3, r2
 804310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 804310c:	4a27      	ldr	r2, [pc, #156]	@ (80431ac <HAL_GPIO_Init+0x334>)
 804310e:	69bb      	ldr	r3, [r7, #24]
 8043110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8043112:	4b26      	ldr	r3, [pc, #152]	@ (80431ac <HAL_GPIO_Init+0x334>)
 8043114:	685b      	ldr	r3, [r3, #4]
 8043116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043118:	693b      	ldr	r3, [r7, #16]
 804311a:	43db      	mvns	r3, r3
 804311c:	69ba      	ldr	r2, [r7, #24]
 804311e:	4013      	ands	r3, r2
 8043120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8043122:	683b      	ldr	r3, [r7, #0]
 8043124:	685b      	ldr	r3, [r3, #4]
 8043126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804312a:	2b00      	cmp	r3, #0
 804312c:	d003      	beq.n	8043136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 804312e:	69ba      	ldr	r2, [r7, #24]
 8043130:	693b      	ldr	r3, [r7, #16]
 8043132:	4313      	orrs	r3, r2
 8043134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8043136:	4a1d      	ldr	r2, [pc, #116]	@ (80431ac <HAL_GPIO_Init+0x334>)
 8043138:	69bb      	ldr	r3, [r7, #24]
 804313a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804313c:	4b1b      	ldr	r3, [pc, #108]	@ (80431ac <HAL_GPIO_Init+0x334>)
 804313e:	681b      	ldr	r3, [r3, #0]
 8043140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043142:	693b      	ldr	r3, [r7, #16]
 8043144:	43db      	mvns	r3, r3
 8043146:	69ba      	ldr	r2, [r7, #24]
 8043148:	4013      	ands	r3, r2
 804314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804314c:	683b      	ldr	r3, [r7, #0]
 804314e:	685b      	ldr	r3, [r3, #4]
 8043150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8043154:	2b00      	cmp	r3, #0
 8043156:	d003      	beq.n	8043160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8043158:	69ba      	ldr	r2, [r7, #24]
 804315a:	693b      	ldr	r3, [r7, #16]
 804315c:	4313      	orrs	r3, r2
 804315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8043160:	4a12      	ldr	r2, [pc, #72]	@ (80431ac <HAL_GPIO_Init+0x334>)
 8043162:	69bb      	ldr	r3, [r7, #24]
 8043164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043166:	69fb      	ldr	r3, [r7, #28]
 8043168:	3301      	adds	r3, #1
 804316a:	61fb      	str	r3, [r7, #28]
 804316c:	69fb      	ldr	r3, [r7, #28]
 804316e:	2b0f      	cmp	r3, #15
 8043170:	f67f ae90 	bls.w	8042e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8043174:	bf00      	nop
 8043176:	bf00      	nop
 8043178:	3724      	adds	r7, #36	@ 0x24
 804317a:	46bd      	mov	sp, r7
 804317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043180:	4770      	bx	lr
 8043182:	bf00      	nop
 8043184:	40023800 	.word	0x40023800
 8043188:	40013800 	.word	0x40013800
 804318c:	40020000 	.word	0x40020000
 8043190:	40020400 	.word	0x40020400
 8043194:	40020800 	.word	0x40020800
 8043198:	40020c00 	.word	0x40020c00
 804319c:	40021000 	.word	0x40021000
 80431a0:	40021400 	.word	0x40021400
 80431a4:	40021800 	.word	0x40021800
 80431a8:	40021c00 	.word	0x40021c00
 80431ac:	40013c00 	.word	0x40013c00

080431b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80431b0:	b480      	push	{r7}
 80431b2:	b085      	sub	sp, #20
 80431b4:	af00      	add	r7, sp, #0
 80431b6:	6078      	str	r0, [r7, #4]
 80431b8:	460b      	mov	r3, r1
 80431ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80431bc:	687b      	ldr	r3, [r7, #4]
 80431be:	691a      	ldr	r2, [r3, #16]
 80431c0:	887b      	ldrh	r3, [r7, #2]
 80431c2:	4013      	ands	r3, r2
 80431c4:	2b00      	cmp	r3, #0
 80431c6:	d002      	beq.n	80431ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80431c8:	2301      	movs	r3, #1
 80431ca:	73fb      	strb	r3, [r7, #15]
 80431cc:	e001      	b.n	80431d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80431ce:	2300      	movs	r3, #0
 80431d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80431d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80431d4:	4618      	mov	r0, r3
 80431d6:	3714      	adds	r7, #20
 80431d8:	46bd      	mov	sp, r7
 80431da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80431de:	4770      	bx	lr

080431e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80431e0:	b480      	push	{r7}
 80431e2:	b083      	sub	sp, #12
 80431e4:	af00      	add	r7, sp, #0
 80431e6:	6078      	str	r0, [r7, #4]
 80431e8:	460b      	mov	r3, r1
 80431ea:	807b      	strh	r3, [r7, #2]
 80431ec:	4613      	mov	r3, r2
 80431ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80431f0:	787b      	ldrb	r3, [r7, #1]
 80431f2:	2b00      	cmp	r3, #0
 80431f4:	d003      	beq.n	80431fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80431f6:	887a      	ldrh	r2, [r7, #2]
 80431f8:	687b      	ldr	r3, [r7, #4]
 80431fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80431fc:	e003      	b.n	8043206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80431fe:	887b      	ldrh	r3, [r7, #2]
 8043200:	041a      	lsls	r2, r3, #16
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	619a      	str	r2, [r3, #24]
}
 8043206:	bf00      	nop
 8043208:	370c      	adds	r7, #12
 804320a:	46bd      	mov	sp, r7
 804320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043210:	4770      	bx	lr

08043212 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8043212:	b480      	push	{r7}
 8043214:	b085      	sub	sp, #20
 8043216:	af00      	add	r7, sp, #0
 8043218:	6078      	str	r0, [r7, #4]
 804321a:	460b      	mov	r3, r1
 804321c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 804321e:	687b      	ldr	r3, [r7, #4]
 8043220:	695b      	ldr	r3, [r3, #20]
 8043222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8043224:	887a      	ldrh	r2, [r7, #2]
 8043226:	68fb      	ldr	r3, [r7, #12]
 8043228:	4013      	ands	r3, r2
 804322a:	041a      	lsls	r2, r3, #16
 804322c:	68fb      	ldr	r3, [r7, #12]
 804322e:	43d9      	mvns	r1, r3
 8043230:	887b      	ldrh	r3, [r7, #2]
 8043232:	400b      	ands	r3, r1
 8043234:	431a      	orrs	r2, r3
 8043236:	687b      	ldr	r3, [r7, #4]
 8043238:	619a      	str	r2, [r3, #24]
}
 804323a:	bf00      	nop
 804323c:	3714      	adds	r7, #20
 804323e:	46bd      	mov	sp, r7
 8043240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043244:	4770      	bx	lr
	...

08043248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8043248:	b580      	push	{r7, lr}
 804324a:	b084      	sub	sp, #16
 804324c:	af00      	add	r7, sp, #0
 804324e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8043250:	687b      	ldr	r3, [r7, #4]
 8043252:	2b00      	cmp	r3, #0
 8043254:	d101      	bne.n	804325a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8043256:	2301      	movs	r3, #1
 8043258:	e12b      	b.n	80434b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 804325a:	687b      	ldr	r3, [r7, #4]
 804325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8043260:	b2db      	uxtb	r3, r3
 8043262:	2b00      	cmp	r3, #0
 8043264:	d106      	bne.n	8043274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8043266:	687b      	ldr	r3, [r7, #4]
 8043268:	2200      	movs	r2, #0
 804326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 804326e:	6878      	ldr	r0, [r7, #4]
 8043270:	f7fe fd26 	bl	8041cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	2224      	movs	r2, #36	@ 0x24
 8043278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 804327c:	687b      	ldr	r3, [r7, #4]
 804327e:	681b      	ldr	r3, [r3, #0]
 8043280:	681a      	ldr	r2, [r3, #0]
 8043282:	687b      	ldr	r3, [r7, #4]
 8043284:	681b      	ldr	r3, [r3, #0]
 8043286:	f022 0201 	bic.w	r2, r2, #1
 804328a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 804328c:	687b      	ldr	r3, [r7, #4]
 804328e:	681b      	ldr	r3, [r3, #0]
 8043290:	681a      	ldr	r2, [r3, #0]
 8043292:	687b      	ldr	r3, [r7, #4]
 8043294:	681b      	ldr	r3, [r3, #0]
 8043296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 804329a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 804329c:	687b      	ldr	r3, [r7, #4]
 804329e:	681b      	ldr	r3, [r3, #0]
 80432a0:	681a      	ldr	r2, [r3, #0]
 80432a2:	687b      	ldr	r3, [r7, #4]
 80432a4:	681b      	ldr	r3, [r3, #0]
 80432a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80432aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80432ac:	f001 f8da 	bl	8044464 <HAL_RCC_GetPCLK1Freq>
 80432b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80432b2:	687b      	ldr	r3, [r7, #4]
 80432b4:	685b      	ldr	r3, [r3, #4]
 80432b6:	4a81      	ldr	r2, [pc, #516]	@ (80434bc <HAL_I2C_Init+0x274>)
 80432b8:	4293      	cmp	r3, r2
 80432ba:	d807      	bhi.n	80432cc <HAL_I2C_Init+0x84>
 80432bc:	68fb      	ldr	r3, [r7, #12]
 80432be:	4a80      	ldr	r2, [pc, #512]	@ (80434c0 <HAL_I2C_Init+0x278>)
 80432c0:	4293      	cmp	r3, r2
 80432c2:	bf94      	ite	ls
 80432c4:	2301      	movls	r3, #1
 80432c6:	2300      	movhi	r3, #0
 80432c8:	b2db      	uxtb	r3, r3
 80432ca:	e006      	b.n	80432da <HAL_I2C_Init+0x92>
 80432cc:	68fb      	ldr	r3, [r7, #12]
 80432ce:	4a7d      	ldr	r2, [pc, #500]	@ (80434c4 <HAL_I2C_Init+0x27c>)
 80432d0:	4293      	cmp	r3, r2
 80432d2:	bf94      	ite	ls
 80432d4:	2301      	movls	r3, #1
 80432d6:	2300      	movhi	r3, #0
 80432d8:	b2db      	uxtb	r3, r3
 80432da:	2b00      	cmp	r3, #0
 80432dc:	d001      	beq.n	80432e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80432de:	2301      	movs	r3, #1
 80432e0:	e0e7      	b.n	80434b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80432e2:	68fb      	ldr	r3, [r7, #12]
 80432e4:	4a78      	ldr	r2, [pc, #480]	@ (80434c8 <HAL_I2C_Init+0x280>)
 80432e6:	fba2 2303 	umull	r2, r3, r2, r3
 80432ea:	0c9b      	lsrs	r3, r3, #18
 80432ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80432ee:	687b      	ldr	r3, [r7, #4]
 80432f0:	681b      	ldr	r3, [r3, #0]
 80432f2:	685b      	ldr	r3, [r3, #4]
 80432f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80432f8:	687b      	ldr	r3, [r7, #4]
 80432fa:	681b      	ldr	r3, [r3, #0]
 80432fc:	68ba      	ldr	r2, [r7, #8]
 80432fe:	430a      	orrs	r2, r1
 8043300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8043302:	687b      	ldr	r3, [r7, #4]
 8043304:	681b      	ldr	r3, [r3, #0]
 8043306:	6a1b      	ldr	r3, [r3, #32]
 8043308:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 804330c:	687b      	ldr	r3, [r7, #4]
 804330e:	685b      	ldr	r3, [r3, #4]
 8043310:	4a6a      	ldr	r2, [pc, #424]	@ (80434bc <HAL_I2C_Init+0x274>)
 8043312:	4293      	cmp	r3, r2
 8043314:	d802      	bhi.n	804331c <HAL_I2C_Init+0xd4>
 8043316:	68bb      	ldr	r3, [r7, #8]
 8043318:	3301      	adds	r3, #1
 804331a:	e009      	b.n	8043330 <HAL_I2C_Init+0xe8>
 804331c:	68bb      	ldr	r3, [r7, #8]
 804331e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8043322:	fb02 f303 	mul.w	r3, r2, r3
 8043326:	4a69      	ldr	r2, [pc, #420]	@ (80434cc <HAL_I2C_Init+0x284>)
 8043328:	fba2 2303 	umull	r2, r3, r2, r3
 804332c:	099b      	lsrs	r3, r3, #6
 804332e:	3301      	adds	r3, #1
 8043330:	687a      	ldr	r2, [r7, #4]
 8043332:	6812      	ldr	r2, [r2, #0]
 8043334:	430b      	orrs	r3, r1
 8043336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	681b      	ldr	r3, [r3, #0]
 804333c:	69db      	ldr	r3, [r3, #28]
 804333e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8043342:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	685b      	ldr	r3, [r3, #4]
 804334a:	495c      	ldr	r1, [pc, #368]	@ (80434bc <HAL_I2C_Init+0x274>)
 804334c:	428b      	cmp	r3, r1
 804334e:	d819      	bhi.n	8043384 <HAL_I2C_Init+0x13c>
 8043350:	68fb      	ldr	r3, [r7, #12]
 8043352:	1e59      	subs	r1, r3, #1
 8043354:	687b      	ldr	r3, [r7, #4]
 8043356:	685b      	ldr	r3, [r3, #4]
 8043358:	005b      	lsls	r3, r3, #1
 804335a:	fbb1 f3f3 	udiv	r3, r1, r3
 804335e:	1c59      	adds	r1, r3, #1
 8043360:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8043364:	400b      	ands	r3, r1
 8043366:	2b00      	cmp	r3, #0
 8043368:	d00a      	beq.n	8043380 <HAL_I2C_Init+0x138>
 804336a:	68fb      	ldr	r3, [r7, #12]
 804336c:	1e59      	subs	r1, r3, #1
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	685b      	ldr	r3, [r3, #4]
 8043372:	005b      	lsls	r3, r3, #1
 8043374:	fbb1 f3f3 	udiv	r3, r1, r3
 8043378:	3301      	adds	r3, #1
 804337a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804337e:	e051      	b.n	8043424 <HAL_I2C_Init+0x1dc>
 8043380:	2304      	movs	r3, #4
 8043382:	e04f      	b.n	8043424 <HAL_I2C_Init+0x1dc>
 8043384:	687b      	ldr	r3, [r7, #4]
 8043386:	689b      	ldr	r3, [r3, #8]
 8043388:	2b00      	cmp	r3, #0
 804338a:	d111      	bne.n	80433b0 <HAL_I2C_Init+0x168>
 804338c:	68fb      	ldr	r3, [r7, #12]
 804338e:	1e58      	subs	r0, r3, #1
 8043390:	687b      	ldr	r3, [r7, #4]
 8043392:	6859      	ldr	r1, [r3, #4]
 8043394:	460b      	mov	r3, r1
 8043396:	005b      	lsls	r3, r3, #1
 8043398:	440b      	add	r3, r1
 804339a:	fbb0 f3f3 	udiv	r3, r0, r3
 804339e:	3301      	adds	r3, #1
 80433a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80433a4:	2b00      	cmp	r3, #0
 80433a6:	bf0c      	ite	eq
 80433a8:	2301      	moveq	r3, #1
 80433aa:	2300      	movne	r3, #0
 80433ac:	b2db      	uxtb	r3, r3
 80433ae:	e012      	b.n	80433d6 <HAL_I2C_Init+0x18e>
 80433b0:	68fb      	ldr	r3, [r7, #12]
 80433b2:	1e58      	subs	r0, r3, #1
 80433b4:	687b      	ldr	r3, [r7, #4]
 80433b6:	6859      	ldr	r1, [r3, #4]
 80433b8:	460b      	mov	r3, r1
 80433ba:	009b      	lsls	r3, r3, #2
 80433bc:	440b      	add	r3, r1
 80433be:	0099      	lsls	r1, r3, #2
 80433c0:	440b      	add	r3, r1
 80433c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80433c6:	3301      	adds	r3, #1
 80433c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80433cc:	2b00      	cmp	r3, #0
 80433ce:	bf0c      	ite	eq
 80433d0:	2301      	moveq	r3, #1
 80433d2:	2300      	movne	r3, #0
 80433d4:	b2db      	uxtb	r3, r3
 80433d6:	2b00      	cmp	r3, #0
 80433d8:	d001      	beq.n	80433de <HAL_I2C_Init+0x196>
 80433da:	2301      	movs	r3, #1
 80433dc:	e022      	b.n	8043424 <HAL_I2C_Init+0x1dc>
 80433de:	687b      	ldr	r3, [r7, #4]
 80433e0:	689b      	ldr	r3, [r3, #8]
 80433e2:	2b00      	cmp	r3, #0
 80433e4:	d10e      	bne.n	8043404 <HAL_I2C_Init+0x1bc>
 80433e6:	68fb      	ldr	r3, [r7, #12]
 80433e8:	1e58      	subs	r0, r3, #1
 80433ea:	687b      	ldr	r3, [r7, #4]
 80433ec:	6859      	ldr	r1, [r3, #4]
 80433ee:	460b      	mov	r3, r1
 80433f0:	005b      	lsls	r3, r3, #1
 80433f2:	440b      	add	r3, r1
 80433f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80433f8:	3301      	adds	r3, #1
 80433fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80433fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8043402:	e00f      	b.n	8043424 <HAL_I2C_Init+0x1dc>
 8043404:	68fb      	ldr	r3, [r7, #12]
 8043406:	1e58      	subs	r0, r3, #1
 8043408:	687b      	ldr	r3, [r7, #4]
 804340a:	6859      	ldr	r1, [r3, #4]
 804340c:	460b      	mov	r3, r1
 804340e:	009b      	lsls	r3, r3, #2
 8043410:	440b      	add	r3, r1
 8043412:	0099      	lsls	r1, r3, #2
 8043414:	440b      	add	r3, r1
 8043416:	fbb0 f3f3 	udiv	r3, r0, r3
 804341a:	3301      	adds	r3, #1
 804341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8043424:	6879      	ldr	r1, [r7, #4]
 8043426:	6809      	ldr	r1, [r1, #0]
 8043428:	4313      	orrs	r3, r2
 804342a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 804342c:	687b      	ldr	r3, [r7, #4]
 804342e:	681b      	ldr	r3, [r3, #0]
 8043430:	681b      	ldr	r3, [r3, #0]
 8043432:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	69da      	ldr	r2, [r3, #28]
 804343a:	687b      	ldr	r3, [r7, #4]
 804343c:	6a1b      	ldr	r3, [r3, #32]
 804343e:	431a      	orrs	r2, r3
 8043440:	687b      	ldr	r3, [r7, #4]
 8043442:	681b      	ldr	r3, [r3, #0]
 8043444:	430a      	orrs	r2, r1
 8043446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8043448:	687b      	ldr	r3, [r7, #4]
 804344a:	681b      	ldr	r3, [r3, #0]
 804344c:	689b      	ldr	r3, [r3, #8]
 804344e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8043452:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8043456:	687a      	ldr	r2, [r7, #4]
 8043458:	6911      	ldr	r1, [r2, #16]
 804345a:	687a      	ldr	r2, [r7, #4]
 804345c:	68d2      	ldr	r2, [r2, #12]
 804345e:	4311      	orrs	r1, r2
 8043460:	687a      	ldr	r2, [r7, #4]
 8043462:	6812      	ldr	r2, [r2, #0]
 8043464:	430b      	orrs	r3, r1
 8043466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8043468:	687b      	ldr	r3, [r7, #4]
 804346a:	681b      	ldr	r3, [r3, #0]
 804346c:	68db      	ldr	r3, [r3, #12]
 804346e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8043472:	687b      	ldr	r3, [r7, #4]
 8043474:	695a      	ldr	r2, [r3, #20]
 8043476:	687b      	ldr	r3, [r7, #4]
 8043478:	699b      	ldr	r3, [r3, #24]
 804347a:	431a      	orrs	r2, r3
 804347c:	687b      	ldr	r3, [r7, #4]
 804347e:	681b      	ldr	r3, [r3, #0]
 8043480:	430a      	orrs	r2, r1
 8043482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	681b      	ldr	r3, [r3, #0]
 8043488:	681a      	ldr	r2, [r3, #0]
 804348a:	687b      	ldr	r3, [r7, #4]
 804348c:	681b      	ldr	r3, [r3, #0]
 804348e:	f042 0201 	orr.w	r2, r2, #1
 8043492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8043494:	687b      	ldr	r3, [r7, #4]
 8043496:	2200      	movs	r2, #0
 8043498:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 804349a:	687b      	ldr	r3, [r7, #4]
 804349c:	2220      	movs	r2, #32
 804349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80434a2:	687b      	ldr	r3, [r7, #4]
 80434a4:	2200      	movs	r2, #0
 80434a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80434a8:	687b      	ldr	r3, [r7, #4]
 80434aa:	2200      	movs	r2, #0
 80434ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80434b0:	2300      	movs	r3, #0
}
 80434b2:	4618      	mov	r0, r3
 80434b4:	3710      	adds	r7, #16
 80434b6:	46bd      	mov	sp, r7
 80434b8:	bd80      	pop	{r7, pc}
 80434ba:	bf00      	nop
 80434bc:	000186a0 	.word	0x000186a0
 80434c0:	001e847f 	.word	0x001e847f
 80434c4:	003d08ff 	.word	0x003d08ff
 80434c8:	431bde83 	.word	0x431bde83
 80434cc:	10624dd3 	.word	0x10624dd3

080434d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80434d0:	b580      	push	{r7, lr}
 80434d2:	b088      	sub	sp, #32
 80434d4:	af02      	add	r7, sp, #8
 80434d6:	60f8      	str	r0, [r7, #12]
 80434d8:	607a      	str	r2, [r7, #4]
 80434da:	461a      	mov	r2, r3
 80434dc:	460b      	mov	r3, r1
 80434de:	817b      	strh	r3, [r7, #10]
 80434e0:	4613      	mov	r3, r2
 80434e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80434e4:	f7ff f806 	bl	80424f4 <HAL_GetTick>
 80434e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80434ea:	68fb      	ldr	r3, [r7, #12]
 80434ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80434f0:	b2db      	uxtb	r3, r3
 80434f2:	2b20      	cmp	r3, #32
 80434f4:	f040 80e0 	bne.w	80436b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80434f8:	697b      	ldr	r3, [r7, #20]
 80434fa:	9300      	str	r3, [sp, #0]
 80434fc:	2319      	movs	r3, #25
 80434fe:	2201      	movs	r2, #1
 8043500:	4970      	ldr	r1, [pc, #448]	@ (80436c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8043502:	68f8      	ldr	r0, [r7, #12]
 8043504:	f000 f964 	bl	80437d0 <I2C_WaitOnFlagUntilTimeout>
 8043508:	4603      	mov	r3, r0
 804350a:	2b00      	cmp	r3, #0
 804350c:	d001      	beq.n	8043512 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 804350e:	2302      	movs	r3, #2
 8043510:	e0d3      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8043512:	68fb      	ldr	r3, [r7, #12]
 8043514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8043518:	2b01      	cmp	r3, #1
 804351a:	d101      	bne.n	8043520 <HAL_I2C_Master_Transmit+0x50>
 804351c:	2302      	movs	r3, #2
 804351e:	e0cc      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
 8043520:	68fb      	ldr	r3, [r7, #12]
 8043522:	2201      	movs	r2, #1
 8043524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8043528:	68fb      	ldr	r3, [r7, #12]
 804352a:	681b      	ldr	r3, [r3, #0]
 804352c:	681b      	ldr	r3, [r3, #0]
 804352e:	f003 0301 	and.w	r3, r3, #1
 8043532:	2b01      	cmp	r3, #1
 8043534:	d007      	beq.n	8043546 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8043536:	68fb      	ldr	r3, [r7, #12]
 8043538:	681b      	ldr	r3, [r3, #0]
 804353a:	681a      	ldr	r2, [r3, #0]
 804353c:	68fb      	ldr	r3, [r7, #12]
 804353e:	681b      	ldr	r3, [r3, #0]
 8043540:	f042 0201 	orr.w	r2, r2, #1
 8043544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8043546:	68fb      	ldr	r3, [r7, #12]
 8043548:	681b      	ldr	r3, [r3, #0]
 804354a:	681a      	ldr	r2, [r3, #0]
 804354c:	68fb      	ldr	r3, [r7, #12]
 804354e:	681b      	ldr	r3, [r3, #0]
 8043550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8043554:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8043556:	68fb      	ldr	r3, [r7, #12]
 8043558:	2221      	movs	r2, #33	@ 0x21
 804355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 804355e:	68fb      	ldr	r3, [r7, #12]
 8043560:	2210      	movs	r2, #16
 8043562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8043566:	68fb      	ldr	r3, [r7, #12]
 8043568:	2200      	movs	r2, #0
 804356a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 804356c:	68fb      	ldr	r3, [r7, #12]
 804356e:	687a      	ldr	r2, [r7, #4]
 8043570:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8043572:	68fb      	ldr	r3, [r7, #12]
 8043574:	893a      	ldrh	r2, [r7, #8]
 8043576:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8043578:	68fb      	ldr	r3, [r7, #12]
 804357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 804357c:	b29a      	uxth	r2, r3
 804357e:	68fb      	ldr	r3, [r7, #12]
 8043580:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8043582:	68fb      	ldr	r3, [r7, #12]
 8043584:	4a50      	ldr	r2, [pc, #320]	@ (80436c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8043586:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8043588:	8979      	ldrh	r1, [r7, #10]
 804358a:	697b      	ldr	r3, [r7, #20]
 804358c:	6a3a      	ldr	r2, [r7, #32]
 804358e:	68f8      	ldr	r0, [r7, #12]
 8043590:	f000 f89c 	bl	80436cc <I2C_MasterRequestWrite>
 8043594:	4603      	mov	r3, r0
 8043596:	2b00      	cmp	r3, #0
 8043598:	d001      	beq.n	804359e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 804359a:	2301      	movs	r3, #1
 804359c:	e08d      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804359e:	2300      	movs	r3, #0
 80435a0:	613b      	str	r3, [r7, #16]
 80435a2:	68fb      	ldr	r3, [r7, #12]
 80435a4:	681b      	ldr	r3, [r3, #0]
 80435a6:	695b      	ldr	r3, [r3, #20]
 80435a8:	613b      	str	r3, [r7, #16]
 80435aa:	68fb      	ldr	r3, [r7, #12]
 80435ac:	681b      	ldr	r3, [r3, #0]
 80435ae:	699b      	ldr	r3, [r3, #24]
 80435b0:	613b      	str	r3, [r7, #16]
 80435b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80435b4:	e066      	b.n	8043684 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80435b6:	697a      	ldr	r2, [r7, #20]
 80435b8:	6a39      	ldr	r1, [r7, #32]
 80435ba:	68f8      	ldr	r0, [r7, #12]
 80435bc:	f000 fa22 	bl	8043a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80435c0:	4603      	mov	r3, r0
 80435c2:	2b00      	cmp	r3, #0
 80435c4:	d00d      	beq.n	80435e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80435c6:	68fb      	ldr	r3, [r7, #12]
 80435c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80435ca:	2b04      	cmp	r3, #4
 80435cc:	d107      	bne.n	80435de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80435ce:	68fb      	ldr	r3, [r7, #12]
 80435d0:	681b      	ldr	r3, [r3, #0]
 80435d2:	681a      	ldr	r2, [r3, #0]
 80435d4:	68fb      	ldr	r3, [r7, #12]
 80435d6:	681b      	ldr	r3, [r3, #0]
 80435d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80435dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80435de:	2301      	movs	r3, #1
 80435e0:	e06b      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80435e2:	68fb      	ldr	r3, [r7, #12]
 80435e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80435e6:	781a      	ldrb	r2, [r3, #0]
 80435e8:	68fb      	ldr	r3, [r7, #12]
 80435ea:	681b      	ldr	r3, [r3, #0]
 80435ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80435ee:	68fb      	ldr	r3, [r7, #12]
 80435f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80435f2:	1c5a      	adds	r2, r3, #1
 80435f4:	68fb      	ldr	r3, [r7, #12]
 80435f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80435f8:	68fb      	ldr	r3, [r7, #12]
 80435fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80435fc:	b29b      	uxth	r3, r3
 80435fe:	3b01      	subs	r3, #1
 8043600:	b29a      	uxth	r2, r3
 8043602:	68fb      	ldr	r3, [r7, #12]
 8043604:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8043606:	68fb      	ldr	r3, [r7, #12]
 8043608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 804360a:	3b01      	subs	r3, #1
 804360c:	b29a      	uxth	r2, r3
 804360e:	68fb      	ldr	r3, [r7, #12]
 8043610:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8043612:	68fb      	ldr	r3, [r7, #12]
 8043614:	681b      	ldr	r3, [r3, #0]
 8043616:	695b      	ldr	r3, [r3, #20]
 8043618:	f003 0304 	and.w	r3, r3, #4
 804361c:	2b04      	cmp	r3, #4
 804361e:	d11b      	bne.n	8043658 <HAL_I2C_Master_Transmit+0x188>
 8043620:	68fb      	ldr	r3, [r7, #12]
 8043622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8043624:	2b00      	cmp	r3, #0
 8043626:	d017      	beq.n	8043658 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8043628:	68fb      	ldr	r3, [r7, #12]
 804362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804362c:	781a      	ldrb	r2, [r3, #0]
 804362e:	68fb      	ldr	r3, [r7, #12]
 8043630:	681b      	ldr	r3, [r3, #0]
 8043632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8043634:	68fb      	ldr	r3, [r7, #12]
 8043636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043638:	1c5a      	adds	r2, r3, #1
 804363a:	68fb      	ldr	r3, [r7, #12]
 804363c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 804363e:	68fb      	ldr	r3, [r7, #12]
 8043640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8043642:	b29b      	uxth	r3, r3
 8043644:	3b01      	subs	r3, #1
 8043646:	b29a      	uxth	r2, r3
 8043648:	68fb      	ldr	r3, [r7, #12]
 804364a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 804364c:	68fb      	ldr	r3, [r7, #12]
 804364e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8043650:	3b01      	subs	r3, #1
 8043652:	b29a      	uxth	r2, r3
 8043654:	68fb      	ldr	r3, [r7, #12]
 8043656:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8043658:	697a      	ldr	r2, [r7, #20]
 804365a:	6a39      	ldr	r1, [r7, #32]
 804365c:	68f8      	ldr	r0, [r7, #12]
 804365e:	f000 fa19 	bl	8043a94 <I2C_WaitOnBTFFlagUntilTimeout>
 8043662:	4603      	mov	r3, r0
 8043664:	2b00      	cmp	r3, #0
 8043666:	d00d      	beq.n	8043684 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8043668:	68fb      	ldr	r3, [r7, #12]
 804366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804366c:	2b04      	cmp	r3, #4
 804366e:	d107      	bne.n	8043680 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043670:	68fb      	ldr	r3, [r7, #12]
 8043672:	681b      	ldr	r3, [r3, #0]
 8043674:	681a      	ldr	r2, [r3, #0]
 8043676:	68fb      	ldr	r3, [r7, #12]
 8043678:	681b      	ldr	r3, [r3, #0]
 804367a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 804367e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8043680:	2301      	movs	r3, #1
 8043682:	e01a      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8043684:	68fb      	ldr	r3, [r7, #12]
 8043686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8043688:	2b00      	cmp	r3, #0
 804368a:	d194      	bne.n	80435b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804368c:	68fb      	ldr	r3, [r7, #12]
 804368e:	681b      	ldr	r3, [r3, #0]
 8043690:	681a      	ldr	r2, [r3, #0]
 8043692:	68fb      	ldr	r3, [r7, #12]
 8043694:	681b      	ldr	r3, [r3, #0]
 8043696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 804369a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804369c:	68fb      	ldr	r3, [r7, #12]
 804369e:	2220      	movs	r2, #32
 80436a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80436a4:	68fb      	ldr	r3, [r7, #12]
 80436a6:	2200      	movs	r2, #0
 80436a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80436ac:	68fb      	ldr	r3, [r7, #12]
 80436ae:	2200      	movs	r2, #0
 80436b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80436b4:	2300      	movs	r3, #0
 80436b6:	e000      	b.n	80436ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80436b8:	2302      	movs	r3, #2
  }
}
 80436ba:	4618      	mov	r0, r3
 80436bc:	3718      	adds	r7, #24
 80436be:	46bd      	mov	sp, r7
 80436c0:	bd80      	pop	{r7, pc}
 80436c2:	bf00      	nop
 80436c4:	00100002 	.word	0x00100002
 80436c8:	ffff0000 	.word	0xffff0000

080436cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80436cc:	b580      	push	{r7, lr}
 80436ce:	b088      	sub	sp, #32
 80436d0:	af02      	add	r7, sp, #8
 80436d2:	60f8      	str	r0, [r7, #12]
 80436d4:	607a      	str	r2, [r7, #4]
 80436d6:	603b      	str	r3, [r7, #0]
 80436d8:	460b      	mov	r3, r1
 80436da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80436dc:	68fb      	ldr	r3, [r7, #12]
 80436de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80436e2:	697b      	ldr	r3, [r7, #20]
 80436e4:	2b08      	cmp	r3, #8
 80436e6:	d006      	beq.n	80436f6 <I2C_MasterRequestWrite+0x2a>
 80436e8:	697b      	ldr	r3, [r7, #20]
 80436ea:	2b01      	cmp	r3, #1
 80436ec:	d003      	beq.n	80436f6 <I2C_MasterRequestWrite+0x2a>
 80436ee:	697b      	ldr	r3, [r7, #20]
 80436f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80436f4:	d108      	bne.n	8043708 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80436f6:	68fb      	ldr	r3, [r7, #12]
 80436f8:	681b      	ldr	r3, [r3, #0]
 80436fa:	681a      	ldr	r2, [r3, #0]
 80436fc:	68fb      	ldr	r3, [r7, #12]
 80436fe:	681b      	ldr	r3, [r3, #0]
 8043700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8043704:	601a      	str	r2, [r3, #0]
 8043706:	e00b      	b.n	8043720 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8043708:	68fb      	ldr	r3, [r7, #12]
 804370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804370c:	2b12      	cmp	r3, #18
 804370e:	d107      	bne.n	8043720 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8043710:	68fb      	ldr	r3, [r7, #12]
 8043712:	681b      	ldr	r3, [r3, #0]
 8043714:	681a      	ldr	r2, [r3, #0]
 8043716:	68fb      	ldr	r3, [r7, #12]
 8043718:	681b      	ldr	r3, [r3, #0]
 804371a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 804371e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8043720:	683b      	ldr	r3, [r7, #0]
 8043722:	9300      	str	r3, [sp, #0]
 8043724:	687b      	ldr	r3, [r7, #4]
 8043726:	2200      	movs	r2, #0
 8043728:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 804372c:	68f8      	ldr	r0, [r7, #12]
 804372e:	f000 f84f 	bl	80437d0 <I2C_WaitOnFlagUntilTimeout>
 8043732:	4603      	mov	r3, r0
 8043734:	2b00      	cmp	r3, #0
 8043736:	d00d      	beq.n	8043754 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8043738:	68fb      	ldr	r3, [r7, #12]
 804373a:	681b      	ldr	r3, [r3, #0]
 804373c:	681b      	ldr	r3, [r3, #0]
 804373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8043746:	d103      	bne.n	8043750 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8043748:	68fb      	ldr	r3, [r7, #12]
 804374a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 804374e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8043750:	2303      	movs	r3, #3
 8043752:	e035      	b.n	80437c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8043754:	68fb      	ldr	r3, [r7, #12]
 8043756:	691b      	ldr	r3, [r3, #16]
 8043758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804375c:	d108      	bne.n	8043770 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 804375e:	897b      	ldrh	r3, [r7, #10]
 8043760:	b2db      	uxtb	r3, r3
 8043762:	461a      	mov	r2, r3
 8043764:	68fb      	ldr	r3, [r7, #12]
 8043766:	681b      	ldr	r3, [r3, #0]
 8043768:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 804376c:	611a      	str	r2, [r3, #16]
 804376e:	e01b      	b.n	80437a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8043770:	897b      	ldrh	r3, [r7, #10]
 8043772:	11db      	asrs	r3, r3, #7
 8043774:	b2db      	uxtb	r3, r3
 8043776:	f003 0306 	and.w	r3, r3, #6
 804377a:	b2db      	uxtb	r3, r3
 804377c:	f063 030f 	orn	r3, r3, #15
 8043780:	b2da      	uxtb	r2, r3
 8043782:	68fb      	ldr	r3, [r7, #12]
 8043784:	681b      	ldr	r3, [r3, #0]
 8043786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8043788:	683b      	ldr	r3, [r7, #0]
 804378a:	687a      	ldr	r2, [r7, #4]
 804378c:	490e      	ldr	r1, [pc, #56]	@ (80437c8 <I2C_MasterRequestWrite+0xfc>)
 804378e:	68f8      	ldr	r0, [r7, #12]
 8043790:	f000 f898 	bl	80438c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043794:	4603      	mov	r3, r0
 8043796:	2b00      	cmp	r3, #0
 8043798:	d001      	beq.n	804379e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 804379a:	2301      	movs	r3, #1
 804379c:	e010      	b.n	80437c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 804379e:	897b      	ldrh	r3, [r7, #10]
 80437a0:	b2da      	uxtb	r2, r3
 80437a2:	68fb      	ldr	r3, [r7, #12]
 80437a4:	681b      	ldr	r3, [r3, #0]
 80437a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80437a8:	683b      	ldr	r3, [r7, #0]
 80437aa:	687a      	ldr	r2, [r7, #4]
 80437ac:	4907      	ldr	r1, [pc, #28]	@ (80437cc <I2C_MasterRequestWrite+0x100>)
 80437ae:	68f8      	ldr	r0, [r7, #12]
 80437b0:	f000 f888 	bl	80438c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80437b4:	4603      	mov	r3, r0
 80437b6:	2b00      	cmp	r3, #0
 80437b8:	d001      	beq.n	80437be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80437ba:	2301      	movs	r3, #1
 80437bc:	e000      	b.n	80437c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80437be:	2300      	movs	r3, #0
}
 80437c0:	4618      	mov	r0, r3
 80437c2:	3718      	adds	r7, #24
 80437c4:	46bd      	mov	sp, r7
 80437c6:	bd80      	pop	{r7, pc}
 80437c8:	00010008 	.word	0x00010008
 80437cc:	00010002 	.word	0x00010002

080437d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80437d0:	b580      	push	{r7, lr}
 80437d2:	b084      	sub	sp, #16
 80437d4:	af00      	add	r7, sp, #0
 80437d6:	60f8      	str	r0, [r7, #12]
 80437d8:	60b9      	str	r1, [r7, #8]
 80437da:	603b      	str	r3, [r7, #0]
 80437dc:	4613      	mov	r3, r2
 80437de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80437e0:	e048      	b.n	8043874 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80437e2:	683b      	ldr	r3, [r7, #0]
 80437e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80437e8:	d044      	beq.n	8043874 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80437ea:	f7fe fe83 	bl	80424f4 <HAL_GetTick>
 80437ee:	4602      	mov	r2, r0
 80437f0:	69bb      	ldr	r3, [r7, #24]
 80437f2:	1ad3      	subs	r3, r2, r3
 80437f4:	683a      	ldr	r2, [r7, #0]
 80437f6:	429a      	cmp	r2, r3
 80437f8:	d302      	bcc.n	8043800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80437fa:	683b      	ldr	r3, [r7, #0]
 80437fc:	2b00      	cmp	r3, #0
 80437fe:	d139      	bne.n	8043874 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8043800:	68bb      	ldr	r3, [r7, #8]
 8043802:	0c1b      	lsrs	r3, r3, #16
 8043804:	b2db      	uxtb	r3, r3
 8043806:	2b01      	cmp	r3, #1
 8043808:	d10d      	bne.n	8043826 <I2C_WaitOnFlagUntilTimeout+0x56>
 804380a:	68fb      	ldr	r3, [r7, #12]
 804380c:	681b      	ldr	r3, [r3, #0]
 804380e:	695b      	ldr	r3, [r3, #20]
 8043810:	43da      	mvns	r2, r3
 8043812:	68bb      	ldr	r3, [r7, #8]
 8043814:	4013      	ands	r3, r2
 8043816:	b29b      	uxth	r3, r3
 8043818:	2b00      	cmp	r3, #0
 804381a:	bf0c      	ite	eq
 804381c:	2301      	moveq	r3, #1
 804381e:	2300      	movne	r3, #0
 8043820:	b2db      	uxtb	r3, r3
 8043822:	461a      	mov	r2, r3
 8043824:	e00c      	b.n	8043840 <I2C_WaitOnFlagUntilTimeout+0x70>
 8043826:	68fb      	ldr	r3, [r7, #12]
 8043828:	681b      	ldr	r3, [r3, #0]
 804382a:	699b      	ldr	r3, [r3, #24]
 804382c:	43da      	mvns	r2, r3
 804382e:	68bb      	ldr	r3, [r7, #8]
 8043830:	4013      	ands	r3, r2
 8043832:	b29b      	uxth	r3, r3
 8043834:	2b00      	cmp	r3, #0
 8043836:	bf0c      	ite	eq
 8043838:	2301      	moveq	r3, #1
 804383a:	2300      	movne	r3, #0
 804383c:	b2db      	uxtb	r3, r3
 804383e:	461a      	mov	r2, r3
 8043840:	79fb      	ldrb	r3, [r7, #7]
 8043842:	429a      	cmp	r2, r3
 8043844:	d116      	bne.n	8043874 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8043846:	68fb      	ldr	r3, [r7, #12]
 8043848:	2200      	movs	r2, #0
 804384a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 804384c:	68fb      	ldr	r3, [r7, #12]
 804384e:	2220      	movs	r2, #32
 8043850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8043854:	68fb      	ldr	r3, [r7, #12]
 8043856:	2200      	movs	r2, #0
 8043858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 804385c:	68fb      	ldr	r3, [r7, #12]
 804385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043860:	f043 0220 	orr.w	r2, r3, #32
 8043864:	68fb      	ldr	r3, [r7, #12]
 8043866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8043868:	68fb      	ldr	r3, [r7, #12]
 804386a:	2200      	movs	r2, #0
 804386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8043870:	2301      	movs	r3, #1
 8043872:	e023      	b.n	80438bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8043874:	68bb      	ldr	r3, [r7, #8]
 8043876:	0c1b      	lsrs	r3, r3, #16
 8043878:	b2db      	uxtb	r3, r3
 804387a:	2b01      	cmp	r3, #1
 804387c:	d10d      	bne.n	804389a <I2C_WaitOnFlagUntilTimeout+0xca>
 804387e:	68fb      	ldr	r3, [r7, #12]
 8043880:	681b      	ldr	r3, [r3, #0]
 8043882:	695b      	ldr	r3, [r3, #20]
 8043884:	43da      	mvns	r2, r3
 8043886:	68bb      	ldr	r3, [r7, #8]
 8043888:	4013      	ands	r3, r2
 804388a:	b29b      	uxth	r3, r3
 804388c:	2b00      	cmp	r3, #0
 804388e:	bf0c      	ite	eq
 8043890:	2301      	moveq	r3, #1
 8043892:	2300      	movne	r3, #0
 8043894:	b2db      	uxtb	r3, r3
 8043896:	461a      	mov	r2, r3
 8043898:	e00c      	b.n	80438b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 804389a:	68fb      	ldr	r3, [r7, #12]
 804389c:	681b      	ldr	r3, [r3, #0]
 804389e:	699b      	ldr	r3, [r3, #24]
 80438a0:	43da      	mvns	r2, r3
 80438a2:	68bb      	ldr	r3, [r7, #8]
 80438a4:	4013      	ands	r3, r2
 80438a6:	b29b      	uxth	r3, r3
 80438a8:	2b00      	cmp	r3, #0
 80438aa:	bf0c      	ite	eq
 80438ac:	2301      	moveq	r3, #1
 80438ae:	2300      	movne	r3, #0
 80438b0:	b2db      	uxtb	r3, r3
 80438b2:	461a      	mov	r2, r3
 80438b4:	79fb      	ldrb	r3, [r7, #7]
 80438b6:	429a      	cmp	r2, r3
 80438b8:	d093      	beq.n	80437e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80438ba:	2300      	movs	r3, #0
}
 80438bc:	4618      	mov	r0, r3
 80438be:	3710      	adds	r7, #16
 80438c0:	46bd      	mov	sp, r7
 80438c2:	bd80      	pop	{r7, pc}

080438c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80438c4:	b580      	push	{r7, lr}
 80438c6:	b084      	sub	sp, #16
 80438c8:	af00      	add	r7, sp, #0
 80438ca:	60f8      	str	r0, [r7, #12]
 80438cc:	60b9      	str	r1, [r7, #8]
 80438ce:	607a      	str	r2, [r7, #4]
 80438d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80438d2:	e071      	b.n	80439b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80438d4:	68fb      	ldr	r3, [r7, #12]
 80438d6:	681b      	ldr	r3, [r3, #0]
 80438d8:	695b      	ldr	r3, [r3, #20]
 80438da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80438de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80438e2:	d123      	bne.n	804392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80438e4:	68fb      	ldr	r3, [r7, #12]
 80438e6:	681b      	ldr	r3, [r3, #0]
 80438e8:	681a      	ldr	r2, [r3, #0]
 80438ea:	68fb      	ldr	r3, [r7, #12]
 80438ec:	681b      	ldr	r3, [r3, #0]
 80438ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80438f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80438f4:	68fb      	ldr	r3, [r7, #12]
 80438f6:	681b      	ldr	r3, [r3, #0]
 80438f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80438fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80438fe:	68fb      	ldr	r3, [r7, #12]
 8043900:	2200      	movs	r2, #0
 8043902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8043904:	68fb      	ldr	r3, [r7, #12]
 8043906:	2220      	movs	r2, #32
 8043908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 804390c:	68fb      	ldr	r3, [r7, #12]
 804390e:	2200      	movs	r2, #0
 8043910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8043914:	68fb      	ldr	r3, [r7, #12]
 8043916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043918:	f043 0204 	orr.w	r2, r3, #4
 804391c:	68fb      	ldr	r3, [r7, #12]
 804391e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8043920:	68fb      	ldr	r3, [r7, #12]
 8043922:	2200      	movs	r2, #0
 8043924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8043928:	2301      	movs	r3, #1
 804392a:	e067      	b.n	80439fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804392c:	687b      	ldr	r3, [r7, #4]
 804392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043932:	d041      	beq.n	80439b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043934:	f7fe fdde 	bl	80424f4 <HAL_GetTick>
 8043938:	4602      	mov	r2, r0
 804393a:	683b      	ldr	r3, [r7, #0]
 804393c:	1ad3      	subs	r3, r2, r3
 804393e:	687a      	ldr	r2, [r7, #4]
 8043940:	429a      	cmp	r2, r3
 8043942:	d302      	bcc.n	804394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8043944:	687b      	ldr	r3, [r7, #4]
 8043946:	2b00      	cmp	r3, #0
 8043948:	d136      	bne.n	80439b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 804394a:	68bb      	ldr	r3, [r7, #8]
 804394c:	0c1b      	lsrs	r3, r3, #16
 804394e:	b2db      	uxtb	r3, r3
 8043950:	2b01      	cmp	r3, #1
 8043952:	d10c      	bne.n	804396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8043954:	68fb      	ldr	r3, [r7, #12]
 8043956:	681b      	ldr	r3, [r3, #0]
 8043958:	695b      	ldr	r3, [r3, #20]
 804395a:	43da      	mvns	r2, r3
 804395c:	68bb      	ldr	r3, [r7, #8]
 804395e:	4013      	ands	r3, r2
 8043960:	b29b      	uxth	r3, r3
 8043962:	2b00      	cmp	r3, #0
 8043964:	bf14      	ite	ne
 8043966:	2301      	movne	r3, #1
 8043968:	2300      	moveq	r3, #0
 804396a:	b2db      	uxtb	r3, r3
 804396c:	e00b      	b.n	8043986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 804396e:	68fb      	ldr	r3, [r7, #12]
 8043970:	681b      	ldr	r3, [r3, #0]
 8043972:	699b      	ldr	r3, [r3, #24]
 8043974:	43da      	mvns	r2, r3
 8043976:	68bb      	ldr	r3, [r7, #8]
 8043978:	4013      	ands	r3, r2
 804397a:	b29b      	uxth	r3, r3
 804397c:	2b00      	cmp	r3, #0
 804397e:	bf14      	ite	ne
 8043980:	2301      	movne	r3, #1
 8043982:	2300      	moveq	r3, #0
 8043984:	b2db      	uxtb	r3, r3
 8043986:	2b00      	cmp	r3, #0
 8043988:	d016      	beq.n	80439b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 804398a:	68fb      	ldr	r3, [r7, #12]
 804398c:	2200      	movs	r2, #0
 804398e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8043990:	68fb      	ldr	r3, [r7, #12]
 8043992:	2220      	movs	r2, #32
 8043994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043998:	68fb      	ldr	r3, [r7, #12]
 804399a:	2200      	movs	r2, #0
 804399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80439a0:	68fb      	ldr	r3, [r7, #12]
 80439a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80439a4:	f043 0220 	orr.w	r2, r3, #32
 80439a8:	68fb      	ldr	r3, [r7, #12]
 80439aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80439ac:	68fb      	ldr	r3, [r7, #12]
 80439ae:	2200      	movs	r2, #0
 80439b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80439b4:	2301      	movs	r3, #1
 80439b6:	e021      	b.n	80439fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80439b8:	68bb      	ldr	r3, [r7, #8]
 80439ba:	0c1b      	lsrs	r3, r3, #16
 80439bc:	b2db      	uxtb	r3, r3
 80439be:	2b01      	cmp	r3, #1
 80439c0:	d10c      	bne.n	80439dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80439c2:	68fb      	ldr	r3, [r7, #12]
 80439c4:	681b      	ldr	r3, [r3, #0]
 80439c6:	695b      	ldr	r3, [r3, #20]
 80439c8:	43da      	mvns	r2, r3
 80439ca:	68bb      	ldr	r3, [r7, #8]
 80439cc:	4013      	ands	r3, r2
 80439ce:	b29b      	uxth	r3, r3
 80439d0:	2b00      	cmp	r3, #0
 80439d2:	bf14      	ite	ne
 80439d4:	2301      	movne	r3, #1
 80439d6:	2300      	moveq	r3, #0
 80439d8:	b2db      	uxtb	r3, r3
 80439da:	e00b      	b.n	80439f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80439dc:	68fb      	ldr	r3, [r7, #12]
 80439de:	681b      	ldr	r3, [r3, #0]
 80439e0:	699b      	ldr	r3, [r3, #24]
 80439e2:	43da      	mvns	r2, r3
 80439e4:	68bb      	ldr	r3, [r7, #8]
 80439e6:	4013      	ands	r3, r2
 80439e8:	b29b      	uxth	r3, r3
 80439ea:	2b00      	cmp	r3, #0
 80439ec:	bf14      	ite	ne
 80439ee:	2301      	movne	r3, #1
 80439f0:	2300      	moveq	r3, #0
 80439f2:	b2db      	uxtb	r3, r3
 80439f4:	2b00      	cmp	r3, #0
 80439f6:	f47f af6d 	bne.w	80438d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80439fa:	2300      	movs	r3, #0
}
 80439fc:	4618      	mov	r0, r3
 80439fe:	3710      	adds	r7, #16
 8043a00:	46bd      	mov	sp, r7
 8043a02:	bd80      	pop	{r7, pc}

08043a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8043a04:	b580      	push	{r7, lr}
 8043a06:	b084      	sub	sp, #16
 8043a08:	af00      	add	r7, sp, #0
 8043a0a:	60f8      	str	r0, [r7, #12]
 8043a0c:	60b9      	str	r1, [r7, #8]
 8043a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8043a10:	e034      	b.n	8043a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8043a12:	68f8      	ldr	r0, [r7, #12]
 8043a14:	f000 f886 	bl	8043b24 <I2C_IsAcknowledgeFailed>
 8043a18:	4603      	mov	r3, r0
 8043a1a:	2b00      	cmp	r3, #0
 8043a1c:	d001      	beq.n	8043a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8043a1e:	2301      	movs	r3, #1
 8043a20:	e034      	b.n	8043a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043a22:	68bb      	ldr	r3, [r7, #8]
 8043a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043a28:	d028      	beq.n	8043a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043a2a:	f7fe fd63 	bl	80424f4 <HAL_GetTick>
 8043a2e:	4602      	mov	r2, r0
 8043a30:	687b      	ldr	r3, [r7, #4]
 8043a32:	1ad3      	subs	r3, r2, r3
 8043a34:	68ba      	ldr	r2, [r7, #8]
 8043a36:	429a      	cmp	r2, r3
 8043a38:	d302      	bcc.n	8043a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8043a3a:	68bb      	ldr	r3, [r7, #8]
 8043a3c:	2b00      	cmp	r3, #0
 8043a3e:	d11d      	bne.n	8043a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8043a40:	68fb      	ldr	r3, [r7, #12]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	695b      	ldr	r3, [r3, #20]
 8043a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8043a4a:	2b80      	cmp	r3, #128	@ 0x80
 8043a4c:	d016      	beq.n	8043a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8043a4e:	68fb      	ldr	r3, [r7, #12]
 8043a50:	2200      	movs	r2, #0
 8043a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8043a54:	68fb      	ldr	r3, [r7, #12]
 8043a56:	2220      	movs	r2, #32
 8043a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043a5c:	68fb      	ldr	r3, [r7, #12]
 8043a5e:	2200      	movs	r2, #0
 8043a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043a64:	68fb      	ldr	r3, [r7, #12]
 8043a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043a68:	f043 0220 	orr.w	r2, r3, #32
 8043a6c:	68fb      	ldr	r3, [r7, #12]
 8043a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8043a70:	68fb      	ldr	r3, [r7, #12]
 8043a72:	2200      	movs	r2, #0
 8043a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8043a78:	2301      	movs	r3, #1
 8043a7a:	e007      	b.n	8043a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8043a7c:	68fb      	ldr	r3, [r7, #12]
 8043a7e:	681b      	ldr	r3, [r3, #0]
 8043a80:	695b      	ldr	r3, [r3, #20]
 8043a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8043a86:	2b80      	cmp	r3, #128	@ 0x80
 8043a88:	d1c3      	bne.n	8043a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8043a8a:	2300      	movs	r3, #0
}
 8043a8c:	4618      	mov	r0, r3
 8043a8e:	3710      	adds	r7, #16
 8043a90:	46bd      	mov	sp, r7
 8043a92:	bd80      	pop	{r7, pc}

08043a94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8043a94:	b580      	push	{r7, lr}
 8043a96:	b084      	sub	sp, #16
 8043a98:	af00      	add	r7, sp, #0
 8043a9a:	60f8      	str	r0, [r7, #12]
 8043a9c:	60b9      	str	r1, [r7, #8]
 8043a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8043aa0:	e034      	b.n	8043b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8043aa2:	68f8      	ldr	r0, [r7, #12]
 8043aa4:	f000 f83e 	bl	8043b24 <I2C_IsAcknowledgeFailed>
 8043aa8:	4603      	mov	r3, r0
 8043aaa:	2b00      	cmp	r3, #0
 8043aac:	d001      	beq.n	8043ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8043aae:	2301      	movs	r3, #1
 8043ab0:	e034      	b.n	8043b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043ab2:	68bb      	ldr	r3, [r7, #8]
 8043ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043ab8:	d028      	beq.n	8043b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043aba:	f7fe fd1b 	bl	80424f4 <HAL_GetTick>
 8043abe:	4602      	mov	r2, r0
 8043ac0:	687b      	ldr	r3, [r7, #4]
 8043ac2:	1ad3      	subs	r3, r2, r3
 8043ac4:	68ba      	ldr	r2, [r7, #8]
 8043ac6:	429a      	cmp	r2, r3
 8043ac8:	d302      	bcc.n	8043ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8043aca:	68bb      	ldr	r3, [r7, #8]
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d11d      	bne.n	8043b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8043ad0:	68fb      	ldr	r3, [r7, #12]
 8043ad2:	681b      	ldr	r3, [r3, #0]
 8043ad4:	695b      	ldr	r3, [r3, #20]
 8043ad6:	f003 0304 	and.w	r3, r3, #4
 8043ada:	2b04      	cmp	r3, #4
 8043adc:	d016      	beq.n	8043b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8043ade:	68fb      	ldr	r3, [r7, #12]
 8043ae0:	2200      	movs	r2, #0
 8043ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8043ae4:	68fb      	ldr	r3, [r7, #12]
 8043ae6:	2220      	movs	r2, #32
 8043ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043aec:	68fb      	ldr	r3, [r7, #12]
 8043aee:	2200      	movs	r2, #0
 8043af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043af4:	68fb      	ldr	r3, [r7, #12]
 8043af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043af8:	f043 0220 	orr.w	r2, r3, #32
 8043afc:	68fb      	ldr	r3, [r7, #12]
 8043afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8043b00:	68fb      	ldr	r3, [r7, #12]
 8043b02:	2200      	movs	r2, #0
 8043b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8043b08:	2301      	movs	r3, #1
 8043b0a:	e007      	b.n	8043b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8043b0c:	68fb      	ldr	r3, [r7, #12]
 8043b0e:	681b      	ldr	r3, [r3, #0]
 8043b10:	695b      	ldr	r3, [r3, #20]
 8043b12:	f003 0304 	and.w	r3, r3, #4
 8043b16:	2b04      	cmp	r3, #4
 8043b18:	d1c3      	bne.n	8043aa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8043b1a:	2300      	movs	r3, #0
}
 8043b1c:	4618      	mov	r0, r3
 8043b1e:	3710      	adds	r7, #16
 8043b20:	46bd      	mov	sp, r7
 8043b22:	bd80      	pop	{r7, pc}

08043b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8043b24:	b480      	push	{r7}
 8043b26:	b083      	sub	sp, #12
 8043b28:	af00      	add	r7, sp, #0
 8043b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8043b2c:	687b      	ldr	r3, [r7, #4]
 8043b2e:	681b      	ldr	r3, [r3, #0]
 8043b30:	695b      	ldr	r3, [r3, #20]
 8043b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8043b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8043b3a:	d11b      	bne.n	8043b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8043b3c:	687b      	ldr	r3, [r7, #4]
 8043b3e:	681b      	ldr	r3, [r3, #0]
 8043b40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8043b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8043b46:	687b      	ldr	r3, [r7, #4]
 8043b48:	2200      	movs	r2, #0
 8043b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8043b4c:	687b      	ldr	r3, [r7, #4]
 8043b4e:	2220      	movs	r2, #32
 8043b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043b54:	687b      	ldr	r3, [r7, #4]
 8043b56:	2200      	movs	r2, #0
 8043b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8043b5c:	687b      	ldr	r3, [r7, #4]
 8043b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043b60:	f043 0204 	orr.w	r2, r3, #4
 8043b64:	687b      	ldr	r3, [r7, #4]
 8043b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8043b68:	687b      	ldr	r3, [r7, #4]
 8043b6a:	2200      	movs	r2, #0
 8043b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8043b70:	2301      	movs	r3, #1
 8043b72:	e000      	b.n	8043b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8043b74:	2300      	movs	r3, #0
}
 8043b76:	4618      	mov	r0, r3
 8043b78:	370c      	adds	r7, #12
 8043b7a:	46bd      	mov	sp, r7
 8043b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b80:	4770      	bx	lr
	...

08043b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043b84:	b580      	push	{r7, lr}
 8043b86:	b086      	sub	sp, #24
 8043b88:	af00      	add	r7, sp, #0
 8043b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8043b8c:	687b      	ldr	r3, [r7, #4]
 8043b8e:	2b00      	cmp	r3, #0
 8043b90:	d101      	bne.n	8043b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8043b92:	2301      	movs	r3, #1
 8043b94:	e267      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043b96:	687b      	ldr	r3, [r7, #4]
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	f003 0301 	and.w	r3, r3, #1
 8043b9e:	2b00      	cmp	r3, #0
 8043ba0:	d075      	beq.n	8043c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8043ba2:	4b88      	ldr	r3, [pc, #544]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043ba4:	689b      	ldr	r3, [r3, #8]
 8043ba6:	f003 030c 	and.w	r3, r3, #12
 8043baa:	2b04      	cmp	r3, #4
 8043bac:	d00c      	beq.n	8043bc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043bae:	4b85      	ldr	r3, [pc, #532]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043bb0:	689b      	ldr	r3, [r3, #8]
 8043bb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8043bb6:	2b08      	cmp	r3, #8
 8043bb8:	d112      	bne.n	8043be0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043bba:	4b82      	ldr	r3, [pc, #520]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043bbc:	685b      	ldr	r3, [r3, #4]
 8043bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8043bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8043bc6:	d10b      	bne.n	8043be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043bca:	681b      	ldr	r3, [r3, #0]
 8043bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043bd0:	2b00      	cmp	r3, #0
 8043bd2:	d05b      	beq.n	8043c8c <HAL_RCC_OscConfig+0x108>
 8043bd4:	687b      	ldr	r3, [r7, #4]
 8043bd6:	685b      	ldr	r3, [r3, #4]
 8043bd8:	2b00      	cmp	r3, #0
 8043bda:	d157      	bne.n	8043c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8043bdc:	2301      	movs	r3, #1
 8043bde:	e242      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043be0:	687b      	ldr	r3, [r7, #4]
 8043be2:	685b      	ldr	r3, [r3, #4]
 8043be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043be8:	d106      	bne.n	8043bf8 <HAL_RCC_OscConfig+0x74>
 8043bea:	4b76      	ldr	r3, [pc, #472]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043bec:	681b      	ldr	r3, [r3, #0]
 8043bee:	4a75      	ldr	r2, [pc, #468]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043bf4:	6013      	str	r3, [r2, #0]
 8043bf6:	e01d      	b.n	8043c34 <HAL_RCC_OscConfig+0xb0>
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	685b      	ldr	r3, [r3, #4]
 8043bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8043c00:	d10c      	bne.n	8043c1c <HAL_RCC_OscConfig+0x98>
 8043c02:	4b70      	ldr	r3, [pc, #448]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c04:	681b      	ldr	r3, [r3, #0]
 8043c06:	4a6f      	ldr	r2, [pc, #444]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8043c0c:	6013      	str	r3, [r2, #0]
 8043c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c10:	681b      	ldr	r3, [r3, #0]
 8043c12:	4a6c      	ldr	r2, [pc, #432]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043c18:	6013      	str	r3, [r2, #0]
 8043c1a:	e00b      	b.n	8043c34 <HAL_RCC_OscConfig+0xb0>
 8043c1c:	4b69      	ldr	r3, [pc, #420]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c1e:	681b      	ldr	r3, [r3, #0]
 8043c20:	4a68      	ldr	r2, [pc, #416]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8043c26:	6013      	str	r3, [r2, #0]
 8043c28:	4b66      	ldr	r3, [pc, #408]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c2a:	681b      	ldr	r3, [r3, #0]
 8043c2c:	4a65      	ldr	r2, [pc, #404]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8043c34:	687b      	ldr	r3, [r7, #4]
 8043c36:	685b      	ldr	r3, [r3, #4]
 8043c38:	2b00      	cmp	r3, #0
 8043c3a:	d013      	beq.n	8043c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043c3c:	f7fe fc5a 	bl	80424f4 <HAL_GetTick>
 8043c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043c42:	e008      	b.n	8043c56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043c44:	f7fe fc56 	bl	80424f4 <HAL_GetTick>
 8043c48:	4602      	mov	r2, r0
 8043c4a:	693b      	ldr	r3, [r7, #16]
 8043c4c:	1ad3      	subs	r3, r2, r3
 8043c4e:	2b64      	cmp	r3, #100	@ 0x64
 8043c50:	d901      	bls.n	8043c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8043c52:	2303      	movs	r3, #3
 8043c54:	e207      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043c56:	4b5b      	ldr	r3, [pc, #364]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c58:	681b      	ldr	r3, [r3, #0]
 8043c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043c5e:	2b00      	cmp	r3, #0
 8043c60:	d0f0      	beq.n	8043c44 <HAL_RCC_OscConfig+0xc0>
 8043c62:	e014      	b.n	8043c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043c64:	f7fe fc46 	bl	80424f4 <HAL_GetTick>
 8043c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043c6a:	e008      	b.n	8043c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043c6c:	f7fe fc42 	bl	80424f4 <HAL_GetTick>
 8043c70:	4602      	mov	r2, r0
 8043c72:	693b      	ldr	r3, [r7, #16]
 8043c74:	1ad3      	subs	r3, r2, r3
 8043c76:	2b64      	cmp	r3, #100	@ 0x64
 8043c78:	d901      	bls.n	8043c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043c7a:	2303      	movs	r3, #3
 8043c7c:	e1f3      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043c7e:	4b51      	ldr	r3, [pc, #324]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c80:	681b      	ldr	r3, [r3, #0]
 8043c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043c86:	2b00      	cmp	r3, #0
 8043c88:	d1f0      	bne.n	8043c6c <HAL_RCC_OscConfig+0xe8>
 8043c8a:	e000      	b.n	8043c8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	681b      	ldr	r3, [r3, #0]
 8043c92:	f003 0302 	and.w	r3, r3, #2
 8043c96:	2b00      	cmp	r3, #0
 8043c98:	d063      	beq.n	8043d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8043c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043c9c:	689b      	ldr	r3, [r3, #8]
 8043c9e:	f003 030c 	and.w	r3, r3, #12
 8043ca2:	2b00      	cmp	r3, #0
 8043ca4:	d00b      	beq.n	8043cbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043ca6:	4b47      	ldr	r3, [pc, #284]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043ca8:	689b      	ldr	r3, [r3, #8]
 8043caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8043cae:	2b08      	cmp	r3, #8
 8043cb0:	d11c      	bne.n	8043cec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043cb2:	4b44      	ldr	r3, [pc, #272]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043cb4:	685b      	ldr	r3, [r3, #4]
 8043cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8043cba:	2b00      	cmp	r3, #0
 8043cbc:	d116      	bne.n	8043cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043cbe:	4b41      	ldr	r3, [pc, #260]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043cc0:	681b      	ldr	r3, [r3, #0]
 8043cc2:	f003 0302 	and.w	r3, r3, #2
 8043cc6:	2b00      	cmp	r3, #0
 8043cc8:	d005      	beq.n	8043cd6 <HAL_RCC_OscConfig+0x152>
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	68db      	ldr	r3, [r3, #12]
 8043cce:	2b01      	cmp	r3, #1
 8043cd0:	d001      	beq.n	8043cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8043cd2:	2301      	movs	r3, #1
 8043cd4:	e1c7      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043cd8:	681b      	ldr	r3, [r3, #0]
 8043cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8043cde:	687b      	ldr	r3, [r7, #4]
 8043ce0:	691b      	ldr	r3, [r3, #16]
 8043ce2:	00db      	lsls	r3, r3, #3
 8043ce4:	4937      	ldr	r1, [pc, #220]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043ce6:	4313      	orrs	r3, r2
 8043ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043cea:	e03a      	b.n	8043d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8043cec:	687b      	ldr	r3, [r7, #4]
 8043cee:	68db      	ldr	r3, [r3, #12]
 8043cf0:	2b00      	cmp	r3, #0
 8043cf2:	d020      	beq.n	8043d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8043cf4:	4b34      	ldr	r3, [pc, #208]	@ (8043dc8 <HAL_RCC_OscConfig+0x244>)
 8043cf6:	2201      	movs	r2, #1
 8043cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043cfa:	f7fe fbfb 	bl	80424f4 <HAL_GetTick>
 8043cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043d00:	e008      	b.n	8043d14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043d02:	f7fe fbf7 	bl	80424f4 <HAL_GetTick>
 8043d06:	4602      	mov	r2, r0
 8043d08:	693b      	ldr	r3, [r7, #16]
 8043d0a:	1ad3      	subs	r3, r2, r3
 8043d0c:	2b02      	cmp	r3, #2
 8043d0e:	d901      	bls.n	8043d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8043d10:	2303      	movs	r3, #3
 8043d12:	e1a8      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043d14:	4b2b      	ldr	r3, [pc, #172]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043d16:	681b      	ldr	r3, [r3, #0]
 8043d18:	f003 0302 	and.w	r3, r3, #2
 8043d1c:	2b00      	cmp	r3, #0
 8043d1e:	d0f0      	beq.n	8043d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043d20:	4b28      	ldr	r3, [pc, #160]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043d22:	681b      	ldr	r3, [r3, #0]
 8043d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8043d28:	687b      	ldr	r3, [r7, #4]
 8043d2a:	691b      	ldr	r3, [r3, #16]
 8043d2c:	00db      	lsls	r3, r3, #3
 8043d2e:	4925      	ldr	r1, [pc, #148]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043d30:	4313      	orrs	r3, r2
 8043d32:	600b      	str	r3, [r1, #0]
 8043d34:	e015      	b.n	8043d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8043d36:	4b24      	ldr	r3, [pc, #144]	@ (8043dc8 <HAL_RCC_OscConfig+0x244>)
 8043d38:	2200      	movs	r2, #0
 8043d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043d3c:	f7fe fbda 	bl	80424f4 <HAL_GetTick>
 8043d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043d42:	e008      	b.n	8043d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043d44:	f7fe fbd6 	bl	80424f4 <HAL_GetTick>
 8043d48:	4602      	mov	r2, r0
 8043d4a:	693b      	ldr	r3, [r7, #16]
 8043d4c:	1ad3      	subs	r3, r2, r3
 8043d4e:	2b02      	cmp	r3, #2
 8043d50:	d901      	bls.n	8043d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8043d52:	2303      	movs	r3, #3
 8043d54:	e187      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043d56:	4b1b      	ldr	r3, [pc, #108]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043d58:	681b      	ldr	r3, [r3, #0]
 8043d5a:	f003 0302 	and.w	r3, r3, #2
 8043d5e:	2b00      	cmp	r3, #0
 8043d60:	d1f0      	bne.n	8043d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043d62:	687b      	ldr	r3, [r7, #4]
 8043d64:	681b      	ldr	r3, [r3, #0]
 8043d66:	f003 0308 	and.w	r3, r3, #8
 8043d6a:	2b00      	cmp	r3, #0
 8043d6c:	d036      	beq.n	8043ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8043d6e:	687b      	ldr	r3, [r7, #4]
 8043d70:	695b      	ldr	r3, [r3, #20]
 8043d72:	2b00      	cmp	r3, #0
 8043d74:	d016      	beq.n	8043da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8043d76:	4b15      	ldr	r3, [pc, #84]	@ (8043dcc <HAL_RCC_OscConfig+0x248>)
 8043d78:	2201      	movs	r2, #1
 8043d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043d7c:	f7fe fbba 	bl	80424f4 <HAL_GetTick>
 8043d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043d82:	e008      	b.n	8043d96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043d84:	f7fe fbb6 	bl	80424f4 <HAL_GetTick>
 8043d88:	4602      	mov	r2, r0
 8043d8a:	693b      	ldr	r3, [r7, #16]
 8043d8c:	1ad3      	subs	r3, r2, r3
 8043d8e:	2b02      	cmp	r3, #2
 8043d90:	d901      	bls.n	8043d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8043d92:	2303      	movs	r3, #3
 8043d94:	e167      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043d96:	4b0b      	ldr	r3, [pc, #44]	@ (8043dc4 <HAL_RCC_OscConfig+0x240>)
 8043d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043d9a:	f003 0302 	and.w	r3, r3, #2
 8043d9e:	2b00      	cmp	r3, #0
 8043da0:	d0f0      	beq.n	8043d84 <HAL_RCC_OscConfig+0x200>
 8043da2:	e01b      	b.n	8043ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8043da4:	4b09      	ldr	r3, [pc, #36]	@ (8043dcc <HAL_RCC_OscConfig+0x248>)
 8043da6:	2200      	movs	r2, #0
 8043da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8043daa:	f7fe fba3 	bl	80424f4 <HAL_GetTick>
 8043dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043db0:	e00e      	b.n	8043dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043db2:	f7fe fb9f 	bl	80424f4 <HAL_GetTick>
 8043db6:	4602      	mov	r2, r0
 8043db8:	693b      	ldr	r3, [r7, #16]
 8043dba:	1ad3      	subs	r3, r2, r3
 8043dbc:	2b02      	cmp	r3, #2
 8043dbe:	d907      	bls.n	8043dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8043dc0:	2303      	movs	r3, #3
 8043dc2:	e150      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
 8043dc4:	40023800 	.word	0x40023800
 8043dc8:	42470000 	.word	0x42470000
 8043dcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043dd0:	4b88      	ldr	r3, [pc, #544]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043dd4:	f003 0302 	and.w	r3, r3, #2
 8043dd8:	2b00      	cmp	r3, #0
 8043dda:	d1ea      	bne.n	8043db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8043ddc:	687b      	ldr	r3, [r7, #4]
 8043dde:	681b      	ldr	r3, [r3, #0]
 8043de0:	f003 0304 	and.w	r3, r3, #4
 8043de4:	2b00      	cmp	r3, #0
 8043de6:	f000 8097 	beq.w	8043f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8043dea:	2300      	movs	r3, #0
 8043dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8043dee:	4b81      	ldr	r3, [pc, #516]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8043df6:	2b00      	cmp	r3, #0
 8043df8:	d10f      	bne.n	8043e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8043dfa:	2300      	movs	r3, #0
 8043dfc:	60bb      	str	r3, [r7, #8]
 8043dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043e02:	4a7c      	ldr	r2, [pc, #496]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8043e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8043e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8043e12:	60bb      	str	r3, [r7, #8]
 8043e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8043e16:	2301      	movs	r3, #1
 8043e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043e1a:	4b77      	ldr	r3, [pc, #476]	@ (8043ff8 <HAL_RCC_OscConfig+0x474>)
 8043e1c:	681b      	ldr	r3, [r3, #0]
 8043e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043e22:	2b00      	cmp	r3, #0
 8043e24:	d118      	bne.n	8043e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8043e26:	4b74      	ldr	r3, [pc, #464]	@ (8043ff8 <HAL_RCC_OscConfig+0x474>)
 8043e28:	681b      	ldr	r3, [r3, #0]
 8043e2a:	4a73      	ldr	r2, [pc, #460]	@ (8043ff8 <HAL_RCC_OscConfig+0x474>)
 8043e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8043e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8043e32:	f7fe fb5f 	bl	80424f4 <HAL_GetTick>
 8043e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043e38:	e008      	b.n	8043e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8043e3a:	f7fe fb5b 	bl	80424f4 <HAL_GetTick>
 8043e3e:	4602      	mov	r2, r0
 8043e40:	693b      	ldr	r3, [r7, #16]
 8043e42:	1ad3      	subs	r3, r2, r3
 8043e44:	2b02      	cmp	r3, #2
 8043e46:	d901      	bls.n	8043e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8043e48:	2303      	movs	r3, #3
 8043e4a:	e10c      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8043ff8 <HAL_RCC_OscConfig+0x474>)
 8043e4e:	681b      	ldr	r3, [r3, #0]
 8043e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043e54:	2b00      	cmp	r3, #0
 8043e56:	d0f0      	beq.n	8043e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043e58:	687b      	ldr	r3, [r7, #4]
 8043e5a:	689b      	ldr	r3, [r3, #8]
 8043e5c:	2b01      	cmp	r3, #1
 8043e5e:	d106      	bne.n	8043e6e <HAL_RCC_OscConfig+0x2ea>
 8043e60:	4b64      	ldr	r3, [pc, #400]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043e64:	4a63      	ldr	r2, [pc, #396]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e66:	f043 0301 	orr.w	r3, r3, #1
 8043e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8043e6c:	e01c      	b.n	8043ea8 <HAL_RCC_OscConfig+0x324>
 8043e6e:	687b      	ldr	r3, [r7, #4]
 8043e70:	689b      	ldr	r3, [r3, #8]
 8043e72:	2b05      	cmp	r3, #5
 8043e74:	d10c      	bne.n	8043e90 <HAL_RCC_OscConfig+0x30c>
 8043e76:	4b5f      	ldr	r3, [pc, #380]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e7c:	f043 0304 	orr.w	r3, r3, #4
 8043e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8043e82:	4b5c      	ldr	r3, [pc, #368]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043e86:	4a5b      	ldr	r2, [pc, #364]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e88:	f043 0301 	orr.w	r3, r3, #1
 8043e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8043e8e:	e00b      	b.n	8043ea8 <HAL_RCC_OscConfig+0x324>
 8043e90:	4b58      	ldr	r3, [pc, #352]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043e94:	4a57      	ldr	r2, [pc, #348]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e96:	f023 0301 	bic.w	r3, r3, #1
 8043e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8043e9c:	4b55      	ldr	r3, [pc, #340]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043ea0:	4a54      	ldr	r2, [pc, #336]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043ea2:	f023 0304 	bic.w	r3, r3, #4
 8043ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043ea8:	687b      	ldr	r3, [r7, #4]
 8043eaa:	689b      	ldr	r3, [r3, #8]
 8043eac:	2b00      	cmp	r3, #0
 8043eae:	d015      	beq.n	8043edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043eb0:	f7fe fb20 	bl	80424f4 <HAL_GetTick>
 8043eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043eb6:	e00a      	b.n	8043ece <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043eb8:	f7fe fb1c 	bl	80424f4 <HAL_GetTick>
 8043ebc:	4602      	mov	r2, r0
 8043ebe:	693b      	ldr	r3, [r7, #16]
 8043ec0:	1ad3      	subs	r3, r2, r3
 8043ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8043ec6:	4293      	cmp	r3, r2
 8043ec8:	d901      	bls.n	8043ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8043eca:	2303      	movs	r3, #3
 8043ecc:	e0cb      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043ece:	4b49      	ldr	r3, [pc, #292]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043ed2:	f003 0302 	and.w	r3, r3, #2
 8043ed6:	2b00      	cmp	r3, #0
 8043ed8:	d0ee      	beq.n	8043eb8 <HAL_RCC_OscConfig+0x334>
 8043eda:	e014      	b.n	8043f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8043edc:	f7fe fb0a 	bl	80424f4 <HAL_GetTick>
 8043ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043ee2:	e00a      	b.n	8043efa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043ee4:	f7fe fb06 	bl	80424f4 <HAL_GetTick>
 8043ee8:	4602      	mov	r2, r0
 8043eea:	693b      	ldr	r3, [r7, #16]
 8043eec:	1ad3      	subs	r3, r2, r3
 8043eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8043ef2:	4293      	cmp	r3, r2
 8043ef4:	d901      	bls.n	8043efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8043ef6:	2303      	movs	r3, #3
 8043ef8:	e0b5      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043efa:	4b3e      	ldr	r3, [pc, #248]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043efe:	f003 0302 	and.w	r3, r3, #2
 8043f02:	2b00      	cmp	r3, #0
 8043f04:	d1ee      	bne.n	8043ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8043f06:	7dfb      	ldrb	r3, [r7, #23]
 8043f08:	2b01      	cmp	r3, #1
 8043f0a:	d105      	bne.n	8043f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8043f0c:	4b39      	ldr	r3, [pc, #228]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8043f10:	4a38      	ldr	r2, [pc, #224]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8043f16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8043f18:	687b      	ldr	r3, [r7, #4]
 8043f1a:	699b      	ldr	r3, [r3, #24]
 8043f1c:	2b00      	cmp	r3, #0
 8043f1e:	f000 80a1 	beq.w	8044064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8043f22:	4b34      	ldr	r3, [pc, #208]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043f24:	689b      	ldr	r3, [r3, #8]
 8043f26:	f003 030c 	and.w	r3, r3, #12
 8043f2a:	2b08      	cmp	r3, #8
 8043f2c:	d05c      	beq.n	8043fe8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043f2e:	687b      	ldr	r3, [r7, #4]
 8043f30:	699b      	ldr	r3, [r3, #24]
 8043f32:	2b02      	cmp	r3, #2
 8043f34:	d141      	bne.n	8043fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043f36:	4b31      	ldr	r3, [pc, #196]	@ (8043ffc <HAL_RCC_OscConfig+0x478>)
 8043f38:	2200      	movs	r2, #0
 8043f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043f3c:	f7fe fada 	bl	80424f4 <HAL_GetTick>
 8043f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043f42:	e008      	b.n	8043f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043f44:	f7fe fad6 	bl	80424f4 <HAL_GetTick>
 8043f48:	4602      	mov	r2, r0
 8043f4a:	693b      	ldr	r3, [r7, #16]
 8043f4c:	1ad3      	subs	r3, r2, r3
 8043f4e:	2b02      	cmp	r3, #2
 8043f50:	d901      	bls.n	8043f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8043f52:	2303      	movs	r3, #3
 8043f54:	e087      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043f56:	4b27      	ldr	r3, [pc, #156]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043f58:	681b      	ldr	r3, [r3, #0]
 8043f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043f5e:	2b00      	cmp	r3, #0
 8043f60:	d1f0      	bne.n	8043f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043f62:	687b      	ldr	r3, [r7, #4]
 8043f64:	69da      	ldr	r2, [r3, #28]
 8043f66:	687b      	ldr	r3, [r7, #4]
 8043f68:	6a1b      	ldr	r3, [r3, #32]
 8043f6a:	431a      	orrs	r2, r3
 8043f6c:	687b      	ldr	r3, [r7, #4]
 8043f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043f70:	019b      	lsls	r3, r3, #6
 8043f72:	431a      	orrs	r2, r3
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043f78:	085b      	lsrs	r3, r3, #1
 8043f7a:	3b01      	subs	r3, #1
 8043f7c:	041b      	lsls	r3, r3, #16
 8043f7e:	431a      	orrs	r2, r3
 8043f80:	687b      	ldr	r3, [r7, #4]
 8043f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043f84:	061b      	lsls	r3, r3, #24
 8043f86:	491b      	ldr	r1, [pc, #108]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043f88:	4313      	orrs	r3, r2
 8043f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8043f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8043ffc <HAL_RCC_OscConfig+0x478>)
 8043f8e:	2201      	movs	r2, #1
 8043f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043f92:	f7fe faaf 	bl	80424f4 <HAL_GetTick>
 8043f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043f98:	e008      	b.n	8043fac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043f9a:	f7fe faab 	bl	80424f4 <HAL_GetTick>
 8043f9e:	4602      	mov	r2, r0
 8043fa0:	693b      	ldr	r3, [r7, #16]
 8043fa2:	1ad3      	subs	r3, r2, r3
 8043fa4:	2b02      	cmp	r3, #2
 8043fa6:	d901      	bls.n	8043fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8043fa8:	2303      	movs	r3, #3
 8043faa:	e05c      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043fac:	4b11      	ldr	r3, [pc, #68]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043fae:	681b      	ldr	r3, [r3, #0]
 8043fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043fb4:	2b00      	cmp	r3, #0
 8043fb6:	d0f0      	beq.n	8043f9a <HAL_RCC_OscConfig+0x416>
 8043fb8:	e054      	b.n	8044064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043fba:	4b10      	ldr	r3, [pc, #64]	@ (8043ffc <HAL_RCC_OscConfig+0x478>)
 8043fbc:	2200      	movs	r2, #0
 8043fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043fc0:	f7fe fa98 	bl	80424f4 <HAL_GetTick>
 8043fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043fc6:	e008      	b.n	8043fda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043fc8:	f7fe fa94 	bl	80424f4 <HAL_GetTick>
 8043fcc:	4602      	mov	r2, r0
 8043fce:	693b      	ldr	r3, [r7, #16]
 8043fd0:	1ad3      	subs	r3, r2, r3
 8043fd2:	2b02      	cmp	r3, #2
 8043fd4:	d901      	bls.n	8043fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8043fd6:	2303      	movs	r3, #3
 8043fd8:	e045      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043fda:	4b06      	ldr	r3, [pc, #24]	@ (8043ff4 <HAL_RCC_OscConfig+0x470>)
 8043fdc:	681b      	ldr	r3, [r3, #0]
 8043fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043fe2:	2b00      	cmp	r3, #0
 8043fe4:	d1f0      	bne.n	8043fc8 <HAL_RCC_OscConfig+0x444>
 8043fe6:	e03d      	b.n	8044064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8043fe8:	687b      	ldr	r3, [r7, #4]
 8043fea:	699b      	ldr	r3, [r3, #24]
 8043fec:	2b01      	cmp	r3, #1
 8043fee:	d107      	bne.n	8044000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8043ff0:	2301      	movs	r3, #1
 8043ff2:	e038      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
 8043ff4:	40023800 	.word	0x40023800
 8043ff8:	40007000 	.word	0x40007000
 8043ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8044000:	4b1b      	ldr	r3, [pc, #108]	@ (8044070 <HAL_RCC_OscConfig+0x4ec>)
 8044002:	685b      	ldr	r3, [r3, #4]
 8044004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044006:	687b      	ldr	r3, [r7, #4]
 8044008:	699b      	ldr	r3, [r3, #24]
 804400a:	2b01      	cmp	r3, #1
 804400c:	d028      	beq.n	8044060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804400e:	68fb      	ldr	r3, [r7, #12]
 8044010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8044014:	687b      	ldr	r3, [r7, #4]
 8044016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044018:	429a      	cmp	r2, r3
 804401a:	d121      	bne.n	8044060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 804401c:	68fb      	ldr	r3, [r7, #12]
 804401e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8044022:	687b      	ldr	r3, [r7, #4]
 8044024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044026:	429a      	cmp	r2, r3
 8044028:	d11a      	bne.n	8044060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 804402a:	68fa      	ldr	r2, [r7, #12]
 804402c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8044030:	4013      	ands	r3, r2
 8044032:	687a      	ldr	r2, [r7, #4]
 8044034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8044036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8044038:	4293      	cmp	r3, r2
 804403a:	d111      	bne.n	8044060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 804403c:	68fb      	ldr	r3, [r7, #12]
 804403e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8044042:	687b      	ldr	r3, [r7, #4]
 8044044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8044046:	085b      	lsrs	r3, r3, #1
 8044048:	3b01      	subs	r3, #1
 804404a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 804404c:	429a      	cmp	r2, r3
 804404e:	d107      	bne.n	8044060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8044050:	68fb      	ldr	r3, [r7, #12]
 8044052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8044056:	687b      	ldr	r3, [r7, #4]
 8044058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804405a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 804405c:	429a      	cmp	r2, r3
 804405e:	d001      	beq.n	8044064 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8044060:	2301      	movs	r3, #1
 8044062:	e000      	b.n	8044066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8044064:	2300      	movs	r3, #0
}
 8044066:	4618      	mov	r0, r3
 8044068:	3718      	adds	r7, #24
 804406a:	46bd      	mov	sp, r7
 804406c:	bd80      	pop	{r7, pc}
 804406e:	bf00      	nop
 8044070:	40023800 	.word	0x40023800

08044074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8044074:	b580      	push	{r7, lr}
 8044076:	b084      	sub	sp, #16
 8044078:	af00      	add	r7, sp, #0
 804407a:	6078      	str	r0, [r7, #4]
 804407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804407e:	687b      	ldr	r3, [r7, #4]
 8044080:	2b00      	cmp	r3, #0
 8044082:	d101      	bne.n	8044088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8044084:	2301      	movs	r3, #1
 8044086:	e0cc      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8044088:	4b68      	ldr	r3, [pc, #416]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 804408a:	681b      	ldr	r3, [r3, #0]
 804408c:	f003 0307 	and.w	r3, r3, #7
 8044090:	683a      	ldr	r2, [r7, #0]
 8044092:	429a      	cmp	r2, r3
 8044094:	d90c      	bls.n	80440b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8044096:	4b65      	ldr	r3, [pc, #404]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 8044098:	683a      	ldr	r2, [r7, #0]
 804409a:	b2d2      	uxtb	r2, r2
 804409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804409e:	4b63      	ldr	r3, [pc, #396]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 80440a0:	681b      	ldr	r3, [r3, #0]
 80440a2:	f003 0307 	and.w	r3, r3, #7
 80440a6:	683a      	ldr	r2, [r7, #0]
 80440a8:	429a      	cmp	r2, r3
 80440aa:	d001      	beq.n	80440b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80440ac:	2301      	movs	r3, #1
 80440ae:	e0b8      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80440b0:	687b      	ldr	r3, [r7, #4]
 80440b2:	681b      	ldr	r3, [r3, #0]
 80440b4:	f003 0302 	and.w	r3, r3, #2
 80440b8:	2b00      	cmp	r3, #0
 80440ba:	d020      	beq.n	80440fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80440bc:	687b      	ldr	r3, [r7, #4]
 80440be:	681b      	ldr	r3, [r3, #0]
 80440c0:	f003 0304 	and.w	r3, r3, #4
 80440c4:	2b00      	cmp	r3, #0
 80440c6:	d005      	beq.n	80440d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80440c8:	4b59      	ldr	r3, [pc, #356]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440ca:	689b      	ldr	r3, [r3, #8]
 80440cc:	4a58      	ldr	r2, [pc, #352]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80440d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80440d4:	687b      	ldr	r3, [r7, #4]
 80440d6:	681b      	ldr	r3, [r3, #0]
 80440d8:	f003 0308 	and.w	r3, r3, #8
 80440dc:	2b00      	cmp	r3, #0
 80440de:	d005      	beq.n	80440ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80440e0:	4b53      	ldr	r3, [pc, #332]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440e2:	689b      	ldr	r3, [r3, #8]
 80440e4:	4a52      	ldr	r2, [pc, #328]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80440ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80440ec:	4b50      	ldr	r3, [pc, #320]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440ee:	689b      	ldr	r3, [r3, #8]
 80440f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80440f4:	687b      	ldr	r3, [r7, #4]
 80440f6:	689b      	ldr	r3, [r3, #8]
 80440f8:	494d      	ldr	r1, [pc, #308]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80440fa:	4313      	orrs	r3, r2
 80440fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80440fe:	687b      	ldr	r3, [r7, #4]
 8044100:	681b      	ldr	r3, [r3, #0]
 8044102:	f003 0301 	and.w	r3, r3, #1
 8044106:	2b00      	cmp	r3, #0
 8044108:	d044      	beq.n	8044194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804410a:	687b      	ldr	r3, [r7, #4]
 804410c:	685b      	ldr	r3, [r3, #4]
 804410e:	2b01      	cmp	r3, #1
 8044110:	d107      	bne.n	8044122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044112:	4b47      	ldr	r3, [pc, #284]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044114:	681b      	ldr	r3, [r3, #0]
 8044116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804411a:	2b00      	cmp	r3, #0
 804411c:	d119      	bne.n	8044152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804411e:	2301      	movs	r3, #1
 8044120:	e07f      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8044122:	687b      	ldr	r3, [r7, #4]
 8044124:	685b      	ldr	r3, [r3, #4]
 8044126:	2b02      	cmp	r3, #2
 8044128:	d003      	beq.n	8044132 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 804412a:	687b      	ldr	r3, [r7, #4]
 804412c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804412e:	2b03      	cmp	r3, #3
 8044130:	d107      	bne.n	8044142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044132:	4b3f      	ldr	r3, [pc, #252]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044134:	681b      	ldr	r3, [r3, #0]
 8044136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804413a:	2b00      	cmp	r3, #0
 804413c:	d109      	bne.n	8044152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804413e:	2301      	movs	r3, #1
 8044140:	e06f      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044142:	4b3b      	ldr	r3, [pc, #236]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044144:	681b      	ldr	r3, [r3, #0]
 8044146:	f003 0302 	and.w	r3, r3, #2
 804414a:	2b00      	cmp	r3, #0
 804414c:	d101      	bne.n	8044152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804414e:	2301      	movs	r3, #1
 8044150:	e067      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8044152:	4b37      	ldr	r3, [pc, #220]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044154:	689b      	ldr	r3, [r3, #8]
 8044156:	f023 0203 	bic.w	r2, r3, #3
 804415a:	687b      	ldr	r3, [r7, #4]
 804415c:	685b      	ldr	r3, [r3, #4]
 804415e:	4934      	ldr	r1, [pc, #208]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044160:	4313      	orrs	r3, r2
 8044162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8044164:	f7fe f9c6 	bl	80424f4 <HAL_GetTick>
 8044168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804416a:	e00a      	b.n	8044182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804416c:	f7fe f9c2 	bl	80424f4 <HAL_GetTick>
 8044170:	4602      	mov	r2, r0
 8044172:	68fb      	ldr	r3, [r7, #12]
 8044174:	1ad3      	subs	r3, r2, r3
 8044176:	f241 3288 	movw	r2, #5000	@ 0x1388
 804417a:	4293      	cmp	r3, r2
 804417c:	d901      	bls.n	8044182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804417e:	2303      	movs	r3, #3
 8044180:	e04f      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044182:	4b2b      	ldr	r3, [pc, #172]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044184:	689b      	ldr	r3, [r3, #8]
 8044186:	f003 020c 	and.w	r2, r3, #12
 804418a:	687b      	ldr	r3, [r7, #4]
 804418c:	685b      	ldr	r3, [r3, #4]
 804418e:	009b      	lsls	r3, r3, #2
 8044190:	429a      	cmp	r2, r3
 8044192:	d1eb      	bne.n	804416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8044194:	4b25      	ldr	r3, [pc, #148]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 8044196:	681b      	ldr	r3, [r3, #0]
 8044198:	f003 0307 	and.w	r3, r3, #7
 804419c:	683a      	ldr	r2, [r7, #0]
 804419e:	429a      	cmp	r2, r3
 80441a0:	d20c      	bcs.n	80441bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80441a2:	4b22      	ldr	r3, [pc, #136]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 80441a4:	683a      	ldr	r2, [r7, #0]
 80441a6:	b2d2      	uxtb	r2, r2
 80441a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80441aa:	4b20      	ldr	r3, [pc, #128]	@ (804422c <HAL_RCC_ClockConfig+0x1b8>)
 80441ac:	681b      	ldr	r3, [r3, #0]
 80441ae:	f003 0307 	and.w	r3, r3, #7
 80441b2:	683a      	ldr	r2, [r7, #0]
 80441b4:	429a      	cmp	r2, r3
 80441b6:	d001      	beq.n	80441bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80441b8:	2301      	movs	r3, #1
 80441ba:	e032      	b.n	8044222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80441bc:	687b      	ldr	r3, [r7, #4]
 80441be:	681b      	ldr	r3, [r3, #0]
 80441c0:	f003 0304 	and.w	r3, r3, #4
 80441c4:	2b00      	cmp	r3, #0
 80441c6:	d008      	beq.n	80441da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80441c8:	4b19      	ldr	r3, [pc, #100]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80441ca:	689b      	ldr	r3, [r3, #8]
 80441cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80441d0:	687b      	ldr	r3, [r7, #4]
 80441d2:	68db      	ldr	r3, [r3, #12]
 80441d4:	4916      	ldr	r1, [pc, #88]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80441d6:	4313      	orrs	r3, r2
 80441d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80441da:	687b      	ldr	r3, [r7, #4]
 80441dc:	681b      	ldr	r3, [r3, #0]
 80441de:	f003 0308 	and.w	r3, r3, #8
 80441e2:	2b00      	cmp	r3, #0
 80441e4:	d009      	beq.n	80441fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80441e6:	4b12      	ldr	r3, [pc, #72]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80441e8:	689b      	ldr	r3, [r3, #8]
 80441ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80441ee:	687b      	ldr	r3, [r7, #4]
 80441f0:	691b      	ldr	r3, [r3, #16]
 80441f2:	00db      	lsls	r3, r3, #3
 80441f4:	490e      	ldr	r1, [pc, #56]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 80441f6:	4313      	orrs	r3, r2
 80441f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80441fa:	f000 f821 	bl	8044240 <HAL_RCC_GetSysClockFreq>
 80441fe:	4602      	mov	r2, r0
 8044200:	4b0b      	ldr	r3, [pc, #44]	@ (8044230 <HAL_RCC_ClockConfig+0x1bc>)
 8044202:	689b      	ldr	r3, [r3, #8]
 8044204:	091b      	lsrs	r3, r3, #4
 8044206:	f003 030f 	and.w	r3, r3, #15
 804420a:	490a      	ldr	r1, [pc, #40]	@ (8044234 <HAL_RCC_ClockConfig+0x1c0>)
 804420c:	5ccb      	ldrb	r3, [r1, r3]
 804420e:	fa22 f303 	lsr.w	r3, r2, r3
 8044212:	4a09      	ldr	r2, [pc, #36]	@ (8044238 <HAL_RCC_ClockConfig+0x1c4>)
 8044214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8044216:	4b09      	ldr	r3, [pc, #36]	@ (804423c <HAL_RCC_ClockConfig+0x1c8>)
 8044218:	681b      	ldr	r3, [r3, #0]
 804421a:	4618      	mov	r0, r3
 804421c:	f7fd fe0a 	bl	8041e34 <HAL_InitTick>

  return HAL_OK;
 8044220:	2300      	movs	r3, #0
}
 8044222:	4618      	mov	r0, r3
 8044224:	3710      	adds	r7, #16
 8044226:	46bd      	mov	sp, r7
 8044228:	bd80      	pop	{r7, pc}
 804422a:	bf00      	nop
 804422c:	40023c00 	.word	0x40023c00
 8044230:	40023800 	.word	0x40023800
 8044234:	0804ce8c 	.word	0x0804ce8c
 8044238:	20000000 	.word	0x20000000
 804423c:	20000008 	.word	0x20000008

08044240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8044240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044244:	b094      	sub	sp, #80	@ 0x50
 8044246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8044248:	2300      	movs	r3, #0
 804424a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 804424c:	2300      	movs	r3, #0
 804424e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8044250:	2300      	movs	r3, #0
 8044252:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8044254:	2300      	movs	r3, #0
 8044256:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8044258:	4b79      	ldr	r3, [pc, #484]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 804425a:	689b      	ldr	r3, [r3, #8]
 804425c:	f003 030c 	and.w	r3, r3, #12
 8044260:	2b08      	cmp	r3, #8
 8044262:	d00d      	beq.n	8044280 <HAL_RCC_GetSysClockFreq+0x40>
 8044264:	2b08      	cmp	r3, #8
 8044266:	f200 80e1 	bhi.w	804442c <HAL_RCC_GetSysClockFreq+0x1ec>
 804426a:	2b00      	cmp	r3, #0
 804426c:	d002      	beq.n	8044274 <HAL_RCC_GetSysClockFreq+0x34>
 804426e:	2b04      	cmp	r3, #4
 8044270:	d003      	beq.n	804427a <HAL_RCC_GetSysClockFreq+0x3a>
 8044272:	e0db      	b.n	804442c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8044274:	4b73      	ldr	r3, [pc, #460]	@ (8044444 <HAL_RCC_GetSysClockFreq+0x204>)
 8044276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8044278:	e0db      	b.n	8044432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 804427a:	4b73      	ldr	r3, [pc, #460]	@ (8044448 <HAL_RCC_GetSysClockFreq+0x208>)
 804427c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 804427e:	e0d8      	b.n	8044432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8044280:	4b6f      	ldr	r3, [pc, #444]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 8044282:	685b      	ldr	r3, [r3, #4]
 8044284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8044288:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 804428a:	4b6d      	ldr	r3, [pc, #436]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 804428c:	685b      	ldr	r3, [r3, #4]
 804428e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8044292:	2b00      	cmp	r3, #0
 8044294:	d063      	beq.n	804435e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044296:	4b6a      	ldr	r3, [pc, #424]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 8044298:	685b      	ldr	r3, [r3, #4]
 804429a:	099b      	lsrs	r3, r3, #6
 804429c:	2200      	movs	r2, #0
 804429e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80442a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80442a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80442a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80442a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80442aa:	2300      	movs	r3, #0
 80442ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80442ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80442b2:	4622      	mov	r2, r4
 80442b4:	462b      	mov	r3, r5
 80442b6:	f04f 0000 	mov.w	r0, #0
 80442ba:	f04f 0100 	mov.w	r1, #0
 80442be:	0159      	lsls	r1, r3, #5
 80442c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80442c4:	0150      	lsls	r0, r2, #5
 80442c6:	4602      	mov	r2, r0
 80442c8:	460b      	mov	r3, r1
 80442ca:	4621      	mov	r1, r4
 80442cc:	1a51      	subs	r1, r2, r1
 80442ce:	6139      	str	r1, [r7, #16]
 80442d0:	4629      	mov	r1, r5
 80442d2:	eb63 0301 	sbc.w	r3, r3, r1
 80442d6:	617b      	str	r3, [r7, #20]
 80442d8:	f04f 0200 	mov.w	r2, #0
 80442dc:	f04f 0300 	mov.w	r3, #0
 80442e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80442e4:	4659      	mov	r1, fp
 80442e6:	018b      	lsls	r3, r1, #6
 80442e8:	4651      	mov	r1, sl
 80442ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80442ee:	4651      	mov	r1, sl
 80442f0:	018a      	lsls	r2, r1, #6
 80442f2:	4651      	mov	r1, sl
 80442f4:	ebb2 0801 	subs.w	r8, r2, r1
 80442f8:	4659      	mov	r1, fp
 80442fa:	eb63 0901 	sbc.w	r9, r3, r1
 80442fe:	f04f 0200 	mov.w	r2, #0
 8044302:	f04f 0300 	mov.w	r3, #0
 8044306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804430a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804430e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8044312:	4690      	mov	r8, r2
 8044314:	4699      	mov	r9, r3
 8044316:	4623      	mov	r3, r4
 8044318:	eb18 0303 	adds.w	r3, r8, r3
 804431c:	60bb      	str	r3, [r7, #8]
 804431e:	462b      	mov	r3, r5
 8044320:	eb49 0303 	adc.w	r3, r9, r3
 8044324:	60fb      	str	r3, [r7, #12]
 8044326:	f04f 0200 	mov.w	r2, #0
 804432a:	f04f 0300 	mov.w	r3, #0
 804432e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8044332:	4629      	mov	r1, r5
 8044334:	024b      	lsls	r3, r1, #9
 8044336:	4621      	mov	r1, r4
 8044338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 804433c:	4621      	mov	r1, r4
 804433e:	024a      	lsls	r2, r1, #9
 8044340:	4610      	mov	r0, r2
 8044342:	4619      	mov	r1, r3
 8044344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8044346:	2200      	movs	r2, #0
 8044348:	62bb      	str	r3, [r7, #40]	@ 0x28
 804434a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 804434c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8044350:	f7fc fc8a 	bl	8040c68 <__aeabi_uldivmod>
 8044354:	4602      	mov	r2, r0
 8044356:	460b      	mov	r3, r1
 8044358:	4613      	mov	r3, r2
 804435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804435c:	e058      	b.n	8044410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804435e:	4b38      	ldr	r3, [pc, #224]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 8044360:	685b      	ldr	r3, [r3, #4]
 8044362:	099b      	lsrs	r3, r3, #6
 8044364:	2200      	movs	r2, #0
 8044366:	4618      	mov	r0, r3
 8044368:	4611      	mov	r1, r2
 804436a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 804436e:	623b      	str	r3, [r7, #32]
 8044370:	2300      	movs	r3, #0
 8044372:	627b      	str	r3, [r7, #36]	@ 0x24
 8044374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8044378:	4642      	mov	r2, r8
 804437a:	464b      	mov	r3, r9
 804437c:	f04f 0000 	mov.w	r0, #0
 8044380:	f04f 0100 	mov.w	r1, #0
 8044384:	0159      	lsls	r1, r3, #5
 8044386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 804438a:	0150      	lsls	r0, r2, #5
 804438c:	4602      	mov	r2, r0
 804438e:	460b      	mov	r3, r1
 8044390:	4641      	mov	r1, r8
 8044392:	ebb2 0a01 	subs.w	sl, r2, r1
 8044396:	4649      	mov	r1, r9
 8044398:	eb63 0b01 	sbc.w	fp, r3, r1
 804439c:	f04f 0200 	mov.w	r2, #0
 80443a0:	f04f 0300 	mov.w	r3, #0
 80443a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80443a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80443ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80443b0:	ebb2 040a 	subs.w	r4, r2, sl
 80443b4:	eb63 050b 	sbc.w	r5, r3, fp
 80443b8:	f04f 0200 	mov.w	r2, #0
 80443bc:	f04f 0300 	mov.w	r3, #0
 80443c0:	00eb      	lsls	r3, r5, #3
 80443c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80443c6:	00e2      	lsls	r2, r4, #3
 80443c8:	4614      	mov	r4, r2
 80443ca:	461d      	mov	r5, r3
 80443cc:	4643      	mov	r3, r8
 80443ce:	18e3      	adds	r3, r4, r3
 80443d0:	603b      	str	r3, [r7, #0]
 80443d2:	464b      	mov	r3, r9
 80443d4:	eb45 0303 	adc.w	r3, r5, r3
 80443d8:	607b      	str	r3, [r7, #4]
 80443da:	f04f 0200 	mov.w	r2, #0
 80443de:	f04f 0300 	mov.w	r3, #0
 80443e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80443e6:	4629      	mov	r1, r5
 80443e8:	028b      	lsls	r3, r1, #10
 80443ea:	4621      	mov	r1, r4
 80443ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80443f0:	4621      	mov	r1, r4
 80443f2:	028a      	lsls	r2, r1, #10
 80443f4:	4610      	mov	r0, r2
 80443f6:	4619      	mov	r1, r3
 80443f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80443fa:	2200      	movs	r2, #0
 80443fc:	61bb      	str	r3, [r7, #24]
 80443fe:	61fa      	str	r2, [r7, #28]
 8044400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8044404:	f7fc fc30 	bl	8040c68 <__aeabi_uldivmod>
 8044408:	4602      	mov	r2, r0
 804440a:	460b      	mov	r3, r1
 804440c:	4613      	mov	r3, r2
 804440e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8044410:	4b0b      	ldr	r3, [pc, #44]	@ (8044440 <HAL_RCC_GetSysClockFreq+0x200>)
 8044412:	685b      	ldr	r3, [r3, #4]
 8044414:	0c1b      	lsrs	r3, r3, #16
 8044416:	f003 0303 	and.w	r3, r3, #3
 804441a:	3301      	adds	r3, #1
 804441c:	005b      	lsls	r3, r3, #1
 804441e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8044420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8044422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8044424:	fbb2 f3f3 	udiv	r3, r2, r3
 8044428:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 804442a:	e002      	b.n	8044432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 804442c:	4b05      	ldr	r3, [pc, #20]	@ (8044444 <HAL_RCC_GetSysClockFreq+0x204>)
 804442e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8044430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8044432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8044434:	4618      	mov	r0, r3
 8044436:	3750      	adds	r7, #80	@ 0x50
 8044438:	46bd      	mov	sp, r7
 804443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804443e:	bf00      	nop
 8044440:	40023800 	.word	0x40023800
 8044444:	00f42400 	.word	0x00f42400
 8044448:	007a1200 	.word	0x007a1200

0804444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804444c:	b480      	push	{r7}
 804444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8044450:	4b03      	ldr	r3, [pc, #12]	@ (8044460 <HAL_RCC_GetHCLKFreq+0x14>)
 8044452:	681b      	ldr	r3, [r3, #0]
}
 8044454:	4618      	mov	r0, r3
 8044456:	46bd      	mov	sp, r7
 8044458:	f85d 7b04 	ldr.w	r7, [sp], #4
 804445c:	4770      	bx	lr
 804445e:	bf00      	nop
 8044460:	20000000 	.word	0x20000000

08044464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8044464:	b580      	push	{r7, lr}
 8044466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8044468:	f7ff fff0 	bl	804444c <HAL_RCC_GetHCLKFreq>
 804446c:	4602      	mov	r2, r0
 804446e:	4b05      	ldr	r3, [pc, #20]	@ (8044484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8044470:	689b      	ldr	r3, [r3, #8]
 8044472:	0a9b      	lsrs	r3, r3, #10
 8044474:	f003 0307 	and.w	r3, r3, #7
 8044478:	4903      	ldr	r1, [pc, #12]	@ (8044488 <HAL_RCC_GetPCLK1Freq+0x24>)
 804447a:	5ccb      	ldrb	r3, [r1, r3]
 804447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044480:	4618      	mov	r0, r3
 8044482:	bd80      	pop	{r7, pc}
 8044484:	40023800 	.word	0x40023800
 8044488:	0804ce9c 	.word	0x0804ce9c

0804448c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804448c:	b580      	push	{r7, lr}
 804448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8044490:	f7ff ffdc 	bl	804444c <HAL_RCC_GetHCLKFreq>
 8044494:	4602      	mov	r2, r0
 8044496:	4b05      	ldr	r3, [pc, #20]	@ (80444ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8044498:	689b      	ldr	r3, [r3, #8]
 804449a:	0b5b      	lsrs	r3, r3, #13
 804449c:	f003 0307 	and.w	r3, r3, #7
 80444a0:	4903      	ldr	r1, [pc, #12]	@ (80444b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80444a2:	5ccb      	ldrb	r3, [r1, r3]
 80444a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80444a8:	4618      	mov	r0, r3
 80444aa:	bd80      	pop	{r7, pc}
 80444ac:	40023800 	.word	0x40023800
 80444b0:	0804ce9c 	.word	0x0804ce9c

080444b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80444b4:	b480      	push	{r7}
 80444b6:	b083      	sub	sp, #12
 80444b8:	af00      	add	r7, sp, #0
 80444ba:	6078      	str	r0, [r7, #4]
 80444bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80444be:	687b      	ldr	r3, [r7, #4]
 80444c0:	220f      	movs	r2, #15
 80444c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80444c4:	4b12      	ldr	r3, [pc, #72]	@ (8044510 <HAL_RCC_GetClockConfig+0x5c>)
 80444c6:	689b      	ldr	r3, [r3, #8]
 80444c8:	f003 0203 	and.w	r2, r3, #3
 80444cc:	687b      	ldr	r3, [r7, #4]
 80444ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80444d0:	4b0f      	ldr	r3, [pc, #60]	@ (8044510 <HAL_RCC_GetClockConfig+0x5c>)
 80444d2:	689b      	ldr	r3, [r3, #8]
 80444d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80444d8:	687b      	ldr	r3, [r7, #4]
 80444da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80444dc:	4b0c      	ldr	r3, [pc, #48]	@ (8044510 <HAL_RCC_GetClockConfig+0x5c>)
 80444de:	689b      	ldr	r3, [r3, #8]
 80444e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80444e8:	4b09      	ldr	r3, [pc, #36]	@ (8044510 <HAL_RCC_GetClockConfig+0x5c>)
 80444ea:	689b      	ldr	r3, [r3, #8]
 80444ec:	08db      	lsrs	r3, r3, #3
 80444ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80444f2:	687b      	ldr	r3, [r7, #4]
 80444f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80444f6:	4b07      	ldr	r3, [pc, #28]	@ (8044514 <HAL_RCC_GetClockConfig+0x60>)
 80444f8:	681b      	ldr	r3, [r3, #0]
 80444fa:	f003 0207 	and.w	r2, r3, #7
 80444fe:	683b      	ldr	r3, [r7, #0]
 8044500:	601a      	str	r2, [r3, #0]
}
 8044502:	bf00      	nop
 8044504:	370c      	adds	r7, #12
 8044506:	46bd      	mov	sp, r7
 8044508:	f85d 7b04 	ldr.w	r7, [sp], #4
 804450c:	4770      	bx	lr
 804450e:	bf00      	nop
 8044510:	40023800 	.word	0x40023800
 8044514:	40023c00 	.word	0x40023c00

08044518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8044518:	b580      	push	{r7, lr}
 804451a:	b082      	sub	sp, #8
 804451c:	af00      	add	r7, sp, #0
 804451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8044520:	687b      	ldr	r3, [r7, #4]
 8044522:	2b00      	cmp	r3, #0
 8044524:	d101      	bne.n	804452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8044526:	2301      	movs	r3, #1
 8044528:	e041      	b.n	80445ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804452a:	687b      	ldr	r3, [r7, #4]
 804452c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8044530:	b2db      	uxtb	r3, r3
 8044532:	2b00      	cmp	r3, #0
 8044534:	d106      	bne.n	8044544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8044536:	687b      	ldr	r3, [r7, #4]
 8044538:	2200      	movs	r2, #0
 804453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 804453e:	6878      	ldr	r0, [r7, #4]
 8044540:	f7fd fc06 	bl	8041d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044544:	687b      	ldr	r3, [r7, #4]
 8044546:	2202      	movs	r2, #2
 8044548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804454c:	687b      	ldr	r3, [r7, #4]
 804454e:	681a      	ldr	r2, [r3, #0]
 8044550:	687b      	ldr	r3, [r7, #4]
 8044552:	3304      	adds	r3, #4
 8044554:	4619      	mov	r1, r3
 8044556:	4610      	mov	r0, r2
 8044558:	f000 fae6 	bl	8044b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804455c:	687b      	ldr	r3, [r7, #4]
 804455e:	2201      	movs	r2, #1
 8044560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8044564:	687b      	ldr	r3, [r7, #4]
 8044566:	2201      	movs	r2, #1
 8044568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 804456c:	687b      	ldr	r3, [r7, #4]
 804456e:	2201      	movs	r2, #1
 8044570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8044574:	687b      	ldr	r3, [r7, #4]
 8044576:	2201      	movs	r2, #1
 8044578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 804457c:	687b      	ldr	r3, [r7, #4]
 804457e:	2201      	movs	r2, #1
 8044580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8044584:	687b      	ldr	r3, [r7, #4]
 8044586:	2201      	movs	r2, #1
 8044588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 804458c:	687b      	ldr	r3, [r7, #4]
 804458e:	2201      	movs	r2, #1
 8044590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8044594:	687b      	ldr	r3, [r7, #4]
 8044596:	2201      	movs	r2, #1
 8044598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 804459c:	687b      	ldr	r3, [r7, #4]
 804459e:	2201      	movs	r2, #1
 80445a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80445a4:	687b      	ldr	r3, [r7, #4]
 80445a6:	2201      	movs	r2, #1
 80445a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80445ac:	2300      	movs	r3, #0
}
 80445ae:	4618      	mov	r0, r3
 80445b0:	3708      	adds	r7, #8
 80445b2:	46bd      	mov	sp, r7
 80445b4:	bd80      	pop	{r7, pc}
	...

080445b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80445b8:	b480      	push	{r7}
 80445ba:	b085      	sub	sp, #20
 80445bc:	af00      	add	r7, sp, #0
 80445be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80445c0:	687b      	ldr	r3, [r7, #4]
 80445c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80445c6:	b2db      	uxtb	r3, r3
 80445c8:	2b01      	cmp	r3, #1
 80445ca:	d001      	beq.n	80445d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80445cc:	2301      	movs	r3, #1
 80445ce:	e046      	b.n	804465e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80445d0:	687b      	ldr	r3, [r7, #4]
 80445d2:	2202      	movs	r2, #2
 80445d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80445d8:	687b      	ldr	r3, [r7, #4]
 80445da:	681b      	ldr	r3, [r3, #0]
 80445dc:	4a23      	ldr	r2, [pc, #140]	@ (804466c <HAL_TIM_Base_Start+0xb4>)
 80445de:	4293      	cmp	r3, r2
 80445e0:	d022      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80445ea:	d01d      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 80445ec:	687b      	ldr	r3, [r7, #4]
 80445ee:	681b      	ldr	r3, [r3, #0]
 80445f0:	4a1f      	ldr	r2, [pc, #124]	@ (8044670 <HAL_TIM_Base_Start+0xb8>)
 80445f2:	4293      	cmp	r3, r2
 80445f4:	d018      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 80445f6:	687b      	ldr	r3, [r7, #4]
 80445f8:	681b      	ldr	r3, [r3, #0]
 80445fa:	4a1e      	ldr	r2, [pc, #120]	@ (8044674 <HAL_TIM_Base_Start+0xbc>)
 80445fc:	4293      	cmp	r3, r2
 80445fe:	d013      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 8044600:	687b      	ldr	r3, [r7, #4]
 8044602:	681b      	ldr	r3, [r3, #0]
 8044604:	4a1c      	ldr	r2, [pc, #112]	@ (8044678 <HAL_TIM_Base_Start+0xc0>)
 8044606:	4293      	cmp	r3, r2
 8044608:	d00e      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 804460a:	687b      	ldr	r3, [r7, #4]
 804460c:	681b      	ldr	r3, [r3, #0]
 804460e:	4a1b      	ldr	r2, [pc, #108]	@ (804467c <HAL_TIM_Base_Start+0xc4>)
 8044610:	4293      	cmp	r3, r2
 8044612:	d009      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 8044614:	687b      	ldr	r3, [r7, #4]
 8044616:	681b      	ldr	r3, [r3, #0]
 8044618:	4a19      	ldr	r2, [pc, #100]	@ (8044680 <HAL_TIM_Base_Start+0xc8>)
 804461a:	4293      	cmp	r3, r2
 804461c:	d004      	beq.n	8044628 <HAL_TIM_Base_Start+0x70>
 804461e:	687b      	ldr	r3, [r7, #4]
 8044620:	681b      	ldr	r3, [r3, #0]
 8044622:	4a18      	ldr	r2, [pc, #96]	@ (8044684 <HAL_TIM_Base_Start+0xcc>)
 8044624:	4293      	cmp	r3, r2
 8044626:	d111      	bne.n	804464c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8044628:	687b      	ldr	r3, [r7, #4]
 804462a:	681b      	ldr	r3, [r3, #0]
 804462c:	689b      	ldr	r3, [r3, #8]
 804462e:	f003 0307 	and.w	r3, r3, #7
 8044632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044634:	68fb      	ldr	r3, [r7, #12]
 8044636:	2b06      	cmp	r3, #6
 8044638:	d010      	beq.n	804465c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 804463a:	687b      	ldr	r3, [r7, #4]
 804463c:	681b      	ldr	r3, [r3, #0]
 804463e:	681a      	ldr	r2, [r3, #0]
 8044640:	687b      	ldr	r3, [r7, #4]
 8044642:	681b      	ldr	r3, [r3, #0]
 8044644:	f042 0201 	orr.w	r2, r2, #1
 8044648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804464a:	e007      	b.n	804465c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804464c:	687b      	ldr	r3, [r7, #4]
 804464e:	681b      	ldr	r3, [r3, #0]
 8044650:	681a      	ldr	r2, [r3, #0]
 8044652:	687b      	ldr	r3, [r7, #4]
 8044654:	681b      	ldr	r3, [r3, #0]
 8044656:	f042 0201 	orr.w	r2, r2, #1
 804465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 804465c:	2300      	movs	r3, #0
}
 804465e:	4618      	mov	r0, r3
 8044660:	3714      	adds	r7, #20
 8044662:	46bd      	mov	sp, r7
 8044664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044668:	4770      	bx	lr
 804466a:	bf00      	nop
 804466c:	40010000 	.word	0x40010000
 8044670:	40000400 	.word	0x40000400
 8044674:	40000800 	.word	0x40000800
 8044678:	40000c00 	.word	0x40000c00
 804467c:	40010400 	.word	0x40010400
 8044680:	40014000 	.word	0x40014000
 8044684:	40001800 	.word	0x40001800

08044688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8044688:	b480      	push	{r7}
 804468a:	b085      	sub	sp, #20
 804468c:	af00      	add	r7, sp, #0
 804468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8044690:	687b      	ldr	r3, [r7, #4]
 8044692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8044696:	b2db      	uxtb	r3, r3
 8044698:	2b01      	cmp	r3, #1
 804469a:	d001      	beq.n	80446a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 804469c:	2301      	movs	r3, #1
 804469e:	e04e      	b.n	804473e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80446a0:	687b      	ldr	r3, [r7, #4]
 80446a2:	2202      	movs	r2, #2
 80446a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	681b      	ldr	r3, [r3, #0]
 80446ac:	68da      	ldr	r2, [r3, #12]
 80446ae:	687b      	ldr	r3, [r7, #4]
 80446b0:	681b      	ldr	r3, [r3, #0]
 80446b2:	f042 0201 	orr.w	r2, r2, #1
 80446b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80446b8:	687b      	ldr	r3, [r7, #4]
 80446ba:	681b      	ldr	r3, [r3, #0]
 80446bc:	4a23      	ldr	r2, [pc, #140]	@ (804474c <HAL_TIM_Base_Start_IT+0xc4>)
 80446be:	4293      	cmp	r3, r2
 80446c0:	d022      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446c2:	687b      	ldr	r3, [r7, #4]
 80446c4:	681b      	ldr	r3, [r3, #0]
 80446c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80446ca:	d01d      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446cc:	687b      	ldr	r3, [r7, #4]
 80446ce:	681b      	ldr	r3, [r3, #0]
 80446d0:	4a1f      	ldr	r2, [pc, #124]	@ (8044750 <HAL_TIM_Base_Start_IT+0xc8>)
 80446d2:	4293      	cmp	r3, r2
 80446d4:	d018      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446d6:	687b      	ldr	r3, [r7, #4]
 80446d8:	681b      	ldr	r3, [r3, #0]
 80446da:	4a1e      	ldr	r2, [pc, #120]	@ (8044754 <HAL_TIM_Base_Start_IT+0xcc>)
 80446dc:	4293      	cmp	r3, r2
 80446de:	d013      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446e0:	687b      	ldr	r3, [r7, #4]
 80446e2:	681b      	ldr	r3, [r3, #0]
 80446e4:	4a1c      	ldr	r2, [pc, #112]	@ (8044758 <HAL_TIM_Base_Start_IT+0xd0>)
 80446e6:	4293      	cmp	r3, r2
 80446e8:	d00e      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446ea:	687b      	ldr	r3, [r7, #4]
 80446ec:	681b      	ldr	r3, [r3, #0]
 80446ee:	4a1b      	ldr	r2, [pc, #108]	@ (804475c <HAL_TIM_Base_Start_IT+0xd4>)
 80446f0:	4293      	cmp	r3, r2
 80446f2:	d009      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446f4:	687b      	ldr	r3, [r7, #4]
 80446f6:	681b      	ldr	r3, [r3, #0]
 80446f8:	4a19      	ldr	r2, [pc, #100]	@ (8044760 <HAL_TIM_Base_Start_IT+0xd8>)
 80446fa:	4293      	cmp	r3, r2
 80446fc:	d004      	beq.n	8044708 <HAL_TIM_Base_Start_IT+0x80>
 80446fe:	687b      	ldr	r3, [r7, #4]
 8044700:	681b      	ldr	r3, [r3, #0]
 8044702:	4a18      	ldr	r2, [pc, #96]	@ (8044764 <HAL_TIM_Base_Start_IT+0xdc>)
 8044704:	4293      	cmp	r3, r2
 8044706:	d111      	bne.n	804472c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8044708:	687b      	ldr	r3, [r7, #4]
 804470a:	681b      	ldr	r3, [r3, #0]
 804470c:	689b      	ldr	r3, [r3, #8]
 804470e:	f003 0307 	and.w	r3, r3, #7
 8044712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044714:	68fb      	ldr	r3, [r7, #12]
 8044716:	2b06      	cmp	r3, #6
 8044718:	d010      	beq.n	804473c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 804471a:	687b      	ldr	r3, [r7, #4]
 804471c:	681b      	ldr	r3, [r3, #0]
 804471e:	681a      	ldr	r2, [r3, #0]
 8044720:	687b      	ldr	r3, [r7, #4]
 8044722:	681b      	ldr	r3, [r3, #0]
 8044724:	f042 0201 	orr.w	r2, r2, #1
 8044728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804472a:	e007      	b.n	804473c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804472c:	687b      	ldr	r3, [r7, #4]
 804472e:	681b      	ldr	r3, [r3, #0]
 8044730:	681a      	ldr	r2, [r3, #0]
 8044732:	687b      	ldr	r3, [r7, #4]
 8044734:	681b      	ldr	r3, [r3, #0]
 8044736:	f042 0201 	orr.w	r2, r2, #1
 804473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 804473c:	2300      	movs	r3, #0
}
 804473e:	4618      	mov	r0, r3
 8044740:	3714      	adds	r7, #20
 8044742:	46bd      	mov	sp, r7
 8044744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044748:	4770      	bx	lr
 804474a:	bf00      	nop
 804474c:	40010000 	.word	0x40010000
 8044750:	40000400 	.word	0x40000400
 8044754:	40000800 	.word	0x40000800
 8044758:	40000c00 	.word	0x40000c00
 804475c:	40010400 	.word	0x40010400
 8044760:	40014000 	.word	0x40014000
 8044764:	40001800 	.word	0x40001800

08044768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8044768:	b580      	push	{r7, lr}
 804476a:	b084      	sub	sp, #16
 804476c:	af00      	add	r7, sp, #0
 804476e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8044770:	687b      	ldr	r3, [r7, #4]
 8044772:	681b      	ldr	r3, [r3, #0]
 8044774:	68db      	ldr	r3, [r3, #12]
 8044776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8044778:	687b      	ldr	r3, [r7, #4]
 804477a:	681b      	ldr	r3, [r3, #0]
 804477c:	691b      	ldr	r3, [r3, #16]
 804477e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8044780:	68bb      	ldr	r3, [r7, #8]
 8044782:	f003 0302 	and.w	r3, r3, #2
 8044786:	2b00      	cmp	r3, #0
 8044788:	d020      	beq.n	80447cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 804478a:	68fb      	ldr	r3, [r7, #12]
 804478c:	f003 0302 	and.w	r3, r3, #2
 8044790:	2b00      	cmp	r3, #0
 8044792:	d01b      	beq.n	80447cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8044794:	687b      	ldr	r3, [r7, #4]
 8044796:	681b      	ldr	r3, [r3, #0]
 8044798:	f06f 0202 	mvn.w	r2, #2
 804479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804479e:	687b      	ldr	r3, [r7, #4]
 80447a0:	2201      	movs	r2, #1
 80447a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80447a4:	687b      	ldr	r3, [r7, #4]
 80447a6:	681b      	ldr	r3, [r3, #0]
 80447a8:	699b      	ldr	r3, [r3, #24]
 80447aa:	f003 0303 	and.w	r3, r3, #3
 80447ae:	2b00      	cmp	r3, #0
 80447b0:	d003      	beq.n	80447ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80447b2:	6878      	ldr	r0, [r7, #4]
 80447b4:	f000 f999 	bl	8044aea <HAL_TIM_IC_CaptureCallback>
 80447b8:	e005      	b.n	80447c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80447ba:	6878      	ldr	r0, [r7, #4]
 80447bc:	f000 f98b 	bl	8044ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80447c0:	6878      	ldr	r0, [r7, #4]
 80447c2:	f000 f99c 	bl	8044afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80447c6:	687b      	ldr	r3, [r7, #4]
 80447c8:	2200      	movs	r2, #0
 80447ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80447cc:	68bb      	ldr	r3, [r7, #8]
 80447ce:	f003 0304 	and.w	r3, r3, #4
 80447d2:	2b00      	cmp	r3, #0
 80447d4:	d020      	beq.n	8044818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80447d6:	68fb      	ldr	r3, [r7, #12]
 80447d8:	f003 0304 	and.w	r3, r3, #4
 80447dc:	2b00      	cmp	r3, #0
 80447de:	d01b      	beq.n	8044818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80447e0:	687b      	ldr	r3, [r7, #4]
 80447e2:	681b      	ldr	r3, [r3, #0]
 80447e4:	f06f 0204 	mvn.w	r2, #4
 80447e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	2202      	movs	r2, #2
 80447ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80447f0:	687b      	ldr	r3, [r7, #4]
 80447f2:	681b      	ldr	r3, [r3, #0]
 80447f4:	699b      	ldr	r3, [r3, #24]
 80447f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80447fa:	2b00      	cmp	r3, #0
 80447fc:	d003      	beq.n	8044806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80447fe:	6878      	ldr	r0, [r7, #4]
 8044800:	f000 f973 	bl	8044aea <HAL_TIM_IC_CaptureCallback>
 8044804:	e005      	b.n	8044812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044806:	6878      	ldr	r0, [r7, #4]
 8044808:	f000 f965 	bl	8044ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804480c:	6878      	ldr	r0, [r7, #4]
 804480e:	f000 f976 	bl	8044afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044812:	687b      	ldr	r3, [r7, #4]
 8044814:	2200      	movs	r2, #0
 8044816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8044818:	68bb      	ldr	r3, [r7, #8]
 804481a:	f003 0308 	and.w	r3, r3, #8
 804481e:	2b00      	cmp	r3, #0
 8044820:	d020      	beq.n	8044864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8044822:	68fb      	ldr	r3, [r7, #12]
 8044824:	f003 0308 	and.w	r3, r3, #8
 8044828:	2b00      	cmp	r3, #0
 804482a:	d01b      	beq.n	8044864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 804482c:	687b      	ldr	r3, [r7, #4]
 804482e:	681b      	ldr	r3, [r3, #0]
 8044830:	f06f 0208 	mvn.w	r2, #8
 8044834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8044836:	687b      	ldr	r3, [r7, #4]
 8044838:	2204      	movs	r2, #4
 804483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804483c:	687b      	ldr	r3, [r7, #4]
 804483e:	681b      	ldr	r3, [r3, #0]
 8044840:	69db      	ldr	r3, [r3, #28]
 8044842:	f003 0303 	and.w	r3, r3, #3
 8044846:	2b00      	cmp	r3, #0
 8044848:	d003      	beq.n	8044852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804484a:	6878      	ldr	r0, [r7, #4]
 804484c:	f000 f94d 	bl	8044aea <HAL_TIM_IC_CaptureCallback>
 8044850:	e005      	b.n	804485e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044852:	6878      	ldr	r0, [r7, #4]
 8044854:	f000 f93f 	bl	8044ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044858:	6878      	ldr	r0, [r7, #4]
 804485a:	f000 f950 	bl	8044afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804485e:	687b      	ldr	r3, [r7, #4]
 8044860:	2200      	movs	r2, #0
 8044862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8044864:	68bb      	ldr	r3, [r7, #8]
 8044866:	f003 0310 	and.w	r3, r3, #16
 804486a:	2b00      	cmp	r3, #0
 804486c:	d020      	beq.n	80448b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 804486e:	68fb      	ldr	r3, [r7, #12]
 8044870:	f003 0310 	and.w	r3, r3, #16
 8044874:	2b00      	cmp	r3, #0
 8044876:	d01b      	beq.n	80448b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8044878:	687b      	ldr	r3, [r7, #4]
 804487a:	681b      	ldr	r3, [r3, #0]
 804487c:	f06f 0210 	mvn.w	r2, #16
 8044880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8044882:	687b      	ldr	r3, [r7, #4]
 8044884:	2208      	movs	r2, #8
 8044886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8044888:	687b      	ldr	r3, [r7, #4]
 804488a:	681b      	ldr	r3, [r3, #0]
 804488c:	69db      	ldr	r3, [r3, #28]
 804488e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044892:	2b00      	cmp	r3, #0
 8044894:	d003      	beq.n	804489e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8044896:	6878      	ldr	r0, [r7, #4]
 8044898:	f000 f927 	bl	8044aea <HAL_TIM_IC_CaptureCallback>
 804489c:	e005      	b.n	80448aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804489e:	6878      	ldr	r0, [r7, #4]
 80448a0:	f000 f919 	bl	8044ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80448a4:	6878      	ldr	r0, [r7, #4]
 80448a6:	f000 f92a 	bl	8044afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80448aa:	687b      	ldr	r3, [r7, #4]
 80448ac:	2200      	movs	r2, #0
 80448ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80448b0:	68bb      	ldr	r3, [r7, #8]
 80448b2:	f003 0301 	and.w	r3, r3, #1
 80448b6:	2b00      	cmp	r3, #0
 80448b8:	d00c      	beq.n	80448d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80448ba:	68fb      	ldr	r3, [r7, #12]
 80448bc:	f003 0301 	and.w	r3, r3, #1
 80448c0:	2b00      	cmp	r3, #0
 80448c2:	d007      	beq.n	80448d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80448c4:	687b      	ldr	r3, [r7, #4]
 80448c6:	681b      	ldr	r3, [r3, #0]
 80448c8:	f06f 0201 	mvn.w	r2, #1
 80448cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80448ce:	6878      	ldr	r0, [r7, #4]
 80448d0:	f7fd f84e 	bl	8041970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80448d4:	68bb      	ldr	r3, [r7, #8]
 80448d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80448da:	2b00      	cmp	r3, #0
 80448dc:	d00c      	beq.n	80448f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80448de:	68fb      	ldr	r3, [r7, #12]
 80448e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80448e4:	2b00      	cmp	r3, #0
 80448e6:	d007      	beq.n	80448f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80448e8:	687b      	ldr	r3, [r7, #4]
 80448ea:	681b      	ldr	r3, [r3, #0]
 80448ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80448f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80448f2:	6878      	ldr	r0, [r7, #4]
 80448f4:	f000 fae4 	bl	8044ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80448f8:	68bb      	ldr	r3, [r7, #8]
 80448fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80448fe:	2b00      	cmp	r3, #0
 8044900:	d00c      	beq.n	804491c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8044902:	68fb      	ldr	r3, [r7, #12]
 8044904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8044908:	2b00      	cmp	r3, #0
 804490a:	d007      	beq.n	804491c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 804490c:	687b      	ldr	r3, [r7, #4]
 804490e:	681b      	ldr	r3, [r3, #0]
 8044910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8044914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8044916:	6878      	ldr	r0, [r7, #4]
 8044918:	f000 f8fb 	bl	8044b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 804491c:	68bb      	ldr	r3, [r7, #8]
 804491e:	f003 0320 	and.w	r3, r3, #32
 8044922:	2b00      	cmp	r3, #0
 8044924:	d00c      	beq.n	8044940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8044926:	68fb      	ldr	r3, [r7, #12]
 8044928:	f003 0320 	and.w	r3, r3, #32
 804492c:	2b00      	cmp	r3, #0
 804492e:	d007      	beq.n	8044940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8044930:	687b      	ldr	r3, [r7, #4]
 8044932:	681b      	ldr	r3, [r3, #0]
 8044934:	f06f 0220 	mvn.w	r2, #32
 8044938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 804493a:	6878      	ldr	r0, [r7, #4]
 804493c:	f000 fab6 	bl	8044eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8044940:	bf00      	nop
 8044942:	3710      	adds	r7, #16
 8044944:	46bd      	mov	sp, r7
 8044946:	bd80      	pop	{r7, pc}

08044948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8044948:	b580      	push	{r7, lr}
 804494a:	b084      	sub	sp, #16
 804494c:	af00      	add	r7, sp, #0
 804494e:	6078      	str	r0, [r7, #4]
 8044950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8044952:	2300      	movs	r3, #0
 8044954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8044956:	687b      	ldr	r3, [r7, #4]
 8044958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 804495c:	2b01      	cmp	r3, #1
 804495e:	d101      	bne.n	8044964 <HAL_TIM_ConfigClockSource+0x1c>
 8044960:	2302      	movs	r3, #2
 8044962:	e0b4      	b.n	8044ace <HAL_TIM_ConfigClockSource+0x186>
 8044964:	687b      	ldr	r3, [r7, #4]
 8044966:	2201      	movs	r2, #1
 8044968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 804496c:	687b      	ldr	r3, [r7, #4]
 804496e:	2202      	movs	r2, #2
 8044970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8044974:	687b      	ldr	r3, [r7, #4]
 8044976:	681b      	ldr	r3, [r3, #0]
 8044978:	689b      	ldr	r3, [r3, #8]
 804497a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 804497c:	68bb      	ldr	r3, [r7, #8]
 804497e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8044982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8044984:	68bb      	ldr	r3, [r7, #8]
 8044986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 804498a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 804498c:	687b      	ldr	r3, [r7, #4]
 804498e:	681b      	ldr	r3, [r3, #0]
 8044990:	68ba      	ldr	r2, [r7, #8]
 8044992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8044994:	683b      	ldr	r3, [r7, #0]
 8044996:	681b      	ldr	r3, [r3, #0]
 8044998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804499c:	d03e      	beq.n	8044a1c <HAL_TIM_ConfigClockSource+0xd4>
 804499e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80449a2:	f200 8087 	bhi.w	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80449aa:	f000 8086 	beq.w	8044aba <HAL_TIM_ConfigClockSource+0x172>
 80449ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80449b2:	d87f      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449b4:	2b70      	cmp	r3, #112	@ 0x70
 80449b6:	d01a      	beq.n	80449ee <HAL_TIM_ConfigClockSource+0xa6>
 80449b8:	2b70      	cmp	r3, #112	@ 0x70
 80449ba:	d87b      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449bc:	2b60      	cmp	r3, #96	@ 0x60
 80449be:	d050      	beq.n	8044a62 <HAL_TIM_ConfigClockSource+0x11a>
 80449c0:	2b60      	cmp	r3, #96	@ 0x60
 80449c2:	d877      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449c4:	2b50      	cmp	r3, #80	@ 0x50
 80449c6:	d03c      	beq.n	8044a42 <HAL_TIM_ConfigClockSource+0xfa>
 80449c8:	2b50      	cmp	r3, #80	@ 0x50
 80449ca:	d873      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449cc:	2b40      	cmp	r3, #64	@ 0x40
 80449ce:	d058      	beq.n	8044a82 <HAL_TIM_ConfigClockSource+0x13a>
 80449d0:	2b40      	cmp	r3, #64	@ 0x40
 80449d2:	d86f      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449d4:	2b30      	cmp	r3, #48	@ 0x30
 80449d6:	d064      	beq.n	8044aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80449d8:	2b30      	cmp	r3, #48	@ 0x30
 80449da:	d86b      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449dc:	2b20      	cmp	r3, #32
 80449de:	d060      	beq.n	8044aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80449e0:	2b20      	cmp	r3, #32
 80449e2:	d867      	bhi.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80449e4:	2b00      	cmp	r3, #0
 80449e6:	d05c      	beq.n	8044aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80449e8:	2b10      	cmp	r3, #16
 80449ea:	d05a      	beq.n	8044aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80449ec:	e062      	b.n	8044ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80449ee:	687b      	ldr	r3, [r7, #4]
 80449f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80449f2:	683b      	ldr	r3, [r7, #0]
 80449f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80449f6:	683b      	ldr	r3, [r7, #0]
 80449f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80449fa:	683b      	ldr	r3, [r7, #0]
 80449fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80449fe:	f000 f9b9 	bl	8044d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8044a02:	687b      	ldr	r3, [r7, #4]
 8044a04:	681b      	ldr	r3, [r3, #0]
 8044a06:	689b      	ldr	r3, [r3, #8]
 8044a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8044a0a:	68bb      	ldr	r3, [r7, #8]
 8044a0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8044a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8044a12:	687b      	ldr	r3, [r7, #4]
 8044a14:	681b      	ldr	r3, [r3, #0]
 8044a16:	68ba      	ldr	r2, [r7, #8]
 8044a18:	609a      	str	r2, [r3, #8]
      break;
 8044a1a:	e04f      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8044a1c:	687b      	ldr	r3, [r7, #4]
 8044a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8044a20:	683b      	ldr	r3, [r7, #0]
 8044a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8044a24:	683b      	ldr	r3, [r7, #0]
 8044a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8044a28:	683b      	ldr	r3, [r7, #0]
 8044a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8044a2c:	f000 f9a2 	bl	8044d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8044a30:	687b      	ldr	r3, [r7, #4]
 8044a32:	681b      	ldr	r3, [r3, #0]
 8044a34:	689a      	ldr	r2, [r3, #8]
 8044a36:	687b      	ldr	r3, [r7, #4]
 8044a38:	681b      	ldr	r3, [r3, #0]
 8044a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8044a3e:	609a      	str	r2, [r3, #8]
      break;
 8044a40:	e03c      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8044a42:	687b      	ldr	r3, [r7, #4]
 8044a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8044a46:	683b      	ldr	r3, [r7, #0]
 8044a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8044a4a:	683b      	ldr	r3, [r7, #0]
 8044a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8044a4e:	461a      	mov	r2, r3
 8044a50:	f000 f916 	bl	8044c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8044a54:	687b      	ldr	r3, [r7, #4]
 8044a56:	681b      	ldr	r3, [r3, #0]
 8044a58:	2150      	movs	r1, #80	@ 0x50
 8044a5a:	4618      	mov	r0, r3
 8044a5c:	f000 f96f 	bl	8044d3e <TIM_ITRx_SetConfig>
      break;
 8044a60:	e02c      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8044a62:	687b      	ldr	r3, [r7, #4]
 8044a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8044a66:	683b      	ldr	r3, [r7, #0]
 8044a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8044a6a:	683b      	ldr	r3, [r7, #0]
 8044a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8044a6e:	461a      	mov	r2, r3
 8044a70:	f000 f935 	bl	8044cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8044a74:	687b      	ldr	r3, [r7, #4]
 8044a76:	681b      	ldr	r3, [r3, #0]
 8044a78:	2160      	movs	r1, #96	@ 0x60
 8044a7a:	4618      	mov	r0, r3
 8044a7c:	f000 f95f 	bl	8044d3e <TIM_ITRx_SetConfig>
      break;
 8044a80:	e01c      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8044a82:	687b      	ldr	r3, [r7, #4]
 8044a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8044a86:	683b      	ldr	r3, [r7, #0]
 8044a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8044a8a:	683b      	ldr	r3, [r7, #0]
 8044a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8044a8e:	461a      	mov	r2, r3
 8044a90:	f000 f8f6 	bl	8044c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8044a94:	687b      	ldr	r3, [r7, #4]
 8044a96:	681b      	ldr	r3, [r3, #0]
 8044a98:	2140      	movs	r1, #64	@ 0x40
 8044a9a:	4618      	mov	r0, r3
 8044a9c:	f000 f94f 	bl	8044d3e <TIM_ITRx_SetConfig>
      break;
 8044aa0:	e00c      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8044aa2:	687b      	ldr	r3, [r7, #4]
 8044aa4:	681a      	ldr	r2, [r3, #0]
 8044aa6:	683b      	ldr	r3, [r7, #0]
 8044aa8:	681b      	ldr	r3, [r3, #0]
 8044aaa:	4619      	mov	r1, r3
 8044aac:	4610      	mov	r0, r2
 8044aae:	f000 f946 	bl	8044d3e <TIM_ITRx_SetConfig>
      break;
 8044ab2:	e003      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8044ab4:	2301      	movs	r3, #1
 8044ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8044ab8:	e000      	b.n	8044abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8044aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8044abc:	687b      	ldr	r3, [r7, #4]
 8044abe:	2201      	movs	r2, #1
 8044ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8044ac4:	687b      	ldr	r3, [r7, #4]
 8044ac6:	2200      	movs	r2, #0
 8044ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8044acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8044ace:	4618      	mov	r0, r3
 8044ad0:	3710      	adds	r7, #16
 8044ad2:	46bd      	mov	sp, r7
 8044ad4:	bd80      	pop	{r7, pc}

08044ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8044ad6:	b480      	push	{r7}
 8044ad8:	b083      	sub	sp, #12
 8044ada:	af00      	add	r7, sp, #0
 8044adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8044ade:	bf00      	nop
 8044ae0:	370c      	adds	r7, #12
 8044ae2:	46bd      	mov	sp, r7
 8044ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ae8:	4770      	bx	lr

08044aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8044aea:	b480      	push	{r7}
 8044aec:	b083      	sub	sp, #12
 8044aee:	af00      	add	r7, sp, #0
 8044af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8044af2:	bf00      	nop
 8044af4:	370c      	adds	r7, #12
 8044af6:	46bd      	mov	sp, r7
 8044af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044afc:	4770      	bx	lr

08044afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8044afe:	b480      	push	{r7}
 8044b00:	b083      	sub	sp, #12
 8044b02:	af00      	add	r7, sp, #0
 8044b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8044b06:	bf00      	nop
 8044b08:	370c      	adds	r7, #12
 8044b0a:	46bd      	mov	sp, r7
 8044b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b10:	4770      	bx	lr

08044b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8044b12:	b480      	push	{r7}
 8044b14:	b083      	sub	sp, #12
 8044b16:	af00      	add	r7, sp, #0
 8044b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8044b1a:	bf00      	nop
 8044b1c:	370c      	adds	r7, #12
 8044b1e:	46bd      	mov	sp, r7
 8044b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b24:	4770      	bx	lr
	...

08044b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8044b28:	b480      	push	{r7}
 8044b2a:	b085      	sub	sp, #20
 8044b2c:	af00      	add	r7, sp, #0
 8044b2e:	6078      	str	r0, [r7, #4]
 8044b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8044b32:	687b      	ldr	r3, [r7, #4]
 8044b34:	681b      	ldr	r3, [r3, #0]
 8044b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8044b38:	687b      	ldr	r3, [r7, #4]
 8044b3a:	4a46      	ldr	r2, [pc, #280]	@ (8044c54 <TIM_Base_SetConfig+0x12c>)
 8044b3c:	4293      	cmp	r3, r2
 8044b3e:	d013      	beq.n	8044b68 <TIM_Base_SetConfig+0x40>
 8044b40:	687b      	ldr	r3, [r7, #4]
 8044b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044b46:	d00f      	beq.n	8044b68 <TIM_Base_SetConfig+0x40>
 8044b48:	687b      	ldr	r3, [r7, #4]
 8044b4a:	4a43      	ldr	r2, [pc, #268]	@ (8044c58 <TIM_Base_SetConfig+0x130>)
 8044b4c:	4293      	cmp	r3, r2
 8044b4e:	d00b      	beq.n	8044b68 <TIM_Base_SetConfig+0x40>
 8044b50:	687b      	ldr	r3, [r7, #4]
 8044b52:	4a42      	ldr	r2, [pc, #264]	@ (8044c5c <TIM_Base_SetConfig+0x134>)
 8044b54:	4293      	cmp	r3, r2
 8044b56:	d007      	beq.n	8044b68 <TIM_Base_SetConfig+0x40>
 8044b58:	687b      	ldr	r3, [r7, #4]
 8044b5a:	4a41      	ldr	r2, [pc, #260]	@ (8044c60 <TIM_Base_SetConfig+0x138>)
 8044b5c:	4293      	cmp	r3, r2
 8044b5e:	d003      	beq.n	8044b68 <TIM_Base_SetConfig+0x40>
 8044b60:	687b      	ldr	r3, [r7, #4]
 8044b62:	4a40      	ldr	r2, [pc, #256]	@ (8044c64 <TIM_Base_SetConfig+0x13c>)
 8044b64:	4293      	cmp	r3, r2
 8044b66:	d108      	bne.n	8044b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8044b68:	68fb      	ldr	r3, [r7, #12]
 8044b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8044b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8044b70:	683b      	ldr	r3, [r7, #0]
 8044b72:	685b      	ldr	r3, [r3, #4]
 8044b74:	68fa      	ldr	r2, [r7, #12]
 8044b76:	4313      	orrs	r3, r2
 8044b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8044b7a:	687b      	ldr	r3, [r7, #4]
 8044b7c:	4a35      	ldr	r2, [pc, #212]	@ (8044c54 <TIM_Base_SetConfig+0x12c>)
 8044b7e:	4293      	cmp	r3, r2
 8044b80:	d02b      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044b82:	687b      	ldr	r3, [r7, #4]
 8044b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044b88:	d027      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044b8a:	687b      	ldr	r3, [r7, #4]
 8044b8c:	4a32      	ldr	r2, [pc, #200]	@ (8044c58 <TIM_Base_SetConfig+0x130>)
 8044b8e:	4293      	cmp	r3, r2
 8044b90:	d023      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044b92:	687b      	ldr	r3, [r7, #4]
 8044b94:	4a31      	ldr	r2, [pc, #196]	@ (8044c5c <TIM_Base_SetConfig+0x134>)
 8044b96:	4293      	cmp	r3, r2
 8044b98:	d01f      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044b9a:	687b      	ldr	r3, [r7, #4]
 8044b9c:	4a30      	ldr	r2, [pc, #192]	@ (8044c60 <TIM_Base_SetConfig+0x138>)
 8044b9e:	4293      	cmp	r3, r2
 8044ba0:	d01b      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044ba2:	687b      	ldr	r3, [r7, #4]
 8044ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8044c64 <TIM_Base_SetConfig+0x13c>)
 8044ba6:	4293      	cmp	r3, r2
 8044ba8:	d017      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044baa:	687b      	ldr	r3, [r7, #4]
 8044bac:	4a2e      	ldr	r2, [pc, #184]	@ (8044c68 <TIM_Base_SetConfig+0x140>)
 8044bae:	4293      	cmp	r3, r2
 8044bb0:	d013      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044bb2:	687b      	ldr	r3, [r7, #4]
 8044bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8044c6c <TIM_Base_SetConfig+0x144>)
 8044bb6:	4293      	cmp	r3, r2
 8044bb8:	d00f      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044bba:	687b      	ldr	r3, [r7, #4]
 8044bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8044c70 <TIM_Base_SetConfig+0x148>)
 8044bbe:	4293      	cmp	r3, r2
 8044bc0:	d00b      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044bc2:	687b      	ldr	r3, [r7, #4]
 8044bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8044c74 <TIM_Base_SetConfig+0x14c>)
 8044bc6:	4293      	cmp	r3, r2
 8044bc8:	d007      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044bca:	687b      	ldr	r3, [r7, #4]
 8044bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8044c78 <TIM_Base_SetConfig+0x150>)
 8044bce:	4293      	cmp	r3, r2
 8044bd0:	d003      	beq.n	8044bda <TIM_Base_SetConfig+0xb2>
 8044bd2:	687b      	ldr	r3, [r7, #4]
 8044bd4:	4a29      	ldr	r2, [pc, #164]	@ (8044c7c <TIM_Base_SetConfig+0x154>)
 8044bd6:	4293      	cmp	r3, r2
 8044bd8:	d108      	bne.n	8044bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8044bda:	68fb      	ldr	r3, [r7, #12]
 8044bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8044be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8044be2:	683b      	ldr	r3, [r7, #0]
 8044be4:	68db      	ldr	r3, [r3, #12]
 8044be6:	68fa      	ldr	r2, [r7, #12]
 8044be8:	4313      	orrs	r3, r2
 8044bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8044bec:	68fb      	ldr	r3, [r7, #12]
 8044bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8044bf2:	683b      	ldr	r3, [r7, #0]
 8044bf4:	695b      	ldr	r3, [r3, #20]
 8044bf6:	4313      	orrs	r3, r2
 8044bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8044bfa:	687b      	ldr	r3, [r7, #4]
 8044bfc:	68fa      	ldr	r2, [r7, #12]
 8044bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8044c00:	683b      	ldr	r3, [r7, #0]
 8044c02:	689a      	ldr	r2, [r3, #8]
 8044c04:	687b      	ldr	r3, [r7, #4]
 8044c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8044c08:	683b      	ldr	r3, [r7, #0]
 8044c0a:	681a      	ldr	r2, [r3, #0]
 8044c0c:	687b      	ldr	r3, [r7, #4]
 8044c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8044c10:	687b      	ldr	r3, [r7, #4]
 8044c12:	4a10      	ldr	r2, [pc, #64]	@ (8044c54 <TIM_Base_SetConfig+0x12c>)
 8044c14:	4293      	cmp	r3, r2
 8044c16:	d003      	beq.n	8044c20 <TIM_Base_SetConfig+0xf8>
 8044c18:	687b      	ldr	r3, [r7, #4]
 8044c1a:	4a12      	ldr	r2, [pc, #72]	@ (8044c64 <TIM_Base_SetConfig+0x13c>)
 8044c1c:	4293      	cmp	r3, r2
 8044c1e:	d103      	bne.n	8044c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8044c20:	683b      	ldr	r3, [r7, #0]
 8044c22:	691a      	ldr	r2, [r3, #16]
 8044c24:	687b      	ldr	r3, [r7, #4]
 8044c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8044c28:	687b      	ldr	r3, [r7, #4]
 8044c2a:	2201      	movs	r2, #1
 8044c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8044c2e:	687b      	ldr	r3, [r7, #4]
 8044c30:	691b      	ldr	r3, [r3, #16]
 8044c32:	f003 0301 	and.w	r3, r3, #1
 8044c36:	2b01      	cmp	r3, #1
 8044c38:	d105      	bne.n	8044c46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8044c3a:	687b      	ldr	r3, [r7, #4]
 8044c3c:	691b      	ldr	r3, [r3, #16]
 8044c3e:	f023 0201 	bic.w	r2, r3, #1
 8044c42:	687b      	ldr	r3, [r7, #4]
 8044c44:	611a      	str	r2, [r3, #16]
  }
}
 8044c46:	bf00      	nop
 8044c48:	3714      	adds	r7, #20
 8044c4a:	46bd      	mov	sp, r7
 8044c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c50:	4770      	bx	lr
 8044c52:	bf00      	nop
 8044c54:	40010000 	.word	0x40010000
 8044c58:	40000400 	.word	0x40000400
 8044c5c:	40000800 	.word	0x40000800
 8044c60:	40000c00 	.word	0x40000c00
 8044c64:	40010400 	.word	0x40010400
 8044c68:	40014000 	.word	0x40014000
 8044c6c:	40014400 	.word	0x40014400
 8044c70:	40014800 	.word	0x40014800
 8044c74:	40001800 	.word	0x40001800
 8044c78:	40001c00 	.word	0x40001c00
 8044c7c:	40002000 	.word	0x40002000

08044c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8044c80:	b480      	push	{r7}
 8044c82:	b087      	sub	sp, #28
 8044c84:	af00      	add	r7, sp, #0
 8044c86:	60f8      	str	r0, [r7, #12]
 8044c88:	60b9      	str	r1, [r7, #8]
 8044c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8044c8c:	68fb      	ldr	r3, [r7, #12]
 8044c8e:	6a1b      	ldr	r3, [r3, #32]
 8044c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8044c92:	68fb      	ldr	r3, [r7, #12]
 8044c94:	6a1b      	ldr	r3, [r3, #32]
 8044c96:	f023 0201 	bic.w	r2, r3, #1
 8044c9a:	68fb      	ldr	r3, [r7, #12]
 8044c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8044c9e:	68fb      	ldr	r3, [r7, #12]
 8044ca0:	699b      	ldr	r3, [r3, #24]
 8044ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8044ca4:	693b      	ldr	r3, [r7, #16]
 8044ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8044caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8044cac:	687b      	ldr	r3, [r7, #4]
 8044cae:	011b      	lsls	r3, r3, #4
 8044cb0:	693a      	ldr	r2, [r7, #16]
 8044cb2:	4313      	orrs	r3, r2
 8044cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8044cb6:	697b      	ldr	r3, [r7, #20]
 8044cb8:	f023 030a 	bic.w	r3, r3, #10
 8044cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8044cbe:	697a      	ldr	r2, [r7, #20]
 8044cc0:	68bb      	ldr	r3, [r7, #8]
 8044cc2:	4313      	orrs	r3, r2
 8044cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8044cc6:	68fb      	ldr	r3, [r7, #12]
 8044cc8:	693a      	ldr	r2, [r7, #16]
 8044cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8044ccc:	68fb      	ldr	r3, [r7, #12]
 8044cce:	697a      	ldr	r2, [r7, #20]
 8044cd0:	621a      	str	r2, [r3, #32]
}
 8044cd2:	bf00      	nop
 8044cd4:	371c      	adds	r7, #28
 8044cd6:	46bd      	mov	sp, r7
 8044cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044cdc:	4770      	bx	lr

08044cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8044cde:	b480      	push	{r7}
 8044ce0:	b087      	sub	sp, #28
 8044ce2:	af00      	add	r7, sp, #0
 8044ce4:	60f8      	str	r0, [r7, #12]
 8044ce6:	60b9      	str	r1, [r7, #8]
 8044ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8044cea:	68fb      	ldr	r3, [r7, #12]
 8044cec:	6a1b      	ldr	r3, [r3, #32]
 8044cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8044cf0:	68fb      	ldr	r3, [r7, #12]
 8044cf2:	6a1b      	ldr	r3, [r3, #32]
 8044cf4:	f023 0210 	bic.w	r2, r3, #16
 8044cf8:	68fb      	ldr	r3, [r7, #12]
 8044cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8044cfc:	68fb      	ldr	r3, [r7, #12]
 8044cfe:	699b      	ldr	r3, [r3, #24]
 8044d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8044d02:	693b      	ldr	r3, [r7, #16]
 8044d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8044d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8044d0a:	687b      	ldr	r3, [r7, #4]
 8044d0c:	031b      	lsls	r3, r3, #12
 8044d0e:	693a      	ldr	r2, [r7, #16]
 8044d10:	4313      	orrs	r3, r2
 8044d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8044d14:	697b      	ldr	r3, [r7, #20]
 8044d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8044d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8044d1c:	68bb      	ldr	r3, [r7, #8]
 8044d1e:	011b      	lsls	r3, r3, #4
 8044d20:	697a      	ldr	r2, [r7, #20]
 8044d22:	4313      	orrs	r3, r2
 8044d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8044d26:	68fb      	ldr	r3, [r7, #12]
 8044d28:	693a      	ldr	r2, [r7, #16]
 8044d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8044d2c:	68fb      	ldr	r3, [r7, #12]
 8044d2e:	697a      	ldr	r2, [r7, #20]
 8044d30:	621a      	str	r2, [r3, #32]
}
 8044d32:	bf00      	nop
 8044d34:	371c      	adds	r7, #28
 8044d36:	46bd      	mov	sp, r7
 8044d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d3c:	4770      	bx	lr

08044d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8044d3e:	b480      	push	{r7}
 8044d40:	b085      	sub	sp, #20
 8044d42:	af00      	add	r7, sp, #0
 8044d44:	6078      	str	r0, [r7, #4]
 8044d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8044d48:	687b      	ldr	r3, [r7, #4]
 8044d4a:	689b      	ldr	r3, [r3, #8]
 8044d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8044d4e:	68fb      	ldr	r3, [r7, #12]
 8044d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8044d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8044d56:	683a      	ldr	r2, [r7, #0]
 8044d58:	68fb      	ldr	r3, [r7, #12]
 8044d5a:	4313      	orrs	r3, r2
 8044d5c:	f043 0307 	orr.w	r3, r3, #7
 8044d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8044d62:	687b      	ldr	r3, [r7, #4]
 8044d64:	68fa      	ldr	r2, [r7, #12]
 8044d66:	609a      	str	r2, [r3, #8]
}
 8044d68:	bf00      	nop
 8044d6a:	3714      	adds	r7, #20
 8044d6c:	46bd      	mov	sp, r7
 8044d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d72:	4770      	bx	lr

08044d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8044d74:	b480      	push	{r7}
 8044d76:	b087      	sub	sp, #28
 8044d78:	af00      	add	r7, sp, #0
 8044d7a:	60f8      	str	r0, [r7, #12]
 8044d7c:	60b9      	str	r1, [r7, #8]
 8044d7e:	607a      	str	r2, [r7, #4]
 8044d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8044d82:	68fb      	ldr	r3, [r7, #12]
 8044d84:	689b      	ldr	r3, [r3, #8]
 8044d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8044d88:	697b      	ldr	r3, [r7, #20]
 8044d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8044d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8044d90:	683b      	ldr	r3, [r7, #0]
 8044d92:	021a      	lsls	r2, r3, #8
 8044d94:	687b      	ldr	r3, [r7, #4]
 8044d96:	431a      	orrs	r2, r3
 8044d98:	68bb      	ldr	r3, [r7, #8]
 8044d9a:	4313      	orrs	r3, r2
 8044d9c:	697a      	ldr	r2, [r7, #20]
 8044d9e:	4313      	orrs	r3, r2
 8044da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8044da2:	68fb      	ldr	r3, [r7, #12]
 8044da4:	697a      	ldr	r2, [r7, #20]
 8044da6:	609a      	str	r2, [r3, #8]
}
 8044da8:	bf00      	nop
 8044daa:	371c      	adds	r7, #28
 8044dac:	46bd      	mov	sp, r7
 8044dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044db2:	4770      	bx	lr

08044db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8044db4:	b480      	push	{r7}
 8044db6:	b085      	sub	sp, #20
 8044db8:	af00      	add	r7, sp, #0
 8044dba:	6078      	str	r0, [r7, #4]
 8044dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8044dbe:	687b      	ldr	r3, [r7, #4]
 8044dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8044dc4:	2b01      	cmp	r3, #1
 8044dc6:	d101      	bne.n	8044dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8044dc8:	2302      	movs	r3, #2
 8044dca:	e05a      	b.n	8044e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8044dcc:	687b      	ldr	r3, [r7, #4]
 8044dce:	2201      	movs	r2, #1
 8044dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044dd4:	687b      	ldr	r3, [r7, #4]
 8044dd6:	2202      	movs	r2, #2
 8044dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8044ddc:	687b      	ldr	r3, [r7, #4]
 8044dde:	681b      	ldr	r3, [r3, #0]
 8044de0:	685b      	ldr	r3, [r3, #4]
 8044de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8044de4:	687b      	ldr	r3, [r7, #4]
 8044de6:	681b      	ldr	r3, [r3, #0]
 8044de8:	689b      	ldr	r3, [r3, #8]
 8044dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8044dec:	68fb      	ldr	r3, [r7, #12]
 8044dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8044df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8044df4:	683b      	ldr	r3, [r7, #0]
 8044df6:	681b      	ldr	r3, [r3, #0]
 8044df8:	68fa      	ldr	r2, [r7, #12]
 8044dfa:	4313      	orrs	r3, r2
 8044dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8044dfe:	687b      	ldr	r3, [r7, #4]
 8044e00:	681b      	ldr	r3, [r3, #0]
 8044e02:	68fa      	ldr	r2, [r7, #12]
 8044e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8044e06:	687b      	ldr	r3, [r7, #4]
 8044e08:	681b      	ldr	r3, [r3, #0]
 8044e0a:	4a21      	ldr	r2, [pc, #132]	@ (8044e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8044e0c:	4293      	cmp	r3, r2
 8044e0e:	d022      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e10:	687b      	ldr	r3, [r7, #4]
 8044e12:	681b      	ldr	r3, [r3, #0]
 8044e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044e18:	d01d      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e1a:	687b      	ldr	r3, [r7, #4]
 8044e1c:	681b      	ldr	r3, [r3, #0]
 8044e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8044e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8044e20:	4293      	cmp	r3, r2
 8044e22:	d018      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e24:	687b      	ldr	r3, [r7, #4]
 8044e26:	681b      	ldr	r3, [r3, #0]
 8044e28:	4a1b      	ldr	r2, [pc, #108]	@ (8044e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8044e2a:	4293      	cmp	r3, r2
 8044e2c:	d013      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e2e:	687b      	ldr	r3, [r7, #4]
 8044e30:	681b      	ldr	r3, [r3, #0]
 8044e32:	4a1a      	ldr	r2, [pc, #104]	@ (8044e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8044e34:	4293      	cmp	r3, r2
 8044e36:	d00e      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e38:	687b      	ldr	r3, [r7, #4]
 8044e3a:	681b      	ldr	r3, [r3, #0]
 8044e3c:	4a18      	ldr	r2, [pc, #96]	@ (8044ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8044e3e:	4293      	cmp	r3, r2
 8044e40:	d009      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e42:	687b      	ldr	r3, [r7, #4]
 8044e44:	681b      	ldr	r3, [r3, #0]
 8044e46:	4a17      	ldr	r2, [pc, #92]	@ (8044ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8044e48:	4293      	cmp	r3, r2
 8044e4a:	d004      	beq.n	8044e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8044e4c:	687b      	ldr	r3, [r7, #4]
 8044e4e:	681b      	ldr	r3, [r3, #0]
 8044e50:	4a15      	ldr	r2, [pc, #84]	@ (8044ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8044e52:	4293      	cmp	r3, r2
 8044e54:	d10c      	bne.n	8044e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8044e56:	68bb      	ldr	r3, [r7, #8]
 8044e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8044e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8044e5e:	683b      	ldr	r3, [r7, #0]
 8044e60:	685b      	ldr	r3, [r3, #4]
 8044e62:	68ba      	ldr	r2, [r7, #8]
 8044e64:	4313      	orrs	r3, r2
 8044e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8044e68:	687b      	ldr	r3, [r7, #4]
 8044e6a:	681b      	ldr	r3, [r3, #0]
 8044e6c:	68ba      	ldr	r2, [r7, #8]
 8044e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8044e70:	687b      	ldr	r3, [r7, #4]
 8044e72:	2201      	movs	r2, #1
 8044e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8044e78:	687b      	ldr	r3, [r7, #4]
 8044e7a:	2200      	movs	r2, #0
 8044e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8044e80:	2300      	movs	r3, #0
}
 8044e82:	4618      	mov	r0, r3
 8044e84:	3714      	adds	r7, #20
 8044e86:	46bd      	mov	sp, r7
 8044e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e8c:	4770      	bx	lr
 8044e8e:	bf00      	nop
 8044e90:	40010000 	.word	0x40010000
 8044e94:	40000400 	.word	0x40000400
 8044e98:	40000800 	.word	0x40000800
 8044e9c:	40000c00 	.word	0x40000c00
 8044ea0:	40010400 	.word	0x40010400
 8044ea4:	40014000 	.word	0x40014000
 8044ea8:	40001800 	.word	0x40001800

08044eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8044eac:	b480      	push	{r7}
 8044eae:	b083      	sub	sp, #12
 8044eb0:	af00      	add	r7, sp, #0
 8044eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8044eb4:	bf00      	nop
 8044eb6:	370c      	adds	r7, #12
 8044eb8:	46bd      	mov	sp, r7
 8044eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ebe:	4770      	bx	lr

08044ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8044ec0:	b480      	push	{r7}
 8044ec2:	b083      	sub	sp, #12
 8044ec4:	af00      	add	r7, sp, #0
 8044ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8044ec8:	bf00      	nop
 8044eca:	370c      	adds	r7, #12
 8044ecc:	46bd      	mov	sp, r7
 8044ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ed2:	4770      	bx	lr

08044ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8044ed4:	b580      	push	{r7, lr}
 8044ed6:	b082      	sub	sp, #8
 8044ed8:	af00      	add	r7, sp, #0
 8044eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8044edc:	687b      	ldr	r3, [r7, #4]
 8044ede:	2b00      	cmp	r3, #0
 8044ee0:	d101      	bne.n	8044ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8044ee2:	2301      	movs	r3, #1
 8044ee4:	e042      	b.n	8044f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8044ee6:	687b      	ldr	r3, [r7, #4]
 8044ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8044eec:	b2db      	uxtb	r3, r3
 8044eee:	2b00      	cmp	r3, #0
 8044ef0:	d106      	bne.n	8044f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8044ef2:	687b      	ldr	r3, [r7, #4]
 8044ef4:	2200      	movs	r2, #0
 8044ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8044efa:	6878      	ldr	r0, [r7, #4]
 8044efc:	f7fc ff4a 	bl	8041d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8044f00:	687b      	ldr	r3, [r7, #4]
 8044f02:	2224      	movs	r2, #36	@ 0x24
 8044f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8044f08:	687b      	ldr	r3, [r7, #4]
 8044f0a:	681b      	ldr	r3, [r3, #0]
 8044f0c:	68da      	ldr	r2, [r3, #12]
 8044f0e:	687b      	ldr	r3, [r7, #4]
 8044f10:	681b      	ldr	r3, [r3, #0]
 8044f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8044f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8044f18:	6878      	ldr	r0, [r7, #4]
 8044f1a:	f000 fdbd 	bl	8045a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8044f1e:	687b      	ldr	r3, [r7, #4]
 8044f20:	681b      	ldr	r3, [r3, #0]
 8044f22:	691a      	ldr	r2, [r3, #16]
 8044f24:	687b      	ldr	r3, [r7, #4]
 8044f26:	681b      	ldr	r3, [r3, #0]
 8044f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8044f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8044f2e:	687b      	ldr	r3, [r7, #4]
 8044f30:	681b      	ldr	r3, [r3, #0]
 8044f32:	695a      	ldr	r2, [r3, #20]
 8044f34:	687b      	ldr	r3, [r7, #4]
 8044f36:	681b      	ldr	r3, [r3, #0]
 8044f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8044f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8044f3e:	687b      	ldr	r3, [r7, #4]
 8044f40:	681b      	ldr	r3, [r3, #0]
 8044f42:	68da      	ldr	r2, [r3, #12]
 8044f44:	687b      	ldr	r3, [r7, #4]
 8044f46:	681b      	ldr	r3, [r3, #0]
 8044f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8044f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8044f4e:	687b      	ldr	r3, [r7, #4]
 8044f50:	2200      	movs	r2, #0
 8044f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8044f54:	687b      	ldr	r3, [r7, #4]
 8044f56:	2220      	movs	r2, #32
 8044f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8044f5c:	687b      	ldr	r3, [r7, #4]
 8044f5e:	2220      	movs	r2, #32
 8044f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8044f64:	687b      	ldr	r3, [r7, #4]
 8044f66:	2200      	movs	r2, #0
 8044f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8044f6a:	2300      	movs	r3, #0
}
 8044f6c:	4618      	mov	r0, r3
 8044f6e:	3708      	adds	r7, #8
 8044f70:	46bd      	mov	sp, r7
 8044f72:	bd80      	pop	{r7, pc}

08044f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8044f74:	b580      	push	{r7, lr}
 8044f76:	b08a      	sub	sp, #40	@ 0x28
 8044f78:	af02      	add	r7, sp, #8
 8044f7a:	60f8      	str	r0, [r7, #12]
 8044f7c:	60b9      	str	r1, [r7, #8]
 8044f7e:	603b      	str	r3, [r7, #0]
 8044f80:	4613      	mov	r3, r2
 8044f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8044f84:	2300      	movs	r3, #0
 8044f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8044f88:	68fb      	ldr	r3, [r7, #12]
 8044f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8044f8e:	b2db      	uxtb	r3, r3
 8044f90:	2b20      	cmp	r3, #32
 8044f92:	d175      	bne.n	8045080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8044f94:	68bb      	ldr	r3, [r7, #8]
 8044f96:	2b00      	cmp	r3, #0
 8044f98:	d002      	beq.n	8044fa0 <HAL_UART_Transmit+0x2c>
 8044f9a:	88fb      	ldrh	r3, [r7, #6]
 8044f9c:	2b00      	cmp	r3, #0
 8044f9e:	d101      	bne.n	8044fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8044fa0:	2301      	movs	r3, #1
 8044fa2:	e06e      	b.n	8045082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8044fa4:	68fb      	ldr	r3, [r7, #12]
 8044fa6:	2200      	movs	r2, #0
 8044fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8044faa:	68fb      	ldr	r3, [r7, #12]
 8044fac:	2221      	movs	r2, #33	@ 0x21
 8044fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8044fb2:	f7fd fa9f 	bl	80424f4 <HAL_GetTick>
 8044fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8044fb8:	68fb      	ldr	r3, [r7, #12]
 8044fba:	88fa      	ldrh	r2, [r7, #6]
 8044fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8044fbe:	68fb      	ldr	r3, [r7, #12]
 8044fc0:	88fa      	ldrh	r2, [r7, #6]
 8044fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8044fc4:	68fb      	ldr	r3, [r7, #12]
 8044fc6:	689b      	ldr	r3, [r3, #8]
 8044fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044fcc:	d108      	bne.n	8044fe0 <HAL_UART_Transmit+0x6c>
 8044fce:	68fb      	ldr	r3, [r7, #12]
 8044fd0:	691b      	ldr	r3, [r3, #16]
 8044fd2:	2b00      	cmp	r3, #0
 8044fd4:	d104      	bne.n	8044fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8044fd6:	2300      	movs	r3, #0
 8044fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8044fda:	68bb      	ldr	r3, [r7, #8]
 8044fdc:	61bb      	str	r3, [r7, #24]
 8044fde:	e003      	b.n	8044fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8044fe0:	68bb      	ldr	r3, [r7, #8]
 8044fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8044fe4:	2300      	movs	r3, #0
 8044fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8044fe8:	e02e      	b.n	8045048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8044fea:	683b      	ldr	r3, [r7, #0]
 8044fec:	9300      	str	r3, [sp, #0]
 8044fee:	697b      	ldr	r3, [r7, #20]
 8044ff0:	2200      	movs	r2, #0
 8044ff2:	2180      	movs	r1, #128	@ 0x80
 8044ff4:	68f8      	ldr	r0, [r7, #12]
 8044ff6:	f000 fb1f 	bl	8045638 <UART_WaitOnFlagUntilTimeout>
 8044ffa:	4603      	mov	r3, r0
 8044ffc:	2b00      	cmp	r3, #0
 8044ffe:	d005      	beq.n	804500c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8045000:	68fb      	ldr	r3, [r7, #12]
 8045002:	2220      	movs	r2, #32
 8045004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8045008:	2303      	movs	r3, #3
 804500a:	e03a      	b.n	8045082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 804500c:	69fb      	ldr	r3, [r7, #28]
 804500e:	2b00      	cmp	r3, #0
 8045010:	d10b      	bne.n	804502a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8045012:	69bb      	ldr	r3, [r7, #24]
 8045014:	881b      	ldrh	r3, [r3, #0]
 8045016:	461a      	mov	r2, r3
 8045018:	68fb      	ldr	r3, [r7, #12]
 804501a:	681b      	ldr	r3, [r3, #0]
 804501c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8045022:	69bb      	ldr	r3, [r7, #24]
 8045024:	3302      	adds	r3, #2
 8045026:	61bb      	str	r3, [r7, #24]
 8045028:	e007      	b.n	804503a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804502a:	69fb      	ldr	r3, [r7, #28]
 804502c:	781a      	ldrb	r2, [r3, #0]
 804502e:	68fb      	ldr	r3, [r7, #12]
 8045030:	681b      	ldr	r3, [r3, #0]
 8045032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8045034:	69fb      	ldr	r3, [r7, #28]
 8045036:	3301      	adds	r3, #1
 8045038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804503a:	68fb      	ldr	r3, [r7, #12]
 804503c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 804503e:	b29b      	uxth	r3, r3
 8045040:	3b01      	subs	r3, #1
 8045042:	b29a      	uxth	r2, r3
 8045044:	68fb      	ldr	r3, [r7, #12]
 8045046:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8045048:	68fb      	ldr	r3, [r7, #12]
 804504a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 804504c:	b29b      	uxth	r3, r3
 804504e:	2b00      	cmp	r3, #0
 8045050:	d1cb      	bne.n	8044fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8045052:	683b      	ldr	r3, [r7, #0]
 8045054:	9300      	str	r3, [sp, #0]
 8045056:	697b      	ldr	r3, [r7, #20]
 8045058:	2200      	movs	r2, #0
 804505a:	2140      	movs	r1, #64	@ 0x40
 804505c:	68f8      	ldr	r0, [r7, #12]
 804505e:	f000 faeb 	bl	8045638 <UART_WaitOnFlagUntilTimeout>
 8045062:	4603      	mov	r3, r0
 8045064:	2b00      	cmp	r3, #0
 8045066:	d005      	beq.n	8045074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8045068:	68fb      	ldr	r3, [r7, #12]
 804506a:	2220      	movs	r2, #32
 804506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8045070:	2303      	movs	r3, #3
 8045072:	e006      	b.n	8045082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8045074:	68fb      	ldr	r3, [r7, #12]
 8045076:	2220      	movs	r2, #32
 8045078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 804507c:	2300      	movs	r3, #0
 804507e:	e000      	b.n	8045082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8045080:	2302      	movs	r3, #2
  }
}
 8045082:	4618      	mov	r0, r3
 8045084:	3720      	adds	r7, #32
 8045086:	46bd      	mov	sp, r7
 8045088:	bd80      	pop	{r7, pc}

0804508a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 804508a:	b580      	push	{r7, lr}
 804508c:	b084      	sub	sp, #16
 804508e:	af00      	add	r7, sp, #0
 8045090:	60f8      	str	r0, [r7, #12]
 8045092:	60b9      	str	r1, [r7, #8]
 8045094:	4613      	mov	r3, r2
 8045096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8045098:	68fb      	ldr	r3, [r7, #12]
 804509a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 804509e:	b2db      	uxtb	r3, r3
 80450a0:	2b20      	cmp	r3, #32
 80450a2:	d112      	bne.n	80450ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80450a4:	68bb      	ldr	r3, [r7, #8]
 80450a6:	2b00      	cmp	r3, #0
 80450a8:	d002      	beq.n	80450b0 <HAL_UART_Receive_IT+0x26>
 80450aa:	88fb      	ldrh	r3, [r7, #6]
 80450ac:	2b00      	cmp	r3, #0
 80450ae:	d101      	bne.n	80450b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80450b0:	2301      	movs	r3, #1
 80450b2:	e00b      	b.n	80450cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80450b4:	68fb      	ldr	r3, [r7, #12]
 80450b6:	2200      	movs	r2, #0
 80450b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80450ba:	88fb      	ldrh	r3, [r7, #6]
 80450bc:	461a      	mov	r2, r3
 80450be:	68b9      	ldr	r1, [r7, #8]
 80450c0:	68f8      	ldr	r0, [r7, #12]
 80450c2:	f000 fb12 	bl	80456ea <UART_Start_Receive_IT>
 80450c6:	4603      	mov	r3, r0
 80450c8:	e000      	b.n	80450cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80450ca:	2302      	movs	r3, #2
  }
}
 80450cc:	4618      	mov	r0, r3
 80450ce:	3710      	adds	r7, #16
 80450d0:	46bd      	mov	sp, r7
 80450d2:	bd80      	pop	{r7, pc}

080450d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80450d4:	b580      	push	{r7, lr}
 80450d6:	b0ba      	sub	sp, #232	@ 0xe8
 80450d8:	af00      	add	r7, sp, #0
 80450da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80450dc:	687b      	ldr	r3, [r7, #4]
 80450de:	681b      	ldr	r3, [r3, #0]
 80450e0:	681b      	ldr	r3, [r3, #0]
 80450e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80450e6:	687b      	ldr	r3, [r7, #4]
 80450e8:	681b      	ldr	r3, [r3, #0]
 80450ea:	68db      	ldr	r3, [r3, #12]
 80450ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80450f0:	687b      	ldr	r3, [r7, #4]
 80450f2:	681b      	ldr	r3, [r3, #0]
 80450f4:	695b      	ldr	r3, [r3, #20]
 80450f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80450fa:	2300      	movs	r3, #0
 80450fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8045100:	2300      	movs	r3, #0
 8045102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8045106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 804510a:	f003 030f 	and.w	r3, r3, #15
 804510e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8045112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8045116:	2b00      	cmp	r3, #0
 8045118:	d10f      	bne.n	804513a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 804511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 804511e:	f003 0320 	and.w	r3, r3, #32
 8045122:	2b00      	cmp	r3, #0
 8045124:	d009      	beq.n	804513a <HAL_UART_IRQHandler+0x66>
 8045126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 804512a:	f003 0320 	and.w	r3, r3, #32
 804512e:	2b00      	cmp	r3, #0
 8045130:	d003      	beq.n	804513a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8045132:	6878      	ldr	r0, [r7, #4]
 8045134:	f000 fbf2 	bl	804591c <UART_Receive_IT>
      return;
 8045138:	e25b      	b.n	80455f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 804513a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 804513e:	2b00      	cmp	r3, #0
 8045140:	f000 80de 	beq.w	8045300 <HAL_UART_IRQHandler+0x22c>
 8045144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8045148:	f003 0301 	and.w	r3, r3, #1
 804514c:	2b00      	cmp	r3, #0
 804514e:	d106      	bne.n	804515e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8045150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8045154:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8045158:	2b00      	cmp	r3, #0
 804515a:	f000 80d1 	beq.w	8045300 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 804515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8045162:	f003 0301 	and.w	r3, r3, #1
 8045166:	2b00      	cmp	r3, #0
 8045168:	d00b      	beq.n	8045182 <HAL_UART_IRQHandler+0xae>
 804516a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 804516e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8045172:	2b00      	cmp	r3, #0
 8045174:	d005      	beq.n	8045182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8045176:	687b      	ldr	r3, [r7, #4]
 8045178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804517a:	f043 0201 	orr.w	r2, r3, #1
 804517e:	687b      	ldr	r3, [r7, #4]
 8045180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8045182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8045186:	f003 0304 	and.w	r3, r3, #4
 804518a:	2b00      	cmp	r3, #0
 804518c:	d00b      	beq.n	80451a6 <HAL_UART_IRQHandler+0xd2>
 804518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8045192:	f003 0301 	and.w	r3, r3, #1
 8045196:	2b00      	cmp	r3, #0
 8045198:	d005      	beq.n	80451a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804519a:	687b      	ldr	r3, [r7, #4]
 804519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804519e:	f043 0202 	orr.w	r2, r3, #2
 80451a2:	687b      	ldr	r3, [r7, #4]
 80451a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80451a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80451aa:	f003 0302 	and.w	r3, r3, #2
 80451ae:	2b00      	cmp	r3, #0
 80451b0:	d00b      	beq.n	80451ca <HAL_UART_IRQHandler+0xf6>
 80451b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80451b6:	f003 0301 	and.w	r3, r3, #1
 80451ba:	2b00      	cmp	r3, #0
 80451bc:	d005      	beq.n	80451ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80451be:	687b      	ldr	r3, [r7, #4]
 80451c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80451c2:	f043 0204 	orr.w	r2, r3, #4
 80451c6:	687b      	ldr	r3, [r7, #4]
 80451c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80451ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80451ce:	f003 0308 	and.w	r3, r3, #8
 80451d2:	2b00      	cmp	r3, #0
 80451d4:	d011      	beq.n	80451fa <HAL_UART_IRQHandler+0x126>
 80451d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80451da:	f003 0320 	and.w	r3, r3, #32
 80451de:	2b00      	cmp	r3, #0
 80451e0:	d105      	bne.n	80451ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80451e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80451e6:	f003 0301 	and.w	r3, r3, #1
 80451ea:	2b00      	cmp	r3, #0
 80451ec:	d005      	beq.n	80451fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80451ee:	687b      	ldr	r3, [r7, #4]
 80451f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80451f2:	f043 0208 	orr.w	r2, r3, #8
 80451f6:	687b      	ldr	r3, [r7, #4]
 80451f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80451fa:	687b      	ldr	r3, [r7, #4]
 80451fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80451fe:	2b00      	cmp	r3, #0
 8045200:	f000 81f2 	beq.w	80455e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8045208:	f003 0320 	and.w	r3, r3, #32
 804520c:	2b00      	cmp	r3, #0
 804520e:	d008      	beq.n	8045222 <HAL_UART_IRQHandler+0x14e>
 8045210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8045214:	f003 0320 	and.w	r3, r3, #32
 8045218:	2b00      	cmp	r3, #0
 804521a:	d002      	beq.n	8045222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 804521c:	6878      	ldr	r0, [r7, #4]
 804521e:	f000 fb7d 	bl	804591c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045222:	687b      	ldr	r3, [r7, #4]
 8045224:	681b      	ldr	r3, [r3, #0]
 8045226:	695b      	ldr	r3, [r3, #20]
 8045228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804522c:	2b40      	cmp	r3, #64	@ 0x40
 804522e:	bf0c      	ite	eq
 8045230:	2301      	moveq	r3, #1
 8045232:	2300      	movne	r3, #0
 8045234:	b2db      	uxtb	r3, r3
 8045236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 804523a:	687b      	ldr	r3, [r7, #4]
 804523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804523e:	f003 0308 	and.w	r3, r3, #8
 8045242:	2b00      	cmp	r3, #0
 8045244:	d103      	bne.n	804524e <HAL_UART_IRQHandler+0x17a>
 8045246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 804524a:	2b00      	cmp	r3, #0
 804524c:	d04f      	beq.n	80452ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 804524e:	6878      	ldr	r0, [r7, #4]
 8045250:	f000 fa85 	bl	804575e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045254:	687b      	ldr	r3, [r7, #4]
 8045256:	681b      	ldr	r3, [r3, #0]
 8045258:	695b      	ldr	r3, [r3, #20]
 804525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804525e:	2b40      	cmp	r3, #64	@ 0x40
 8045260:	d141      	bne.n	80452e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045262:	687b      	ldr	r3, [r7, #4]
 8045264:	681b      	ldr	r3, [r3, #0]
 8045266:	3314      	adds	r3, #20
 8045268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804526c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8045270:	e853 3f00 	ldrex	r3, [r3]
 8045274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8045278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 804527c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8045280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8045284:	687b      	ldr	r3, [r7, #4]
 8045286:	681b      	ldr	r3, [r3, #0]
 8045288:	3314      	adds	r3, #20
 804528a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 804528e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8045292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 804529a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 804529e:	e841 2300 	strex	r3, r2, [r1]
 80452a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80452a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80452aa:	2b00      	cmp	r3, #0
 80452ac:	d1d9      	bne.n	8045262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80452ae:	687b      	ldr	r3, [r7, #4]
 80452b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80452b2:	2b00      	cmp	r3, #0
 80452b4:	d013      	beq.n	80452de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80452b6:	687b      	ldr	r3, [r7, #4]
 80452b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80452ba:	4a7e      	ldr	r2, [pc, #504]	@ (80454b4 <HAL_UART_IRQHandler+0x3e0>)
 80452bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80452be:	687b      	ldr	r3, [r7, #4]
 80452c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80452c2:	4618      	mov	r0, r3
 80452c4:	f7fd fdb6 	bl	8042e34 <HAL_DMA_Abort_IT>
 80452c8:	4603      	mov	r3, r0
 80452ca:	2b00      	cmp	r3, #0
 80452cc:	d016      	beq.n	80452fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80452ce:	687b      	ldr	r3, [r7, #4]
 80452d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80452d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80452d4:	687a      	ldr	r2, [r7, #4]
 80452d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80452d8:	4610      	mov	r0, r2
 80452da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80452dc:	e00e      	b.n	80452fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80452de:	6878      	ldr	r0, [r7, #4]
 80452e0:	f000 f994 	bl	804560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80452e4:	e00a      	b.n	80452fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80452e6:	6878      	ldr	r0, [r7, #4]
 80452e8:	f000 f990 	bl	804560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80452ec:	e006      	b.n	80452fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80452ee:	6878      	ldr	r0, [r7, #4]
 80452f0:	f000 f98c 	bl	804560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80452f4:	687b      	ldr	r3, [r7, #4]
 80452f6:	2200      	movs	r2, #0
 80452f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80452fa:	e175      	b.n	80455e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80452fc:	bf00      	nop
    return;
 80452fe:	e173      	b.n	80455e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8045300:	687b      	ldr	r3, [r7, #4]
 8045302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8045304:	2b01      	cmp	r3, #1
 8045306:	f040 814f 	bne.w	80455a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 804530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 804530e:	f003 0310 	and.w	r3, r3, #16
 8045312:	2b00      	cmp	r3, #0
 8045314:	f000 8148 	beq.w	80455a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8045318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 804531c:	f003 0310 	and.w	r3, r3, #16
 8045320:	2b00      	cmp	r3, #0
 8045322:	f000 8141 	beq.w	80455a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8045326:	2300      	movs	r3, #0
 8045328:	60bb      	str	r3, [r7, #8]
 804532a:	687b      	ldr	r3, [r7, #4]
 804532c:	681b      	ldr	r3, [r3, #0]
 804532e:	681b      	ldr	r3, [r3, #0]
 8045330:	60bb      	str	r3, [r7, #8]
 8045332:	687b      	ldr	r3, [r7, #4]
 8045334:	681b      	ldr	r3, [r3, #0]
 8045336:	685b      	ldr	r3, [r3, #4]
 8045338:	60bb      	str	r3, [r7, #8]
 804533a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804533c:	687b      	ldr	r3, [r7, #4]
 804533e:	681b      	ldr	r3, [r3, #0]
 8045340:	695b      	ldr	r3, [r3, #20]
 8045342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8045346:	2b40      	cmp	r3, #64	@ 0x40
 8045348:	f040 80b6 	bne.w	80454b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804534c:	687b      	ldr	r3, [r7, #4]
 804534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8045350:	681b      	ldr	r3, [r3, #0]
 8045352:	685b      	ldr	r3, [r3, #4]
 8045354:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8045358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 804535c:	2b00      	cmp	r3, #0
 804535e:	f000 8145 	beq.w	80455ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8045362:	687b      	ldr	r3, [r7, #4]
 8045364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8045366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 804536a:	429a      	cmp	r2, r3
 804536c:	f080 813e 	bcs.w	80455ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8045370:	687b      	ldr	r3, [r7, #4]
 8045372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8045376:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8045378:	687b      	ldr	r3, [r7, #4]
 804537a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804537c:	69db      	ldr	r3, [r3, #28]
 804537e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8045382:	f000 8088 	beq.w	8045496 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8045386:	687b      	ldr	r3, [r7, #4]
 8045388:	681b      	ldr	r3, [r3, #0]
 804538a:	330c      	adds	r3, #12
 804538c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8045394:	e853 3f00 	ldrex	r3, [r3]
 8045398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 804539c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80453a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80453a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80453a8:	687b      	ldr	r3, [r7, #4]
 80453aa:	681b      	ldr	r3, [r3, #0]
 80453ac:	330c      	adds	r3, #12
 80453ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80453b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80453b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80453ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80453be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80453c2:	e841 2300 	strex	r3, r2, [r1]
 80453c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80453ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80453ce:	2b00      	cmp	r3, #0
 80453d0:	d1d9      	bne.n	8045386 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80453d2:	687b      	ldr	r3, [r7, #4]
 80453d4:	681b      	ldr	r3, [r3, #0]
 80453d6:	3314      	adds	r3, #20
 80453d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80453da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80453dc:	e853 3f00 	ldrex	r3, [r3]
 80453e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80453e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80453e4:	f023 0301 	bic.w	r3, r3, #1
 80453e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80453ec:	687b      	ldr	r3, [r7, #4]
 80453ee:	681b      	ldr	r3, [r3, #0]
 80453f0:	3314      	adds	r3, #20
 80453f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80453f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80453fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80453fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80453fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8045402:	e841 2300 	strex	r3, r2, [r1]
 8045406:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8045408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 804540a:	2b00      	cmp	r3, #0
 804540c:	d1e1      	bne.n	80453d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804540e:	687b      	ldr	r3, [r7, #4]
 8045410:	681b      	ldr	r3, [r3, #0]
 8045412:	3314      	adds	r3, #20
 8045414:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8045418:	e853 3f00 	ldrex	r3, [r3]
 804541c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 804541e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8045420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8045424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8045428:	687b      	ldr	r3, [r7, #4]
 804542a:	681b      	ldr	r3, [r3, #0]
 804542c:	3314      	adds	r3, #20
 804542e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8045432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8045434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8045438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 804543a:	e841 2300 	strex	r3, r2, [r1]
 804543e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8045440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8045442:	2b00      	cmp	r3, #0
 8045444:	d1e3      	bne.n	804540e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8045446:	687b      	ldr	r3, [r7, #4]
 8045448:	2220      	movs	r2, #32
 804544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804544e:	687b      	ldr	r3, [r7, #4]
 8045450:	2200      	movs	r2, #0
 8045452:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045454:	687b      	ldr	r3, [r7, #4]
 8045456:	681b      	ldr	r3, [r3, #0]
 8045458:	330c      	adds	r3, #12
 804545a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804545c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804545e:	e853 3f00 	ldrex	r3, [r3]
 8045462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8045464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8045466:	f023 0310 	bic.w	r3, r3, #16
 804546a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 804546e:	687b      	ldr	r3, [r7, #4]
 8045470:	681b      	ldr	r3, [r3, #0]
 8045472:	330c      	adds	r3, #12
 8045474:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8045478:	65ba      	str	r2, [r7, #88]	@ 0x58
 804547a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804547c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 804547e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8045480:	e841 2300 	strex	r3, r2, [r1]
 8045484:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8045486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8045488:	2b00      	cmp	r3, #0
 804548a:	d1e3      	bne.n	8045454 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804548c:	687b      	ldr	r3, [r7, #4]
 804548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8045490:	4618      	mov	r0, r3
 8045492:	f7fd fc5f 	bl	8042d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8045496:	687b      	ldr	r3, [r7, #4]
 8045498:	2202      	movs	r2, #2
 804549a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 804549c:	687b      	ldr	r3, [r7, #4]
 804549e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80454a0:	687b      	ldr	r3, [r7, #4]
 80454a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80454a4:	b29b      	uxth	r3, r3
 80454a6:	1ad3      	subs	r3, r2, r3
 80454a8:	b29b      	uxth	r3, r3
 80454aa:	4619      	mov	r1, r3
 80454ac:	6878      	ldr	r0, [r7, #4]
 80454ae:	f000 f8b7 	bl	8045620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80454b2:	e09b      	b.n	80455ec <HAL_UART_IRQHandler+0x518>
 80454b4:	08045825 	.word	0x08045825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80454b8:	687b      	ldr	r3, [r7, #4]
 80454ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80454bc:	687b      	ldr	r3, [r7, #4]
 80454be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80454c0:	b29b      	uxth	r3, r3
 80454c2:	1ad3      	subs	r3, r2, r3
 80454c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80454c8:	687b      	ldr	r3, [r7, #4]
 80454ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80454cc:	b29b      	uxth	r3, r3
 80454ce:	2b00      	cmp	r3, #0
 80454d0:	f000 808e 	beq.w	80455f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80454d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80454d8:	2b00      	cmp	r3, #0
 80454da:	f000 8089 	beq.w	80455f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80454de:	687b      	ldr	r3, [r7, #4]
 80454e0:	681b      	ldr	r3, [r3, #0]
 80454e2:	330c      	adds	r3, #12
 80454e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80454e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80454e8:	e853 3f00 	ldrex	r3, [r3]
 80454ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80454ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80454f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80454f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80454f8:	687b      	ldr	r3, [r7, #4]
 80454fa:	681b      	ldr	r3, [r3, #0]
 80454fc:	330c      	adds	r3, #12
 80454fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8045502:	647a      	str	r2, [r7, #68]	@ 0x44
 8045504:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045506:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8045508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 804550a:	e841 2300 	strex	r3, r2, [r1]
 804550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8045510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8045512:	2b00      	cmp	r3, #0
 8045514:	d1e3      	bne.n	80454de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045516:	687b      	ldr	r3, [r7, #4]
 8045518:	681b      	ldr	r3, [r3, #0]
 804551a:	3314      	adds	r3, #20
 804551c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8045520:	e853 3f00 	ldrex	r3, [r3]
 8045524:	623b      	str	r3, [r7, #32]
   return(result);
 8045526:	6a3b      	ldr	r3, [r7, #32]
 8045528:	f023 0301 	bic.w	r3, r3, #1
 804552c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8045530:	687b      	ldr	r3, [r7, #4]
 8045532:	681b      	ldr	r3, [r3, #0]
 8045534:	3314      	adds	r3, #20
 8045536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 804553a:	633a      	str	r2, [r7, #48]	@ 0x30
 804553c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804553e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8045540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8045542:	e841 2300 	strex	r3, r2, [r1]
 8045546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8045548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804554a:	2b00      	cmp	r3, #0
 804554c:	d1e3      	bne.n	8045516 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804554e:	687b      	ldr	r3, [r7, #4]
 8045550:	2220      	movs	r2, #32
 8045552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045556:	687b      	ldr	r3, [r7, #4]
 8045558:	2200      	movs	r2, #0
 804555a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804555c:	687b      	ldr	r3, [r7, #4]
 804555e:	681b      	ldr	r3, [r3, #0]
 8045560:	330c      	adds	r3, #12
 8045562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045564:	693b      	ldr	r3, [r7, #16]
 8045566:	e853 3f00 	ldrex	r3, [r3]
 804556a:	60fb      	str	r3, [r7, #12]
   return(result);
 804556c:	68fb      	ldr	r3, [r7, #12]
 804556e:	f023 0310 	bic.w	r3, r3, #16
 8045572:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8045576:	687b      	ldr	r3, [r7, #4]
 8045578:	681b      	ldr	r3, [r3, #0]
 804557a:	330c      	adds	r3, #12
 804557c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8045580:	61fa      	str	r2, [r7, #28]
 8045582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045584:	69b9      	ldr	r1, [r7, #24]
 8045586:	69fa      	ldr	r2, [r7, #28]
 8045588:	e841 2300 	strex	r3, r2, [r1]
 804558c:	617b      	str	r3, [r7, #20]
   return(result);
 804558e:	697b      	ldr	r3, [r7, #20]
 8045590:	2b00      	cmp	r3, #0
 8045592:	d1e3      	bne.n	804555c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8045594:	687b      	ldr	r3, [r7, #4]
 8045596:	2202      	movs	r2, #2
 8045598:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 804559a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 804559e:	4619      	mov	r1, r3
 80455a0:	6878      	ldr	r0, [r7, #4]
 80455a2:	f000 f83d 	bl	8045620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80455a6:	e023      	b.n	80455f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80455a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80455ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80455b0:	2b00      	cmp	r3, #0
 80455b2:	d009      	beq.n	80455c8 <HAL_UART_IRQHandler+0x4f4>
 80455b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80455b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80455bc:	2b00      	cmp	r3, #0
 80455be:	d003      	beq.n	80455c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80455c0:	6878      	ldr	r0, [r7, #4]
 80455c2:	f000 f943 	bl	804584c <UART_Transmit_IT>
    return;
 80455c6:	e014      	b.n	80455f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80455c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80455cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80455d0:	2b00      	cmp	r3, #0
 80455d2:	d00e      	beq.n	80455f2 <HAL_UART_IRQHandler+0x51e>
 80455d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80455d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80455dc:	2b00      	cmp	r3, #0
 80455de:	d008      	beq.n	80455f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80455e0:	6878      	ldr	r0, [r7, #4]
 80455e2:	f000 f983 	bl	80458ec <UART_EndTransmit_IT>
    return;
 80455e6:	e004      	b.n	80455f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80455e8:	bf00      	nop
 80455ea:	e002      	b.n	80455f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80455ec:	bf00      	nop
 80455ee:	e000      	b.n	80455f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80455f0:	bf00      	nop
  }
}
 80455f2:	37e8      	adds	r7, #232	@ 0xe8
 80455f4:	46bd      	mov	sp, r7
 80455f6:	bd80      	pop	{r7, pc}

080455f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80455f8:	b480      	push	{r7}
 80455fa:	b083      	sub	sp, #12
 80455fc:	af00      	add	r7, sp, #0
 80455fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8045600:	bf00      	nop
 8045602:	370c      	adds	r7, #12
 8045604:	46bd      	mov	sp, r7
 8045606:	f85d 7b04 	ldr.w	r7, [sp], #4
 804560a:	4770      	bx	lr

0804560c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 804560c:	b480      	push	{r7}
 804560e:	b083      	sub	sp, #12
 8045610:	af00      	add	r7, sp, #0
 8045612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8045614:	bf00      	nop
 8045616:	370c      	adds	r7, #12
 8045618:	46bd      	mov	sp, r7
 804561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804561e:	4770      	bx	lr

08045620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8045620:	b480      	push	{r7}
 8045622:	b083      	sub	sp, #12
 8045624:	af00      	add	r7, sp, #0
 8045626:	6078      	str	r0, [r7, #4]
 8045628:	460b      	mov	r3, r1
 804562a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 804562c:	bf00      	nop
 804562e:	370c      	adds	r7, #12
 8045630:	46bd      	mov	sp, r7
 8045632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045636:	4770      	bx	lr

08045638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8045638:	b580      	push	{r7, lr}
 804563a:	b086      	sub	sp, #24
 804563c:	af00      	add	r7, sp, #0
 804563e:	60f8      	str	r0, [r7, #12]
 8045640:	60b9      	str	r1, [r7, #8]
 8045642:	603b      	str	r3, [r7, #0]
 8045644:	4613      	mov	r3, r2
 8045646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045648:	e03b      	b.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804564a:	6a3b      	ldr	r3, [r7, #32]
 804564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045650:	d037      	beq.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8045652:	f7fc ff4f 	bl	80424f4 <HAL_GetTick>
 8045656:	4602      	mov	r2, r0
 8045658:	683b      	ldr	r3, [r7, #0]
 804565a:	1ad3      	subs	r3, r2, r3
 804565c:	6a3a      	ldr	r2, [r7, #32]
 804565e:	429a      	cmp	r2, r3
 8045660:	d302      	bcc.n	8045668 <UART_WaitOnFlagUntilTimeout+0x30>
 8045662:	6a3b      	ldr	r3, [r7, #32]
 8045664:	2b00      	cmp	r3, #0
 8045666:	d101      	bne.n	804566c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8045668:	2303      	movs	r3, #3
 804566a:	e03a      	b.n	80456e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 804566c:	68fb      	ldr	r3, [r7, #12]
 804566e:	681b      	ldr	r3, [r3, #0]
 8045670:	68db      	ldr	r3, [r3, #12]
 8045672:	f003 0304 	and.w	r3, r3, #4
 8045676:	2b00      	cmp	r3, #0
 8045678:	d023      	beq.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 804567a:	68bb      	ldr	r3, [r7, #8]
 804567c:	2b80      	cmp	r3, #128	@ 0x80
 804567e:	d020      	beq.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8045680:	68bb      	ldr	r3, [r7, #8]
 8045682:	2b40      	cmp	r3, #64	@ 0x40
 8045684:	d01d      	beq.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8045686:	68fb      	ldr	r3, [r7, #12]
 8045688:	681b      	ldr	r3, [r3, #0]
 804568a:	681b      	ldr	r3, [r3, #0]
 804568c:	f003 0308 	and.w	r3, r3, #8
 8045690:	2b08      	cmp	r3, #8
 8045692:	d116      	bne.n	80456c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8045694:	2300      	movs	r3, #0
 8045696:	617b      	str	r3, [r7, #20]
 8045698:	68fb      	ldr	r3, [r7, #12]
 804569a:	681b      	ldr	r3, [r3, #0]
 804569c:	681b      	ldr	r3, [r3, #0]
 804569e:	617b      	str	r3, [r7, #20]
 80456a0:	68fb      	ldr	r3, [r7, #12]
 80456a2:	681b      	ldr	r3, [r3, #0]
 80456a4:	685b      	ldr	r3, [r3, #4]
 80456a6:	617b      	str	r3, [r7, #20]
 80456a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80456aa:	68f8      	ldr	r0, [r7, #12]
 80456ac:	f000 f857 	bl	804575e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80456b0:	68fb      	ldr	r3, [r7, #12]
 80456b2:	2208      	movs	r2, #8
 80456b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80456b6:	68fb      	ldr	r3, [r7, #12]
 80456b8:	2200      	movs	r2, #0
 80456ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80456be:	2301      	movs	r3, #1
 80456c0:	e00f      	b.n	80456e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80456c2:	68fb      	ldr	r3, [r7, #12]
 80456c4:	681b      	ldr	r3, [r3, #0]
 80456c6:	681a      	ldr	r2, [r3, #0]
 80456c8:	68bb      	ldr	r3, [r7, #8]
 80456ca:	4013      	ands	r3, r2
 80456cc:	68ba      	ldr	r2, [r7, #8]
 80456ce:	429a      	cmp	r2, r3
 80456d0:	bf0c      	ite	eq
 80456d2:	2301      	moveq	r3, #1
 80456d4:	2300      	movne	r3, #0
 80456d6:	b2db      	uxtb	r3, r3
 80456d8:	461a      	mov	r2, r3
 80456da:	79fb      	ldrb	r3, [r7, #7]
 80456dc:	429a      	cmp	r2, r3
 80456de:	d0b4      	beq.n	804564a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80456e0:	2300      	movs	r3, #0
}
 80456e2:	4618      	mov	r0, r3
 80456e4:	3718      	adds	r7, #24
 80456e6:	46bd      	mov	sp, r7
 80456e8:	bd80      	pop	{r7, pc}

080456ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80456ea:	b480      	push	{r7}
 80456ec:	b085      	sub	sp, #20
 80456ee:	af00      	add	r7, sp, #0
 80456f0:	60f8      	str	r0, [r7, #12]
 80456f2:	60b9      	str	r1, [r7, #8]
 80456f4:	4613      	mov	r3, r2
 80456f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80456f8:	68fb      	ldr	r3, [r7, #12]
 80456fa:	68ba      	ldr	r2, [r7, #8]
 80456fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80456fe:	68fb      	ldr	r3, [r7, #12]
 8045700:	88fa      	ldrh	r2, [r7, #6]
 8045702:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8045704:	68fb      	ldr	r3, [r7, #12]
 8045706:	88fa      	ldrh	r2, [r7, #6]
 8045708:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804570a:	68fb      	ldr	r3, [r7, #12]
 804570c:	2200      	movs	r2, #0
 804570e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045710:	68fb      	ldr	r3, [r7, #12]
 8045712:	2222      	movs	r2, #34	@ 0x22
 8045714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8045718:	68fb      	ldr	r3, [r7, #12]
 804571a:	691b      	ldr	r3, [r3, #16]
 804571c:	2b00      	cmp	r3, #0
 804571e:	d007      	beq.n	8045730 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045720:	68fb      	ldr	r3, [r7, #12]
 8045722:	681b      	ldr	r3, [r3, #0]
 8045724:	68da      	ldr	r2, [r3, #12]
 8045726:	68fb      	ldr	r3, [r7, #12]
 8045728:	681b      	ldr	r3, [r3, #0]
 804572a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 804572e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8045730:	68fb      	ldr	r3, [r7, #12]
 8045732:	681b      	ldr	r3, [r3, #0]
 8045734:	695a      	ldr	r2, [r3, #20]
 8045736:	68fb      	ldr	r3, [r7, #12]
 8045738:	681b      	ldr	r3, [r3, #0]
 804573a:	f042 0201 	orr.w	r2, r2, #1
 804573e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8045740:	68fb      	ldr	r3, [r7, #12]
 8045742:	681b      	ldr	r3, [r3, #0]
 8045744:	68da      	ldr	r2, [r3, #12]
 8045746:	68fb      	ldr	r3, [r7, #12]
 8045748:	681b      	ldr	r3, [r3, #0]
 804574a:	f042 0220 	orr.w	r2, r2, #32
 804574e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8045750:	2300      	movs	r3, #0
}
 8045752:	4618      	mov	r0, r3
 8045754:	3714      	adds	r7, #20
 8045756:	46bd      	mov	sp, r7
 8045758:	f85d 7b04 	ldr.w	r7, [sp], #4
 804575c:	4770      	bx	lr

0804575e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 804575e:	b480      	push	{r7}
 8045760:	b095      	sub	sp, #84	@ 0x54
 8045762:	af00      	add	r7, sp, #0
 8045764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045766:	687b      	ldr	r3, [r7, #4]
 8045768:	681b      	ldr	r3, [r3, #0]
 804576a:	330c      	adds	r3, #12
 804576c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8045770:	e853 3f00 	ldrex	r3, [r3]
 8045774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8045776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 804577c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804577e:	687b      	ldr	r3, [r7, #4]
 8045780:	681b      	ldr	r3, [r3, #0]
 8045782:	330c      	adds	r3, #12
 8045784:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8045786:	643a      	str	r2, [r7, #64]	@ 0x40
 8045788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804578a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 804578c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 804578e:	e841 2300 	strex	r3, r2, [r1]
 8045792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8045794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045796:	2b00      	cmp	r3, #0
 8045798:	d1e5      	bne.n	8045766 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804579a:	687b      	ldr	r3, [r7, #4]
 804579c:	681b      	ldr	r3, [r3, #0]
 804579e:	3314      	adds	r3, #20
 80457a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80457a2:	6a3b      	ldr	r3, [r7, #32]
 80457a4:	e853 3f00 	ldrex	r3, [r3]
 80457a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80457aa:	69fb      	ldr	r3, [r7, #28]
 80457ac:	f023 0301 	bic.w	r3, r3, #1
 80457b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80457b2:	687b      	ldr	r3, [r7, #4]
 80457b4:	681b      	ldr	r3, [r3, #0]
 80457b6:	3314      	adds	r3, #20
 80457b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80457ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80457bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80457be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80457c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80457c2:	e841 2300 	strex	r3, r2, [r1]
 80457c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80457c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80457ca:	2b00      	cmp	r3, #0
 80457cc:	d1e5      	bne.n	804579a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80457ce:	687b      	ldr	r3, [r7, #4]
 80457d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80457d2:	2b01      	cmp	r3, #1
 80457d4:	d119      	bne.n	804580a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80457d6:	687b      	ldr	r3, [r7, #4]
 80457d8:	681b      	ldr	r3, [r3, #0]
 80457da:	330c      	adds	r3, #12
 80457dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80457de:	68fb      	ldr	r3, [r7, #12]
 80457e0:	e853 3f00 	ldrex	r3, [r3]
 80457e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80457e6:	68bb      	ldr	r3, [r7, #8]
 80457e8:	f023 0310 	bic.w	r3, r3, #16
 80457ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80457ee:	687b      	ldr	r3, [r7, #4]
 80457f0:	681b      	ldr	r3, [r3, #0]
 80457f2:	330c      	adds	r3, #12
 80457f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80457f6:	61ba      	str	r2, [r7, #24]
 80457f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80457fa:	6979      	ldr	r1, [r7, #20]
 80457fc:	69ba      	ldr	r2, [r7, #24]
 80457fe:	e841 2300 	strex	r3, r2, [r1]
 8045802:	613b      	str	r3, [r7, #16]
   return(result);
 8045804:	693b      	ldr	r3, [r7, #16]
 8045806:	2b00      	cmp	r3, #0
 8045808:	d1e5      	bne.n	80457d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804580a:	687b      	ldr	r3, [r7, #4]
 804580c:	2220      	movs	r2, #32
 804580e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045812:	687b      	ldr	r3, [r7, #4]
 8045814:	2200      	movs	r2, #0
 8045816:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8045818:	bf00      	nop
 804581a:	3754      	adds	r7, #84	@ 0x54
 804581c:	46bd      	mov	sp, r7
 804581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045822:	4770      	bx	lr

08045824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8045824:	b580      	push	{r7, lr}
 8045826:	b084      	sub	sp, #16
 8045828:	af00      	add	r7, sp, #0
 804582a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 804582c:	687b      	ldr	r3, [r7, #4]
 804582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8045832:	68fb      	ldr	r3, [r7, #12]
 8045834:	2200      	movs	r2, #0
 8045836:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8045838:	68fb      	ldr	r3, [r7, #12]
 804583a:	2200      	movs	r2, #0
 804583c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804583e:	68f8      	ldr	r0, [r7, #12]
 8045840:	f7ff fee4 	bl	804560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8045844:	bf00      	nop
 8045846:	3710      	adds	r7, #16
 8045848:	46bd      	mov	sp, r7
 804584a:	bd80      	pop	{r7, pc}

0804584c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 804584c:	b480      	push	{r7}
 804584e:	b085      	sub	sp, #20
 8045850:	af00      	add	r7, sp, #0
 8045852:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8045854:	687b      	ldr	r3, [r7, #4]
 8045856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 804585a:	b2db      	uxtb	r3, r3
 804585c:	2b21      	cmp	r3, #33	@ 0x21
 804585e:	d13e      	bne.n	80458de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8045860:	687b      	ldr	r3, [r7, #4]
 8045862:	689b      	ldr	r3, [r3, #8]
 8045864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8045868:	d114      	bne.n	8045894 <UART_Transmit_IT+0x48>
 804586a:	687b      	ldr	r3, [r7, #4]
 804586c:	691b      	ldr	r3, [r3, #16]
 804586e:	2b00      	cmp	r3, #0
 8045870:	d110      	bne.n	8045894 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8045872:	687b      	ldr	r3, [r7, #4]
 8045874:	6a1b      	ldr	r3, [r3, #32]
 8045876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8045878:	68fb      	ldr	r3, [r7, #12]
 804587a:	881b      	ldrh	r3, [r3, #0]
 804587c:	461a      	mov	r2, r3
 804587e:	687b      	ldr	r3, [r7, #4]
 8045880:	681b      	ldr	r3, [r3, #0]
 8045882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8045888:	687b      	ldr	r3, [r7, #4]
 804588a:	6a1b      	ldr	r3, [r3, #32]
 804588c:	1c9a      	adds	r2, r3, #2
 804588e:	687b      	ldr	r3, [r7, #4]
 8045890:	621a      	str	r2, [r3, #32]
 8045892:	e008      	b.n	80458a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8045894:	687b      	ldr	r3, [r7, #4]
 8045896:	6a1b      	ldr	r3, [r3, #32]
 8045898:	1c59      	adds	r1, r3, #1
 804589a:	687a      	ldr	r2, [r7, #4]
 804589c:	6211      	str	r1, [r2, #32]
 804589e:	781a      	ldrb	r2, [r3, #0]
 80458a0:	687b      	ldr	r3, [r7, #4]
 80458a2:	681b      	ldr	r3, [r3, #0]
 80458a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80458a6:	687b      	ldr	r3, [r7, #4]
 80458a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80458aa:	b29b      	uxth	r3, r3
 80458ac:	3b01      	subs	r3, #1
 80458ae:	b29b      	uxth	r3, r3
 80458b0:	687a      	ldr	r2, [r7, #4]
 80458b2:	4619      	mov	r1, r3
 80458b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80458b6:	2b00      	cmp	r3, #0
 80458b8:	d10f      	bne.n	80458da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80458ba:	687b      	ldr	r3, [r7, #4]
 80458bc:	681b      	ldr	r3, [r3, #0]
 80458be:	68da      	ldr	r2, [r3, #12]
 80458c0:	687b      	ldr	r3, [r7, #4]
 80458c2:	681b      	ldr	r3, [r3, #0]
 80458c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80458c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80458ca:	687b      	ldr	r3, [r7, #4]
 80458cc:	681b      	ldr	r3, [r3, #0]
 80458ce:	68da      	ldr	r2, [r3, #12]
 80458d0:	687b      	ldr	r3, [r7, #4]
 80458d2:	681b      	ldr	r3, [r3, #0]
 80458d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80458d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80458da:	2300      	movs	r3, #0
 80458dc:	e000      	b.n	80458e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80458de:	2302      	movs	r3, #2
  }
}
 80458e0:	4618      	mov	r0, r3
 80458e2:	3714      	adds	r7, #20
 80458e4:	46bd      	mov	sp, r7
 80458e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458ea:	4770      	bx	lr

080458ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80458ec:	b580      	push	{r7, lr}
 80458ee:	b082      	sub	sp, #8
 80458f0:	af00      	add	r7, sp, #0
 80458f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80458f4:	687b      	ldr	r3, [r7, #4]
 80458f6:	681b      	ldr	r3, [r3, #0]
 80458f8:	68da      	ldr	r2, [r3, #12]
 80458fa:	687b      	ldr	r3, [r7, #4]
 80458fc:	681b      	ldr	r3, [r3, #0]
 80458fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8045902:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8045904:	687b      	ldr	r3, [r7, #4]
 8045906:	2220      	movs	r2, #32
 8045908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804590c:	6878      	ldr	r0, [r7, #4]
 804590e:	f7ff fe73 	bl	80455f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8045912:	2300      	movs	r3, #0
}
 8045914:	4618      	mov	r0, r3
 8045916:	3708      	adds	r7, #8
 8045918:	46bd      	mov	sp, r7
 804591a:	bd80      	pop	{r7, pc}

0804591c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 804591c:	b580      	push	{r7, lr}
 804591e:	b08c      	sub	sp, #48	@ 0x30
 8045920:	af00      	add	r7, sp, #0
 8045922:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8045924:	687b      	ldr	r3, [r7, #4]
 8045926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 804592a:	b2db      	uxtb	r3, r3
 804592c:	2b22      	cmp	r3, #34	@ 0x22
 804592e:	f040 80ae 	bne.w	8045a8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8045932:	687b      	ldr	r3, [r7, #4]
 8045934:	689b      	ldr	r3, [r3, #8]
 8045936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804593a:	d117      	bne.n	804596c <UART_Receive_IT+0x50>
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	691b      	ldr	r3, [r3, #16]
 8045940:	2b00      	cmp	r3, #0
 8045942:	d113      	bne.n	804596c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8045944:	2300      	movs	r3, #0
 8045946:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8045948:	687b      	ldr	r3, [r7, #4]
 804594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804594c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 804594e:	687b      	ldr	r3, [r7, #4]
 8045950:	681b      	ldr	r3, [r3, #0]
 8045952:	685b      	ldr	r3, [r3, #4]
 8045954:	b29b      	uxth	r3, r3
 8045956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804595a:	b29a      	uxth	r2, r3
 804595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804595e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8045960:	687b      	ldr	r3, [r7, #4]
 8045962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045964:	1c9a      	adds	r2, r3, #2
 8045966:	687b      	ldr	r3, [r7, #4]
 8045968:	629a      	str	r2, [r3, #40]	@ 0x28
 804596a:	e026      	b.n	80459ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 804596c:	687b      	ldr	r3, [r7, #4]
 804596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8045972:	2300      	movs	r3, #0
 8045974:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8045976:	687b      	ldr	r3, [r7, #4]
 8045978:	689b      	ldr	r3, [r3, #8]
 804597a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804597e:	d007      	beq.n	8045990 <UART_Receive_IT+0x74>
 8045980:	687b      	ldr	r3, [r7, #4]
 8045982:	689b      	ldr	r3, [r3, #8]
 8045984:	2b00      	cmp	r3, #0
 8045986:	d10a      	bne.n	804599e <UART_Receive_IT+0x82>
 8045988:	687b      	ldr	r3, [r7, #4]
 804598a:	691b      	ldr	r3, [r3, #16]
 804598c:	2b00      	cmp	r3, #0
 804598e:	d106      	bne.n	804599e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8045990:	687b      	ldr	r3, [r7, #4]
 8045992:	681b      	ldr	r3, [r3, #0]
 8045994:	685b      	ldr	r3, [r3, #4]
 8045996:	b2da      	uxtb	r2, r3
 8045998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804599a:	701a      	strb	r2, [r3, #0]
 804599c:	e008      	b.n	80459b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 804599e:	687b      	ldr	r3, [r7, #4]
 80459a0:	681b      	ldr	r3, [r3, #0]
 80459a2:	685b      	ldr	r3, [r3, #4]
 80459a4:	b2db      	uxtb	r3, r3
 80459a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80459aa:	b2da      	uxtb	r2, r3
 80459ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80459ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80459b0:	687b      	ldr	r3, [r7, #4]
 80459b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80459b4:	1c5a      	adds	r2, r3, #1
 80459b6:	687b      	ldr	r3, [r7, #4]
 80459b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80459ba:	687b      	ldr	r3, [r7, #4]
 80459bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80459be:	b29b      	uxth	r3, r3
 80459c0:	3b01      	subs	r3, #1
 80459c2:	b29b      	uxth	r3, r3
 80459c4:	687a      	ldr	r2, [r7, #4]
 80459c6:	4619      	mov	r1, r3
 80459c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80459ca:	2b00      	cmp	r3, #0
 80459cc:	d15d      	bne.n	8045a8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80459ce:	687b      	ldr	r3, [r7, #4]
 80459d0:	681b      	ldr	r3, [r3, #0]
 80459d2:	68da      	ldr	r2, [r3, #12]
 80459d4:	687b      	ldr	r3, [r7, #4]
 80459d6:	681b      	ldr	r3, [r3, #0]
 80459d8:	f022 0220 	bic.w	r2, r2, #32
 80459dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80459de:	687b      	ldr	r3, [r7, #4]
 80459e0:	681b      	ldr	r3, [r3, #0]
 80459e2:	68da      	ldr	r2, [r3, #12]
 80459e4:	687b      	ldr	r3, [r7, #4]
 80459e6:	681b      	ldr	r3, [r3, #0]
 80459e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80459ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80459ee:	687b      	ldr	r3, [r7, #4]
 80459f0:	681b      	ldr	r3, [r3, #0]
 80459f2:	695a      	ldr	r2, [r3, #20]
 80459f4:	687b      	ldr	r3, [r7, #4]
 80459f6:	681b      	ldr	r3, [r3, #0]
 80459f8:	f022 0201 	bic.w	r2, r2, #1
 80459fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80459fe:	687b      	ldr	r3, [r7, #4]
 8045a00:	2220      	movs	r2, #32
 8045a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8045a06:	687b      	ldr	r3, [r7, #4]
 8045a08:	2200      	movs	r2, #0
 8045a0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8045a0c:	687b      	ldr	r3, [r7, #4]
 8045a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8045a10:	2b01      	cmp	r3, #1
 8045a12:	d135      	bne.n	8045a80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045a14:	687b      	ldr	r3, [r7, #4]
 8045a16:	2200      	movs	r2, #0
 8045a18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045a1a:	687b      	ldr	r3, [r7, #4]
 8045a1c:	681b      	ldr	r3, [r3, #0]
 8045a1e:	330c      	adds	r3, #12
 8045a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045a22:	697b      	ldr	r3, [r7, #20]
 8045a24:	e853 3f00 	ldrex	r3, [r3]
 8045a28:	613b      	str	r3, [r7, #16]
   return(result);
 8045a2a:	693b      	ldr	r3, [r7, #16]
 8045a2c:	f023 0310 	bic.w	r3, r3, #16
 8045a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8045a32:	687b      	ldr	r3, [r7, #4]
 8045a34:	681b      	ldr	r3, [r3, #0]
 8045a36:	330c      	adds	r3, #12
 8045a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8045a3a:	623a      	str	r2, [r7, #32]
 8045a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045a3e:	69f9      	ldr	r1, [r7, #28]
 8045a40:	6a3a      	ldr	r2, [r7, #32]
 8045a42:	e841 2300 	strex	r3, r2, [r1]
 8045a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8045a48:	69bb      	ldr	r3, [r7, #24]
 8045a4a:	2b00      	cmp	r3, #0
 8045a4c:	d1e5      	bne.n	8045a1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8045a4e:	687b      	ldr	r3, [r7, #4]
 8045a50:	681b      	ldr	r3, [r3, #0]
 8045a52:	681b      	ldr	r3, [r3, #0]
 8045a54:	f003 0310 	and.w	r3, r3, #16
 8045a58:	2b10      	cmp	r3, #16
 8045a5a:	d10a      	bne.n	8045a72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8045a5c:	2300      	movs	r3, #0
 8045a5e:	60fb      	str	r3, [r7, #12]
 8045a60:	687b      	ldr	r3, [r7, #4]
 8045a62:	681b      	ldr	r3, [r3, #0]
 8045a64:	681b      	ldr	r3, [r3, #0]
 8045a66:	60fb      	str	r3, [r7, #12]
 8045a68:	687b      	ldr	r3, [r7, #4]
 8045a6a:	681b      	ldr	r3, [r3, #0]
 8045a6c:	685b      	ldr	r3, [r3, #4]
 8045a6e:	60fb      	str	r3, [r7, #12]
 8045a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8045a72:	687b      	ldr	r3, [r7, #4]
 8045a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8045a76:	4619      	mov	r1, r3
 8045a78:	6878      	ldr	r0, [r7, #4]
 8045a7a:	f7ff fdd1 	bl	8045620 <HAL_UARTEx_RxEventCallback>
 8045a7e:	e002      	b.n	8045a86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8045a80:	6878      	ldr	r0, [r7, #4]
 8045a82:	f7fb ff2d 	bl	80418e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8045a86:	2300      	movs	r3, #0
 8045a88:	e002      	b.n	8045a90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8045a8a:	2300      	movs	r3, #0
 8045a8c:	e000      	b.n	8045a90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8045a8e:	2302      	movs	r3, #2
  }
}
 8045a90:	4618      	mov	r0, r3
 8045a92:	3730      	adds	r7, #48	@ 0x30
 8045a94:	46bd      	mov	sp, r7
 8045a96:	bd80      	pop	{r7, pc}

08045a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045a9c:	b0c0      	sub	sp, #256	@ 0x100
 8045a9e:	af00      	add	r7, sp, #0
 8045aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045aa8:	681b      	ldr	r3, [r3, #0]
 8045aaa:	691b      	ldr	r3, [r3, #16]
 8045aac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8045ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045ab4:	68d9      	ldr	r1, [r3, #12]
 8045ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045aba:	681a      	ldr	r2, [r3, #0]
 8045abc:	ea40 0301 	orr.w	r3, r0, r1
 8045ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045ac6:	689a      	ldr	r2, [r3, #8]
 8045ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045acc:	691b      	ldr	r3, [r3, #16]
 8045ace:	431a      	orrs	r2, r3
 8045ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045ad4:	695b      	ldr	r3, [r3, #20]
 8045ad6:	431a      	orrs	r2, r3
 8045ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045adc:	69db      	ldr	r3, [r3, #28]
 8045ade:	4313      	orrs	r3, r2
 8045ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8045ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045ae8:	681b      	ldr	r3, [r3, #0]
 8045aea:	68db      	ldr	r3, [r3, #12]
 8045aec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8045af0:	f021 010c 	bic.w	r1, r1, #12
 8045af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045af8:	681a      	ldr	r2, [r3, #0]
 8045afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8045afe:	430b      	orrs	r3, r1
 8045b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b06:	681b      	ldr	r3, [r3, #0]
 8045b08:	695b      	ldr	r3, [r3, #20]
 8045b0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8045b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b12:	6999      	ldr	r1, [r3, #24]
 8045b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b18:	681a      	ldr	r2, [r3, #0]
 8045b1a:	ea40 0301 	orr.w	r3, r0, r1
 8045b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b24:	681a      	ldr	r2, [r3, #0]
 8045b26:	4b8f      	ldr	r3, [pc, #572]	@ (8045d64 <UART_SetConfig+0x2cc>)
 8045b28:	429a      	cmp	r2, r3
 8045b2a:	d005      	beq.n	8045b38 <UART_SetConfig+0xa0>
 8045b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b30:	681a      	ldr	r2, [r3, #0]
 8045b32:	4b8d      	ldr	r3, [pc, #564]	@ (8045d68 <UART_SetConfig+0x2d0>)
 8045b34:	429a      	cmp	r2, r3
 8045b36:	d104      	bne.n	8045b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8045b38:	f7fe fca8 	bl	804448c <HAL_RCC_GetPCLK2Freq>
 8045b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8045b40:	e003      	b.n	8045b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8045b42:	f7fe fc8f 	bl	8044464 <HAL_RCC_GetPCLK1Freq>
 8045b46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045b4e:	69db      	ldr	r3, [r3, #28]
 8045b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8045b54:	f040 810c 	bne.w	8045d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8045b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045b5c:	2200      	movs	r2, #0
 8045b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8045b62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8045b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8045b6a:	4622      	mov	r2, r4
 8045b6c:	462b      	mov	r3, r5
 8045b6e:	1891      	adds	r1, r2, r2
 8045b70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8045b72:	415b      	adcs	r3, r3
 8045b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8045b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8045b7a:	4621      	mov	r1, r4
 8045b7c:	eb12 0801 	adds.w	r8, r2, r1
 8045b80:	4629      	mov	r1, r5
 8045b82:	eb43 0901 	adc.w	r9, r3, r1
 8045b86:	f04f 0200 	mov.w	r2, #0
 8045b8a:	f04f 0300 	mov.w	r3, #0
 8045b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8045b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8045b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8045b9a:	4690      	mov	r8, r2
 8045b9c:	4699      	mov	r9, r3
 8045b9e:	4623      	mov	r3, r4
 8045ba0:	eb18 0303 	adds.w	r3, r8, r3
 8045ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8045ba8:	462b      	mov	r3, r5
 8045baa:	eb49 0303 	adc.w	r3, r9, r3
 8045bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8045bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045bb6:	685b      	ldr	r3, [r3, #4]
 8045bb8:	2200      	movs	r2, #0
 8045bba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8045bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8045bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8045bc6:	460b      	mov	r3, r1
 8045bc8:	18db      	adds	r3, r3, r3
 8045bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8045bcc:	4613      	mov	r3, r2
 8045bce:	eb42 0303 	adc.w	r3, r2, r3
 8045bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8045bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8045bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8045bdc:	f7fb f844 	bl	8040c68 <__aeabi_uldivmod>
 8045be0:	4602      	mov	r2, r0
 8045be2:	460b      	mov	r3, r1
 8045be4:	4b61      	ldr	r3, [pc, #388]	@ (8045d6c <UART_SetConfig+0x2d4>)
 8045be6:	fba3 2302 	umull	r2, r3, r3, r2
 8045bea:	095b      	lsrs	r3, r3, #5
 8045bec:	011c      	lsls	r4, r3, #4
 8045bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045bf2:	2200      	movs	r2, #0
 8045bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8045bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8045bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8045c00:	4642      	mov	r2, r8
 8045c02:	464b      	mov	r3, r9
 8045c04:	1891      	adds	r1, r2, r2
 8045c06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8045c08:	415b      	adcs	r3, r3
 8045c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8045c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8045c10:	4641      	mov	r1, r8
 8045c12:	eb12 0a01 	adds.w	sl, r2, r1
 8045c16:	4649      	mov	r1, r9
 8045c18:	eb43 0b01 	adc.w	fp, r3, r1
 8045c1c:	f04f 0200 	mov.w	r2, #0
 8045c20:	f04f 0300 	mov.w	r3, #0
 8045c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8045c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8045c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8045c30:	4692      	mov	sl, r2
 8045c32:	469b      	mov	fp, r3
 8045c34:	4643      	mov	r3, r8
 8045c36:	eb1a 0303 	adds.w	r3, sl, r3
 8045c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8045c3e:	464b      	mov	r3, r9
 8045c40:	eb4b 0303 	adc.w	r3, fp, r3
 8045c44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8045c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045c4c:	685b      	ldr	r3, [r3, #4]
 8045c4e:	2200      	movs	r2, #0
 8045c50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8045c54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8045c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8045c5c:	460b      	mov	r3, r1
 8045c5e:	18db      	adds	r3, r3, r3
 8045c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8045c62:	4613      	mov	r3, r2
 8045c64:	eb42 0303 	adc.w	r3, r2, r3
 8045c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8045c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8045c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8045c72:	f7fa fff9 	bl	8040c68 <__aeabi_uldivmod>
 8045c76:	4602      	mov	r2, r0
 8045c78:	460b      	mov	r3, r1
 8045c7a:	4611      	mov	r1, r2
 8045c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8045d6c <UART_SetConfig+0x2d4>)
 8045c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8045c82:	095b      	lsrs	r3, r3, #5
 8045c84:	2264      	movs	r2, #100	@ 0x64
 8045c86:	fb02 f303 	mul.w	r3, r2, r3
 8045c8a:	1acb      	subs	r3, r1, r3
 8045c8c:	00db      	lsls	r3, r3, #3
 8045c8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8045c92:	4b36      	ldr	r3, [pc, #216]	@ (8045d6c <UART_SetConfig+0x2d4>)
 8045c94:	fba3 2302 	umull	r2, r3, r3, r2
 8045c98:	095b      	lsrs	r3, r3, #5
 8045c9a:	005b      	lsls	r3, r3, #1
 8045c9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8045ca0:	441c      	add	r4, r3
 8045ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045ca6:	2200      	movs	r2, #0
 8045ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8045cac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8045cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8045cb4:	4642      	mov	r2, r8
 8045cb6:	464b      	mov	r3, r9
 8045cb8:	1891      	adds	r1, r2, r2
 8045cba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8045cbc:	415b      	adcs	r3, r3
 8045cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8045cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8045cc4:	4641      	mov	r1, r8
 8045cc6:	1851      	adds	r1, r2, r1
 8045cc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8045cca:	4649      	mov	r1, r9
 8045ccc:	414b      	adcs	r3, r1
 8045cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8045cd0:	f04f 0200 	mov.w	r2, #0
 8045cd4:	f04f 0300 	mov.w	r3, #0
 8045cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8045cdc:	4659      	mov	r1, fp
 8045cde:	00cb      	lsls	r3, r1, #3
 8045ce0:	4651      	mov	r1, sl
 8045ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045ce6:	4651      	mov	r1, sl
 8045ce8:	00ca      	lsls	r2, r1, #3
 8045cea:	4610      	mov	r0, r2
 8045cec:	4619      	mov	r1, r3
 8045cee:	4603      	mov	r3, r0
 8045cf0:	4642      	mov	r2, r8
 8045cf2:	189b      	adds	r3, r3, r2
 8045cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8045cf8:	464b      	mov	r3, r9
 8045cfa:	460a      	mov	r2, r1
 8045cfc:	eb42 0303 	adc.w	r3, r2, r3
 8045d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8045d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045d08:	685b      	ldr	r3, [r3, #4]
 8045d0a:	2200      	movs	r2, #0
 8045d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8045d10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8045d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8045d18:	460b      	mov	r3, r1
 8045d1a:	18db      	adds	r3, r3, r3
 8045d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8045d1e:	4613      	mov	r3, r2
 8045d20:	eb42 0303 	adc.w	r3, r2, r3
 8045d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8045d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8045d2e:	f7fa ff9b 	bl	8040c68 <__aeabi_uldivmod>
 8045d32:	4602      	mov	r2, r0
 8045d34:	460b      	mov	r3, r1
 8045d36:	4b0d      	ldr	r3, [pc, #52]	@ (8045d6c <UART_SetConfig+0x2d4>)
 8045d38:	fba3 1302 	umull	r1, r3, r3, r2
 8045d3c:	095b      	lsrs	r3, r3, #5
 8045d3e:	2164      	movs	r1, #100	@ 0x64
 8045d40:	fb01 f303 	mul.w	r3, r1, r3
 8045d44:	1ad3      	subs	r3, r2, r3
 8045d46:	00db      	lsls	r3, r3, #3
 8045d48:	3332      	adds	r3, #50	@ 0x32
 8045d4a:	4a08      	ldr	r2, [pc, #32]	@ (8045d6c <UART_SetConfig+0x2d4>)
 8045d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8045d50:	095b      	lsrs	r3, r3, #5
 8045d52:	f003 0207 	and.w	r2, r3, #7
 8045d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045d5a:	681b      	ldr	r3, [r3, #0]
 8045d5c:	4422      	add	r2, r4
 8045d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8045d60:	e106      	b.n	8045f70 <UART_SetConfig+0x4d8>
 8045d62:	bf00      	nop
 8045d64:	40011000 	.word	0x40011000
 8045d68:	40011400 	.word	0x40011400
 8045d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8045d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045d74:	2200      	movs	r2, #0
 8045d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8045d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8045d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8045d82:	4642      	mov	r2, r8
 8045d84:	464b      	mov	r3, r9
 8045d86:	1891      	adds	r1, r2, r2
 8045d88:	6239      	str	r1, [r7, #32]
 8045d8a:	415b      	adcs	r3, r3
 8045d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8045d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8045d92:	4641      	mov	r1, r8
 8045d94:	1854      	adds	r4, r2, r1
 8045d96:	4649      	mov	r1, r9
 8045d98:	eb43 0501 	adc.w	r5, r3, r1
 8045d9c:	f04f 0200 	mov.w	r2, #0
 8045da0:	f04f 0300 	mov.w	r3, #0
 8045da4:	00eb      	lsls	r3, r5, #3
 8045da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8045daa:	00e2      	lsls	r2, r4, #3
 8045dac:	4614      	mov	r4, r2
 8045dae:	461d      	mov	r5, r3
 8045db0:	4643      	mov	r3, r8
 8045db2:	18e3      	adds	r3, r4, r3
 8045db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8045db8:	464b      	mov	r3, r9
 8045dba:	eb45 0303 	adc.w	r3, r5, r3
 8045dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8045dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045dc6:	685b      	ldr	r3, [r3, #4]
 8045dc8:	2200      	movs	r2, #0
 8045dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8045dce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8045dd2:	f04f 0200 	mov.w	r2, #0
 8045dd6:	f04f 0300 	mov.w	r3, #0
 8045dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8045dde:	4629      	mov	r1, r5
 8045de0:	008b      	lsls	r3, r1, #2
 8045de2:	4621      	mov	r1, r4
 8045de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045de8:	4621      	mov	r1, r4
 8045dea:	008a      	lsls	r2, r1, #2
 8045dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8045df0:	f7fa ff3a 	bl	8040c68 <__aeabi_uldivmod>
 8045df4:	4602      	mov	r2, r0
 8045df6:	460b      	mov	r3, r1
 8045df8:	4b60      	ldr	r3, [pc, #384]	@ (8045f7c <UART_SetConfig+0x4e4>)
 8045dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8045dfe:	095b      	lsrs	r3, r3, #5
 8045e00:	011c      	lsls	r4, r3, #4
 8045e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045e06:	2200      	movs	r2, #0
 8045e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8045e0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8045e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8045e14:	4642      	mov	r2, r8
 8045e16:	464b      	mov	r3, r9
 8045e18:	1891      	adds	r1, r2, r2
 8045e1a:	61b9      	str	r1, [r7, #24]
 8045e1c:	415b      	adcs	r3, r3
 8045e1e:	61fb      	str	r3, [r7, #28]
 8045e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8045e24:	4641      	mov	r1, r8
 8045e26:	1851      	adds	r1, r2, r1
 8045e28:	6139      	str	r1, [r7, #16]
 8045e2a:	4649      	mov	r1, r9
 8045e2c:	414b      	adcs	r3, r1
 8045e2e:	617b      	str	r3, [r7, #20]
 8045e30:	f04f 0200 	mov.w	r2, #0
 8045e34:	f04f 0300 	mov.w	r3, #0
 8045e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8045e3c:	4659      	mov	r1, fp
 8045e3e:	00cb      	lsls	r3, r1, #3
 8045e40:	4651      	mov	r1, sl
 8045e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045e46:	4651      	mov	r1, sl
 8045e48:	00ca      	lsls	r2, r1, #3
 8045e4a:	4610      	mov	r0, r2
 8045e4c:	4619      	mov	r1, r3
 8045e4e:	4603      	mov	r3, r0
 8045e50:	4642      	mov	r2, r8
 8045e52:	189b      	adds	r3, r3, r2
 8045e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8045e58:	464b      	mov	r3, r9
 8045e5a:	460a      	mov	r2, r1
 8045e5c:	eb42 0303 	adc.w	r3, r2, r3
 8045e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8045e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045e68:	685b      	ldr	r3, [r3, #4]
 8045e6a:	2200      	movs	r2, #0
 8045e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8045e6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8045e70:	f04f 0200 	mov.w	r2, #0
 8045e74:	f04f 0300 	mov.w	r3, #0
 8045e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8045e7c:	4649      	mov	r1, r9
 8045e7e:	008b      	lsls	r3, r1, #2
 8045e80:	4641      	mov	r1, r8
 8045e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045e86:	4641      	mov	r1, r8
 8045e88:	008a      	lsls	r2, r1, #2
 8045e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8045e8e:	f7fa feeb 	bl	8040c68 <__aeabi_uldivmod>
 8045e92:	4602      	mov	r2, r0
 8045e94:	460b      	mov	r3, r1
 8045e96:	4611      	mov	r1, r2
 8045e98:	4b38      	ldr	r3, [pc, #224]	@ (8045f7c <UART_SetConfig+0x4e4>)
 8045e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8045e9e:	095b      	lsrs	r3, r3, #5
 8045ea0:	2264      	movs	r2, #100	@ 0x64
 8045ea2:	fb02 f303 	mul.w	r3, r2, r3
 8045ea6:	1acb      	subs	r3, r1, r3
 8045ea8:	011b      	lsls	r3, r3, #4
 8045eaa:	3332      	adds	r3, #50	@ 0x32
 8045eac:	4a33      	ldr	r2, [pc, #204]	@ (8045f7c <UART_SetConfig+0x4e4>)
 8045eae:	fba2 2303 	umull	r2, r3, r2, r3
 8045eb2:	095b      	lsrs	r3, r3, #5
 8045eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8045eb8:	441c      	add	r4, r3
 8045eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8045ebe:	2200      	movs	r2, #0
 8045ec0:	673b      	str	r3, [r7, #112]	@ 0x70
 8045ec2:	677a      	str	r2, [r7, #116]	@ 0x74
 8045ec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8045ec8:	4642      	mov	r2, r8
 8045eca:	464b      	mov	r3, r9
 8045ecc:	1891      	adds	r1, r2, r2
 8045ece:	60b9      	str	r1, [r7, #8]
 8045ed0:	415b      	adcs	r3, r3
 8045ed2:	60fb      	str	r3, [r7, #12]
 8045ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8045ed8:	4641      	mov	r1, r8
 8045eda:	1851      	adds	r1, r2, r1
 8045edc:	6039      	str	r1, [r7, #0]
 8045ede:	4649      	mov	r1, r9
 8045ee0:	414b      	adcs	r3, r1
 8045ee2:	607b      	str	r3, [r7, #4]
 8045ee4:	f04f 0200 	mov.w	r2, #0
 8045ee8:	f04f 0300 	mov.w	r3, #0
 8045eec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8045ef0:	4659      	mov	r1, fp
 8045ef2:	00cb      	lsls	r3, r1, #3
 8045ef4:	4651      	mov	r1, sl
 8045ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045efa:	4651      	mov	r1, sl
 8045efc:	00ca      	lsls	r2, r1, #3
 8045efe:	4610      	mov	r0, r2
 8045f00:	4619      	mov	r1, r3
 8045f02:	4603      	mov	r3, r0
 8045f04:	4642      	mov	r2, r8
 8045f06:	189b      	adds	r3, r3, r2
 8045f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8045f0a:	464b      	mov	r3, r9
 8045f0c:	460a      	mov	r2, r1
 8045f0e:	eb42 0303 	adc.w	r3, r2, r3
 8045f12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8045f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045f18:	685b      	ldr	r3, [r3, #4]
 8045f1a:	2200      	movs	r2, #0
 8045f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8045f1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8045f20:	f04f 0200 	mov.w	r2, #0
 8045f24:	f04f 0300 	mov.w	r3, #0
 8045f28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8045f2c:	4649      	mov	r1, r9
 8045f2e:	008b      	lsls	r3, r1, #2
 8045f30:	4641      	mov	r1, r8
 8045f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045f36:	4641      	mov	r1, r8
 8045f38:	008a      	lsls	r2, r1, #2
 8045f3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8045f3e:	f7fa fe93 	bl	8040c68 <__aeabi_uldivmod>
 8045f42:	4602      	mov	r2, r0
 8045f44:	460b      	mov	r3, r1
 8045f46:	4b0d      	ldr	r3, [pc, #52]	@ (8045f7c <UART_SetConfig+0x4e4>)
 8045f48:	fba3 1302 	umull	r1, r3, r3, r2
 8045f4c:	095b      	lsrs	r3, r3, #5
 8045f4e:	2164      	movs	r1, #100	@ 0x64
 8045f50:	fb01 f303 	mul.w	r3, r1, r3
 8045f54:	1ad3      	subs	r3, r2, r3
 8045f56:	011b      	lsls	r3, r3, #4
 8045f58:	3332      	adds	r3, #50	@ 0x32
 8045f5a:	4a08      	ldr	r2, [pc, #32]	@ (8045f7c <UART_SetConfig+0x4e4>)
 8045f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8045f60:	095b      	lsrs	r3, r3, #5
 8045f62:	f003 020f 	and.w	r2, r3, #15
 8045f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8045f6a:	681b      	ldr	r3, [r3, #0]
 8045f6c:	4422      	add	r2, r4
 8045f6e:	609a      	str	r2, [r3, #8]
}
 8045f70:	bf00      	nop
 8045f72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8045f76:	46bd      	mov	sp, r7
 8045f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8045f7c:	51eb851f 	.word	0x51eb851f

08045f80 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8045f80:	b580      	push	{r7, lr}
 8045f82:	b086      	sub	sp, #24
 8045f84:	af02      	add	r7, sp, #8
 8045f86:	4603      	mov	r3, r0
 8045f88:	460a      	mov	r2, r1
 8045f8a:	71fb      	strb	r3, [r7, #7]
 8045f8c:	4613      	mov	r3, r2
 8045f8e:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8045f90:	79fb      	ldrb	r3, [r7, #7]
 8045f92:	4a13      	ldr	r2, [pc, #76]	@ (8045fe0 <I2C_LCD_ExpanderWrite+0x60>)
 8045f94:	005b      	lsls	r3, r3, #1
 8045f96:	4413      	add	r3, r2
 8045f98:	785a      	ldrb	r2, [r3, #1]
 8045f9a:	79bb      	ldrb	r3, [r7, #6]
 8045f9c:	4313      	orrs	r3, r2
 8045f9e:	b2db      	uxtb	r3, r3
 8045fa0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8045fa2:	79fa      	ldrb	r2, [r7, #7]
 8045fa4:	490f      	ldr	r1, [pc, #60]	@ (8045fe4 <I2C_LCD_ExpanderWrite+0x64>)
 8045fa6:	4613      	mov	r3, r2
 8045fa8:	005b      	lsls	r3, r3, #1
 8045faa:	4413      	add	r3, r2
 8045fac:	009b      	lsls	r3, r3, #2
 8045fae:	440b      	add	r3, r1
 8045fb0:	3304      	adds	r3, #4
 8045fb2:	6818      	ldr	r0, [r3, #0]
 8045fb4:	79fa      	ldrb	r2, [r7, #7]
 8045fb6:	490b      	ldr	r1, [pc, #44]	@ (8045fe4 <I2C_LCD_ExpanderWrite+0x64>)
 8045fb8:	4613      	mov	r3, r2
 8045fba:	005b      	lsls	r3, r3, #1
 8045fbc:	4413      	add	r3, r2
 8045fbe:	009b      	lsls	r3, r3, #2
 8045fc0:	440b      	add	r3, r1
 8045fc2:	3308      	adds	r3, #8
 8045fc4:	781b      	ldrb	r3, [r3, #0]
 8045fc6:	005b      	lsls	r3, r3, #1
 8045fc8:	b299      	uxth	r1, r3
 8045fca:	f107 020f 	add.w	r2, r7, #15
 8045fce:	2364      	movs	r3, #100	@ 0x64
 8045fd0:	9300      	str	r3, [sp, #0]
 8045fd2:	2301      	movs	r3, #1
 8045fd4:	f7fd fa7c 	bl	80434d0 <HAL_I2C_Master_Transmit>
}
 8045fd8:	bf00      	nop
 8045fda:	3710      	adds	r7, #16
 8045fdc:	46bd      	mov	sp, r7
 8045fde:	bd80      	pop	{r7, pc}
 8045fe0:	200003c4 	.word	0x200003c4
 8045fe4:	0804cea4 	.word	0x0804cea4

08045fe8 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8045fe8:	b580      	push	{r7, lr}
 8045fea:	b082      	sub	sp, #8
 8045fec:	af00      	add	r7, sp, #0
 8045fee:	4603      	mov	r3, r0
 8045ff0:	460a      	mov	r2, r1
 8045ff2:	71fb      	strb	r3, [r7, #7]
 8045ff4:	4613      	mov	r3, r2
 8045ff6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8045ff8:	79bb      	ldrb	r3, [r7, #6]
 8045ffa:	f043 0304 	orr.w	r3, r3, #4
 8045ffe:	b2da      	uxtb	r2, r3
 8046000:	79fb      	ldrb	r3, [r7, #7]
 8046002:	4611      	mov	r1, r2
 8046004:	4618      	mov	r0, r3
 8046006:	f7ff ffbb 	bl	8045f80 <I2C_LCD_ExpanderWrite>
	delay_us(2); // enable pulse must be >450ns
 804600a:	2002      	movs	r0, #2
 804600c:	f7fb facc 	bl	80415a8 <delay_us>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8046010:	79bb      	ldrb	r3, [r7, #6]
 8046012:	f023 0304 	bic.w	r3, r3, #4
 8046016:	b2da      	uxtb	r2, r3
 8046018:	79fb      	ldrb	r3, [r7, #7]
 804601a:	4611      	mov	r1, r2
 804601c:	4618      	mov	r0, r3
 804601e:	f7ff ffaf 	bl	8045f80 <I2C_LCD_ExpanderWrite>
    delay_us(50); // commands need > 37us to settle
 8046022:	2032      	movs	r0, #50	@ 0x32
 8046024:	f7fb fac0 	bl	80415a8 <delay_us>
}
 8046028:	bf00      	nop
 804602a:	3708      	adds	r7, #8
 804602c:	46bd      	mov	sp, r7
 804602e:	bd80      	pop	{r7, pc}

08046030 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8046030:	b580      	push	{r7, lr}
 8046032:	b082      	sub	sp, #8
 8046034:	af00      	add	r7, sp, #0
 8046036:	4603      	mov	r3, r0
 8046038:	460a      	mov	r2, r1
 804603a:	71fb      	strb	r3, [r7, #7]
 804603c:	4613      	mov	r3, r2
 804603e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8046040:	79ba      	ldrb	r2, [r7, #6]
 8046042:	79fb      	ldrb	r3, [r7, #7]
 8046044:	4611      	mov	r1, r2
 8046046:	4618      	mov	r0, r3
 8046048:	f7ff ff9a 	bl	8045f80 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 804604c:	79ba      	ldrb	r2, [r7, #6]
 804604e:	79fb      	ldrb	r3, [r7, #7]
 8046050:	4611      	mov	r1, r2
 8046052:	4618      	mov	r0, r3
 8046054:	f7ff ffc8 	bl	8045fe8 <I2C_LCD_EnPulse>
}
 8046058:	bf00      	nop
 804605a:	3708      	adds	r7, #8
 804605c:	46bd      	mov	sp, r7
 804605e:	bd80      	pop	{r7, pc}

08046060 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8046060:	b580      	push	{r7, lr}
 8046062:	b084      	sub	sp, #16
 8046064:	af00      	add	r7, sp, #0
 8046066:	4603      	mov	r3, r0
 8046068:	71fb      	strb	r3, [r7, #7]
 804606a:	460b      	mov	r3, r1
 804606c:	71bb      	strb	r3, [r7, #6]
 804606e:	4613      	mov	r3, r2
 8046070:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8046072:	79bb      	ldrb	r3, [r7, #6]
 8046074:	f023 030f 	bic.w	r3, r3, #15
 8046078:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 804607a:	79bb      	ldrb	r3, [r7, #6]
 804607c:	011b      	lsls	r3, r3, #4
 804607e:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8046080:	7bfa      	ldrb	r2, [r7, #15]
 8046082:	797b      	ldrb	r3, [r7, #5]
 8046084:	4313      	orrs	r3, r2
 8046086:	b2da      	uxtb	r2, r3
 8046088:	79fb      	ldrb	r3, [r7, #7]
 804608a:	4611      	mov	r1, r2
 804608c:	4618      	mov	r0, r3
 804608e:	f7ff ffcf 	bl	8046030 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8046092:	7bba      	ldrb	r2, [r7, #14]
 8046094:	797b      	ldrb	r3, [r7, #5]
 8046096:	4313      	orrs	r3, r2
 8046098:	b2da      	uxtb	r2, r3
 804609a:	79fb      	ldrb	r3, [r7, #7]
 804609c:	4611      	mov	r1, r2
 804609e:	4618      	mov	r0, r3
 80460a0:	f7ff ffc6 	bl	8046030 <I2C_LCD_Write4Bits>
}
 80460a4:	bf00      	nop
 80460a6:	3710      	adds	r7, #16
 80460a8:	46bd      	mov	sp, r7
 80460aa:	bd80      	pop	{r7, pc}

080460ac <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80460ac:	b580      	push	{r7, lr}
 80460ae:	b082      	sub	sp, #8
 80460b0:	af00      	add	r7, sp, #0
 80460b2:	4603      	mov	r3, r0
 80460b4:	460a      	mov	r2, r1
 80460b6:	71fb      	strb	r3, [r7, #7]
 80460b8:	4613      	mov	r3, r2
 80460ba:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80460bc:	79b9      	ldrb	r1, [r7, #6]
 80460be:	79fb      	ldrb	r3, [r7, #7]
 80460c0:	2200      	movs	r2, #0
 80460c2:	4618      	mov	r0, r3
 80460c4:	f7ff ffcc 	bl	8046060 <I2C_LCD_Send>
}
 80460c8:	bf00      	nop
 80460ca:	3708      	adds	r7, #8
 80460cc:	46bd      	mov	sp, r7
 80460ce:	bd80      	pop	{r7, pc}

080460d0 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80460d0:	b580      	push	{r7, lr}
 80460d2:	b082      	sub	sp, #8
 80460d4:	af00      	add	r7, sp, #0
 80460d6:	4603      	mov	r3, r0
 80460d8:	460a      	mov	r2, r1
 80460da:	71fb      	strb	r3, [r7, #7]
 80460dc:	4613      	mov	r3, r2
 80460de:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80460e0:	79b9      	ldrb	r1, [r7, #6]
 80460e2:	79fb      	ldrb	r3, [r7, #7]
 80460e4:	2201      	movs	r2, #1
 80460e6:	4618      	mov	r0, r3
 80460e8:	f7ff ffba 	bl	8046060 <I2C_LCD_Send>
}
 80460ec:	bf00      	nop
 80460ee:	3708      	adds	r7, #8
 80460f0:	46bd      	mov	sp, r7
 80460f2:	bd80      	pop	{r7, pc}

080460f4 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80460f4:	b580      	push	{r7, lr}
 80460f6:	b082      	sub	sp, #8
 80460f8:	af00      	add	r7, sp, #0
 80460fa:	4603      	mov	r3, r0
 80460fc:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	delay_ms(50);
 80460fe:	2032      	movs	r0, #50	@ 0x32
 8046100:	f7fb fa6c 	bl	80415dc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8046104:	79fb      	ldrb	r3, [r7, #7]
 8046106:	2130      	movs	r1, #48	@ 0x30
 8046108:	4618      	mov	r0, r3
 804610a:	f7ff ffcf 	bl	80460ac <I2C_LCD_Cmd>
    delay_ms(5); // Delay > 4.1ms
 804610e:	2005      	movs	r0, #5
 8046110:	f7fb fa64 	bl	80415dc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8046114:	79fb      	ldrb	r3, [r7, #7]
 8046116:	2130      	movs	r1, #48	@ 0x30
 8046118:	4618      	mov	r0, r3
 804611a:	f7ff ffc7 	bl	80460ac <I2C_LCD_Cmd>
    delay_ms(5); // Delay > 4.1ms
 804611e:	2005      	movs	r0, #5
 8046120:	f7fb fa5c 	bl	80415dc <delay_ms>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8046124:	79fb      	ldrb	r3, [r7, #7]
 8046126:	2130      	movs	r1, #48	@ 0x30
 8046128:	4618      	mov	r0, r3
 804612a:	f7ff ffbf 	bl	80460ac <I2C_LCD_Cmd>
    delay_us(150);  // Delay > 100μs
 804612e:	2096      	movs	r0, #150	@ 0x96
 8046130:	f7fb fa3a 	bl	80415a8 <delay_us>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8046134:	79fb      	ldrb	r3, [r7, #7]
 8046136:	2102      	movs	r1, #2
 8046138:	4618      	mov	r0, r3
 804613a:	f7ff ffb7 	bl	80460ac <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 804613e:	79fb      	ldrb	r3, [r7, #7]
 8046140:	2128      	movs	r1, #40	@ 0x28
 8046142:	4618      	mov	r0, r3
 8046144:	f7ff ffb2 	bl	80460ac <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8046148:	79fb      	ldrb	r3, [r7, #7]
 804614a:	210c      	movs	r1, #12
 804614c:	4618      	mov	r0, r3
 804614e:	f7ff ffad 	bl	80460ac <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8046152:	79fb      	ldrb	r3, [r7, #7]
 8046154:	2106      	movs	r1, #6
 8046156:	4618      	mov	r0, r3
 8046158:	f7ff ffa8 	bl	80460ac <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 804615c:	79fb      	ldrb	r3, [r7, #7]
 804615e:	4a09      	ldr	r2, [pc, #36]	@ (8046184 <I2C_LCD_Init+0x90>)
 8046160:	2104      	movs	r1, #4
 8046162:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8046166:	79fb      	ldrb	r3, [r7, #7]
 8046168:	4a06      	ldr	r2, [pc, #24]	@ (8046184 <I2C_LCD_Init+0x90>)
 804616a:	005b      	lsls	r3, r3, #1
 804616c:	4413      	add	r3, r2
 804616e:	2208      	movs	r2, #8
 8046170:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8046172:	79fb      	ldrb	r3, [r7, #7]
 8046174:	4618      	mov	r0, r3
 8046176:	f000 f807 	bl	8046188 <I2C_LCD_Clear>
}
 804617a:	bf00      	nop
 804617c:	3708      	adds	r7, #8
 804617e:	46bd      	mov	sp, r7
 8046180:	bd80      	pop	{r7, pc}
 8046182:	bf00      	nop
 8046184:	200003c4 	.word	0x200003c4

08046188 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8046188:	b580      	push	{r7, lr}
 804618a:	b082      	sub	sp, #8
 804618c:	af00      	add	r7, sp, #0
 804618e:	4603      	mov	r3, r0
 8046190:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8046192:	79fb      	ldrb	r3, [r7, #7]
 8046194:	2101      	movs	r1, #1
 8046196:	4618      	mov	r0, r3
 8046198:	f7ff ff88 	bl	80460ac <I2C_LCD_Cmd>
    delay_ms(2);
 804619c:	2002      	movs	r0, #2
 804619e:	f7fb fa1d 	bl	80415dc <delay_ms>
}
 80461a2:	bf00      	nop
 80461a4:	3708      	adds	r7, #8
 80461a6:	46bd      	mov	sp, r7
 80461a8:	bd80      	pop	{r7, pc}
	...

080461ac <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    delay_ms(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80461ac:	b590      	push	{r4, r7, lr}
 80461ae:	b087      	sub	sp, #28
 80461b0:	af00      	add	r7, sp, #0
 80461b2:	4603      	mov	r3, r0
 80461b4:	71fb      	strb	r3, [r7, #7]
 80461b6:	460b      	mov	r3, r1
 80461b8:	71bb      	strb	r3, [r7, #6]
 80461ba:	4613      	mov	r3, r2
 80461bc:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80461be:	4b1a      	ldr	r3, [pc, #104]	@ (8046228 <I2C_LCD_SetCursor+0x7c>)
 80461c0:	f107 0408 	add.w	r4, r7, #8
 80461c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80461c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80461ca:	79fa      	ldrb	r2, [r7, #7]
 80461cc:	4917      	ldr	r1, [pc, #92]	@ (804622c <I2C_LCD_SetCursor+0x80>)
 80461ce:	4613      	mov	r3, r2
 80461d0:	005b      	lsls	r3, r3, #1
 80461d2:	4413      	add	r3, r2
 80461d4:	009b      	lsls	r3, r3, #2
 80461d6:	440b      	add	r3, r1
 80461d8:	330a      	adds	r3, #10
 80461da:	781b      	ldrb	r3, [r3, #0]
 80461dc:	797a      	ldrb	r2, [r7, #5]
 80461de:	429a      	cmp	r2, r3
 80461e0:	d90a      	bls.n	80461f8 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80461e2:	79fa      	ldrb	r2, [r7, #7]
 80461e4:	4911      	ldr	r1, [pc, #68]	@ (804622c <I2C_LCD_SetCursor+0x80>)
 80461e6:	4613      	mov	r3, r2
 80461e8:	005b      	lsls	r3, r3, #1
 80461ea:	4413      	add	r3, r2
 80461ec:	009b      	lsls	r3, r3, #2
 80461ee:	440b      	add	r3, r1
 80461f0:	330a      	adds	r3, #10
 80461f2:	781b      	ldrb	r3, [r3, #0]
 80461f4:	3b01      	subs	r3, #1
 80461f6:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80461f8:	797b      	ldrb	r3, [r7, #5]
 80461fa:	009b      	lsls	r3, r3, #2
 80461fc:	3318      	adds	r3, #24
 80461fe:	443b      	add	r3, r7
 8046200:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8046204:	b2da      	uxtb	r2, r3
 8046206:	79bb      	ldrb	r3, [r7, #6]
 8046208:	4413      	add	r3, r2
 804620a:	b2db      	uxtb	r3, r3
 804620c:	b25b      	sxtb	r3, r3
 804620e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8046212:	b25b      	sxtb	r3, r3
 8046214:	b2da      	uxtb	r2, r3
 8046216:	79fb      	ldrb	r3, [r7, #7]
 8046218:	4611      	mov	r1, r2
 804621a:	4618      	mov	r0, r3
 804621c:	f7ff ff46 	bl	80460ac <I2C_LCD_Cmd>
}
 8046220:	bf00      	nop
 8046222:	371c      	adds	r7, #28
 8046224:	46bd      	mov	sp, r7
 8046226:	bd90      	pop	{r4, r7, pc}
 8046228:	0804ce64 	.word	0x0804ce64
 804622c:	0804cea4 	.word	0x0804cea4

08046230 <I2C_LCD_WriteChar>:

void I2C_LCD_WriteChar(uint8_t I2C_LCD_InstanceIndex, char Ch)
{
 8046230:	b580      	push	{r7, lr}
 8046232:	b082      	sub	sp, #8
 8046234:	af00      	add	r7, sp, #0
 8046236:	4603      	mov	r3, r0
 8046238:	460a      	mov	r2, r1
 804623a:	71fb      	strb	r3, [r7, #7]
 804623c:	4613      	mov	r3, r2
 804623e:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
 8046240:	79ba      	ldrb	r2, [r7, #6]
 8046242:	79fb      	ldrb	r3, [r7, #7]
 8046244:	4611      	mov	r1, r2
 8046246:	4618      	mov	r0, r3
 8046248:	f7ff ff42 	bl	80460d0 <I2C_LCD_Data>
}
 804624c:	bf00      	nop
 804624e:	3708      	adds	r7, #8
 8046250:	46bd      	mov	sp, r7
 8046252:	bd80      	pop	{r7, pc}

08046254 <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8046254:	b580      	push	{r7, lr}
 8046256:	b082      	sub	sp, #8
 8046258:	af00      	add	r7, sp, #0
 804625a:	4603      	mov	r3, r0
 804625c:	6039      	str	r1, [r7, #0]
 804625e:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8046260:	e008      	b.n	8046274 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8046262:	683b      	ldr	r3, [r7, #0]
 8046264:	1c5a      	adds	r2, r3, #1
 8046266:	603a      	str	r2, [r7, #0]
 8046268:	781a      	ldrb	r2, [r3, #0]
 804626a:	79fb      	ldrb	r3, [r7, #7]
 804626c:	4611      	mov	r1, r2
 804626e:	4618      	mov	r0, r3
 8046270:	f7ff ff2e 	bl	80460d0 <I2C_LCD_Data>
    while (*Str)
 8046274:	683b      	ldr	r3, [r7, #0]
 8046276:	781b      	ldrb	r3, [r3, #0]
 8046278:	2b00      	cmp	r3, #0
 804627a:	d1f2      	bne.n	8046262 <I2C_LCD_WriteString+0xe>
    }
}
 804627c:	bf00      	nop
 804627e:	bf00      	nop
 8046280:	3708      	adds	r7, #8
 8046282:	46bd      	mov	sp, r7
 8046284:	bd80      	pop	{r7, pc}

08046286 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8046286:	b480      	push	{r7}
 8046288:	b083      	sub	sp, #12
 804628a:	af00      	add	r7, sp, #0
 804628c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 804628e:	687b      	ldr	r3, [r7, #4]
 8046290:	f103 0208 	add.w	r2, r3, #8
 8046294:	687b      	ldr	r3, [r7, #4]
 8046296:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8046298:	687b      	ldr	r3, [r7, #4]
 804629a:	f04f 32ff 	mov.w	r2, #4294967295
 804629e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80462a0:	687b      	ldr	r3, [r7, #4]
 80462a2:	f103 0208 	add.w	r2, r3, #8
 80462a6:	687b      	ldr	r3, [r7, #4]
 80462a8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80462aa:	687b      	ldr	r3, [r7, #4]
 80462ac:	f103 0208 	add.w	r2, r3, #8
 80462b0:	687b      	ldr	r3, [r7, #4]
 80462b2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80462b4:	687b      	ldr	r3, [r7, #4]
 80462b6:	2200      	movs	r2, #0
 80462b8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80462ba:	bf00      	nop
 80462bc:	370c      	adds	r7, #12
 80462be:	46bd      	mov	sp, r7
 80462c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462c4:	4770      	bx	lr

080462c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80462c6:	b480      	push	{r7}
 80462c8:	b083      	sub	sp, #12
 80462ca:	af00      	add	r7, sp, #0
 80462cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80462ce:	687b      	ldr	r3, [r7, #4]
 80462d0:	2200      	movs	r2, #0
 80462d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80462d4:	bf00      	nop
 80462d6:	370c      	adds	r7, #12
 80462d8:	46bd      	mov	sp, r7
 80462da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462de:	4770      	bx	lr

080462e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80462e0:	b480      	push	{r7}
 80462e2:	b085      	sub	sp, #20
 80462e4:	af00      	add	r7, sp, #0
 80462e6:	6078      	str	r0, [r7, #4]
 80462e8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80462ea:	687b      	ldr	r3, [r7, #4]
 80462ec:	685b      	ldr	r3, [r3, #4]
 80462ee:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80462f0:	683b      	ldr	r3, [r7, #0]
 80462f2:	68fa      	ldr	r2, [r7, #12]
 80462f4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80462f6:	68fb      	ldr	r3, [r7, #12]
 80462f8:	689a      	ldr	r2, [r3, #8]
 80462fa:	683b      	ldr	r3, [r7, #0]
 80462fc:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80462fe:	68fb      	ldr	r3, [r7, #12]
 8046300:	689b      	ldr	r3, [r3, #8]
 8046302:	683a      	ldr	r2, [r7, #0]
 8046304:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8046306:	68fb      	ldr	r3, [r7, #12]
 8046308:	683a      	ldr	r2, [r7, #0]
 804630a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 804630c:	683b      	ldr	r3, [r7, #0]
 804630e:	687a      	ldr	r2, [r7, #4]
 8046310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8046312:	687b      	ldr	r3, [r7, #4]
 8046314:	681b      	ldr	r3, [r3, #0]
 8046316:	1c5a      	adds	r2, r3, #1
 8046318:	687b      	ldr	r3, [r7, #4]
 804631a:	601a      	str	r2, [r3, #0]
}
 804631c:	bf00      	nop
 804631e:	3714      	adds	r7, #20
 8046320:	46bd      	mov	sp, r7
 8046322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046326:	4770      	bx	lr

08046328 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8046328:	b480      	push	{r7}
 804632a:	b085      	sub	sp, #20
 804632c:	af00      	add	r7, sp, #0
 804632e:	6078      	str	r0, [r7, #4]
 8046330:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8046332:	683b      	ldr	r3, [r7, #0]
 8046334:	681b      	ldr	r3, [r3, #0]
 8046336:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8046338:	68bb      	ldr	r3, [r7, #8]
 804633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804633e:	d103      	bne.n	8046348 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8046340:	687b      	ldr	r3, [r7, #4]
 8046342:	691b      	ldr	r3, [r3, #16]
 8046344:	60fb      	str	r3, [r7, #12]
 8046346:	e00c      	b.n	8046362 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8046348:	687b      	ldr	r3, [r7, #4]
 804634a:	3308      	adds	r3, #8
 804634c:	60fb      	str	r3, [r7, #12]
 804634e:	e002      	b.n	8046356 <vListInsert+0x2e>
 8046350:	68fb      	ldr	r3, [r7, #12]
 8046352:	685b      	ldr	r3, [r3, #4]
 8046354:	60fb      	str	r3, [r7, #12]
 8046356:	68fb      	ldr	r3, [r7, #12]
 8046358:	685b      	ldr	r3, [r3, #4]
 804635a:	681b      	ldr	r3, [r3, #0]
 804635c:	68ba      	ldr	r2, [r7, #8]
 804635e:	429a      	cmp	r2, r3
 8046360:	d2f6      	bcs.n	8046350 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8046362:	68fb      	ldr	r3, [r7, #12]
 8046364:	685a      	ldr	r2, [r3, #4]
 8046366:	683b      	ldr	r3, [r7, #0]
 8046368:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 804636a:	683b      	ldr	r3, [r7, #0]
 804636c:	685b      	ldr	r3, [r3, #4]
 804636e:	683a      	ldr	r2, [r7, #0]
 8046370:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8046372:	683b      	ldr	r3, [r7, #0]
 8046374:	68fa      	ldr	r2, [r7, #12]
 8046376:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8046378:	68fb      	ldr	r3, [r7, #12]
 804637a:	683a      	ldr	r2, [r7, #0]
 804637c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 804637e:	683b      	ldr	r3, [r7, #0]
 8046380:	687a      	ldr	r2, [r7, #4]
 8046382:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8046384:	687b      	ldr	r3, [r7, #4]
 8046386:	681b      	ldr	r3, [r3, #0]
 8046388:	1c5a      	adds	r2, r3, #1
 804638a:	687b      	ldr	r3, [r7, #4]
 804638c:	601a      	str	r2, [r3, #0]
}
 804638e:	bf00      	nop
 8046390:	3714      	adds	r7, #20
 8046392:	46bd      	mov	sp, r7
 8046394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046398:	4770      	bx	lr

0804639a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 804639a:	b480      	push	{r7}
 804639c:	b085      	sub	sp, #20
 804639e:	af00      	add	r7, sp, #0
 80463a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80463a2:	687b      	ldr	r3, [r7, #4]
 80463a4:	691b      	ldr	r3, [r3, #16]
 80463a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80463a8:	687b      	ldr	r3, [r7, #4]
 80463aa:	685b      	ldr	r3, [r3, #4]
 80463ac:	687a      	ldr	r2, [r7, #4]
 80463ae:	6892      	ldr	r2, [r2, #8]
 80463b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80463b2:	687b      	ldr	r3, [r7, #4]
 80463b4:	689b      	ldr	r3, [r3, #8]
 80463b6:	687a      	ldr	r2, [r7, #4]
 80463b8:	6852      	ldr	r2, [r2, #4]
 80463ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80463bc:	68fb      	ldr	r3, [r7, #12]
 80463be:	685b      	ldr	r3, [r3, #4]
 80463c0:	687a      	ldr	r2, [r7, #4]
 80463c2:	429a      	cmp	r2, r3
 80463c4:	d103      	bne.n	80463ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80463c6:	687b      	ldr	r3, [r7, #4]
 80463c8:	689a      	ldr	r2, [r3, #8]
 80463ca:	68fb      	ldr	r3, [r7, #12]
 80463cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80463ce:	687b      	ldr	r3, [r7, #4]
 80463d0:	2200      	movs	r2, #0
 80463d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80463d4:	68fb      	ldr	r3, [r7, #12]
 80463d6:	681b      	ldr	r3, [r3, #0]
 80463d8:	1e5a      	subs	r2, r3, #1
 80463da:	68fb      	ldr	r3, [r7, #12]
 80463dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80463de:	68fb      	ldr	r3, [r7, #12]
 80463e0:	681b      	ldr	r3, [r3, #0]
}
 80463e2:	4618      	mov	r0, r3
 80463e4:	3714      	adds	r7, #20
 80463e6:	46bd      	mov	sp, r7
 80463e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80463ec:	4770      	bx	lr
	...

080463f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80463f0:	b580      	push	{r7, lr}
 80463f2:	b084      	sub	sp, #16
 80463f4:	af00      	add	r7, sp, #0
 80463f6:	6078      	str	r0, [r7, #4]
 80463f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80463fa:	687b      	ldr	r3, [r7, #4]
 80463fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80463fe:	68fb      	ldr	r3, [r7, #12]
 8046400:	2b00      	cmp	r3, #0
 8046402:	d10b      	bne.n	804641c <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8046404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046408:	f383 8811 	msr	BASEPRI, r3
 804640c:	f3bf 8f6f 	isb	sy
 8046410:	f3bf 8f4f 	dsb	sy
 8046414:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8046416:	bf00      	nop
 8046418:	bf00      	nop
 804641a:	e7fd      	b.n	8046418 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 804641c:	f002 fb3e 	bl	8048a9c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8046420:	68fb      	ldr	r3, [r7, #12]
 8046422:	681a      	ldr	r2, [r3, #0]
 8046424:	68fb      	ldr	r3, [r7, #12]
 8046426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8046428:	68f9      	ldr	r1, [r7, #12]
 804642a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 804642c:	fb01 f303 	mul.w	r3, r1, r3
 8046430:	441a      	add	r2, r3
 8046432:	68fb      	ldr	r3, [r7, #12]
 8046434:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8046436:	68fb      	ldr	r3, [r7, #12]
 8046438:	2200      	movs	r2, #0
 804643a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 804643c:	68fb      	ldr	r3, [r7, #12]
 804643e:	681a      	ldr	r2, [r3, #0]
 8046440:	68fb      	ldr	r3, [r7, #12]
 8046442:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8046444:	68fb      	ldr	r3, [r7, #12]
 8046446:	681a      	ldr	r2, [r3, #0]
 8046448:	68fb      	ldr	r3, [r7, #12]
 804644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804644c:	3b01      	subs	r3, #1
 804644e:	68f9      	ldr	r1, [r7, #12]
 8046450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8046452:	fb01 f303 	mul.w	r3, r1, r3
 8046456:	441a      	add	r2, r3
 8046458:	68fb      	ldr	r3, [r7, #12]
 804645a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 804645c:	68fb      	ldr	r3, [r7, #12]
 804645e:	22ff      	movs	r2, #255	@ 0xff
 8046460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8046464:	68fb      	ldr	r3, [r7, #12]
 8046466:	22ff      	movs	r2, #255	@ 0xff
 8046468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 804646c:	683b      	ldr	r3, [r7, #0]
 804646e:	2b00      	cmp	r3, #0
 8046470:	d114      	bne.n	804649c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8046472:	68fb      	ldr	r3, [r7, #12]
 8046474:	691b      	ldr	r3, [r3, #16]
 8046476:	2b00      	cmp	r3, #0
 8046478:	d01a      	beq.n	80464b0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 804647a:	68fb      	ldr	r3, [r7, #12]
 804647c:	3310      	adds	r3, #16
 804647e:	4618      	mov	r0, r3
 8046480:	f001 f952 	bl	8047728 <xTaskRemoveFromEventList>
 8046484:	4603      	mov	r3, r0
 8046486:	2b00      	cmp	r3, #0
 8046488:	d012      	beq.n	80464b0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 804648a:	4b0d      	ldr	r3, [pc, #52]	@ (80464c0 <xQueueGenericReset+0xd0>)
 804648c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8046490:	601a      	str	r2, [r3, #0]
 8046492:	f3bf 8f4f 	dsb	sy
 8046496:	f3bf 8f6f 	isb	sy
 804649a:	e009      	b.n	80464b0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 804649c:	68fb      	ldr	r3, [r7, #12]
 804649e:	3310      	adds	r3, #16
 80464a0:	4618      	mov	r0, r3
 80464a2:	f7ff fef0 	bl	8046286 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80464a6:	68fb      	ldr	r3, [r7, #12]
 80464a8:	3324      	adds	r3, #36	@ 0x24
 80464aa:	4618      	mov	r0, r3
 80464ac:	f7ff feeb 	bl	8046286 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80464b0:	f002 fb26 	bl	8048b00 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80464b4:	2301      	movs	r3, #1
}
 80464b6:	4618      	mov	r0, r3
 80464b8:	3710      	adds	r7, #16
 80464ba:	46bd      	mov	sp, r7
 80464bc:	bd80      	pop	{r7, pc}
 80464be:	bf00      	nop
 80464c0:	e000ed04 	.word	0xe000ed04

080464c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80464c4:	b580      	push	{r7, lr}
 80464c6:	b08c      	sub	sp, #48	@ 0x30
 80464c8:	af02      	add	r7, sp, #8
 80464ca:	60f8      	str	r0, [r7, #12]
 80464cc:	60b9      	str	r1, [r7, #8]
 80464ce:	4613      	mov	r3, r2
 80464d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80464d2:	68fb      	ldr	r3, [r7, #12]
 80464d4:	2b00      	cmp	r3, #0
 80464d6:	d10b      	bne.n	80464f0 <xQueueGenericCreate+0x2c>
        __asm volatile
 80464d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80464dc:	f383 8811 	msr	BASEPRI, r3
 80464e0:	f3bf 8f6f 	isb	sy
 80464e4:	f3bf 8f4f 	dsb	sy
 80464e8:	61bb      	str	r3, [r7, #24]
    }
 80464ea:	bf00      	nop
 80464ec:	bf00      	nop
 80464ee:	e7fd      	b.n	80464ec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80464f0:	68fb      	ldr	r3, [r7, #12]
 80464f2:	68ba      	ldr	r2, [r7, #8]
 80464f4:	fb02 f303 	mul.w	r3, r2, r3
 80464f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80464fa:	68bb      	ldr	r3, [r7, #8]
 80464fc:	2b00      	cmp	r3, #0
 80464fe:	d006      	beq.n	804650e <xQueueGenericCreate+0x4a>
 8046500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8046502:	68bb      	ldr	r3, [r7, #8]
 8046504:	fbb2 f3f3 	udiv	r3, r2, r3
 8046508:	68fa      	ldr	r2, [r7, #12]
 804650a:	429a      	cmp	r2, r3
 804650c:	d101      	bne.n	8046512 <xQueueGenericCreate+0x4e>
 804650e:	2301      	movs	r3, #1
 8046510:	e000      	b.n	8046514 <xQueueGenericCreate+0x50>
 8046512:	2300      	movs	r3, #0
 8046514:	2b00      	cmp	r3, #0
 8046516:	d10b      	bne.n	8046530 <xQueueGenericCreate+0x6c>
        __asm volatile
 8046518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804651c:	f383 8811 	msr	BASEPRI, r3
 8046520:	f3bf 8f6f 	isb	sy
 8046524:	f3bf 8f4f 	dsb	sy
 8046528:	617b      	str	r3, [r7, #20]
    }
 804652a:	bf00      	nop
 804652c:	bf00      	nop
 804652e:	e7fd      	b.n	804652c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8046530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046532:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8046536:	d90b      	bls.n	8046550 <xQueueGenericCreate+0x8c>
        __asm volatile
 8046538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804653c:	f383 8811 	msr	BASEPRI, r3
 8046540:	f3bf 8f6f 	isb	sy
 8046544:	f3bf 8f4f 	dsb	sy
 8046548:	613b      	str	r3, [r7, #16]
    }
 804654a:	bf00      	nop
 804654c:	bf00      	nop
 804654e:	e7fd      	b.n	804654c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8046550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046552:	3350      	adds	r3, #80	@ 0x50
 8046554:	4618      	mov	r0, r3
 8046556:	f002 fbcb 	bl	8048cf0 <pvPortMalloc>
 804655a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 804655c:	6a3b      	ldr	r3, [r7, #32]
 804655e:	2b00      	cmp	r3, #0
 8046560:	d00d      	beq.n	804657e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8046562:	6a3b      	ldr	r3, [r7, #32]
 8046564:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8046566:	69fb      	ldr	r3, [r7, #28]
 8046568:	3350      	adds	r3, #80	@ 0x50
 804656a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 804656c:	79fa      	ldrb	r2, [r7, #7]
 804656e:	6a3b      	ldr	r3, [r7, #32]
 8046570:	9300      	str	r3, [sp, #0]
 8046572:	4613      	mov	r3, r2
 8046574:	69fa      	ldr	r2, [r7, #28]
 8046576:	68b9      	ldr	r1, [r7, #8]
 8046578:	68f8      	ldr	r0, [r7, #12]
 804657a:	f000 f805 	bl	8046588 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 804657e:	6a3b      	ldr	r3, [r7, #32]
    }
 8046580:	4618      	mov	r0, r3
 8046582:	3728      	adds	r7, #40	@ 0x28
 8046584:	46bd      	mov	sp, r7
 8046586:	bd80      	pop	{r7, pc}

08046588 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8046588:	b580      	push	{r7, lr}
 804658a:	b084      	sub	sp, #16
 804658c:	af00      	add	r7, sp, #0
 804658e:	60f8      	str	r0, [r7, #12]
 8046590:	60b9      	str	r1, [r7, #8]
 8046592:	607a      	str	r2, [r7, #4]
 8046594:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8046596:	68bb      	ldr	r3, [r7, #8]
 8046598:	2b00      	cmp	r3, #0
 804659a:	d103      	bne.n	80465a4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 804659c:	69bb      	ldr	r3, [r7, #24]
 804659e:	69ba      	ldr	r2, [r7, #24]
 80465a0:	601a      	str	r2, [r3, #0]
 80465a2:	e002      	b.n	80465aa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80465a4:	69bb      	ldr	r3, [r7, #24]
 80465a6:	687a      	ldr	r2, [r7, #4]
 80465a8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80465aa:	69bb      	ldr	r3, [r7, #24]
 80465ac:	68fa      	ldr	r2, [r7, #12]
 80465ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80465b0:	69bb      	ldr	r3, [r7, #24]
 80465b2:	68ba      	ldr	r2, [r7, #8]
 80465b4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80465b6:	2101      	movs	r1, #1
 80465b8:	69b8      	ldr	r0, [r7, #24]
 80465ba:	f7ff ff19 	bl	80463f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80465be:	69bb      	ldr	r3, [r7, #24]
 80465c0:	78fa      	ldrb	r2, [r7, #3]
 80465c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80465c6:	bf00      	nop
 80465c8:	3710      	adds	r7, #16
 80465ca:	46bd      	mov	sp, r7
 80465cc:	bd80      	pop	{r7, pc}
	...

080465d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80465d0:	b580      	push	{r7, lr}
 80465d2:	b08e      	sub	sp, #56	@ 0x38
 80465d4:	af00      	add	r7, sp, #0
 80465d6:	60f8      	str	r0, [r7, #12]
 80465d8:	60b9      	str	r1, [r7, #8]
 80465da:	607a      	str	r2, [r7, #4]
 80465dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80465de:	2300      	movs	r3, #0
 80465e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80465e2:	68fb      	ldr	r3, [r7, #12]
 80465e4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80465e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80465e8:	2b00      	cmp	r3, #0
 80465ea:	d10b      	bne.n	8046604 <xQueueGenericSend+0x34>
        __asm volatile
 80465ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80465f0:	f383 8811 	msr	BASEPRI, r3
 80465f4:	f3bf 8f6f 	isb	sy
 80465f8:	f3bf 8f4f 	dsb	sy
 80465fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80465fe:	bf00      	nop
 8046600:	bf00      	nop
 8046602:	e7fd      	b.n	8046600 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8046604:	68bb      	ldr	r3, [r7, #8]
 8046606:	2b00      	cmp	r3, #0
 8046608:	d103      	bne.n	8046612 <xQueueGenericSend+0x42>
 804660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804660e:	2b00      	cmp	r3, #0
 8046610:	d101      	bne.n	8046616 <xQueueGenericSend+0x46>
 8046612:	2301      	movs	r3, #1
 8046614:	e000      	b.n	8046618 <xQueueGenericSend+0x48>
 8046616:	2300      	movs	r3, #0
 8046618:	2b00      	cmp	r3, #0
 804661a:	d10b      	bne.n	8046634 <xQueueGenericSend+0x64>
        __asm volatile
 804661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046620:	f383 8811 	msr	BASEPRI, r3
 8046624:	f3bf 8f6f 	isb	sy
 8046628:	f3bf 8f4f 	dsb	sy
 804662c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 804662e:	bf00      	nop
 8046630:	bf00      	nop
 8046632:	e7fd      	b.n	8046630 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8046634:	683b      	ldr	r3, [r7, #0]
 8046636:	2b02      	cmp	r3, #2
 8046638:	d103      	bne.n	8046642 <xQueueGenericSend+0x72>
 804663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804663e:	2b01      	cmp	r3, #1
 8046640:	d101      	bne.n	8046646 <xQueueGenericSend+0x76>
 8046642:	2301      	movs	r3, #1
 8046644:	e000      	b.n	8046648 <xQueueGenericSend+0x78>
 8046646:	2300      	movs	r3, #0
 8046648:	2b00      	cmp	r3, #0
 804664a:	d10b      	bne.n	8046664 <xQueueGenericSend+0x94>
        __asm volatile
 804664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046650:	f383 8811 	msr	BASEPRI, r3
 8046654:	f3bf 8f6f 	isb	sy
 8046658:	f3bf 8f4f 	dsb	sy
 804665c:	623b      	str	r3, [r7, #32]
    }
 804665e:	bf00      	nop
 8046660:	bf00      	nop
 8046662:	e7fd      	b.n	8046660 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8046664:	f001 fa00 	bl	8047a68 <xTaskGetSchedulerState>
 8046668:	4603      	mov	r3, r0
 804666a:	2b00      	cmp	r3, #0
 804666c:	d102      	bne.n	8046674 <xQueueGenericSend+0xa4>
 804666e:	687b      	ldr	r3, [r7, #4]
 8046670:	2b00      	cmp	r3, #0
 8046672:	d101      	bne.n	8046678 <xQueueGenericSend+0xa8>
 8046674:	2301      	movs	r3, #1
 8046676:	e000      	b.n	804667a <xQueueGenericSend+0xaa>
 8046678:	2300      	movs	r3, #0
 804667a:	2b00      	cmp	r3, #0
 804667c:	d10b      	bne.n	8046696 <xQueueGenericSend+0xc6>
        __asm volatile
 804667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046682:	f383 8811 	msr	BASEPRI, r3
 8046686:	f3bf 8f6f 	isb	sy
 804668a:	f3bf 8f4f 	dsb	sy
 804668e:	61fb      	str	r3, [r7, #28]
    }
 8046690:	bf00      	nop
 8046692:	bf00      	nop
 8046694:	e7fd      	b.n	8046692 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8046696:	f002 fa01 	bl	8048a9c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 804669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804669c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80466a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80466a2:	429a      	cmp	r2, r3
 80466a4:	d302      	bcc.n	80466ac <xQueueGenericSend+0xdc>
 80466a6:	683b      	ldr	r3, [r7, #0]
 80466a8:	2b02      	cmp	r3, #2
 80466aa:	d129      	bne.n	8046700 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80466ac:	683a      	ldr	r2, [r7, #0]
 80466ae:	68b9      	ldr	r1, [r7, #8]
 80466b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80466b2:	f000 fab1 	bl	8046c18 <prvCopyDataToQueue>
 80466b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80466b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80466ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80466bc:	2b00      	cmp	r3, #0
 80466be:	d010      	beq.n	80466e2 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80466c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80466c2:	3324      	adds	r3, #36	@ 0x24
 80466c4:	4618      	mov	r0, r3
 80466c6:	f001 f82f 	bl	8047728 <xTaskRemoveFromEventList>
 80466ca:	4603      	mov	r3, r0
 80466cc:	2b00      	cmp	r3, #0
 80466ce:	d013      	beq.n	80466f8 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80466d0:	4b3f      	ldr	r3, [pc, #252]	@ (80467d0 <xQueueGenericSend+0x200>)
 80466d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80466d6:	601a      	str	r2, [r3, #0]
 80466d8:	f3bf 8f4f 	dsb	sy
 80466dc:	f3bf 8f6f 	isb	sy
 80466e0:	e00a      	b.n	80466f8 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80466e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80466e4:	2b00      	cmp	r3, #0
 80466e6:	d007      	beq.n	80466f8 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80466e8:	4b39      	ldr	r3, [pc, #228]	@ (80467d0 <xQueueGenericSend+0x200>)
 80466ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80466ee:	601a      	str	r2, [r3, #0]
 80466f0:	f3bf 8f4f 	dsb	sy
 80466f4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80466f8:	f002 fa02 	bl	8048b00 <vPortExitCritical>
                return pdPASS;
 80466fc:	2301      	movs	r3, #1
 80466fe:	e063      	b.n	80467c8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8046700:	687b      	ldr	r3, [r7, #4]
 8046702:	2b00      	cmp	r3, #0
 8046704:	d103      	bne.n	804670e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8046706:	f002 f9fb 	bl	8048b00 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 804670a:	2300      	movs	r3, #0
 804670c:	e05c      	b.n	80467c8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 804670e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046710:	2b00      	cmp	r3, #0
 8046712:	d106      	bne.n	8046722 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8046714:	f107 0314 	add.w	r3, r7, #20
 8046718:	4618      	mov	r0, r3
 804671a:	f001 f869 	bl	80477f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 804671e:	2301      	movs	r3, #1
 8046720:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8046722:	f002 f9ed 	bl	8048b00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8046726:	f000 fddb 	bl	80472e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 804672a:	f002 f9b7 	bl	8048a9c <vPortEnterCritical>
 804672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8046734:	b25b      	sxtb	r3, r3
 8046736:	f1b3 3fff 	cmp.w	r3, #4294967295
 804673a:	d103      	bne.n	8046744 <xQueueGenericSend+0x174>
 804673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804673e:	2200      	movs	r2, #0
 8046740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8046744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 804674a:	b25b      	sxtb	r3, r3
 804674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046750:	d103      	bne.n	804675a <xQueueGenericSend+0x18a>
 8046752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046754:	2200      	movs	r2, #0
 8046756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 804675a:	f002 f9d1 	bl	8048b00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 804675e:	1d3a      	adds	r2, r7, #4
 8046760:	f107 0314 	add.w	r3, r7, #20
 8046764:	4611      	mov	r1, r2
 8046766:	4618      	mov	r0, r3
 8046768:	f001 f858 	bl	804781c <xTaskCheckForTimeOut>
 804676c:	4603      	mov	r3, r0
 804676e:	2b00      	cmp	r3, #0
 8046770:	d124      	bne.n	80467bc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8046772:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8046774:	f000 fb48 	bl	8046e08 <prvIsQueueFull>
 8046778:	4603      	mov	r3, r0
 804677a:	2b00      	cmp	r3, #0
 804677c:	d018      	beq.n	80467b0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 804677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046780:	3310      	adds	r3, #16
 8046782:	687a      	ldr	r2, [r7, #4]
 8046784:	4611      	mov	r1, r2
 8046786:	4618      	mov	r0, r3
 8046788:	f000 ff7c 	bl	8047684 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 804678c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 804678e:	f000 fad3 	bl	8046d38 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8046792:	f000 fdb3 	bl	80472fc <xTaskResumeAll>
 8046796:	4603      	mov	r3, r0
 8046798:	2b00      	cmp	r3, #0
 804679a:	f47f af7c 	bne.w	8046696 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 804679e:	4b0c      	ldr	r3, [pc, #48]	@ (80467d0 <xQueueGenericSend+0x200>)
 80467a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80467a4:	601a      	str	r2, [r3, #0]
 80467a6:	f3bf 8f4f 	dsb	sy
 80467aa:	f3bf 8f6f 	isb	sy
 80467ae:	e772      	b.n	8046696 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80467b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80467b2:	f000 fac1 	bl	8046d38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80467b6:	f000 fda1 	bl	80472fc <xTaskResumeAll>
 80467ba:	e76c      	b.n	8046696 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80467bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80467be:	f000 fabb 	bl	8046d38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80467c2:	f000 fd9b 	bl	80472fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80467c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80467c8:	4618      	mov	r0, r3
 80467ca:	3738      	adds	r7, #56	@ 0x38
 80467cc:	46bd      	mov	sp, r7
 80467ce:	bd80      	pop	{r7, pc}
 80467d0:	e000ed04 	.word	0xe000ed04

080467d4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80467d4:	b580      	push	{r7, lr}
 80467d6:	b090      	sub	sp, #64	@ 0x40
 80467d8:	af00      	add	r7, sp, #0
 80467da:	60f8      	str	r0, [r7, #12]
 80467dc:	60b9      	str	r1, [r7, #8]
 80467de:	607a      	str	r2, [r7, #4]
 80467e0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80467e2:	68fb      	ldr	r3, [r7, #12]
 80467e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80467e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467e8:	2b00      	cmp	r3, #0
 80467ea:	d10b      	bne.n	8046804 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80467ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80467f0:	f383 8811 	msr	BASEPRI, r3
 80467f4:	f3bf 8f6f 	isb	sy
 80467f8:	f3bf 8f4f 	dsb	sy
 80467fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80467fe:	bf00      	nop
 8046800:	bf00      	nop
 8046802:	e7fd      	b.n	8046800 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8046804:	68bb      	ldr	r3, [r7, #8]
 8046806:	2b00      	cmp	r3, #0
 8046808:	d103      	bne.n	8046812 <xQueueGenericSendFromISR+0x3e>
 804680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804680e:	2b00      	cmp	r3, #0
 8046810:	d101      	bne.n	8046816 <xQueueGenericSendFromISR+0x42>
 8046812:	2301      	movs	r3, #1
 8046814:	e000      	b.n	8046818 <xQueueGenericSendFromISR+0x44>
 8046816:	2300      	movs	r3, #0
 8046818:	2b00      	cmp	r3, #0
 804681a:	d10b      	bne.n	8046834 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 804681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046820:	f383 8811 	msr	BASEPRI, r3
 8046824:	f3bf 8f6f 	isb	sy
 8046828:	f3bf 8f4f 	dsb	sy
 804682c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 804682e:	bf00      	nop
 8046830:	bf00      	nop
 8046832:	e7fd      	b.n	8046830 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8046834:	683b      	ldr	r3, [r7, #0]
 8046836:	2b02      	cmp	r3, #2
 8046838:	d103      	bne.n	8046842 <xQueueGenericSendFromISR+0x6e>
 804683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804683c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804683e:	2b01      	cmp	r3, #1
 8046840:	d101      	bne.n	8046846 <xQueueGenericSendFromISR+0x72>
 8046842:	2301      	movs	r3, #1
 8046844:	e000      	b.n	8046848 <xQueueGenericSendFromISR+0x74>
 8046846:	2300      	movs	r3, #0
 8046848:	2b00      	cmp	r3, #0
 804684a:	d10b      	bne.n	8046864 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 804684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046850:	f383 8811 	msr	BASEPRI, r3
 8046854:	f3bf 8f6f 	isb	sy
 8046858:	f3bf 8f4f 	dsb	sy
 804685c:	623b      	str	r3, [r7, #32]
    }
 804685e:	bf00      	nop
 8046860:	bf00      	nop
 8046862:	e7fd      	b.n	8046860 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8046864:	f002 fa02 	bl	8048c6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8046868:	f3ef 8211 	mrs	r2, BASEPRI
 804686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046870:	f383 8811 	msr	BASEPRI, r3
 8046874:	f3bf 8f6f 	isb	sy
 8046878:	f3bf 8f4f 	dsb	sy
 804687c:	61fa      	str	r2, [r7, #28]
 804687e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8046880:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8046882:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8046884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8046888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804688a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804688c:	429a      	cmp	r2, r3
 804688e:	d302      	bcc.n	8046896 <xQueueGenericSendFromISR+0xc2>
 8046890:	683b      	ldr	r3, [r7, #0]
 8046892:	2b02      	cmp	r3, #2
 8046894:	d13f      	bne.n	8046916 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8046896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 804689c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80468a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80468a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80468a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80468a6:	683a      	ldr	r2, [r7, #0]
 80468a8:	68b9      	ldr	r1, [r7, #8]
 80468aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80468ac:	f000 f9b4 	bl	8046c18 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80468b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80468b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80468b8:	d112      	bne.n	80468e0 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80468ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80468bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80468be:	2b00      	cmp	r3, #0
 80468c0:	d026      	beq.n	8046910 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80468c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80468c4:	3324      	adds	r3, #36	@ 0x24
 80468c6:	4618      	mov	r0, r3
 80468c8:	f000 ff2e 	bl	8047728 <xTaskRemoveFromEventList>
 80468cc:	4603      	mov	r3, r0
 80468ce:	2b00      	cmp	r3, #0
 80468d0:	d01e      	beq.n	8046910 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80468d2:	687b      	ldr	r3, [r7, #4]
 80468d4:	2b00      	cmp	r3, #0
 80468d6:	d01b      	beq.n	8046910 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80468d8:	687b      	ldr	r3, [r7, #4]
 80468da:	2201      	movs	r2, #1
 80468dc:	601a      	str	r2, [r3, #0]
 80468de:	e017      	b.n	8046910 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80468e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80468e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80468e6:	d10b      	bne.n	8046900 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80468e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80468ec:	f383 8811 	msr	BASEPRI, r3
 80468f0:	f3bf 8f6f 	isb	sy
 80468f4:	f3bf 8f4f 	dsb	sy
 80468f8:	617b      	str	r3, [r7, #20]
    }
 80468fa:	bf00      	nop
 80468fc:	bf00      	nop
 80468fe:	e7fd      	b.n	80468fc <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8046900:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8046904:	3301      	adds	r3, #1
 8046906:	b2db      	uxtb	r3, r3
 8046908:	b25a      	sxtb	r2, r3
 804690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804690c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8046910:	2301      	movs	r3, #1
 8046912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8046914:	e001      	b.n	804691a <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8046916:	2300      	movs	r3, #0
 8046918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 804691a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804691c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 804691e:	693b      	ldr	r3, [r7, #16]
 8046920:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8046924:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8046926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8046928:	4618      	mov	r0, r3
 804692a:	3740      	adds	r7, #64	@ 0x40
 804692c:	46bd      	mov	sp, r7
 804692e:	bd80      	pop	{r7, pc}

08046930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8046930:	b580      	push	{r7, lr}
 8046932:	b08c      	sub	sp, #48	@ 0x30
 8046934:	af00      	add	r7, sp, #0
 8046936:	60f8      	str	r0, [r7, #12]
 8046938:	60b9      	str	r1, [r7, #8]
 804693a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 804693c:	2300      	movs	r3, #0
 804693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8046940:	68fb      	ldr	r3, [r7, #12]
 8046942:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8046944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046946:	2b00      	cmp	r3, #0
 8046948:	d10b      	bne.n	8046962 <xQueueReceive+0x32>
        __asm volatile
 804694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804694e:	f383 8811 	msr	BASEPRI, r3
 8046952:	f3bf 8f6f 	isb	sy
 8046956:	f3bf 8f4f 	dsb	sy
 804695a:	623b      	str	r3, [r7, #32]
    }
 804695c:	bf00      	nop
 804695e:	bf00      	nop
 8046960:	e7fd      	b.n	804695e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8046962:	68bb      	ldr	r3, [r7, #8]
 8046964:	2b00      	cmp	r3, #0
 8046966:	d103      	bne.n	8046970 <xQueueReceive+0x40>
 8046968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804696c:	2b00      	cmp	r3, #0
 804696e:	d101      	bne.n	8046974 <xQueueReceive+0x44>
 8046970:	2301      	movs	r3, #1
 8046972:	e000      	b.n	8046976 <xQueueReceive+0x46>
 8046974:	2300      	movs	r3, #0
 8046976:	2b00      	cmp	r3, #0
 8046978:	d10b      	bne.n	8046992 <xQueueReceive+0x62>
        __asm volatile
 804697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804697e:	f383 8811 	msr	BASEPRI, r3
 8046982:	f3bf 8f6f 	isb	sy
 8046986:	f3bf 8f4f 	dsb	sy
 804698a:	61fb      	str	r3, [r7, #28]
    }
 804698c:	bf00      	nop
 804698e:	bf00      	nop
 8046990:	e7fd      	b.n	804698e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8046992:	f001 f869 	bl	8047a68 <xTaskGetSchedulerState>
 8046996:	4603      	mov	r3, r0
 8046998:	2b00      	cmp	r3, #0
 804699a:	d102      	bne.n	80469a2 <xQueueReceive+0x72>
 804699c:	687b      	ldr	r3, [r7, #4]
 804699e:	2b00      	cmp	r3, #0
 80469a0:	d101      	bne.n	80469a6 <xQueueReceive+0x76>
 80469a2:	2301      	movs	r3, #1
 80469a4:	e000      	b.n	80469a8 <xQueueReceive+0x78>
 80469a6:	2300      	movs	r3, #0
 80469a8:	2b00      	cmp	r3, #0
 80469aa:	d10b      	bne.n	80469c4 <xQueueReceive+0x94>
        __asm volatile
 80469ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80469b0:	f383 8811 	msr	BASEPRI, r3
 80469b4:	f3bf 8f6f 	isb	sy
 80469b8:	f3bf 8f4f 	dsb	sy
 80469bc:	61bb      	str	r3, [r7, #24]
    }
 80469be:	bf00      	nop
 80469c0:	bf00      	nop
 80469c2:	e7fd      	b.n	80469c0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80469c4:	f002 f86a 	bl	8048a9c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80469c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80469ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80469cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80469ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80469d0:	2b00      	cmp	r3, #0
 80469d2:	d01f      	beq.n	8046a14 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80469d4:	68b9      	ldr	r1, [r7, #8]
 80469d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80469d8:	f000 f988 	bl	8046cec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80469dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80469de:	1e5a      	subs	r2, r3, #1
 80469e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80469e2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80469e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80469e6:	691b      	ldr	r3, [r3, #16]
 80469e8:	2b00      	cmp	r3, #0
 80469ea:	d00f      	beq.n	8046a0c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80469ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80469ee:	3310      	adds	r3, #16
 80469f0:	4618      	mov	r0, r3
 80469f2:	f000 fe99 	bl	8047728 <xTaskRemoveFromEventList>
 80469f6:	4603      	mov	r3, r0
 80469f8:	2b00      	cmp	r3, #0
 80469fa:	d007      	beq.n	8046a0c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80469fc:	4b3c      	ldr	r3, [pc, #240]	@ (8046af0 <xQueueReceive+0x1c0>)
 80469fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8046a02:	601a      	str	r2, [r3, #0]
 8046a04:	f3bf 8f4f 	dsb	sy
 8046a08:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8046a0c:	f002 f878 	bl	8048b00 <vPortExitCritical>
                return pdPASS;
 8046a10:	2301      	movs	r3, #1
 8046a12:	e069      	b.n	8046ae8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8046a14:	687b      	ldr	r3, [r7, #4]
 8046a16:	2b00      	cmp	r3, #0
 8046a18:	d103      	bne.n	8046a22 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8046a1a:	f002 f871 	bl	8048b00 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8046a1e:	2300      	movs	r3, #0
 8046a20:	e062      	b.n	8046ae8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8046a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046a24:	2b00      	cmp	r3, #0
 8046a26:	d106      	bne.n	8046a36 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8046a28:	f107 0310 	add.w	r3, r7, #16
 8046a2c:	4618      	mov	r0, r3
 8046a2e:	f000 fedf 	bl	80477f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8046a32:	2301      	movs	r3, #1
 8046a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8046a36:	f002 f863 	bl	8048b00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8046a3a:	f000 fc51 	bl	80472e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8046a3e:	f002 f82d 	bl	8048a9c <vPortEnterCritical>
 8046a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8046a48:	b25b      	sxtb	r3, r3
 8046a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046a4e:	d103      	bne.n	8046a58 <xQueueReceive+0x128>
 8046a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a52:	2200      	movs	r2, #0
 8046a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8046a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8046a5e:	b25b      	sxtb	r3, r3
 8046a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046a64:	d103      	bne.n	8046a6e <xQueueReceive+0x13e>
 8046a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a68:	2200      	movs	r2, #0
 8046a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8046a6e:	f002 f847 	bl	8048b00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8046a72:	1d3a      	adds	r2, r7, #4
 8046a74:	f107 0310 	add.w	r3, r7, #16
 8046a78:	4611      	mov	r1, r2
 8046a7a:	4618      	mov	r0, r3
 8046a7c:	f000 fece 	bl	804781c <xTaskCheckForTimeOut>
 8046a80:	4603      	mov	r3, r0
 8046a82:	2b00      	cmp	r3, #0
 8046a84:	d123      	bne.n	8046ace <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8046a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046a88:	f000 f9a8 	bl	8046ddc <prvIsQueueEmpty>
 8046a8c:	4603      	mov	r3, r0
 8046a8e:	2b00      	cmp	r3, #0
 8046a90:	d017      	beq.n	8046ac2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8046a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a94:	3324      	adds	r3, #36	@ 0x24
 8046a96:	687a      	ldr	r2, [r7, #4]
 8046a98:	4611      	mov	r1, r2
 8046a9a:	4618      	mov	r0, r3
 8046a9c:	f000 fdf2 	bl	8047684 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8046aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046aa2:	f000 f949 	bl	8046d38 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8046aa6:	f000 fc29 	bl	80472fc <xTaskResumeAll>
 8046aaa:	4603      	mov	r3, r0
 8046aac:	2b00      	cmp	r3, #0
 8046aae:	d189      	bne.n	80469c4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8046ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8046af0 <xQueueReceive+0x1c0>)
 8046ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8046ab6:	601a      	str	r2, [r3, #0]
 8046ab8:	f3bf 8f4f 	dsb	sy
 8046abc:	f3bf 8f6f 	isb	sy
 8046ac0:	e780      	b.n	80469c4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8046ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046ac4:	f000 f938 	bl	8046d38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8046ac8:	f000 fc18 	bl	80472fc <xTaskResumeAll>
 8046acc:	e77a      	b.n	80469c4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8046ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046ad0:	f000 f932 	bl	8046d38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8046ad4:	f000 fc12 	bl	80472fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8046ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046ada:	f000 f97f 	bl	8046ddc <prvIsQueueEmpty>
 8046ade:	4603      	mov	r3, r0
 8046ae0:	2b00      	cmp	r3, #0
 8046ae2:	f43f af6f 	beq.w	80469c4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8046ae6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8046ae8:	4618      	mov	r0, r3
 8046aea:	3730      	adds	r7, #48	@ 0x30
 8046aec:	46bd      	mov	sp, r7
 8046aee:	bd80      	pop	{r7, pc}
 8046af0:	e000ed04 	.word	0xe000ed04

08046af4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8046af4:	b580      	push	{r7, lr}
 8046af6:	b090      	sub	sp, #64	@ 0x40
 8046af8:	af00      	add	r7, sp, #0
 8046afa:	60f8      	str	r0, [r7, #12]
 8046afc:	60b9      	str	r1, [r7, #8]
 8046afe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8046b00:	68fb      	ldr	r3, [r7, #12]
 8046b02:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8046b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b06:	2b00      	cmp	r3, #0
 8046b08:	d10b      	bne.n	8046b22 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8046b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046b0e:	f383 8811 	msr	BASEPRI, r3
 8046b12:	f3bf 8f6f 	isb	sy
 8046b16:	f3bf 8f4f 	dsb	sy
 8046b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8046b1c:	bf00      	nop
 8046b1e:	bf00      	nop
 8046b20:	e7fd      	b.n	8046b1e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8046b22:	68bb      	ldr	r3, [r7, #8]
 8046b24:	2b00      	cmp	r3, #0
 8046b26:	d103      	bne.n	8046b30 <xQueueReceiveFromISR+0x3c>
 8046b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046b2c:	2b00      	cmp	r3, #0
 8046b2e:	d101      	bne.n	8046b34 <xQueueReceiveFromISR+0x40>
 8046b30:	2301      	movs	r3, #1
 8046b32:	e000      	b.n	8046b36 <xQueueReceiveFromISR+0x42>
 8046b34:	2300      	movs	r3, #0
 8046b36:	2b00      	cmp	r3, #0
 8046b38:	d10b      	bne.n	8046b52 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8046b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046b3e:	f383 8811 	msr	BASEPRI, r3
 8046b42:	f3bf 8f6f 	isb	sy
 8046b46:	f3bf 8f4f 	dsb	sy
 8046b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8046b4c:	bf00      	nop
 8046b4e:	bf00      	nop
 8046b50:	e7fd      	b.n	8046b4e <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8046b52:	f002 f88b 	bl	8048c6c <vPortValidateInterruptPriority>
        __asm volatile
 8046b56:	f3ef 8211 	mrs	r2, BASEPRI
 8046b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046b5e:	f383 8811 	msr	BASEPRI, r3
 8046b62:	f3bf 8f6f 	isb	sy
 8046b66:	f3bf 8f4f 	dsb	sy
 8046b6a:	623a      	str	r2, [r7, #32]
 8046b6c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8046b6e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8046b70:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8046b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046b76:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8046b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046b7a:	2b00      	cmp	r3, #0
 8046b7c:	d03f      	beq.n	8046bfe <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8046b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8046b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8046b88:	68b9      	ldr	r1, [r7, #8]
 8046b8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8046b8c:	f000 f8ae 	bl	8046cec <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8046b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046b92:	1e5a      	subs	r2, r3, #1
 8046b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b96:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8046b98:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8046b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046ba0:	d112      	bne.n	8046bc8 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8046ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046ba4:	691b      	ldr	r3, [r3, #16]
 8046ba6:	2b00      	cmp	r3, #0
 8046ba8:	d026      	beq.n	8046bf8 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8046baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046bac:	3310      	adds	r3, #16
 8046bae:	4618      	mov	r0, r3
 8046bb0:	f000 fdba 	bl	8047728 <xTaskRemoveFromEventList>
 8046bb4:	4603      	mov	r3, r0
 8046bb6:	2b00      	cmp	r3, #0
 8046bb8:	d01e      	beq.n	8046bf8 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8046bba:	687b      	ldr	r3, [r7, #4]
 8046bbc:	2b00      	cmp	r3, #0
 8046bbe:	d01b      	beq.n	8046bf8 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8046bc0:	687b      	ldr	r3, [r7, #4]
 8046bc2:	2201      	movs	r2, #1
 8046bc4:	601a      	str	r2, [r3, #0]
 8046bc6:	e017      	b.n	8046bf8 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8046bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8046bcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8046bce:	d10b      	bne.n	8046be8 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8046bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046bd4:	f383 8811 	msr	BASEPRI, r3
 8046bd8:	f3bf 8f6f 	isb	sy
 8046bdc:	f3bf 8f4f 	dsb	sy
 8046be0:	61bb      	str	r3, [r7, #24]
    }
 8046be2:	bf00      	nop
 8046be4:	bf00      	nop
 8046be6:	e7fd      	b.n	8046be4 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8046be8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8046bec:	3301      	adds	r3, #1
 8046bee:	b2db      	uxtb	r3, r3
 8046bf0:	b25a      	sxtb	r2, r3
 8046bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8046bf8:	2301      	movs	r3, #1
 8046bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8046bfc:	e001      	b.n	8046c02 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8046bfe:	2300      	movs	r3, #0
 8046c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8046c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046c04:	617b      	str	r3, [r7, #20]
        __asm volatile
 8046c06:	697b      	ldr	r3, [r7, #20]
 8046c08:	f383 8811 	msr	BASEPRI, r3
    }
 8046c0c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8046c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8046c10:	4618      	mov	r0, r3
 8046c12:	3740      	adds	r7, #64	@ 0x40
 8046c14:	46bd      	mov	sp, r7
 8046c16:	bd80      	pop	{r7, pc}

08046c18 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8046c18:	b580      	push	{r7, lr}
 8046c1a:	b086      	sub	sp, #24
 8046c1c:	af00      	add	r7, sp, #0
 8046c1e:	60f8      	str	r0, [r7, #12]
 8046c20:	60b9      	str	r1, [r7, #8]
 8046c22:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8046c24:	2300      	movs	r3, #0
 8046c26:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8046c28:	68fb      	ldr	r3, [r7, #12]
 8046c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046c2c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8046c2e:	68fb      	ldr	r3, [r7, #12]
 8046c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046c32:	2b00      	cmp	r3, #0
 8046c34:	d10d      	bne.n	8046c52 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8046c36:	68fb      	ldr	r3, [r7, #12]
 8046c38:	681b      	ldr	r3, [r3, #0]
 8046c3a:	2b00      	cmp	r3, #0
 8046c3c:	d14d      	bne.n	8046cda <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8046c3e:	68fb      	ldr	r3, [r7, #12]
 8046c40:	689b      	ldr	r3, [r3, #8]
 8046c42:	4618      	mov	r0, r3
 8046c44:	f000 ff2e 	bl	8047aa4 <xTaskPriorityDisinherit>
 8046c48:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8046c4a:	68fb      	ldr	r3, [r7, #12]
 8046c4c:	2200      	movs	r2, #0
 8046c4e:	609a      	str	r2, [r3, #8]
 8046c50:	e043      	b.n	8046cda <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8046c52:	687b      	ldr	r3, [r7, #4]
 8046c54:	2b00      	cmp	r3, #0
 8046c56:	d119      	bne.n	8046c8c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8046c58:	68fb      	ldr	r3, [r7, #12]
 8046c5a:	6858      	ldr	r0, [r3, #4]
 8046c5c:	68fb      	ldr	r3, [r7, #12]
 8046c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046c60:	461a      	mov	r2, r3
 8046c62:	68b9      	ldr	r1, [r7, #8]
 8046c64:	f003 f843 	bl	8049cee <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8046c68:	68fb      	ldr	r3, [r7, #12]
 8046c6a:	685a      	ldr	r2, [r3, #4]
 8046c6c:	68fb      	ldr	r3, [r7, #12]
 8046c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046c70:	441a      	add	r2, r3
 8046c72:	68fb      	ldr	r3, [r7, #12]
 8046c74:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8046c76:	68fb      	ldr	r3, [r7, #12]
 8046c78:	685a      	ldr	r2, [r3, #4]
 8046c7a:	68fb      	ldr	r3, [r7, #12]
 8046c7c:	689b      	ldr	r3, [r3, #8]
 8046c7e:	429a      	cmp	r2, r3
 8046c80:	d32b      	bcc.n	8046cda <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8046c82:	68fb      	ldr	r3, [r7, #12]
 8046c84:	681a      	ldr	r2, [r3, #0]
 8046c86:	68fb      	ldr	r3, [r7, #12]
 8046c88:	605a      	str	r2, [r3, #4]
 8046c8a:	e026      	b.n	8046cda <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8046c8c:	68fb      	ldr	r3, [r7, #12]
 8046c8e:	68d8      	ldr	r0, [r3, #12]
 8046c90:	68fb      	ldr	r3, [r7, #12]
 8046c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046c94:	461a      	mov	r2, r3
 8046c96:	68b9      	ldr	r1, [r7, #8]
 8046c98:	f003 f829 	bl	8049cee <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8046c9c:	68fb      	ldr	r3, [r7, #12]
 8046c9e:	68da      	ldr	r2, [r3, #12]
 8046ca0:	68fb      	ldr	r3, [r7, #12]
 8046ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046ca4:	425b      	negs	r3, r3
 8046ca6:	441a      	add	r2, r3
 8046ca8:	68fb      	ldr	r3, [r7, #12]
 8046caa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8046cac:	68fb      	ldr	r3, [r7, #12]
 8046cae:	68da      	ldr	r2, [r3, #12]
 8046cb0:	68fb      	ldr	r3, [r7, #12]
 8046cb2:	681b      	ldr	r3, [r3, #0]
 8046cb4:	429a      	cmp	r2, r3
 8046cb6:	d207      	bcs.n	8046cc8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8046cb8:	68fb      	ldr	r3, [r7, #12]
 8046cba:	689a      	ldr	r2, [r3, #8]
 8046cbc:	68fb      	ldr	r3, [r7, #12]
 8046cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046cc0:	425b      	negs	r3, r3
 8046cc2:	441a      	add	r2, r3
 8046cc4:	68fb      	ldr	r3, [r7, #12]
 8046cc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8046cc8:	687b      	ldr	r3, [r7, #4]
 8046cca:	2b02      	cmp	r3, #2
 8046ccc:	d105      	bne.n	8046cda <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8046cce:	693b      	ldr	r3, [r7, #16]
 8046cd0:	2b00      	cmp	r3, #0
 8046cd2:	d002      	beq.n	8046cda <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8046cd4:	693b      	ldr	r3, [r7, #16]
 8046cd6:	3b01      	subs	r3, #1
 8046cd8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8046cda:	693b      	ldr	r3, [r7, #16]
 8046cdc:	1c5a      	adds	r2, r3, #1
 8046cde:	68fb      	ldr	r3, [r7, #12]
 8046ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8046ce2:	697b      	ldr	r3, [r7, #20]
}
 8046ce4:	4618      	mov	r0, r3
 8046ce6:	3718      	adds	r7, #24
 8046ce8:	46bd      	mov	sp, r7
 8046cea:	bd80      	pop	{r7, pc}

08046cec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8046cec:	b580      	push	{r7, lr}
 8046cee:	b082      	sub	sp, #8
 8046cf0:	af00      	add	r7, sp, #0
 8046cf2:	6078      	str	r0, [r7, #4]
 8046cf4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8046cf6:	687b      	ldr	r3, [r7, #4]
 8046cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046cfa:	2b00      	cmp	r3, #0
 8046cfc:	d018      	beq.n	8046d30 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8046cfe:	687b      	ldr	r3, [r7, #4]
 8046d00:	68da      	ldr	r2, [r3, #12]
 8046d02:	687b      	ldr	r3, [r7, #4]
 8046d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046d06:	441a      	add	r2, r3
 8046d08:	687b      	ldr	r3, [r7, #4]
 8046d0a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8046d0c:	687b      	ldr	r3, [r7, #4]
 8046d0e:	68da      	ldr	r2, [r3, #12]
 8046d10:	687b      	ldr	r3, [r7, #4]
 8046d12:	689b      	ldr	r3, [r3, #8]
 8046d14:	429a      	cmp	r2, r3
 8046d16:	d303      	bcc.n	8046d20 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8046d18:	687b      	ldr	r3, [r7, #4]
 8046d1a:	681a      	ldr	r2, [r3, #0]
 8046d1c:	687b      	ldr	r3, [r7, #4]
 8046d1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8046d20:	687b      	ldr	r3, [r7, #4]
 8046d22:	68d9      	ldr	r1, [r3, #12]
 8046d24:	687b      	ldr	r3, [r7, #4]
 8046d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8046d28:	461a      	mov	r2, r3
 8046d2a:	6838      	ldr	r0, [r7, #0]
 8046d2c:	f002 ffdf 	bl	8049cee <memcpy>
    }
}
 8046d30:	bf00      	nop
 8046d32:	3708      	adds	r7, #8
 8046d34:	46bd      	mov	sp, r7
 8046d36:	bd80      	pop	{r7, pc}

08046d38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8046d38:	b580      	push	{r7, lr}
 8046d3a:	b084      	sub	sp, #16
 8046d3c:	af00      	add	r7, sp, #0
 8046d3e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8046d40:	f001 feac 	bl	8048a9c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8046d44:	687b      	ldr	r3, [r7, #4]
 8046d46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8046d4a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8046d4c:	e011      	b.n	8046d72 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8046d4e:	687b      	ldr	r3, [r7, #4]
 8046d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046d52:	2b00      	cmp	r3, #0
 8046d54:	d012      	beq.n	8046d7c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8046d56:	687b      	ldr	r3, [r7, #4]
 8046d58:	3324      	adds	r3, #36	@ 0x24
 8046d5a:	4618      	mov	r0, r3
 8046d5c:	f000 fce4 	bl	8047728 <xTaskRemoveFromEventList>
 8046d60:	4603      	mov	r3, r0
 8046d62:	2b00      	cmp	r3, #0
 8046d64:	d001      	beq.n	8046d6a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8046d66:	f000 fdc1 	bl	80478ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8046d6a:	7bfb      	ldrb	r3, [r7, #15]
 8046d6c:	3b01      	subs	r3, #1
 8046d6e:	b2db      	uxtb	r3, r3
 8046d70:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8046d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8046d76:	2b00      	cmp	r3, #0
 8046d78:	dce9      	bgt.n	8046d4e <prvUnlockQueue+0x16>
 8046d7a:	e000      	b.n	8046d7e <prvUnlockQueue+0x46>
                        break;
 8046d7c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8046d7e:	687b      	ldr	r3, [r7, #4]
 8046d80:	22ff      	movs	r2, #255	@ 0xff
 8046d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8046d86:	f001 febb 	bl	8048b00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8046d8a:	f001 fe87 	bl	8048a9c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8046d8e:	687b      	ldr	r3, [r7, #4]
 8046d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8046d94:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8046d96:	e011      	b.n	8046dbc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8046d98:	687b      	ldr	r3, [r7, #4]
 8046d9a:	691b      	ldr	r3, [r3, #16]
 8046d9c:	2b00      	cmp	r3, #0
 8046d9e:	d012      	beq.n	8046dc6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8046da0:	687b      	ldr	r3, [r7, #4]
 8046da2:	3310      	adds	r3, #16
 8046da4:	4618      	mov	r0, r3
 8046da6:	f000 fcbf 	bl	8047728 <xTaskRemoveFromEventList>
 8046daa:	4603      	mov	r3, r0
 8046dac:	2b00      	cmp	r3, #0
 8046dae:	d001      	beq.n	8046db4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8046db0:	f000 fd9c 	bl	80478ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8046db4:	7bbb      	ldrb	r3, [r7, #14]
 8046db6:	3b01      	subs	r3, #1
 8046db8:	b2db      	uxtb	r3, r3
 8046dba:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8046dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8046dc0:	2b00      	cmp	r3, #0
 8046dc2:	dce9      	bgt.n	8046d98 <prvUnlockQueue+0x60>
 8046dc4:	e000      	b.n	8046dc8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8046dc6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8046dc8:	687b      	ldr	r3, [r7, #4]
 8046dca:	22ff      	movs	r2, #255	@ 0xff
 8046dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8046dd0:	f001 fe96 	bl	8048b00 <vPortExitCritical>
}
 8046dd4:	bf00      	nop
 8046dd6:	3710      	adds	r7, #16
 8046dd8:	46bd      	mov	sp, r7
 8046dda:	bd80      	pop	{r7, pc}

08046ddc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8046ddc:	b580      	push	{r7, lr}
 8046dde:	b084      	sub	sp, #16
 8046de0:	af00      	add	r7, sp, #0
 8046de2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8046de4:	f001 fe5a 	bl	8048a9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8046de8:	687b      	ldr	r3, [r7, #4]
 8046dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046dec:	2b00      	cmp	r3, #0
 8046dee:	d102      	bne.n	8046df6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8046df0:	2301      	movs	r3, #1
 8046df2:	60fb      	str	r3, [r7, #12]
 8046df4:	e001      	b.n	8046dfa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8046df6:	2300      	movs	r3, #0
 8046df8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8046dfa:	f001 fe81 	bl	8048b00 <vPortExitCritical>

    return xReturn;
 8046dfe:	68fb      	ldr	r3, [r7, #12]
}
 8046e00:	4618      	mov	r0, r3
 8046e02:	3710      	adds	r7, #16
 8046e04:	46bd      	mov	sp, r7
 8046e06:	bd80      	pop	{r7, pc}

08046e08 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8046e08:	b580      	push	{r7, lr}
 8046e0a:	b084      	sub	sp, #16
 8046e0c:	af00      	add	r7, sp, #0
 8046e0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8046e10:	f001 fe44 	bl	8048a9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8046e14:	687b      	ldr	r3, [r7, #4]
 8046e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8046e18:	687b      	ldr	r3, [r7, #4]
 8046e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8046e1c:	429a      	cmp	r2, r3
 8046e1e:	d102      	bne.n	8046e26 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8046e20:	2301      	movs	r3, #1
 8046e22:	60fb      	str	r3, [r7, #12]
 8046e24:	e001      	b.n	8046e2a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8046e26:	2300      	movs	r3, #0
 8046e28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8046e2a:	f001 fe69 	bl	8048b00 <vPortExitCritical>

    return xReturn;
 8046e2e:	68fb      	ldr	r3, [r7, #12]
}
 8046e30:	4618      	mov	r0, r3
 8046e32:	3710      	adds	r7, #16
 8046e34:	46bd      	mov	sp, r7
 8046e36:	bd80      	pop	{r7, pc}

08046e38 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8046e38:	b480      	push	{r7}
 8046e3a:	b087      	sub	sp, #28
 8046e3c:	af00      	add	r7, sp, #0
 8046e3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8046e40:	687b      	ldr	r3, [r7, #4]
 8046e42:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8046e44:	693b      	ldr	r3, [r7, #16]
 8046e46:	2b00      	cmp	r3, #0
 8046e48:	d10b      	bne.n	8046e62 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8046e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046e4e:	f383 8811 	msr	BASEPRI, r3
 8046e52:	f3bf 8f6f 	isb	sy
 8046e56:	f3bf 8f4f 	dsb	sy
 8046e5a:	60fb      	str	r3, [r7, #12]
    }
 8046e5c:	bf00      	nop
 8046e5e:	bf00      	nop
 8046e60:	e7fd      	b.n	8046e5e <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8046e62:	693b      	ldr	r3, [r7, #16]
 8046e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8046e66:	693b      	ldr	r3, [r7, #16]
 8046e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8046e6a:	429a      	cmp	r2, r3
 8046e6c:	d102      	bne.n	8046e74 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8046e6e:	2301      	movs	r3, #1
 8046e70:	617b      	str	r3, [r7, #20]
 8046e72:	e001      	b.n	8046e78 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8046e74:	2300      	movs	r3, #0
 8046e76:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8046e78:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8046e7a:	4618      	mov	r0, r3
 8046e7c:	371c      	adds	r7, #28
 8046e7e:	46bd      	mov	sp, r7
 8046e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e84:	4770      	bx	lr
	...

08046e88 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8046e88:	b480      	push	{r7}
 8046e8a:	b085      	sub	sp, #20
 8046e8c:	af00      	add	r7, sp, #0
 8046e8e:	6078      	str	r0, [r7, #4]
 8046e90:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8046e92:	2300      	movs	r3, #0
 8046e94:	60fb      	str	r3, [r7, #12]
 8046e96:	e014      	b.n	8046ec2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8046e98:	4a0f      	ldr	r2, [pc, #60]	@ (8046ed8 <vQueueAddToRegistry+0x50>)
 8046e9a:	68fb      	ldr	r3, [r7, #12]
 8046e9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8046ea0:	2b00      	cmp	r3, #0
 8046ea2:	d10b      	bne.n	8046ebc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8046ea4:	490c      	ldr	r1, [pc, #48]	@ (8046ed8 <vQueueAddToRegistry+0x50>)
 8046ea6:	68fb      	ldr	r3, [r7, #12]
 8046ea8:	683a      	ldr	r2, [r7, #0]
 8046eaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8046eae:	4a0a      	ldr	r2, [pc, #40]	@ (8046ed8 <vQueueAddToRegistry+0x50>)
 8046eb0:	68fb      	ldr	r3, [r7, #12]
 8046eb2:	00db      	lsls	r3, r3, #3
 8046eb4:	4413      	add	r3, r2
 8046eb6:	687a      	ldr	r2, [r7, #4]
 8046eb8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8046eba:	e006      	b.n	8046eca <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8046ebc:	68fb      	ldr	r3, [r7, #12]
 8046ebe:	3301      	adds	r3, #1
 8046ec0:	60fb      	str	r3, [r7, #12]
 8046ec2:	68fb      	ldr	r3, [r7, #12]
 8046ec4:	2b07      	cmp	r3, #7
 8046ec6:	d9e7      	bls.n	8046e98 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8046ec8:	bf00      	nop
 8046eca:	bf00      	nop
 8046ecc:	3714      	adds	r7, #20
 8046ece:	46bd      	mov	sp, r7
 8046ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ed4:	4770      	bx	lr
 8046ed6:	bf00      	nop
 8046ed8:	200003c8 	.word	0x200003c8

08046edc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8046edc:	b580      	push	{r7, lr}
 8046ede:	b086      	sub	sp, #24
 8046ee0:	af00      	add	r7, sp, #0
 8046ee2:	60f8      	str	r0, [r7, #12]
 8046ee4:	60b9      	str	r1, [r7, #8]
 8046ee6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8046ee8:	68fb      	ldr	r3, [r7, #12]
 8046eea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8046eec:	f001 fdd6 	bl	8048a9c <vPortEnterCritical>
 8046ef0:	697b      	ldr	r3, [r7, #20]
 8046ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8046ef6:	b25b      	sxtb	r3, r3
 8046ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046efc:	d103      	bne.n	8046f06 <vQueueWaitForMessageRestricted+0x2a>
 8046efe:	697b      	ldr	r3, [r7, #20]
 8046f00:	2200      	movs	r2, #0
 8046f02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8046f06:	697b      	ldr	r3, [r7, #20]
 8046f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8046f0c:	b25b      	sxtb	r3, r3
 8046f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046f12:	d103      	bne.n	8046f1c <vQueueWaitForMessageRestricted+0x40>
 8046f14:	697b      	ldr	r3, [r7, #20]
 8046f16:	2200      	movs	r2, #0
 8046f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8046f1c:	f001 fdf0 	bl	8048b00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8046f20:	697b      	ldr	r3, [r7, #20]
 8046f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046f24:	2b00      	cmp	r3, #0
 8046f26:	d106      	bne.n	8046f36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8046f28:	697b      	ldr	r3, [r7, #20]
 8046f2a:	3324      	adds	r3, #36	@ 0x24
 8046f2c:	687a      	ldr	r2, [r7, #4]
 8046f2e:	68b9      	ldr	r1, [r7, #8]
 8046f30:	4618      	mov	r0, r3
 8046f32:	f000 fbcd 	bl	80476d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8046f36:	6978      	ldr	r0, [r7, #20]
 8046f38:	f7ff fefe 	bl	8046d38 <prvUnlockQueue>
    }
 8046f3c:	bf00      	nop
 8046f3e:	3718      	adds	r7, #24
 8046f40:	46bd      	mov	sp, r7
 8046f42:	bd80      	pop	{r7, pc}

08046f44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8046f44:	b580      	push	{r7, lr}
 8046f46:	b08c      	sub	sp, #48	@ 0x30
 8046f48:	af04      	add	r7, sp, #16
 8046f4a:	60f8      	str	r0, [r7, #12]
 8046f4c:	60b9      	str	r1, [r7, #8]
 8046f4e:	603b      	str	r3, [r7, #0]
 8046f50:	4613      	mov	r3, r2
 8046f52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8046f54:	88fb      	ldrh	r3, [r7, #6]
 8046f56:	009b      	lsls	r3, r3, #2
 8046f58:	4618      	mov	r0, r3
 8046f5a:	f001 fec9 	bl	8048cf0 <pvPortMalloc>
 8046f5e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8046f60:	697b      	ldr	r3, [r7, #20]
 8046f62:	2b00      	cmp	r3, #0
 8046f64:	d00e      	beq.n	8046f84 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8046f66:	2058      	movs	r0, #88	@ 0x58
 8046f68:	f001 fec2 	bl	8048cf0 <pvPortMalloc>
 8046f6c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8046f6e:	69fb      	ldr	r3, [r7, #28]
 8046f70:	2b00      	cmp	r3, #0
 8046f72:	d003      	beq.n	8046f7c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8046f74:	69fb      	ldr	r3, [r7, #28]
 8046f76:	697a      	ldr	r2, [r7, #20]
 8046f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8046f7a:	e005      	b.n	8046f88 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8046f7c:	6978      	ldr	r0, [r7, #20]
 8046f7e:	f001 ff99 	bl	8048eb4 <vPortFree>
 8046f82:	e001      	b.n	8046f88 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8046f84:	2300      	movs	r3, #0
 8046f86:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8046f88:	69fb      	ldr	r3, [r7, #28]
 8046f8a:	2b00      	cmp	r3, #0
 8046f8c:	d013      	beq.n	8046fb6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8046f8e:	88fa      	ldrh	r2, [r7, #6]
 8046f90:	2300      	movs	r3, #0
 8046f92:	9303      	str	r3, [sp, #12]
 8046f94:	69fb      	ldr	r3, [r7, #28]
 8046f96:	9302      	str	r3, [sp, #8]
 8046f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046f9a:	9301      	str	r3, [sp, #4]
 8046f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046f9e:	9300      	str	r3, [sp, #0]
 8046fa0:	683b      	ldr	r3, [r7, #0]
 8046fa2:	68b9      	ldr	r1, [r7, #8]
 8046fa4:	68f8      	ldr	r0, [r7, #12]
 8046fa6:	f000 f80e 	bl	8046fc6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8046faa:	69f8      	ldr	r0, [r7, #28]
 8046fac:	f000 f8a2 	bl	80470f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8046fb0:	2301      	movs	r3, #1
 8046fb2:	61bb      	str	r3, [r7, #24]
 8046fb4:	e002      	b.n	8046fbc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8046fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8046fba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8046fbc:	69bb      	ldr	r3, [r7, #24]
    }
 8046fbe:	4618      	mov	r0, r3
 8046fc0:	3720      	adds	r7, #32
 8046fc2:	46bd      	mov	sp, r7
 8046fc4:	bd80      	pop	{r7, pc}

08046fc6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8046fc6:	b580      	push	{r7, lr}
 8046fc8:	b088      	sub	sp, #32
 8046fca:	af00      	add	r7, sp, #0
 8046fcc:	60f8      	str	r0, [r7, #12]
 8046fce:	60b9      	str	r1, [r7, #8]
 8046fd0:	607a      	str	r2, [r7, #4]
 8046fd2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8046fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046fd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8046fd8:	687b      	ldr	r3, [r7, #4]
 8046fda:	009b      	lsls	r3, r3, #2
 8046fdc:	461a      	mov	r2, r3
 8046fde:	21a5      	movs	r1, #165	@ 0xa5
 8046fe0:	f002 fe05 	bl	8049bee <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8046fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8046fe8:	687b      	ldr	r3, [r7, #4]
 8046fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8046fee:	3b01      	subs	r3, #1
 8046ff0:	009b      	lsls	r3, r3, #2
 8046ff2:	4413      	add	r3, r2
 8046ff4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8046ff6:	69bb      	ldr	r3, [r7, #24]
 8046ff8:	f023 0307 	bic.w	r3, r3, #7
 8046ffc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8046ffe:	69bb      	ldr	r3, [r7, #24]
 8047000:	f003 0307 	and.w	r3, r3, #7
 8047004:	2b00      	cmp	r3, #0
 8047006:	d00b      	beq.n	8047020 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8047008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804700c:	f383 8811 	msr	BASEPRI, r3
 8047010:	f3bf 8f6f 	isb	sy
 8047014:	f3bf 8f4f 	dsb	sy
 8047018:	617b      	str	r3, [r7, #20]
    }
 804701a:	bf00      	nop
 804701c:	bf00      	nop
 804701e:	e7fd      	b.n	804701c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8047020:	68bb      	ldr	r3, [r7, #8]
 8047022:	2b00      	cmp	r3, #0
 8047024:	d01f      	beq.n	8047066 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8047026:	2300      	movs	r3, #0
 8047028:	61fb      	str	r3, [r7, #28]
 804702a:	e012      	b.n	8047052 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 804702c:	68ba      	ldr	r2, [r7, #8]
 804702e:	69fb      	ldr	r3, [r7, #28]
 8047030:	4413      	add	r3, r2
 8047032:	7819      	ldrb	r1, [r3, #0]
 8047034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8047036:	69fb      	ldr	r3, [r7, #28]
 8047038:	4413      	add	r3, r2
 804703a:	3334      	adds	r3, #52	@ 0x34
 804703c:	460a      	mov	r2, r1
 804703e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8047040:	68ba      	ldr	r2, [r7, #8]
 8047042:	69fb      	ldr	r3, [r7, #28]
 8047044:	4413      	add	r3, r2
 8047046:	781b      	ldrb	r3, [r3, #0]
 8047048:	2b00      	cmp	r3, #0
 804704a:	d006      	beq.n	804705a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 804704c:	69fb      	ldr	r3, [r7, #28]
 804704e:	3301      	adds	r3, #1
 8047050:	61fb      	str	r3, [r7, #28]
 8047052:	69fb      	ldr	r3, [r7, #28]
 8047054:	2b09      	cmp	r3, #9
 8047056:	d9e9      	bls.n	804702c <prvInitialiseNewTask+0x66>
 8047058:	e000      	b.n	804705c <prvInitialiseNewTask+0x96>
            {
                break;
 804705a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 804705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804705e:	2200      	movs	r2, #0
 8047060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8047064:	e003      	b.n	804706e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8047066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8047068:	2200      	movs	r2, #0
 804706a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 804706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047070:	2b04      	cmp	r3, #4
 8047072:	d901      	bls.n	8047078 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8047074:	2304      	movs	r3, #4
 8047076:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8047078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804707a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 804707c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 804707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8047080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8047082:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8047084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8047086:	2200      	movs	r2, #0
 8047088:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 804708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804708c:	3304      	adds	r3, #4
 804708e:	4618      	mov	r0, r3
 8047090:	f7ff f919 	bl	80462c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8047094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8047096:	3318      	adds	r3, #24
 8047098:	4618      	mov	r0, r3
 804709a:	f7ff f914 	bl	80462c6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 804709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80470a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80470a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80470a6:	f1c3 0205 	rsb	r2, r3, #5
 80470aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80470ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80470b2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80470b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470b6:	3350      	adds	r3, #80	@ 0x50
 80470b8:	2204      	movs	r2, #4
 80470ba:	2100      	movs	r1, #0
 80470bc:	4618      	mov	r0, r3
 80470be:	f002 fd96 	bl	8049bee <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80470c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470c4:	3354      	adds	r3, #84	@ 0x54
 80470c6:	2201      	movs	r2, #1
 80470c8:	2100      	movs	r1, #0
 80470ca:	4618      	mov	r0, r3
 80470cc:	f002 fd8f 	bl	8049bee <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80470d0:	683a      	ldr	r2, [r7, #0]
 80470d2:	68f9      	ldr	r1, [r7, #12]
 80470d4:	69b8      	ldr	r0, [r7, #24]
 80470d6:	f001 fbad 	bl	8048834 <pxPortInitialiseStack>
 80470da:	4602      	mov	r2, r0
 80470dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80470de:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80470e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80470e2:	2b00      	cmp	r3, #0
 80470e4:	d002      	beq.n	80470ec <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80470e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80470e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80470ea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80470ec:	bf00      	nop
 80470ee:	3720      	adds	r7, #32
 80470f0:	46bd      	mov	sp, r7
 80470f2:	bd80      	pop	{r7, pc}

080470f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80470f4:	b580      	push	{r7, lr}
 80470f6:	b082      	sub	sp, #8
 80470f8:	af00      	add	r7, sp, #0
 80470fa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80470fc:	f001 fcce 	bl	8048a9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8047100:	4b2c      	ldr	r3, [pc, #176]	@ (80471b4 <prvAddNewTaskToReadyList+0xc0>)
 8047102:	681b      	ldr	r3, [r3, #0]
 8047104:	3301      	adds	r3, #1
 8047106:	4a2b      	ldr	r2, [pc, #172]	@ (80471b4 <prvAddNewTaskToReadyList+0xc0>)
 8047108:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 804710a:	4b2b      	ldr	r3, [pc, #172]	@ (80471b8 <prvAddNewTaskToReadyList+0xc4>)
 804710c:	681b      	ldr	r3, [r3, #0]
 804710e:	2b00      	cmp	r3, #0
 8047110:	d109      	bne.n	8047126 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8047112:	4a29      	ldr	r2, [pc, #164]	@ (80471b8 <prvAddNewTaskToReadyList+0xc4>)
 8047114:	687b      	ldr	r3, [r7, #4]
 8047116:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8047118:	4b26      	ldr	r3, [pc, #152]	@ (80471b4 <prvAddNewTaskToReadyList+0xc0>)
 804711a:	681b      	ldr	r3, [r3, #0]
 804711c:	2b01      	cmp	r3, #1
 804711e:	d110      	bne.n	8047142 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8047120:	f000 fc08 	bl	8047934 <prvInitialiseTaskLists>
 8047124:	e00d      	b.n	8047142 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8047126:	4b25      	ldr	r3, [pc, #148]	@ (80471bc <prvAddNewTaskToReadyList+0xc8>)
 8047128:	681b      	ldr	r3, [r3, #0]
 804712a:	2b00      	cmp	r3, #0
 804712c:	d109      	bne.n	8047142 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 804712e:	4b22      	ldr	r3, [pc, #136]	@ (80471b8 <prvAddNewTaskToReadyList+0xc4>)
 8047130:	681b      	ldr	r3, [r3, #0]
 8047132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047134:	687b      	ldr	r3, [r7, #4]
 8047136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047138:	429a      	cmp	r2, r3
 804713a:	d802      	bhi.n	8047142 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 804713c:	4a1e      	ldr	r2, [pc, #120]	@ (80471b8 <prvAddNewTaskToReadyList+0xc4>)
 804713e:	687b      	ldr	r3, [r7, #4]
 8047140:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8047142:	4b1f      	ldr	r3, [pc, #124]	@ (80471c0 <prvAddNewTaskToReadyList+0xcc>)
 8047144:	681b      	ldr	r3, [r3, #0]
 8047146:	3301      	adds	r3, #1
 8047148:	4a1d      	ldr	r2, [pc, #116]	@ (80471c0 <prvAddNewTaskToReadyList+0xcc>)
 804714a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 804714c:	4b1c      	ldr	r3, [pc, #112]	@ (80471c0 <prvAddNewTaskToReadyList+0xcc>)
 804714e:	681a      	ldr	r2, [r3, #0]
 8047150:	687b      	ldr	r3, [r7, #4]
 8047152:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8047154:	687b      	ldr	r3, [r7, #4]
 8047156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047158:	2201      	movs	r2, #1
 804715a:	409a      	lsls	r2, r3
 804715c:	4b19      	ldr	r3, [pc, #100]	@ (80471c4 <prvAddNewTaskToReadyList+0xd0>)
 804715e:	681b      	ldr	r3, [r3, #0]
 8047160:	4313      	orrs	r3, r2
 8047162:	4a18      	ldr	r2, [pc, #96]	@ (80471c4 <prvAddNewTaskToReadyList+0xd0>)
 8047164:	6013      	str	r3, [r2, #0]
 8047166:	687b      	ldr	r3, [r7, #4]
 8047168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 804716a:	4613      	mov	r3, r2
 804716c:	009b      	lsls	r3, r3, #2
 804716e:	4413      	add	r3, r2
 8047170:	009b      	lsls	r3, r3, #2
 8047172:	4a15      	ldr	r2, [pc, #84]	@ (80471c8 <prvAddNewTaskToReadyList+0xd4>)
 8047174:	441a      	add	r2, r3
 8047176:	687b      	ldr	r3, [r7, #4]
 8047178:	3304      	adds	r3, #4
 804717a:	4619      	mov	r1, r3
 804717c:	4610      	mov	r0, r2
 804717e:	f7ff f8af 	bl	80462e0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8047182:	f001 fcbd 	bl	8048b00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8047186:	4b0d      	ldr	r3, [pc, #52]	@ (80471bc <prvAddNewTaskToReadyList+0xc8>)
 8047188:	681b      	ldr	r3, [r3, #0]
 804718a:	2b00      	cmp	r3, #0
 804718c:	d00e      	beq.n	80471ac <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 804718e:	4b0a      	ldr	r3, [pc, #40]	@ (80471b8 <prvAddNewTaskToReadyList+0xc4>)
 8047190:	681b      	ldr	r3, [r3, #0]
 8047192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047194:	687b      	ldr	r3, [r7, #4]
 8047196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047198:	429a      	cmp	r2, r3
 804719a:	d207      	bcs.n	80471ac <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 804719c:	4b0b      	ldr	r3, [pc, #44]	@ (80471cc <prvAddNewTaskToReadyList+0xd8>)
 804719e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80471a2:	601a      	str	r2, [r3, #0]
 80471a4:	f3bf 8f4f 	dsb	sy
 80471a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80471ac:	bf00      	nop
 80471ae:	3708      	adds	r7, #8
 80471b0:	46bd      	mov	sp, r7
 80471b2:	bd80      	pop	{r7, pc}
 80471b4:	200004e0 	.word	0x200004e0
 80471b8:	20000408 	.word	0x20000408
 80471bc:	200004ec 	.word	0x200004ec
 80471c0:	200004fc 	.word	0x200004fc
 80471c4:	200004e8 	.word	0x200004e8
 80471c8:	2000040c 	.word	0x2000040c
 80471cc:	e000ed04 	.word	0xe000ed04

080471d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80471d0:	b580      	push	{r7, lr}
 80471d2:	b084      	sub	sp, #16
 80471d4:	af00      	add	r7, sp, #0
 80471d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80471d8:	2300      	movs	r3, #0
 80471da:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80471dc:	687b      	ldr	r3, [r7, #4]
 80471de:	2b00      	cmp	r3, #0
 80471e0:	d018      	beq.n	8047214 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80471e2:	4b14      	ldr	r3, [pc, #80]	@ (8047234 <vTaskDelay+0x64>)
 80471e4:	681b      	ldr	r3, [r3, #0]
 80471e6:	2b00      	cmp	r3, #0
 80471e8:	d00b      	beq.n	8047202 <vTaskDelay+0x32>
        __asm volatile
 80471ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80471ee:	f383 8811 	msr	BASEPRI, r3
 80471f2:	f3bf 8f6f 	isb	sy
 80471f6:	f3bf 8f4f 	dsb	sy
 80471fa:	60bb      	str	r3, [r7, #8]
    }
 80471fc:	bf00      	nop
 80471fe:	bf00      	nop
 8047200:	e7fd      	b.n	80471fe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8047202:	f000 f86d 	bl	80472e0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8047206:	2100      	movs	r1, #0
 8047208:	6878      	ldr	r0, [r7, #4]
 804720a:	f000 ff31 	bl	8048070 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 804720e:	f000 f875 	bl	80472fc <xTaskResumeAll>
 8047212:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8047214:	68fb      	ldr	r3, [r7, #12]
 8047216:	2b00      	cmp	r3, #0
 8047218:	d107      	bne.n	804722a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 804721a:	4b07      	ldr	r3, [pc, #28]	@ (8047238 <vTaskDelay+0x68>)
 804721c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8047220:	601a      	str	r2, [r3, #0]
 8047222:	f3bf 8f4f 	dsb	sy
 8047226:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 804722a:	bf00      	nop
 804722c:	3710      	adds	r7, #16
 804722e:	46bd      	mov	sp, r7
 8047230:	bd80      	pop	{r7, pc}
 8047232:	bf00      	nop
 8047234:	20000508 	.word	0x20000508
 8047238:	e000ed04 	.word	0xe000ed04

0804723c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 804723c:	b580      	push	{r7, lr}
 804723e:	b086      	sub	sp, #24
 8047240:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8047242:	4b20      	ldr	r3, [pc, #128]	@ (80472c4 <vTaskStartScheduler+0x88>)
 8047244:	9301      	str	r3, [sp, #4]
 8047246:	2300      	movs	r3, #0
 8047248:	9300      	str	r3, [sp, #0]
 804724a:	2300      	movs	r3, #0
 804724c:	2282      	movs	r2, #130	@ 0x82
 804724e:	491e      	ldr	r1, [pc, #120]	@ (80472c8 <vTaskStartScheduler+0x8c>)
 8047250:	481e      	ldr	r0, [pc, #120]	@ (80472cc <vTaskStartScheduler+0x90>)
 8047252:	f7ff fe77 	bl	8046f44 <xTaskCreate>
 8047256:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8047258:	68fb      	ldr	r3, [r7, #12]
 804725a:	2b01      	cmp	r3, #1
 804725c:	d102      	bne.n	8047264 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 804725e:	f000 ff6d 	bl	804813c <xTimerCreateTimerTask>
 8047262:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8047264:	68fb      	ldr	r3, [r7, #12]
 8047266:	2b01      	cmp	r3, #1
 8047268:	d116      	bne.n	8047298 <vTaskStartScheduler+0x5c>
        __asm volatile
 804726a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804726e:	f383 8811 	msr	BASEPRI, r3
 8047272:	f3bf 8f6f 	isb	sy
 8047276:	f3bf 8f4f 	dsb	sy
 804727a:	60bb      	str	r3, [r7, #8]
    }
 804727c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 804727e:	4b14      	ldr	r3, [pc, #80]	@ (80472d0 <vTaskStartScheduler+0x94>)
 8047280:	f04f 32ff 	mov.w	r2, #4294967295
 8047284:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8047286:	4b13      	ldr	r3, [pc, #76]	@ (80472d4 <vTaskStartScheduler+0x98>)
 8047288:	2201      	movs	r2, #1
 804728a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 804728c:	4b12      	ldr	r3, [pc, #72]	@ (80472d8 <vTaskStartScheduler+0x9c>)
 804728e:	2200      	movs	r2, #0
 8047290:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8047292:	f001 fb5f 	bl	8048954 <xPortStartScheduler>
 8047296:	e00f      	b.n	80472b8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8047298:	68fb      	ldr	r3, [r7, #12]
 804729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804729e:	d10b      	bne.n	80472b8 <vTaskStartScheduler+0x7c>
        __asm volatile
 80472a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80472a4:	f383 8811 	msr	BASEPRI, r3
 80472a8:	f3bf 8f6f 	isb	sy
 80472ac:	f3bf 8f4f 	dsb	sy
 80472b0:	607b      	str	r3, [r7, #4]
    }
 80472b2:	bf00      	nop
 80472b4:	bf00      	nop
 80472b6:	e7fd      	b.n	80472b4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80472b8:	4b08      	ldr	r3, [pc, #32]	@ (80472dc <vTaskStartScheduler+0xa0>)
 80472ba:	681b      	ldr	r3, [r3, #0]
}
 80472bc:	bf00      	nop
 80472be:	3710      	adds	r7, #16
 80472c0:	46bd      	mov	sp, r7
 80472c2:	bd80      	pop	{r7, pc}
 80472c4:	20000504 	.word	0x20000504
 80472c8:	0804ce74 	.word	0x0804ce74
 80472cc:	08047905 	.word	0x08047905
 80472d0:	20000500 	.word	0x20000500
 80472d4:	200004ec 	.word	0x200004ec
 80472d8:	200004e4 	.word	0x200004e4
 80472dc:	20000010 	.word	0x20000010

080472e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80472e0:	b480      	push	{r7}
 80472e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80472e4:	4b04      	ldr	r3, [pc, #16]	@ (80472f8 <vTaskSuspendAll+0x18>)
 80472e6:	681b      	ldr	r3, [r3, #0]
 80472e8:	3301      	adds	r3, #1
 80472ea:	4a03      	ldr	r2, [pc, #12]	@ (80472f8 <vTaskSuspendAll+0x18>)
 80472ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80472ee:	bf00      	nop
 80472f0:	46bd      	mov	sp, r7
 80472f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80472f6:	4770      	bx	lr
 80472f8:	20000508 	.word	0x20000508

080472fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80472fc:	b580      	push	{r7, lr}
 80472fe:	b084      	sub	sp, #16
 8047300:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8047302:	2300      	movs	r3, #0
 8047304:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8047306:	2300      	movs	r3, #0
 8047308:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 804730a:	4b42      	ldr	r3, [pc, #264]	@ (8047414 <xTaskResumeAll+0x118>)
 804730c:	681b      	ldr	r3, [r3, #0]
 804730e:	2b00      	cmp	r3, #0
 8047310:	d10b      	bne.n	804732a <xTaskResumeAll+0x2e>
        __asm volatile
 8047312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047316:	f383 8811 	msr	BASEPRI, r3
 804731a:	f3bf 8f6f 	isb	sy
 804731e:	f3bf 8f4f 	dsb	sy
 8047322:	603b      	str	r3, [r7, #0]
    }
 8047324:	bf00      	nop
 8047326:	bf00      	nop
 8047328:	e7fd      	b.n	8047326 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 804732a:	f001 fbb7 	bl	8048a9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 804732e:	4b39      	ldr	r3, [pc, #228]	@ (8047414 <xTaskResumeAll+0x118>)
 8047330:	681b      	ldr	r3, [r3, #0]
 8047332:	3b01      	subs	r3, #1
 8047334:	4a37      	ldr	r2, [pc, #220]	@ (8047414 <xTaskResumeAll+0x118>)
 8047336:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8047338:	4b36      	ldr	r3, [pc, #216]	@ (8047414 <xTaskResumeAll+0x118>)
 804733a:	681b      	ldr	r3, [r3, #0]
 804733c:	2b00      	cmp	r3, #0
 804733e:	d161      	bne.n	8047404 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8047340:	4b35      	ldr	r3, [pc, #212]	@ (8047418 <xTaskResumeAll+0x11c>)
 8047342:	681b      	ldr	r3, [r3, #0]
 8047344:	2b00      	cmp	r3, #0
 8047346:	d05d      	beq.n	8047404 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8047348:	e02e      	b.n	80473a8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804734a:	4b34      	ldr	r3, [pc, #208]	@ (804741c <xTaskResumeAll+0x120>)
 804734c:	68db      	ldr	r3, [r3, #12]
 804734e:	68db      	ldr	r3, [r3, #12]
 8047350:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8047352:	68fb      	ldr	r3, [r7, #12]
 8047354:	3318      	adds	r3, #24
 8047356:	4618      	mov	r0, r3
 8047358:	f7ff f81f 	bl	804639a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 804735c:	68fb      	ldr	r3, [r7, #12]
 804735e:	3304      	adds	r3, #4
 8047360:	4618      	mov	r0, r3
 8047362:	f7ff f81a 	bl	804639a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8047366:	68fb      	ldr	r3, [r7, #12]
 8047368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804736a:	2201      	movs	r2, #1
 804736c:	409a      	lsls	r2, r3
 804736e:	4b2c      	ldr	r3, [pc, #176]	@ (8047420 <xTaskResumeAll+0x124>)
 8047370:	681b      	ldr	r3, [r3, #0]
 8047372:	4313      	orrs	r3, r2
 8047374:	4a2a      	ldr	r2, [pc, #168]	@ (8047420 <xTaskResumeAll+0x124>)
 8047376:	6013      	str	r3, [r2, #0]
 8047378:	68fb      	ldr	r3, [r7, #12]
 804737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 804737c:	4613      	mov	r3, r2
 804737e:	009b      	lsls	r3, r3, #2
 8047380:	4413      	add	r3, r2
 8047382:	009b      	lsls	r3, r3, #2
 8047384:	4a27      	ldr	r2, [pc, #156]	@ (8047424 <xTaskResumeAll+0x128>)
 8047386:	441a      	add	r2, r3
 8047388:	68fb      	ldr	r3, [r7, #12]
 804738a:	3304      	adds	r3, #4
 804738c:	4619      	mov	r1, r3
 804738e:	4610      	mov	r0, r2
 8047390:	f7fe ffa6 	bl	80462e0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8047394:	68fb      	ldr	r3, [r7, #12]
 8047396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047398:	4b23      	ldr	r3, [pc, #140]	@ (8047428 <xTaskResumeAll+0x12c>)
 804739a:	681b      	ldr	r3, [r3, #0]
 804739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804739e:	429a      	cmp	r2, r3
 80473a0:	d302      	bcc.n	80473a8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80473a2:	4b22      	ldr	r3, [pc, #136]	@ (804742c <xTaskResumeAll+0x130>)
 80473a4:	2201      	movs	r2, #1
 80473a6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80473a8:	4b1c      	ldr	r3, [pc, #112]	@ (804741c <xTaskResumeAll+0x120>)
 80473aa:	681b      	ldr	r3, [r3, #0]
 80473ac:	2b00      	cmp	r3, #0
 80473ae:	d1cc      	bne.n	804734a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80473b0:	68fb      	ldr	r3, [r7, #12]
 80473b2:	2b00      	cmp	r3, #0
 80473b4:	d001      	beq.n	80473ba <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80473b6:	f000 fb3b 	bl	8047a30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80473ba:	4b1d      	ldr	r3, [pc, #116]	@ (8047430 <xTaskResumeAll+0x134>)
 80473bc:	681b      	ldr	r3, [r3, #0]
 80473be:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80473c0:	687b      	ldr	r3, [r7, #4]
 80473c2:	2b00      	cmp	r3, #0
 80473c4:	d010      	beq.n	80473e8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80473c6:	f000 f847 	bl	8047458 <xTaskIncrementTick>
 80473ca:	4603      	mov	r3, r0
 80473cc:	2b00      	cmp	r3, #0
 80473ce:	d002      	beq.n	80473d6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80473d0:	4b16      	ldr	r3, [pc, #88]	@ (804742c <xTaskResumeAll+0x130>)
 80473d2:	2201      	movs	r2, #1
 80473d4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80473d6:	687b      	ldr	r3, [r7, #4]
 80473d8:	3b01      	subs	r3, #1
 80473da:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80473dc:	687b      	ldr	r3, [r7, #4]
 80473de:	2b00      	cmp	r3, #0
 80473e0:	d1f1      	bne.n	80473c6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80473e2:	4b13      	ldr	r3, [pc, #76]	@ (8047430 <xTaskResumeAll+0x134>)
 80473e4:	2200      	movs	r2, #0
 80473e6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80473e8:	4b10      	ldr	r3, [pc, #64]	@ (804742c <xTaskResumeAll+0x130>)
 80473ea:	681b      	ldr	r3, [r3, #0]
 80473ec:	2b00      	cmp	r3, #0
 80473ee:	d009      	beq.n	8047404 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80473f0:	2301      	movs	r3, #1
 80473f2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80473f4:	4b0f      	ldr	r3, [pc, #60]	@ (8047434 <xTaskResumeAll+0x138>)
 80473f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80473fa:	601a      	str	r2, [r3, #0]
 80473fc:	f3bf 8f4f 	dsb	sy
 8047400:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8047404:	f001 fb7c 	bl	8048b00 <vPortExitCritical>

    return xAlreadyYielded;
 8047408:	68bb      	ldr	r3, [r7, #8]
}
 804740a:	4618      	mov	r0, r3
 804740c:	3710      	adds	r7, #16
 804740e:	46bd      	mov	sp, r7
 8047410:	bd80      	pop	{r7, pc}
 8047412:	bf00      	nop
 8047414:	20000508 	.word	0x20000508
 8047418:	200004e0 	.word	0x200004e0
 804741c:	200004a0 	.word	0x200004a0
 8047420:	200004e8 	.word	0x200004e8
 8047424:	2000040c 	.word	0x2000040c
 8047428:	20000408 	.word	0x20000408
 804742c:	200004f4 	.word	0x200004f4
 8047430:	200004f0 	.word	0x200004f0
 8047434:	e000ed04 	.word	0xe000ed04

08047438 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8047438:	b480      	push	{r7}
 804743a:	b083      	sub	sp, #12
 804743c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 804743e:	4b05      	ldr	r3, [pc, #20]	@ (8047454 <xTaskGetTickCount+0x1c>)
 8047440:	681b      	ldr	r3, [r3, #0]
 8047442:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8047444:	687b      	ldr	r3, [r7, #4]
}
 8047446:	4618      	mov	r0, r3
 8047448:	370c      	adds	r7, #12
 804744a:	46bd      	mov	sp, r7
 804744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047450:	4770      	bx	lr
 8047452:	bf00      	nop
 8047454:	200004e4 	.word	0x200004e4

08047458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8047458:	b580      	push	{r7, lr}
 804745a:	b086      	sub	sp, #24
 804745c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 804745e:	2300      	movs	r3, #0
 8047460:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8047462:	4b4f      	ldr	r3, [pc, #316]	@ (80475a0 <xTaskIncrementTick+0x148>)
 8047464:	681b      	ldr	r3, [r3, #0]
 8047466:	2b00      	cmp	r3, #0
 8047468:	f040 808f 	bne.w	804758a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 804746c:	4b4d      	ldr	r3, [pc, #308]	@ (80475a4 <xTaskIncrementTick+0x14c>)
 804746e:	681b      	ldr	r3, [r3, #0]
 8047470:	3301      	adds	r3, #1
 8047472:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8047474:	4a4b      	ldr	r2, [pc, #300]	@ (80475a4 <xTaskIncrementTick+0x14c>)
 8047476:	693b      	ldr	r3, [r7, #16]
 8047478:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 804747a:	693b      	ldr	r3, [r7, #16]
 804747c:	2b00      	cmp	r3, #0
 804747e:	d121      	bne.n	80474c4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8047480:	4b49      	ldr	r3, [pc, #292]	@ (80475a8 <xTaskIncrementTick+0x150>)
 8047482:	681b      	ldr	r3, [r3, #0]
 8047484:	681b      	ldr	r3, [r3, #0]
 8047486:	2b00      	cmp	r3, #0
 8047488:	d00b      	beq.n	80474a2 <xTaskIncrementTick+0x4a>
        __asm volatile
 804748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804748e:	f383 8811 	msr	BASEPRI, r3
 8047492:	f3bf 8f6f 	isb	sy
 8047496:	f3bf 8f4f 	dsb	sy
 804749a:	603b      	str	r3, [r7, #0]
    }
 804749c:	bf00      	nop
 804749e:	bf00      	nop
 80474a0:	e7fd      	b.n	804749e <xTaskIncrementTick+0x46>
 80474a2:	4b41      	ldr	r3, [pc, #260]	@ (80475a8 <xTaskIncrementTick+0x150>)
 80474a4:	681b      	ldr	r3, [r3, #0]
 80474a6:	60fb      	str	r3, [r7, #12]
 80474a8:	4b40      	ldr	r3, [pc, #256]	@ (80475ac <xTaskIncrementTick+0x154>)
 80474aa:	681b      	ldr	r3, [r3, #0]
 80474ac:	4a3e      	ldr	r2, [pc, #248]	@ (80475a8 <xTaskIncrementTick+0x150>)
 80474ae:	6013      	str	r3, [r2, #0]
 80474b0:	4a3e      	ldr	r2, [pc, #248]	@ (80475ac <xTaskIncrementTick+0x154>)
 80474b2:	68fb      	ldr	r3, [r7, #12]
 80474b4:	6013      	str	r3, [r2, #0]
 80474b6:	4b3e      	ldr	r3, [pc, #248]	@ (80475b0 <xTaskIncrementTick+0x158>)
 80474b8:	681b      	ldr	r3, [r3, #0]
 80474ba:	3301      	adds	r3, #1
 80474bc:	4a3c      	ldr	r2, [pc, #240]	@ (80475b0 <xTaskIncrementTick+0x158>)
 80474be:	6013      	str	r3, [r2, #0]
 80474c0:	f000 fab6 	bl	8047a30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80474c4:	4b3b      	ldr	r3, [pc, #236]	@ (80475b4 <xTaskIncrementTick+0x15c>)
 80474c6:	681b      	ldr	r3, [r3, #0]
 80474c8:	693a      	ldr	r2, [r7, #16]
 80474ca:	429a      	cmp	r2, r3
 80474cc:	d348      	bcc.n	8047560 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80474ce:	4b36      	ldr	r3, [pc, #216]	@ (80475a8 <xTaskIncrementTick+0x150>)
 80474d0:	681b      	ldr	r3, [r3, #0]
 80474d2:	681b      	ldr	r3, [r3, #0]
 80474d4:	2b00      	cmp	r3, #0
 80474d6:	d104      	bne.n	80474e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80474d8:	4b36      	ldr	r3, [pc, #216]	@ (80475b4 <xTaskIncrementTick+0x15c>)
 80474da:	f04f 32ff 	mov.w	r2, #4294967295
 80474de:	601a      	str	r2, [r3, #0]
                    break;
 80474e0:	e03e      	b.n	8047560 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80474e2:	4b31      	ldr	r3, [pc, #196]	@ (80475a8 <xTaskIncrementTick+0x150>)
 80474e4:	681b      	ldr	r3, [r3, #0]
 80474e6:	68db      	ldr	r3, [r3, #12]
 80474e8:	68db      	ldr	r3, [r3, #12]
 80474ea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80474ec:	68bb      	ldr	r3, [r7, #8]
 80474ee:	685b      	ldr	r3, [r3, #4]
 80474f0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80474f2:	693a      	ldr	r2, [r7, #16]
 80474f4:	687b      	ldr	r3, [r7, #4]
 80474f6:	429a      	cmp	r2, r3
 80474f8:	d203      	bcs.n	8047502 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80474fa:	4a2e      	ldr	r2, [pc, #184]	@ (80475b4 <xTaskIncrementTick+0x15c>)
 80474fc:	687b      	ldr	r3, [r7, #4]
 80474fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8047500:	e02e      	b.n	8047560 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8047502:	68bb      	ldr	r3, [r7, #8]
 8047504:	3304      	adds	r3, #4
 8047506:	4618      	mov	r0, r3
 8047508:	f7fe ff47 	bl	804639a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 804750c:	68bb      	ldr	r3, [r7, #8]
 804750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8047510:	2b00      	cmp	r3, #0
 8047512:	d004      	beq.n	804751e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8047514:	68bb      	ldr	r3, [r7, #8]
 8047516:	3318      	adds	r3, #24
 8047518:	4618      	mov	r0, r3
 804751a:	f7fe ff3e 	bl	804639a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 804751e:	68bb      	ldr	r3, [r7, #8]
 8047520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047522:	2201      	movs	r2, #1
 8047524:	409a      	lsls	r2, r3
 8047526:	4b24      	ldr	r3, [pc, #144]	@ (80475b8 <xTaskIncrementTick+0x160>)
 8047528:	681b      	ldr	r3, [r3, #0]
 804752a:	4313      	orrs	r3, r2
 804752c:	4a22      	ldr	r2, [pc, #136]	@ (80475b8 <xTaskIncrementTick+0x160>)
 804752e:	6013      	str	r3, [r2, #0]
 8047530:	68bb      	ldr	r3, [r7, #8]
 8047532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047534:	4613      	mov	r3, r2
 8047536:	009b      	lsls	r3, r3, #2
 8047538:	4413      	add	r3, r2
 804753a:	009b      	lsls	r3, r3, #2
 804753c:	4a1f      	ldr	r2, [pc, #124]	@ (80475bc <xTaskIncrementTick+0x164>)
 804753e:	441a      	add	r2, r3
 8047540:	68bb      	ldr	r3, [r7, #8]
 8047542:	3304      	adds	r3, #4
 8047544:	4619      	mov	r1, r3
 8047546:	4610      	mov	r0, r2
 8047548:	f7fe feca 	bl	80462e0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 804754c:	68bb      	ldr	r3, [r7, #8]
 804754e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047550:	4b1b      	ldr	r3, [pc, #108]	@ (80475c0 <xTaskIncrementTick+0x168>)
 8047552:	681b      	ldr	r3, [r3, #0]
 8047554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047556:	429a      	cmp	r2, r3
 8047558:	d3b9      	bcc.n	80474ce <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 804755a:	2301      	movs	r3, #1
 804755c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804755e:	e7b6      	b.n	80474ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8047560:	4b17      	ldr	r3, [pc, #92]	@ (80475c0 <xTaskIncrementTick+0x168>)
 8047562:	681b      	ldr	r3, [r3, #0]
 8047564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047566:	4915      	ldr	r1, [pc, #84]	@ (80475bc <xTaskIncrementTick+0x164>)
 8047568:	4613      	mov	r3, r2
 804756a:	009b      	lsls	r3, r3, #2
 804756c:	4413      	add	r3, r2
 804756e:	009b      	lsls	r3, r3, #2
 8047570:	440b      	add	r3, r1
 8047572:	681b      	ldr	r3, [r3, #0]
 8047574:	2b01      	cmp	r3, #1
 8047576:	d901      	bls.n	804757c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8047578:	2301      	movs	r3, #1
 804757a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 804757c:	4b11      	ldr	r3, [pc, #68]	@ (80475c4 <xTaskIncrementTick+0x16c>)
 804757e:	681b      	ldr	r3, [r3, #0]
 8047580:	2b00      	cmp	r3, #0
 8047582:	d007      	beq.n	8047594 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8047584:	2301      	movs	r3, #1
 8047586:	617b      	str	r3, [r7, #20]
 8047588:	e004      	b.n	8047594 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 804758a:	4b0f      	ldr	r3, [pc, #60]	@ (80475c8 <xTaskIncrementTick+0x170>)
 804758c:	681b      	ldr	r3, [r3, #0]
 804758e:	3301      	adds	r3, #1
 8047590:	4a0d      	ldr	r2, [pc, #52]	@ (80475c8 <xTaskIncrementTick+0x170>)
 8047592:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8047594:	697b      	ldr	r3, [r7, #20]
}
 8047596:	4618      	mov	r0, r3
 8047598:	3718      	adds	r7, #24
 804759a:	46bd      	mov	sp, r7
 804759c:	bd80      	pop	{r7, pc}
 804759e:	bf00      	nop
 80475a0:	20000508 	.word	0x20000508
 80475a4:	200004e4 	.word	0x200004e4
 80475a8:	20000498 	.word	0x20000498
 80475ac:	2000049c 	.word	0x2000049c
 80475b0:	200004f8 	.word	0x200004f8
 80475b4:	20000500 	.word	0x20000500
 80475b8:	200004e8 	.word	0x200004e8
 80475bc:	2000040c 	.word	0x2000040c
 80475c0:	20000408 	.word	0x20000408
 80475c4:	200004f4 	.word	0x200004f4
 80475c8:	200004f0 	.word	0x200004f0

080475cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80475cc:	b480      	push	{r7}
 80475ce:	b087      	sub	sp, #28
 80475d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80475d2:	4b27      	ldr	r3, [pc, #156]	@ (8047670 <vTaskSwitchContext+0xa4>)
 80475d4:	681b      	ldr	r3, [r3, #0]
 80475d6:	2b00      	cmp	r3, #0
 80475d8:	d003      	beq.n	80475e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80475da:	4b26      	ldr	r3, [pc, #152]	@ (8047674 <vTaskSwitchContext+0xa8>)
 80475dc:	2201      	movs	r2, #1
 80475de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80475e0:	e040      	b.n	8047664 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80475e2:	4b24      	ldr	r3, [pc, #144]	@ (8047674 <vTaskSwitchContext+0xa8>)
 80475e4:	2200      	movs	r2, #0
 80475e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80475e8:	4b23      	ldr	r3, [pc, #140]	@ (8047678 <vTaskSwitchContext+0xac>)
 80475ea:	681b      	ldr	r3, [r3, #0]
 80475ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80475ee:	68fb      	ldr	r3, [r7, #12]
 80475f0:	fab3 f383 	clz	r3, r3
 80475f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80475f6:	7afb      	ldrb	r3, [r7, #11]
 80475f8:	f1c3 031f 	rsb	r3, r3, #31
 80475fc:	617b      	str	r3, [r7, #20]
 80475fe:	491f      	ldr	r1, [pc, #124]	@ (804767c <vTaskSwitchContext+0xb0>)
 8047600:	697a      	ldr	r2, [r7, #20]
 8047602:	4613      	mov	r3, r2
 8047604:	009b      	lsls	r3, r3, #2
 8047606:	4413      	add	r3, r2
 8047608:	009b      	lsls	r3, r3, #2
 804760a:	440b      	add	r3, r1
 804760c:	681b      	ldr	r3, [r3, #0]
 804760e:	2b00      	cmp	r3, #0
 8047610:	d10b      	bne.n	804762a <vTaskSwitchContext+0x5e>
        __asm volatile
 8047612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047616:	f383 8811 	msr	BASEPRI, r3
 804761a:	f3bf 8f6f 	isb	sy
 804761e:	f3bf 8f4f 	dsb	sy
 8047622:	607b      	str	r3, [r7, #4]
    }
 8047624:	bf00      	nop
 8047626:	bf00      	nop
 8047628:	e7fd      	b.n	8047626 <vTaskSwitchContext+0x5a>
 804762a:	697a      	ldr	r2, [r7, #20]
 804762c:	4613      	mov	r3, r2
 804762e:	009b      	lsls	r3, r3, #2
 8047630:	4413      	add	r3, r2
 8047632:	009b      	lsls	r3, r3, #2
 8047634:	4a11      	ldr	r2, [pc, #68]	@ (804767c <vTaskSwitchContext+0xb0>)
 8047636:	4413      	add	r3, r2
 8047638:	613b      	str	r3, [r7, #16]
 804763a:	693b      	ldr	r3, [r7, #16]
 804763c:	685b      	ldr	r3, [r3, #4]
 804763e:	685a      	ldr	r2, [r3, #4]
 8047640:	693b      	ldr	r3, [r7, #16]
 8047642:	605a      	str	r2, [r3, #4]
 8047644:	693b      	ldr	r3, [r7, #16]
 8047646:	685a      	ldr	r2, [r3, #4]
 8047648:	693b      	ldr	r3, [r7, #16]
 804764a:	3308      	adds	r3, #8
 804764c:	429a      	cmp	r2, r3
 804764e:	d104      	bne.n	804765a <vTaskSwitchContext+0x8e>
 8047650:	693b      	ldr	r3, [r7, #16]
 8047652:	685b      	ldr	r3, [r3, #4]
 8047654:	685a      	ldr	r2, [r3, #4]
 8047656:	693b      	ldr	r3, [r7, #16]
 8047658:	605a      	str	r2, [r3, #4]
 804765a:	693b      	ldr	r3, [r7, #16]
 804765c:	685b      	ldr	r3, [r3, #4]
 804765e:	68db      	ldr	r3, [r3, #12]
 8047660:	4a07      	ldr	r2, [pc, #28]	@ (8047680 <vTaskSwitchContext+0xb4>)
 8047662:	6013      	str	r3, [r2, #0]
}
 8047664:	bf00      	nop
 8047666:	371c      	adds	r7, #28
 8047668:	46bd      	mov	sp, r7
 804766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804766e:	4770      	bx	lr
 8047670:	20000508 	.word	0x20000508
 8047674:	200004f4 	.word	0x200004f4
 8047678:	200004e8 	.word	0x200004e8
 804767c:	2000040c 	.word	0x2000040c
 8047680:	20000408 	.word	0x20000408

08047684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8047684:	b580      	push	{r7, lr}
 8047686:	b084      	sub	sp, #16
 8047688:	af00      	add	r7, sp, #0
 804768a:	6078      	str	r0, [r7, #4]
 804768c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 804768e:	687b      	ldr	r3, [r7, #4]
 8047690:	2b00      	cmp	r3, #0
 8047692:	d10b      	bne.n	80476ac <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8047694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047698:	f383 8811 	msr	BASEPRI, r3
 804769c:	f3bf 8f6f 	isb	sy
 80476a0:	f3bf 8f4f 	dsb	sy
 80476a4:	60fb      	str	r3, [r7, #12]
    }
 80476a6:	bf00      	nop
 80476a8:	bf00      	nop
 80476aa:	e7fd      	b.n	80476a8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80476ac:	4b07      	ldr	r3, [pc, #28]	@ (80476cc <vTaskPlaceOnEventList+0x48>)
 80476ae:	681b      	ldr	r3, [r3, #0]
 80476b0:	3318      	adds	r3, #24
 80476b2:	4619      	mov	r1, r3
 80476b4:	6878      	ldr	r0, [r7, #4]
 80476b6:	f7fe fe37 	bl	8046328 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80476ba:	2101      	movs	r1, #1
 80476bc:	6838      	ldr	r0, [r7, #0]
 80476be:	f000 fcd7 	bl	8048070 <prvAddCurrentTaskToDelayedList>
}
 80476c2:	bf00      	nop
 80476c4:	3710      	adds	r7, #16
 80476c6:	46bd      	mov	sp, r7
 80476c8:	bd80      	pop	{r7, pc}
 80476ca:	bf00      	nop
 80476cc:	20000408 	.word	0x20000408

080476d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80476d0:	b580      	push	{r7, lr}
 80476d2:	b086      	sub	sp, #24
 80476d4:	af00      	add	r7, sp, #0
 80476d6:	60f8      	str	r0, [r7, #12]
 80476d8:	60b9      	str	r1, [r7, #8]
 80476da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80476dc:	68fb      	ldr	r3, [r7, #12]
 80476de:	2b00      	cmp	r3, #0
 80476e0:	d10b      	bne.n	80476fa <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80476e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80476e6:	f383 8811 	msr	BASEPRI, r3
 80476ea:	f3bf 8f6f 	isb	sy
 80476ee:	f3bf 8f4f 	dsb	sy
 80476f2:	617b      	str	r3, [r7, #20]
    }
 80476f4:	bf00      	nop
 80476f6:	bf00      	nop
 80476f8:	e7fd      	b.n	80476f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80476fa:	4b0a      	ldr	r3, [pc, #40]	@ (8047724 <vTaskPlaceOnEventListRestricted+0x54>)
 80476fc:	681b      	ldr	r3, [r3, #0]
 80476fe:	3318      	adds	r3, #24
 8047700:	4619      	mov	r1, r3
 8047702:	68f8      	ldr	r0, [r7, #12]
 8047704:	f7fe fdec 	bl	80462e0 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8047708:	687b      	ldr	r3, [r7, #4]
 804770a:	2b00      	cmp	r3, #0
 804770c:	d002      	beq.n	8047714 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 804770e:	f04f 33ff 	mov.w	r3, #4294967295
 8047712:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8047714:	6879      	ldr	r1, [r7, #4]
 8047716:	68b8      	ldr	r0, [r7, #8]
 8047718:	f000 fcaa 	bl	8048070 <prvAddCurrentTaskToDelayedList>
    }
 804771c:	bf00      	nop
 804771e:	3718      	adds	r7, #24
 8047720:	46bd      	mov	sp, r7
 8047722:	bd80      	pop	{r7, pc}
 8047724:	20000408 	.word	0x20000408

08047728 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8047728:	b580      	push	{r7, lr}
 804772a:	b086      	sub	sp, #24
 804772c:	af00      	add	r7, sp, #0
 804772e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8047730:	687b      	ldr	r3, [r7, #4]
 8047732:	68db      	ldr	r3, [r3, #12]
 8047734:	68db      	ldr	r3, [r3, #12]
 8047736:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8047738:	693b      	ldr	r3, [r7, #16]
 804773a:	2b00      	cmp	r3, #0
 804773c:	d10b      	bne.n	8047756 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 804773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047742:	f383 8811 	msr	BASEPRI, r3
 8047746:	f3bf 8f6f 	isb	sy
 804774a:	f3bf 8f4f 	dsb	sy
 804774e:	60fb      	str	r3, [r7, #12]
    }
 8047750:	bf00      	nop
 8047752:	bf00      	nop
 8047754:	e7fd      	b.n	8047752 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8047756:	693b      	ldr	r3, [r7, #16]
 8047758:	3318      	adds	r3, #24
 804775a:	4618      	mov	r0, r3
 804775c:	f7fe fe1d 	bl	804639a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8047760:	4b1d      	ldr	r3, [pc, #116]	@ (80477d8 <xTaskRemoveFromEventList+0xb0>)
 8047762:	681b      	ldr	r3, [r3, #0]
 8047764:	2b00      	cmp	r3, #0
 8047766:	d11c      	bne.n	80477a2 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8047768:	693b      	ldr	r3, [r7, #16]
 804776a:	3304      	adds	r3, #4
 804776c:	4618      	mov	r0, r3
 804776e:	f7fe fe14 	bl	804639a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8047772:	693b      	ldr	r3, [r7, #16]
 8047774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047776:	2201      	movs	r2, #1
 8047778:	409a      	lsls	r2, r3
 804777a:	4b18      	ldr	r3, [pc, #96]	@ (80477dc <xTaskRemoveFromEventList+0xb4>)
 804777c:	681b      	ldr	r3, [r3, #0]
 804777e:	4313      	orrs	r3, r2
 8047780:	4a16      	ldr	r2, [pc, #88]	@ (80477dc <xTaskRemoveFromEventList+0xb4>)
 8047782:	6013      	str	r3, [r2, #0]
 8047784:	693b      	ldr	r3, [r7, #16]
 8047786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047788:	4613      	mov	r3, r2
 804778a:	009b      	lsls	r3, r3, #2
 804778c:	4413      	add	r3, r2
 804778e:	009b      	lsls	r3, r3, #2
 8047790:	4a13      	ldr	r2, [pc, #76]	@ (80477e0 <xTaskRemoveFromEventList+0xb8>)
 8047792:	441a      	add	r2, r3
 8047794:	693b      	ldr	r3, [r7, #16]
 8047796:	3304      	adds	r3, #4
 8047798:	4619      	mov	r1, r3
 804779a:	4610      	mov	r0, r2
 804779c:	f7fe fda0 	bl	80462e0 <vListInsertEnd>
 80477a0:	e005      	b.n	80477ae <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80477a2:	693b      	ldr	r3, [r7, #16]
 80477a4:	3318      	adds	r3, #24
 80477a6:	4619      	mov	r1, r3
 80477a8:	480e      	ldr	r0, [pc, #56]	@ (80477e4 <xTaskRemoveFromEventList+0xbc>)
 80477aa:	f7fe fd99 	bl	80462e0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80477ae:	693b      	ldr	r3, [r7, #16]
 80477b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80477b2:	4b0d      	ldr	r3, [pc, #52]	@ (80477e8 <xTaskRemoveFromEventList+0xc0>)
 80477b4:	681b      	ldr	r3, [r3, #0]
 80477b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80477b8:	429a      	cmp	r2, r3
 80477ba:	d905      	bls.n	80477c8 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80477bc:	2301      	movs	r3, #1
 80477be:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80477c0:	4b0a      	ldr	r3, [pc, #40]	@ (80477ec <xTaskRemoveFromEventList+0xc4>)
 80477c2:	2201      	movs	r2, #1
 80477c4:	601a      	str	r2, [r3, #0]
 80477c6:	e001      	b.n	80477cc <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80477c8:	2300      	movs	r3, #0
 80477ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80477cc:	697b      	ldr	r3, [r7, #20]
}
 80477ce:	4618      	mov	r0, r3
 80477d0:	3718      	adds	r7, #24
 80477d2:	46bd      	mov	sp, r7
 80477d4:	bd80      	pop	{r7, pc}
 80477d6:	bf00      	nop
 80477d8:	20000508 	.word	0x20000508
 80477dc:	200004e8 	.word	0x200004e8
 80477e0:	2000040c 	.word	0x2000040c
 80477e4:	200004a0 	.word	0x200004a0
 80477e8:	20000408 	.word	0x20000408
 80477ec:	200004f4 	.word	0x200004f4

080477f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80477f0:	b480      	push	{r7}
 80477f2:	b083      	sub	sp, #12
 80477f4:	af00      	add	r7, sp, #0
 80477f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80477f8:	4b06      	ldr	r3, [pc, #24]	@ (8047814 <vTaskInternalSetTimeOutState+0x24>)
 80477fa:	681a      	ldr	r2, [r3, #0]
 80477fc:	687b      	ldr	r3, [r7, #4]
 80477fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8047800:	4b05      	ldr	r3, [pc, #20]	@ (8047818 <vTaskInternalSetTimeOutState+0x28>)
 8047802:	681a      	ldr	r2, [r3, #0]
 8047804:	687b      	ldr	r3, [r7, #4]
 8047806:	605a      	str	r2, [r3, #4]
}
 8047808:	bf00      	nop
 804780a:	370c      	adds	r7, #12
 804780c:	46bd      	mov	sp, r7
 804780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047812:	4770      	bx	lr
 8047814:	200004f8 	.word	0x200004f8
 8047818:	200004e4 	.word	0x200004e4

0804781c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 804781c:	b580      	push	{r7, lr}
 804781e:	b088      	sub	sp, #32
 8047820:	af00      	add	r7, sp, #0
 8047822:	6078      	str	r0, [r7, #4]
 8047824:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8047826:	687b      	ldr	r3, [r7, #4]
 8047828:	2b00      	cmp	r3, #0
 804782a:	d10b      	bne.n	8047844 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 804782c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047830:	f383 8811 	msr	BASEPRI, r3
 8047834:	f3bf 8f6f 	isb	sy
 8047838:	f3bf 8f4f 	dsb	sy
 804783c:	613b      	str	r3, [r7, #16]
    }
 804783e:	bf00      	nop
 8047840:	bf00      	nop
 8047842:	e7fd      	b.n	8047840 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8047844:	683b      	ldr	r3, [r7, #0]
 8047846:	2b00      	cmp	r3, #0
 8047848:	d10b      	bne.n	8047862 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 804784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804784e:	f383 8811 	msr	BASEPRI, r3
 8047852:	f3bf 8f6f 	isb	sy
 8047856:	f3bf 8f4f 	dsb	sy
 804785a:	60fb      	str	r3, [r7, #12]
    }
 804785c:	bf00      	nop
 804785e:	bf00      	nop
 8047860:	e7fd      	b.n	804785e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8047862:	f001 f91b 	bl	8048a9c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8047866:	4b1f      	ldr	r3, [pc, #124]	@ (80478e4 <xTaskCheckForTimeOut+0xc8>)
 8047868:	681b      	ldr	r3, [r3, #0]
 804786a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 804786c:	687b      	ldr	r3, [r7, #4]
 804786e:	685b      	ldr	r3, [r3, #4]
 8047870:	69ba      	ldr	r2, [r7, #24]
 8047872:	1ad3      	subs	r3, r2, r3
 8047874:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8047876:	683b      	ldr	r3, [r7, #0]
 8047878:	681b      	ldr	r3, [r3, #0]
 804787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804787e:	d102      	bne.n	8047886 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8047880:	2300      	movs	r3, #0
 8047882:	61fb      	str	r3, [r7, #28]
 8047884:	e026      	b.n	80478d4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8047886:	687b      	ldr	r3, [r7, #4]
 8047888:	681a      	ldr	r2, [r3, #0]
 804788a:	4b17      	ldr	r3, [pc, #92]	@ (80478e8 <xTaskCheckForTimeOut+0xcc>)
 804788c:	681b      	ldr	r3, [r3, #0]
 804788e:	429a      	cmp	r2, r3
 8047890:	d00a      	beq.n	80478a8 <xTaskCheckForTimeOut+0x8c>
 8047892:	687b      	ldr	r3, [r7, #4]
 8047894:	685b      	ldr	r3, [r3, #4]
 8047896:	69ba      	ldr	r2, [r7, #24]
 8047898:	429a      	cmp	r2, r3
 804789a:	d305      	bcc.n	80478a8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 804789c:	2301      	movs	r3, #1
 804789e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80478a0:	683b      	ldr	r3, [r7, #0]
 80478a2:	2200      	movs	r2, #0
 80478a4:	601a      	str	r2, [r3, #0]
 80478a6:	e015      	b.n	80478d4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80478a8:	683b      	ldr	r3, [r7, #0]
 80478aa:	681b      	ldr	r3, [r3, #0]
 80478ac:	697a      	ldr	r2, [r7, #20]
 80478ae:	429a      	cmp	r2, r3
 80478b0:	d20b      	bcs.n	80478ca <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80478b2:	683b      	ldr	r3, [r7, #0]
 80478b4:	681a      	ldr	r2, [r3, #0]
 80478b6:	697b      	ldr	r3, [r7, #20]
 80478b8:	1ad2      	subs	r2, r2, r3
 80478ba:	683b      	ldr	r3, [r7, #0]
 80478bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80478be:	6878      	ldr	r0, [r7, #4]
 80478c0:	f7ff ff96 	bl	80477f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80478c4:	2300      	movs	r3, #0
 80478c6:	61fb      	str	r3, [r7, #28]
 80478c8:	e004      	b.n	80478d4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80478ca:	683b      	ldr	r3, [r7, #0]
 80478cc:	2200      	movs	r2, #0
 80478ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80478d0:	2301      	movs	r3, #1
 80478d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80478d4:	f001 f914 	bl	8048b00 <vPortExitCritical>

    return xReturn;
 80478d8:	69fb      	ldr	r3, [r7, #28]
}
 80478da:	4618      	mov	r0, r3
 80478dc:	3720      	adds	r7, #32
 80478de:	46bd      	mov	sp, r7
 80478e0:	bd80      	pop	{r7, pc}
 80478e2:	bf00      	nop
 80478e4:	200004e4 	.word	0x200004e4
 80478e8:	200004f8 	.word	0x200004f8

080478ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80478ec:	b480      	push	{r7}
 80478ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80478f0:	4b03      	ldr	r3, [pc, #12]	@ (8047900 <vTaskMissedYield+0x14>)
 80478f2:	2201      	movs	r2, #1
 80478f4:	601a      	str	r2, [r3, #0]
}
 80478f6:	bf00      	nop
 80478f8:	46bd      	mov	sp, r7
 80478fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80478fe:	4770      	bx	lr
 8047900:	200004f4 	.word	0x200004f4

08047904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8047904:	b580      	push	{r7, lr}
 8047906:	b082      	sub	sp, #8
 8047908:	af00      	add	r7, sp, #0
 804790a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 804790c:	f000 f852 	bl	80479b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8047910:	4b06      	ldr	r3, [pc, #24]	@ (804792c <prvIdleTask+0x28>)
 8047912:	681b      	ldr	r3, [r3, #0]
 8047914:	2b01      	cmp	r3, #1
 8047916:	d9f9      	bls.n	804790c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8047918:	4b05      	ldr	r3, [pc, #20]	@ (8047930 <prvIdleTask+0x2c>)
 804791a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 804791e:	601a      	str	r2, [r3, #0]
 8047920:	f3bf 8f4f 	dsb	sy
 8047924:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8047928:	e7f0      	b.n	804790c <prvIdleTask+0x8>
 804792a:	bf00      	nop
 804792c:	2000040c 	.word	0x2000040c
 8047930:	e000ed04 	.word	0xe000ed04

08047934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8047934:	b580      	push	{r7, lr}
 8047936:	b082      	sub	sp, #8
 8047938:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804793a:	2300      	movs	r3, #0
 804793c:	607b      	str	r3, [r7, #4]
 804793e:	e00c      	b.n	804795a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8047940:	687a      	ldr	r2, [r7, #4]
 8047942:	4613      	mov	r3, r2
 8047944:	009b      	lsls	r3, r3, #2
 8047946:	4413      	add	r3, r2
 8047948:	009b      	lsls	r3, r3, #2
 804794a:	4a12      	ldr	r2, [pc, #72]	@ (8047994 <prvInitialiseTaskLists+0x60>)
 804794c:	4413      	add	r3, r2
 804794e:	4618      	mov	r0, r3
 8047950:	f7fe fc99 	bl	8046286 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8047954:	687b      	ldr	r3, [r7, #4]
 8047956:	3301      	adds	r3, #1
 8047958:	607b      	str	r3, [r7, #4]
 804795a:	687b      	ldr	r3, [r7, #4]
 804795c:	2b04      	cmp	r3, #4
 804795e:	d9ef      	bls.n	8047940 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8047960:	480d      	ldr	r0, [pc, #52]	@ (8047998 <prvInitialiseTaskLists+0x64>)
 8047962:	f7fe fc90 	bl	8046286 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8047966:	480d      	ldr	r0, [pc, #52]	@ (804799c <prvInitialiseTaskLists+0x68>)
 8047968:	f7fe fc8d 	bl	8046286 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 804796c:	480c      	ldr	r0, [pc, #48]	@ (80479a0 <prvInitialiseTaskLists+0x6c>)
 804796e:	f7fe fc8a 	bl	8046286 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8047972:	480c      	ldr	r0, [pc, #48]	@ (80479a4 <prvInitialiseTaskLists+0x70>)
 8047974:	f7fe fc87 	bl	8046286 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8047978:	480b      	ldr	r0, [pc, #44]	@ (80479a8 <prvInitialiseTaskLists+0x74>)
 804797a:	f7fe fc84 	bl	8046286 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 804797e:	4b0b      	ldr	r3, [pc, #44]	@ (80479ac <prvInitialiseTaskLists+0x78>)
 8047980:	4a05      	ldr	r2, [pc, #20]	@ (8047998 <prvInitialiseTaskLists+0x64>)
 8047982:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8047984:	4b0a      	ldr	r3, [pc, #40]	@ (80479b0 <prvInitialiseTaskLists+0x7c>)
 8047986:	4a05      	ldr	r2, [pc, #20]	@ (804799c <prvInitialiseTaskLists+0x68>)
 8047988:	601a      	str	r2, [r3, #0]
}
 804798a:	bf00      	nop
 804798c:	3708      	adds	r7, #8
 804798e:	46bd      	mov	sp, r7
 8047990:	bd80      	pop	{r7, pc}
 8047992:	bf00      	nop
 8047994:	2000040c 	.word	0x2000040c
 8047998:	20000470 	.word	0x20000470
 804799c:	20000484 	.word	0x20000484
 80479a0:	200004a0 	.word	0x200004a0
 80479a4:	200004b4 	.word	0x200004b4
 80479a8:	200004cc 	.word	0x200004cc
 80479ac:	20000498 	.word	0x20000498
 80479b0:	2000049c 	.word	0x2000049c

080479b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80479b4:	b580      	push	{r7, lr}
 80479b6:	b082      	sub	sp, #8
 80479b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80479ba:	e019      	b.n	80479f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80479bc:	f001 f86e 	bl	8048a9c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80479c0:	4b10      	ldr	r3, [pc, #64]	@ (8047a04 <prvCheckTasksWaitingTermination+0x50>)
 80479c2:	68db      	ldr	r3, [r3, #12]
 80479c4:	68db      	ldr	r3, [r3, #12]
 80479c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80479c8:	687b      	ldr	r3, [r7, #4]
 80479ca:	3304      	adds	r3, #4
 80479cc:	4618      	mov	r0, r3
 80479ce:	f7fe fce4 	bl	804639a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80479d2:	4b0d      	ldr	r3, [pc, #52]	@ (8047a08 <prvCheckTasksWaitingTermination+0x54>)
 80479d4:	681b      	ldr	r3, [r3, #0]
 80479d6:	3b01      	subs	r3, #1
 80479d8:	4a0b      	ldr	r2, [pc, #44]	@ (8047a08 <prvCheckTasksWaitingTermination+0x54>)
 80479da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80479dc:	4b0b      	ldr	r3, [pc, #44]	@ (8047a0c <prvCheckTasksWaitingTermination+0x58>)
 80479de:	681b      	ldr	r3, [r3, #0]
 80479e0:	3b01      	subs	r3, #1
 80479e2:	4a0a      	ldr	r2, [pc, #40]	@ (8047a0c <prvCheckTasksWaitingTermination+0x58>)
 80479e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80479e6:	f001 f88b 	bl	8048b00 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80479ea:	6878      	ldr	r0, [r7, #4]
 80479ec:	f000 f810 	bl	8047a10 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80479f0:	4b06      	ldr	r3, [pc, #24]	@ (8047a0c <prvCheckTasksWaitingTermination+0x58>)
 80479f2:	681b      	ldr	r3, [r3, #0]
 80479f4:	2b00      	cmp	r3, #0
 80479f6:	d1e1      	bne.n	80479bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80479f8:	bf00      	nop
 80479fa:	bf00      	nop
 80479fc:	3708      	adds	r7, #8
 80479fe:	46bd      	mov	sp, r7
 8047a00:	bd80      	pop	{r7, pc}
 8047a02:	bf00      	nop
 8047a04:	200004b4 	.word	0x200004b4
 8047a08:	200004e0 	.word	0x200004e0
 8047a0c:	200004c8 	.word	0x200004c8

08047a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8047a10:	b580      	push	{r7, lr}
 8047a12:	b082      	sub	sp, #8
 8047a14:	af00      	add	r7, sp, #0
 8047a16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8047a18:	687b      	ldr	r3, [r7, #4]
 8047a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8047a1c:	4618      	mov	r0, r3
 8047a1e:	f001 fa49 	bl	8048eb4 <vPortFree>
                vPortFree( pxTCB );
 8047a22:	6878      	ldr	r0, [r7, #4]
 8047a24:	f001 fa46 	bl	8048eb4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8047a28:	bf00      	nop
 8047a2a:	3708      	adds	r7, #8
 8047a2c:	46bd      	mov	sp, r7
 8047a2e:	bd80      	pop	{r7, pc}

08047a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8047a30:	b480      	push	{r7}
 8047a32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8047a34:	4b0a      	ldr	r3, [pc, #40]	@ (8047a60 <prvResetNextTaskUnblockTime+0x30>)
 8047a36:	681b      	ldr	r3, [r3, #0]
 8047a38:	681b      	ldr	r3, [r3, #0]
 8047a3a:	2b00      	cmp	r3, #0
 8047a3c:	d104      	bne.n	8047a48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8047a3e:	4b09      	ldr	r3, [pc, #36]	@ (8047a64 <prvResetNextTaskUnblockTime+0x34>)
 8047a40:	f04f 32ff 	mov.w	r2, #4294967295
 8047a44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8047a46:	e005      	b.n	8047a54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8047a48:	4b05      	ldr	r3, [pc, #20]	@ (8047a60 <prvResetNextTaskUnblockTime+0x30>)
 8047a4a:	681b      	ldr	r3, [r3, #0]
 8047a4c:	68db      	ldr	r3, [r3, #12]
 8047a4e:	681b      	ldr	r3, [r3, #0]
 8047a50:	4a04      	ldr	r2, [pc, #16]	@ (8047a64 <prvResetNextTaskUnblockTime+0x34>)
 8047a52:	6013      	str	r3, [r2, #0]
}
 8047a54:	bf00      	nop
 8047a56:	46bd      	mov	sp, r7
 8047a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a5c:	4770      	bx	lr
 8047a5e:	bf00      	nop
 8047a60:	20000498 	.word	0x20000498
 8047a64:	20000500 	.word	0x20000500

08047a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8047a68:	b480      	push	{r7}
 8047a6a:	b083      	sub	sp, #12
 8047a6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8047a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8047a9c <xTaskGetSchedulerState+0x34>)
 8047a70:	681b      	ldr	r3, [r3, #0]
 8047a72:	2b00      	cmp	r3, #0
 8047a74:	d102      	bne.n	8047a7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8047a76:	2301      	movs	r3, #1
 8047a78:	607b      	str	r3, [r7, #4]
 8047a7a:	e008      	b.n	8047a8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8047a7c:	4b08      	ldr	r3, [pc, #32]	@ (8047aa0 <xTaskGetSchedulerState+0x38>)
 8047a7e:	681b      	ldr	r3, [r3, #0]
 8047a80:	2b00      	cmp	r3, #0
 8047a82:	d102      	bne.n	8047a8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8047a84:	2302      	movs	r3, #2
 8047a86:	607b      	str	r3, [r7, #4]
 8047a88:	e001      	b.n	8047a8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8047a8a:	2300      	movs	r3, #0
 8047a8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8047a8e:	687b      	ldr	r3, [r7, #4]
    }
 8047a90:	4618      	mov	r0, r3
 8047a92:	370c      	adds	r7, #12
 8047a94:	46bd      	mov	sp, r7
 8047a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a9a:	4770      	bx	lr
 8047a9c:	200004ec 	.word	0x200004ec
 8047aa0:	20000508 	.word	0x20000508

08047aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8047aa4:	b580      	push	{r7, lr}
 8047aa6:	b086      	sub	sp, #24
 8047aa8:	af00      	add	r7, sp, #0
 8047aaa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8047aac:	687b      	ldr	r3, [r7, #4]
 8047aae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8047ab0:	2300      	movs	r3, #0
 8047ab2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8047ab4:	687b      	ldr	r3, [r7, #4]
 8047ab6:	2b00      	cmp	r3, #0
 8047ab8:	d065      	beq.n	8047b86 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8047aba:	4b35      	ldr	r3, [pc, #212]	@ (8047b90 <xTaskPriorityDisinherit+0xec>)
 8047abc:	681b      	ldr	r3, [r3, #0]
 8047abe:	693a      	ldr	r2, [r7, #16]
 8047ac0:	429a      	cmp	r2, r3
 8047ac2:	d00b      	beq.n	8047adc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8047ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047ac8:	f383 8811 	msr	BASEPRI, r3
 8047acc:	f3bf 8f6f 	isb	sy
 8047ad0:	f3bf 8f4f 	dsb	sy
 8047ad4:	60fb      	str	r3, [r7, #12]
    }
 8047ad6:	bf00      	nop
 8047ad8:	bf00      	nop
 8047ada:	e7fd      	b.n	8047ad8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8047adc:	693b      	ldr	r3, [r7, #16]
 8047ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8047ae0:	2b00      	cmp	r3, #0
 8047ae2:	d10b      	bne.n	8047afc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8047ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047ae8:	f383 8811 	msr	BASEPRI, r3
 8047aec:	f3bf 8f6f 	isb	sy
 8047af0:	f3bf 8f4f 	dsb	sy
 8047af4:	60bb      	str	r3, [r7, #8]
    }
 8047af6:	bf00      	nop
 8047af8:	bf00      	nop
 8047afa:	e7fd      	b.n	8047af8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8047afc:	693b      	ldr	r3, [r7, #16]
 8047afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8047b00:	1e5a      	subs	r2, r3, #1
 8047b02:	693b      	ldr	r3, [r7, #16]
 8047b04:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8047b06:	693b      	ldr	r3, [r7, #16]
 8047b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047b0a:	693b      	ldr	r3, [r7, #16]
 8047b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8047b0e:	429a      	cmp	r2, r3
 8047b10:	d039      	beq.n	8047b86 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8047b12:	693b      	ldr	r3, [r7, #16]
 8047b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8047b16:	2b00      	cmp	r3, #0
 8047b18:	d135      	bne.n	8047b86 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8047b1a:	693b      	ldr	r3, [r7, #16]
 8047b1c:	3304      	adds	r3, #4
 8047b1e:	4618      	mov	r0, r3
 8047b20:	f7fe fc3b 	bl	804639a <uxListRemove>
 8047b24:	4603      	mov	r3, r0
 8047b26:	2b00      	cmp	r3, #0
 8047b28:	d10a      	bne.n	8047b40 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8047b2a:	693b      	ldr	r3, [r7, #16]
 8047b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047b2e:	2201      	movs	r2, #1
 8047b30:	fa02 f303 	lsl.w	r3, r2, r3
 8047b34:	43da      	mvns	r2, r3
 8047b36:	4b17      	ldr	r3, [pc, #92]	@ (8047b94 <xTaskPriorityDisinherit+0xf0>)
 8047b38:	681b      	ldr	r3, [r3, #0]
 8047b3a:	4013      	ands	r3, r2
 8047b3c:	4a15      	ldr	r2, [pc, #84]	@ (8047b94 <xTaskPriorityDisinherit+0xf0>)
 8047b3e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8047b40:	693b      	ldr	r3, [r7, #16]
 8047b42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8047b44:	693b      	ldr	r3, [r7, #16]
 8047b46:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8047b48:	693b      	ldr	r3, [r7, #16]
 8047b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047b4c:	f1c3 0205 	rsb	r2, r3, #5
 8047b50:	693b      	ldr	r3, [r7, #16]
 8047b52:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8047b54:	693b      	ldr	r3, [r7, #16]
 8047b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047b58:	2201      	movs	r2, #1
 8047b5a:	409a      	lsls	r2, r3
 8047b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8047b94 <xTaskPriorityDisinherit+0xf0>)
 8047b5e:	681b      	ldr	r3, [r3, #0]
 8047b60:	4313      	orrs	r3, r2
 8047b62:	4a0c      	ldr	r2, [pc, #48]	@ (8047b94 <xTaskPriorityDisinherit+0xf0>)
 8047b64:	6013      	str	r3, [r2, #0]
 8047b66:	693b      	ldr	r3, [r7, #16]
 8047b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047b6a:	4613      	mov	r3, r2
 8047b6c:	009b      	lsls	r3, r3, #2
 8047b6e:	4413      	add	r3, r2
 8047b70:	009b      	lsls	r3, r3, #2
 8047b72:	4a09      	ldr	r2, [pc, #36]	@ (8047b98 <xTaskPriorityDisinherit+0xf4>)
 8047b74:	441a      	add	r2, r3
 8047b76:	693b      	ldr	r3, [r7, #16]
 8047b78:	3304      	adds	r3, #4
 8047b7a:	4619      	mov	r1, r3
 8047b7c:	4610      	mov	r0, r2
 8047b7e:	f7fe fbaf 	bl	80462e0 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8047b82:	2301      	movs	r3, #1
 8047b84:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8047b86:	697b      	ldr	r3, [r7, #20]
    }
 8047b88:	4618      	mov	r0, r3
 8047b8a:	3718      	adds	r7, #24
 8047b8c:	46bd      	mov	sp, r7
 8047b8e:	bd80      	pop	{r7, pc}
 8047b90:	20000408 	.word	0x20000408
 8047b94:	200004e8 	.word	0x200004e8
 8047b98:	2000040c 	.word	0x2000040c

08047b9c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8047b9c:	b580      	push	{r7, lr}
 8047b9e:	b086      	sub	sp, #24
 8047ba0:	af00      	add	r7, sp, #0
 8047ba2:	60f8      	str	r0, [r7, #12]
 8047ba4:	60b9      	str	r1, [r7, #8]
 8047ba6:	607a      	str	r2, [r7, #4]
 8047ba8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8047baa:	68fb      	ldr	r3, [r7, #12]
 8047bac:	2b00      	cmp	r3, #0
 8047bae:	d00b      	beq.n	8047bc8 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8047bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047bb4:	f383 8811 	msr	BASEPRI, r3
 8047bb8:	f3bf 8f6f 	isb	sy
 8047bbc:	f3bf 8f4f 	dsb	sy
 8047bc0:	613b      	str	r3, [r7, #16]
    }
 8047bc2:	bf00      	nop
 8047bc4:	bf00      	nop
 8047bc6:	e7fd      	b.n	8047bc4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8047bc8:	f000 ff68 	bl	8048a9c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8047bcc:	4b31      	ldr	r3, [pc, #196]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047bce:	681a      	ldr	r2, [r3, #0]
 8047bd0:	68fb      	ldr	r3, [r7, #12]
 8047bd2:	4413      	add	r3, r2
 8047bd4:	3354      	adds	r3, #84	@ 0x54
 8047bd6:	781b      	ldrb	r3, [r3, #0]
 8047bd8:	b2db      	uxtb	r3, r3
 8047bda:	2b02      	cmp	r3, #2
 8047bdc:	d022      	beq.n	8047c24 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8047bde:	4b2d      	ldr	r3, [pc, #180]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047be0:	681b      	ldr	r3, [r3, #0]
 8047be2:	68fa      	ldr	r2, [r7, #12]
 8047be4:	3214      	adds	r2, #20
 8047be6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8047bea:	68ba      	ldr	r2, [r7, #8]
 8047bec:	43d2      	mvns	r2, r2
 8047bee:	4011      	ands	r1, r2
 8047bf0:	68fa      	ldr	r2, [r7, #12]
 8047bf2:	3214      	adds	r2, #20
 8047bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8047bf8:	4b26      	ldr	r3, [pc, #152]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047bfa:	681a      	ldr	r2, [r3, #0]
 8047bfc:	68fb      	ldr	r3, [r7, #12]
 8047bfe:	4413      	add	r3, r2
 8047c00:	3354      	adds	r3, #84	@ 0x54
 8047c02:	2201      	movs	r2, #1
 8047c04:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8047c06:	6a3b      	ldr	r3, [r7, #32]
 8047c08:	2b00      	cmp	r3, #0
 8047c0a:	d00b      	beq.n	8047c24 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8047c0c:	2101      	movs	r1, #1
 8047c0e:	6a38      	ldr	r0, [r7, #32]
 8047c10:	f000 fa2e 	bl	8048070 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8047c14:	4b20      	ldr	r3, [pc, #128]	@ (8047c98 <xTaskGenericNotifyWait+0xfc>)
 8047c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8047c1a:	601a      	str	r2, [r3, #0]
 8047c1c:	f3bf 8f4f 	dsb	sy
 8047c20:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8047c24:	f000 ff6c 	bl	8048b00 <vPortExitCritical>

        taskENTER_CRITICAL();
 8047c28:	f000 ff38 	bl	8048a9c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8047c2c:	683b      	ldr	r3, [r7, #0]
 8047c2e:	2b00      	cmp	r3, #0
 8047c30:	d007      	beq.n	8047c42 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8047c32:	4b18      	ldr	r3, [pc, #96]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047c34:	681b      	ldr	r3, [r3, #0]
 8047c36:	68fa      	ldr	r2, [r7, #12]
 8047c38:	3214      	adds	r2, #20
 8047c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047c3e:	683b      	ldr	r3, [r7, #0]
 8047c40:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8047c42:	4b14      	ldr	r3, [pc, #80]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047c44:	681a      	ldr	r2, [r3, #0]
 8047c46:	68fb      	ldr	r3, [r7, #12]
 8047c48:	4413      	add	r3, r2
 8047c4a:	3354      	adds	r3, #84	@ 0x54
 8047c4c:	781b      	ldrb	r3, [r3, #0]
 8047c4e:	b2db      	uxtb	r3, r3
 8047c50:	2b02      	cmp	r3, #2
 8047c52:	d002      	beq.n	8047c5a <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8047c54:	2300      	movs	r3, #0
 8047c56:	617b      	str	r3, [r7, #20]
 8047c58:	e00e      	b.n	8047c78 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8047c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047c5c:	681b      	ldr	r3, [r3, #0]
 8047c5e:	68fa      	ldr	r2, [r7, #12]
 8047c60:	3214      	adds	r2, #20
 8047c62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8047c66:	687a      	ldr	r2, [r7, #4]
 8047c68:	43d2      	mvns	r2, r2
 8047c6a:	4011      	ands	r1, r2
 8047c6c:	68fa      	ldr	r2, [r7, #12]
 8047c6e:	3214      	adds	r2, #20
 8047c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8047c74:	2301      	movs	r3, #1
 8047c76:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8047c78:	4b06      	ldr	r3, [pc, #24]	@ (8047c94 <xTaskGenericNotifyWait+0xf8>)
 8047c7a:	681a      	ldr	r2, [r3, #0]
 8047c7c:	68fb      	ldr	r3, [r7, #12]
 8047c7e:	4413      	add	r3, r2
 8047c80:	3354      	adds	r3, #84	@ 0x54
 8047c82:	2200      	movs	r2, #0
 8047c84:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8047c86:	f000 ff3b 	bl	8048b00 <vPortExitCritical>

        return xReturn;
 8047c8a:	697b      	ldr	r3, [r7, #20]
    }
 8047c8c:	4618      	mov	r0, r3
 8047c8e:	3718      	adds	r7, #24
 8047c90:	46bd      	mov	sp, r7
 8047c92:	bd80      	pop	{r7, pc}
 8047c94:	20000408 	.word	0x20000408
 8047c98:	e000ed04 	.word	0xe000ed04

08047c9c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8047c9c:	b580      	push	{r7, lr}
 8047c9e:	b08c      	sub	sp, #48	@ 0x30
 8047ca0:	af00      	add	r7, sp, #0
 8047ca2:	60f8      	str	r0, [r7, #12]
 8047ca4:	60b9      	str	r1, [r7, #8]
 8047ca6:	607a      	str	r2, [r7, #4]
 8047ca8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8047caa:	2301      	movs	r3, #1
 8047cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8047cae:	68bb      	ldr	r3, [r7, #8]
 8047cb0:	2b00      	cmp	r3, #0
 8047cb2:	d00b      	beq.n	8047ccc <xTaskGenericNotify+0x30>
        __asm volatile
 8047cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047cb8:	f383 8811 	msr	BASEPRI, r3
 8047cbc:	f3bf 8f6f 	isb	sy
 8047cc0:	f3bf 8f4f 	dsb	sy
 8047cc4:	623b      	str	r3, [r7, #32]
    }
 8047cc6:	bf00      	nop
 8047cc8:	bf00      	nop
 8047cca:	e7fd      	b.n	8047cc8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8047ccc:	68fb      	ldr	r3, [r7, #12]
 8047cce:	2b00      	cmp	r3, #0
 8047cd0:	d10b      	bne.n	8047cea <xTaskGenericNotify+0x4e>
        __asm volatile
 8047cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047cd6:	f383 8811 	msr	BASEPRI, r3
 8047cda:	f3bf 8f6f 	isb	sy
 8047cde:	f3bf 8f4f 	dsb	sy
 8047ce2:	61fb      	str	r3, [r7, #28]
    }
 8047ce4:	bf00      	nop
 8047ce6:	bf00      	nop
 8047ce8:	e7fd      	b.n	8047ce6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8047cea:	68fb      	ldr	r3, [r7, #12]
 8047cec:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8047cee:	f000 fed5 	bl	8048a9c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8047cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047cf4:	2b00      	cmp	r3, #0
 8047cf6:	d006      	beq.n	8047d06 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8047cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047cfa:	68ba      	ldr	r2, [r7, #8]
 8047cfc:	3214      	adds	r2, #20
 8047cfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047d04:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8047d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8047d08:	68bb      	ldr	r3, [r7, #8]
 8047d0a:	4413      	add	r3, r2
 8047d0c:	3354      	adds	r3, #84	@ 0x54
 8047d0e:	781b      	ldrb	r3, [r3, #0]
 8047d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8047d14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8047d16:	68bb      	ldr	r3, [r7, #8]
 8047d18:	4413      	add	r3, r2
 8047d1a:	3354      	adds	r3, #84	@ 0x54
 8047d1c:	2202      	movs	r2, #2
 8047d1e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8047d20:	78fb      	ldrb	r3, [r7, #3]
 8047d22:	2b04      	cmp	r3, #4
 8047d24:	d83b      	bhi.n	8047d9e <xTaskGenericNotify+0x102>
 8047d26:	a201      	add	r2, pc, #4	@ (adr r2, 8047d2c <xTaskGenericNotify+0x90>)
 8047d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047d2c:	08047dbf 	.word	0x08047dbf
 8047d30:	08047d41 	.word	0x08047d41
 8047d34:	08047d5d 	.word	0x08047d5d
 8047d38:	08047d75 	.word	0x08047d75
 8047d3c:	08047d83 	.word	0x08047d83
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8047d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d42:	68ba      	ldr	r2, [r7, #8]
 8047d44:	3214      	adds	r2, #20
 8047d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047d4a:	687b      	ldr	r3, [r7, #4]
 8047d4c:	ea42 0103 	orr.w	r1, r2, r3
 8047d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d52:	68ba      	ldr	r2, [r7, #8]
 8047d54:	3214      	adds	r2, #20
 8047d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047d5a:	e033      	b.n	8047dc4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8047d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d5e:	68ba      	ldr	r2, [r7, #8]
 8047d60:	3214      	adds	r2, #20
 8047d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047d66:	1c59      	adds	r1, r3, #1
 8047d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d6a:	68ba      	ldr	r2, [r7, #8]
 8047d6c:	3214      	adds	r2, #20
 8047d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047d72:	e027      	b.n	8047dc4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8047d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d76:	68ba      	ldr	r2, [r7, #8]
 8047d78:	3214      	adds	r2, #20
 8047d7a:	6879      	ldr	r1, [r7, #4]
 8047d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047d80:	e020      	b.n	8047dc4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8047d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047d86:	2b02      	cmp	r3, #2
 8047d88:	d006      	beq.n	8047d98 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8047d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047d8c:	68ba      	ldr	r2, [r7, #8]
 8047d8e:	3214      	adds	r2, #20
 8047d90:	6879      	ldr	r1, [r7, #4]
 8047d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8047d96:	e015      	b.n	8047dc4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8047d98:	2300      	movs	r3, #0
 8047d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8047d9c:	e012      	b.n	8047dc4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8047d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8047e50 <xTaskGenericNotify+0x1b4>)
 8047da0:	681b      	ldr	r3, [r3, #0]
 8047da2:	2b00      	cmp	r3, #0
 8047da4:	d00d      	beq.n	8047dc2 <xTaskGenericNotify+0x126>
        __asm volatile
 8047da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047daa:	f383 8811 	msr	BASEPRI, r3
 8047dae:	f3bf 8f6f 	isb	sy
 8047db2:	f3bf 8f4f 	dsb	sy
 8047db6:	61bb      	str	r3, [r7, #24]
    }
 8047db8:	bf00      	nop
 8047dba:	bf00      	nop
 8047dbc:	e7fd      	b.n	8047dba <xTaskGenericNotify+0x11e>
                    break;
 8047dbe:	bf00      	nop
 8047dc0:	e000      	b.n	8047dc4 <xTaskGenericNotify+0x128>

                    break;
 8047dc2:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8047dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047dc8:	2b01      	cmp	r3, #1
 8047dca:	d13a      	bne.n	8047e42 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8047dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047dce:	3304      	adds	r3, #4
 8047dd0:	4618      	mov	r0, r3
 8047dd2:	f7fe fae2 	bl	804639a <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8047dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047dda:	2201      	movs	r2, #1
 8047ddc:	409a      	lsls	r2, r3
 8047dde:	4b1d      	ldr	r3, [pc, #116]	@ (8047e54 <xTaskGenericNotify+0x1b8>)
 8047de0:	681b      	ldr	r3, [r3, #0]
 8047de2:	4313      	orrs	r3, r2
 8047de4:	4a1b      	ldr	r2, [pc, #108]	@ (8047e54 <xTaskGenericNotify+0x1b8>)
 8047de6:	6013      	str	r3, [r2, #0]
 8047de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047dec:	4613      	mov	r3, r2
 8047dee:	009b      	lsls	r3, r3, #2
 8047df0:	4413      	add	r3, r2
 8047df2:	009b      	lsls	r3, r3, #2
 8047df4:	4a18      	ldr	r2, [pc, #96]	@ (8047e58 <xTaskGenericNotify+0x1bc>)
 8047df6:	441a      	add	r2, r3
 8047df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047dfa:	3304      	adds	r3, #4
 8047dfc:	4619      	mov	r1, r3
 8047dfe:	4610      	mov	r0, r2
 8047e00:	f7fe fa6e 	bl	80462e0 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8047e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8047e08:	2b00      	cmp	r3, #0
 8047e0a:	d00b      	beq.n	8047e24 <xTaskGenericNotify+0x188>
        __asm volatile
 8047e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047e10:	f383 8811 	msr	BASEPRI, r3
 8047e14:	f3bf 8f6f 	isb	sy
 8047e18:	f3bf 8f4f 	dsb	sy
 8047e1c:	617b      	str	r3, [r7, #20]
    }
 8047e1e:	bf00      	nop
 8047e20:	bf00      	nop
 8047e22:	e7fd      	b.n	8047e20 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8047e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047e28:	4b0c      	ldr	r3, [pc, #48]	@ (8047e5c <xTaskGenericNotify+0x1c0>)
 8047e2a:	681b      	ldr	r3, [r3, #0]
 8047e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047e2e:	429a      	cmp	r2, r3
 8047e30:	d907      	bls.n	8047e42 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8047e32:	4b0b      	ldr	r3, [pc, #44]	@ (8047e60 <xTaskGenericNotify+0x1c4>)
 8047e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8047e38:	601a      	str	r2, [r3, #0]
 8047e3a:	f3bf 8f4f 	dsb	sy
 8047e3e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8047e42:	f000 fe5d 	bl	8048b00 <vPortExitCritical>

        return xReturn;
 8047e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8047e48:	4618      	mov	r0, r3
 8047e4a:	3730      	adds	r7, #48	@ 0x30
 8047e4c:	46bd      	mov	sp, r7
 8047e4e:	bd80      	pop	{r7, pc}
 8047e50:	200004e4 	.word	0x200004e4
 8047e54:	200004e8 	.word	0x200004e8
 8047e58:	2000040c 	.word	0x2000040c
 8047e5c:	20000408 	.word	0x20000408
 8047e60:	e000ed04 	.word	0xe000ed04

08047e64 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8047e64:	b580      	push	{r7, lr}
 8047e66:	b090      	sub	sp, #64	@ 0x40
 8047e68:	af00      	add	r7, sp, #0
 8047e6a:	60f8      	str	r0, [r7, #12]
 8047e6c:	60b9      	str	r1, [r7, #8]
 8047e6e:	607a      	str	r2, [r7, #4]
 8047e70:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8047e72:	2301      	movs	r3, #1
 8047e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8047e76:	68fb      	ldr	r3, [r7, #12]
 8047e78:	2b00      	cmp	r3, #0
 8047e7a:	d10b      	bne.n	8047e94 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8047e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047e80:	f383 8811 	msr	BASEPRI, r3
 8047e84:	f3bf 8f6f 	isb	sy
 8047e88:	f3bf 8f4f 	dsb	sy
 8047e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8047e8e:	bf00      	nop
 8047e90:	bf00      	nop
 8047e92:	e7fd      	b.n	8047e90 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8047e94:	68bb      	ldr	r3, [r7, #8]
 8047e96:	2b00      	cmp	r3, #0
 8047e98:	d00b      	beq.n	8047eb2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8047e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047e9e:	f383 8811 	msr	BASEPRI, r3
 8047ea2:	f3bf 8f6f 	isb	sy
 8047ea6:	f3bf 8f4f 	dsb	sy
 8047eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8047eac:	bf00      	nop
 8047eae:	bf00      	nop
 8047eb0:	e7fd      	b.n	8047eae <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8047eb2:	f000 fedb 	bl	8048c6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8047eb6:	68fb      	ldr	r3, [r7, #12]
 8047eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8047eba:	f3ef 8211 	mrs	r2, BASEPRI
 8047ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047ec2:	f383 8811 	msr	BASEPRI, r3
 8047ec6:	f3bf 8f6f 	isb	sy
 8047eca:	f3bf 8f4f 	dsb	sy
 8047ece:	627a      	str	r2, [r7, #36]	@ 0x24
 8047ed0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8047ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8047ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8047ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8047ed8:	2b00      	cmp	r3, #0
 8047eda:	d006      	beq.n	8047eea <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8047edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047ede:	68ba      	ldr	r2, [r7, #8]
 8047ee0:	3214      	adds	r2, #20
 8047ee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8047ee8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8047eea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8047eec:	68bb      	ldr	r3, [r7, #8]
 8047eee:	4413      	add	r3, r2
 8047ef0:	3354      	adds	r3, #84	@ 0x54
 8047ef2:	781b      	ldrb	r3, [r3, #0]
 8047ef4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8047ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8047efa:	68bb      	ldr	r3, [r7, #8]
 8047efc:	4413      	add	r3, r2
 8047efe:	3354      	adds	r3, #84	@ 0x54
 8047f00:	2202      	movs	r2, #2
 8047f02:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8047f04:	78fb      	ldrb	r3, [r7, #3]
 8047f06:	2b04      	cmp	r3, #4
 8047f08:	d83b      	bhi.n	8047f82 <xTaskGenericNotifyFromISR+0x11e>
 8047f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8047f10 <xTaskGenericNotifyFromISR+0xac>)
 8047f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047f10:	08047fa3 	.word	0x08047fa3
 8047f14:	08047f25 	.word	0x08047f25
 8047f18:	08047f41 	.word	0x08047f41
 8047f1c:	08047f59 	.word	0x08047f59
 8047f20:	08047f67 	.word	0x08047f67
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8047f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f26:	68ba      	ldr	r2, [r7, #8]
 8047f28:	3214      	adds	r2, #20
 8047f2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047f2e:	687b      	ldr	r3, [r7, #4]
 8047f30:	ea42 0103 	orr.w	r1, r2, r3
 8047f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f36:	68ba      	ldr	r2, [r7, #8]
 8047f38:	3214      	adds	r2, #20
 8047f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047f3e:	e033      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8047f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f42:	68ba      	ldr	r2, [r7, #8]
 8047f44:	3214      	adds	r2, #20
 8047f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047f4a:	1c59      	adds	r1, r3, #1
 8047f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f4e:	68ba      	ldr	r2, [r7, #8]
 8047f50:	3214      	adds	r2, #20
 8047f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047f56:	e027      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8047f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f5a:	68ba      	ldr	r2, [r7, #8]
 8047f5c:	3214      	adds	r2, #20
 8047f5e:	6879      	ldr	r1, [r7, #4]
 8047f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8047f64:	e020      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8047f66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8047f6a:	2b02      	cmp	r3, #2
 8047f6c:	d006      	beq.n	8047f7c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8047f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047f70:	68ba      	ldr	r2, [r7, #8]
 8047f72:	3214      	adds	r2, #20
 8047f74:	6879      	ldr	r1, [r7, #4]
 8047f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8047f7a:	e015      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8047f7c:	2300      	movs	r3, #0
 8047f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8047f80:	e012      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8047f82:	4b34      	ldr	r3, [pc, #208]	@ (8048054 <xTaskGenericNotifyFromISR+0x1f0>)
 8047f84:	681b      	ldr	r3, [r3, #0]
 8047f86:	2b00      	cmp	r3, #0
 8047f88:	d00d      	beq.n	8047fa6 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8047f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047f8e:	f383 8811 	msr	BASEPRI, r3
 8047f92:	f3bf 8f6f 	isb	sy
 8047f96:	f3bf 8f4f 	dsb	sy
 8047f9a:	61fb      	str	r3, [r7, #28]
    }
 8047f9c:	bf00      	nop
 8047f9e:	bf00      	nop
 8047fa0:	e7fd      	b.n	8047f9e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8047fa2:	bf00      	nop
 8047fa4:	e000      	b.n	8047fa8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8047fa6:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8047fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8047fac:	2b01      	cmp	r3, #1
 8047fae:	d146      	bne.n	804803e <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8047fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8047fb4:	2b00      	cmp	r3, #0
 8047fb6:	d00b      	beq.n	8047fd0 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8047fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047fbc:	f383 8811 	msr	BASEPRI, r3
 8047fc0:	f3bf 8f6f 	isb	sy
 8047fc4:	f3bf 8f4f 	dsb	sy
 8047fc8:	61bb      	str	r3, [r7, #24]
    }
 8047fca:	bf00      	nop
 8047fcc:	bf00      	nop
 8047fce:	e7fd      	b.n	8047fcc <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8047fd0:	4b21      	ldr	r3, [pc, #132]	@ (8048058 <xTaskGenericNotifyFromISR+0x1f4>)
 8047fd2:	681b      	ldr	r3, [r3, #0]
 8047fd4:	2b00      	cmp	r3, #0
 8047fd6:	d11c      	bne.n	8048012 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8047fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047fda:	3304      	adds	r3, #4
 8047fdc:	4618      	mov	r0, r3
 8047fde:	f7fe f9dc 	bl	804639a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8047fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8047fe6:	2201      	movs	r2, #1
 8047fe8:	409a      	lsls	r2, r3
 8047fea:	4b1c      	ldr	r3, [pc, #112]	@ (804805c <xTaskGenericNotifyFromISR+0x1f8>)
 8047fec:	681b      	ldr	r3, [r3, #0]
 8047fee:	4313      	orrs	r3, r2
 8047ff0:	4a1a      	ldr	r2, [pc, #104]	@ (804805c <xTaskGenericNotifyFromISR+0x1f8>)
 8047ff2:	6013      	str	r3, [r2, #0]
 8047ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8047ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8047ff8:	4613      	mov	r3, r2
 8047ffa:	009b      	lsls	r3, r3, #2
 8047ffc:	4413      	add	r3, r2
 8047ffe:	009b      	lsls	r3, r3, #2
 8048000:	4a17      	ldr	r2, [pc, #92]	@ (8048060 <xTaskGenericNotifyFromISR+0x1fc>)
 8048002:	441a      	add	r2, r3
 8048004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8048006:	3304      	adds	r3, #4
 8048008:	4619      	mov	r1, r3
 804800a:	4610      	mov	r0, r2
 804800c:	f7fe f968 	bl	80462e0 <vListInsertEnd>
 8048010:	e005      	b.n	804801e <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8048012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8048014:	3318      	adds	r3, #24
 8048016:	4619      	mov	r1, r3
 8048018:	4812      	ldr	r0, [pc, #72]	@ (8048064 <xTaskGenericNotifyFromISR+0x200>)
 804801a:	f7fe f961 	bl	80462e0 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 804801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8048020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8048022:	4b11      	ldr	r3, [pc, #68]	@ (8048068 <xTaskGenericNotifyFromISR+0x204>)
 8048024:	681b      	ldr	r3, [r3, #0]
 8048026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8048028:	429a      	cmp	r2, r3
 804802a:	d908      	bls.n	804803e <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 804802c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804802e:	2b00      	cmp	r3, #0
 8048030:	d002      	beq.n	8048038 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8048032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8048034:	2201      	movs	r2, #1
 8048036:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8048038:	4b0c      	ldr	r3, [pc, #48]	@ (804806c <xTaskGenericNotifyFromISR+0x208>)
 804803a:	2201      	movs	r2, #1
 804803c:	601a      	str	r2, [r3, #0]
 804803e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8048040:	617b      	str	r3, [r7, #20]
        __asm volatile
 8048042:	697b      	ldr	r3, [r7, #20]
 8048044:	f383 8811 	msr	BASEPRI, r3
    }
 8048048:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 804804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 804804c:	4618      	mov	r0, r3
 804804e:	3740      	adds	r7, #64	@ 0x40
 8048050:	46bd      	mov	sp, r7
 8048052:	bd80      	pop	{r7, pc}
 8048054:	200004e4 	.word	0x200004e4
 8048058:	20000508 	.word	0x20000508
 804805c:	200004e8 	.word	0x200004e8
 8048060:	2000040c 	.word	0x2000040c
 8048064:	200004a0 	.word	0x200004a0
 8048068:	20000408 	.word	0x20000408
 804806c:	200004f4 	.word	0x200004f4

08048070 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8048070:	b580      	push	{r7, lr}
 8048072:	b084      	sub	sp, #16
 8048074:	af00      	add	r7, sp, #0
 8048076:	6078      	str	r0, [r7, #4]
 8048078:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 804807a:	4b29      	ldr	r3, [pc, #164]	@ (8048120 <prvAddCurrentTaskToDelayedList+0xb0>)
 804807c:	681b      	ldr	r3, [r3, #0]
 804807e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8048080:	4b28      	ldr	r3, [pc, #160]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8048082:	681b      	ldr	r3, [r3, #0]
 8048084:	3304      	adds	r3, #4
 8048086:	4618      	mov	r0, r3
 8048088:	f7fe f987 	bl	804639a <uxListRemove>
 804808c:	4603      	mov	r3, r0
 804808e:	2b00      	cmp	r3, #0
 8048090:	d10b      	bne.n	80480aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8048092:	4b24      	ldr	r3, [pc, #144]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8048094:	681b      	ldr	r3, [r3, #0]
 8048096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8048098:	2201      	movs	r2, #1
 804809a:	fa02 f303 	lsl.w	r3, r2, r3
 804809e:	43da      	mvns	r2, r3
 80480a0:	4b21      	ldr	r3, [pc, #132]	@ (8048128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80480a2:	681b      	ldr	r3, [r3, #0]
 80480a4:	4013      	ands	r3, r2
 80480a6:	4a20      	ldr	r2, [pc, #128]	@ (8048128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80480a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80480aa:	687b      	ldr	r3, [r7, #4]
 80480ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80480b0:	d10a      	bne.n	80480c8 <prvAddCurrentTaskToDelayedList+0x58>
 80480b2:	683b      	ldr	r3, [r7, #0]
 80480b4:	2b00      	cmp	r3, #0
 80480b6:	d007      	beq.n	80480c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80480b8:	4b1a      	ldr	r3, [pc, #104]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80480ba:	681b      	ldr	r3, [r3, #0]
 80480bc:	3304      	adds	r3, #4
 80480be:	4619      	mov	r1, r3
 80480c0:	481a      	ldr	r0, [pc, #104]	@ (804812c <prvAddCurrentTaskToDelayedList+0xbc>)
 80480c2:	f7fe f90d 	bl	80462e0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80480c6:	e026      	b.n	8048116 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80480c8:	68fa      	ldr	r2, [r7, #12]
 80480ca:	687b      	ldr	r3, [r7, #4]
 80480cc:	4413      	add	r3, r2
 80480ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80480d0:	4b14      	ldr	r3, [pc, #80]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80480d2:	681b      	ldr	r3, [r3, #0]
 80480d4:	68ba      	ldr	r2, [r7, #8]
 80480d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80480d8:	68ba      	ldr	r2, [r7, #8]
 80480da:	68fb      	ldr	r3, [r7, #12]
 80480dc:	429a      	cmp	r2, r3
 80480de:	d209      	bcs.n	80480f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80480e0:	4b13      	ldr	r3, [pc, #76]	@ (8048130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80480e2:	681a      	ldr	r2, [r3, #0]
 80480e4:	4b0f      	ldr	r3, [pc, #60]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80480e6:	681b      	ldr	r3, [r3, #0]
 80480e8:	3304      	adds	r3, #4
 80480ea:	4619      	mov	r1, r3
 80480ec:	4610      	mov	r0, r2
 80480ee:	f7fe f91b 	bl	8046328 <vListInsert>
}
 80480f2:	e010      	b.n	8048116 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80480f4:	4b0f      	ldr	r3, [pc, #60]	@ (8048134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80480f6:	681a      	ldr	r2, [r3, #0]
 80480f8:	4b0a      	ldr	r3, [pc, #40]	@ (8048124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80480fa:	681b      	ldr	r3, [r3, #0]
 80480fc:	3304      	adds	r3, #4
 80480fe:	4619      	mov	r1, r3
 8048100:	4610      	mov	r0, r2
 8048102:	f7fe f911 	bl	8046328 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8048106:	4b0c      	ldr	r3, [pc, #48]	@ (8048138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8048108:	681b      	ldr	r3, [r3, #0]
 804810a:	68ba      	ldr	r2, [r7, #8]
 804810c:	429a      	cmp	r2, r3
 804810e:	d202      	bcs.n	8048116 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8048110:	4a09      	ldr	r2, [pc, #36]	@ (8048138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8048112:	68bb      	ldr	r3, [r7, #8]
 8048114:	6013      	str	r3, [r2, #0]
}
 8048116:	bf00      	nop
 8048118:	3710      	adds	r7, #16
 804811a:	46bd      	mov	sp, r7
 804811c:	bd80      	pop	{r7, pc}
 804811e:	bf00      	nop
 8048120:	200004e4 	.word	0x200004e4
 8048124:	20000408 	.word	0x20000408
 8048128:	200004e8 	.word	0x200004e8
 804812c:	200004cc 	.word	0x200004cc
 8048130:	2000049c 	.word	0x2000049c
 8048134:	20000498 	.word	0x20000498
 8048138:	20000500 	.word	0x20000500

0804813c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 804813c:	b580      	push	{r7, lr}
 804813e:	b084      	sub	sp, #16
 8048140:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8048142:	2300      	movs	r3, #0
 8048144:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8048146:	f000 fb3f 	bl	80487c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 804814a:	4b12      	ldr	r3, [pc, #72]	@ (8048194 <xTimerCreateTimerTask+0x58>)
 804814c:	681b      	ldr	r3, [r3, #0]
 804814e:	2b00      	cmp	r3, #0
 8048150:	d00b      	beq.n	804816a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8048152:	4b11      	ldr	r3, [pc, #68]	@ (8048198 <xTimerCreateTimerTask+0x5c>)
 8048154:	9301      	str	r3, [sp, #4]
 8048156:	2302      	movs	r3, #2
 8048158:	9300      	str	r3, [sp, #0]
 804815a:	2300      	movs	r3, #0
 804815c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8048160:	490e      	ldr	r1, [pc, #56]	@ (804819c <xTimerCreateTimerTask+0x60>)
 8048162:	480f      	ldr	r0, [pc, #60]	@ (80481a0 <xTimerCreateTimerTask+0x64>)
 8048164:	f7fe feee 	bl	8046f44 <xTaskCreate>
 8048168:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 804816a:	687b      	ldr	r3, [r7, #4]
 804816c:	2b00      	cmp	r3, #0
 804816e:	d10b      	bne.n	8048188 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8048170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048174:	f383 8811 	msr	BASEPRI, r3
 8048178:	f3bf 8f6f 	isb	sy
 804817c:	f3bf 8f4f 	dsb	sy
 8048180:	603b      	str	r3, [r7, #0]
    }
 8048182:	bf00      	nop
 8048184:	bf00      	nop
 8048186:	e7fd      	b.n	8048184 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8048188:	687b      	ldr	r3, [r7, #4]
    }
 804818a:	4618      	mov	r0, r3
 804818c:	3708      	adds	r7, #8
 804818e:	46bd      	mov	sp, r7
 8048190:	bd80      	pop	{r7, pc}
 8048192:	bf00      	nop
 8048194:	2000053c 	.word	0x2000053c
 8048198:	20000540 	.word	0x20000540
 804819c:	0804ce7c 	.word	0x0804ce7c
 80481a0:	08048399 	.word	0x08048399

080481a4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80481a4:	b580      	push	{r7, lr}
 80481a6:	b088      	sub	sp, #32
 80481a8:	af02      	add	r7, sp, #8
 80481aa:	60f8      	str	r0, [r7, #12]
 80481ac:	60b9      	str	r1, [r7, #8]
 80481ae:	607a      	str	r2, [r7, #4]
 80481b0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80481b2:	202c      	movs	r0, #44	@ 0x2c
 80481b4:	f000 fd9c 	bl	8048cf0 <pvPortMalloc>
 80481b8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80481ba:	697b      	ldr	r3, [r7, #20]
 80481bc:	2b00      	cmp	r3, #0
 80481be:	d00d      	beq.n	80481dc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80481c0:	697b      	ldr	r3, [r7, #20]
 80481c2:	2200      	movs	r2, #0
 80481c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80481c8:	697b      	ldr	r3, [r7, #20]
 80481ca:	9301      	str	r3, [sp, #4]
 80481cc:	6a3b      	ldr	r3, [r7, #32]
 80481ce:	9300      	str	r3, [sp, #0]
 80481d0:	683b      	ldr	r3, [r7, #0]
 80481d2:	687a      	ldr	r2, [r7, #4]
 80481d4:	68b9      	ldr	r1, [r7, #8]
 80481d6:	68f8      	ldr	r0, [r7, #12]
 80481d8:	f000 f805 	bl	80481e6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80481dc:	697b      	ldr	r3, [r7, #20]
        }
 80481de:	4618      	mov	r0, r3
 80481e0:	3718      	adds	r7, #24
 80481e2:	46bd      	mov	sp, r7
 80481e4:	bd80      	pop	{r7, pc}

080481e6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80481e6:	b580      	push	{r7, lr}
 80481e8:	b086      	sub	sp, #24
 80481ea:	af00      	add	r7, sp, #0
 80481ec:	60f8      	str	r0, [r7, #12]
 80481ee:	60b9      	str	r1, [r7, #8]
 80481f0:	607a      	str	r2, [r7, #4]
 80481f2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80481f4:	68bb      	ldr	r3, [r7, #8]
 80481f6:	2b00      	cmp	r3, #0
 80481f8:	d10b      	bne.n	8048212 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 80481fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80481fe:	f383 8811 	msr	BASEPRI, r3
 8048202:	f3bf 8f6f 	isb	sy
 8048206:	f3bf 8f4f 	dsb	sy
 804820a:	617b      	str	r3, [r7, #20]
    }
 804820c:	bf00      	nop
 804820e:	bf00      	nop
 8048210:	e7fd      	b.n	804820e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8048212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048214:	2b00      	cmp	r3, #0
 8048216:	d01e      	beq.n	8048256 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8048218:	f000 fad6 	bl	80487c8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 804821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804821e:	68fa      	ldr	r2, [r7, #12]
 8048220:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8048222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048224:	68ba      	ldr	r2, [r7, #8]
 8048226:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8048228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804822a:	683a      	ldr	r2, [r7, #0]
 804822c:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 804822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048230:	6a3a      	ldr	r2, [r7, #32]
 8048232:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8048234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048236:	3304      	adds	r3, #4
 8048238:	4618      	mov	r0, r3
 804823a:	f7fe f844 	bl	80462c6 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 804823e:	687b      	ldr	r3, [r7, #4]
 8048240:	2b00      	cmp	r3, #0
 8048242:	d008      	beq.n	8048256 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8048244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 804824a:	f043 0304 	orr.w	r3, r3, #4
 804824e:	b2da      	uxtb	r2, r3
 8048250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8048256:	bf00      	nop
 8048258:	3718      	adds	r7, #24
 804825a:	46bd      	mov	sp, r7
 804825c:	bd80      	pop	{r7, pc}
	...

08048260 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8048260:	b580      	push	{r7, lr}
 8048262:	b08a      	sub	sp, #40	@ 0x28
 8048264:	af00      	add	r7, sp, #0
 8048266:	60f8      	str	r0, [r7, #12]
 8048268:	60b9      	str	r1, [r7, #8]
 804826a:	607a      	str	r2, [r7, #4]
 804826c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 804826e:	2300      	movs	r3, #0
 8048270:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8048272:	68fb      	ldr	r3, [r7, #12]
 8048274:	2b00      	cmp	r3, #0
 8048276:	d10b      	bne.n	8048290 <xTimerGenericCommand+0x30>
        __asm volatile
 8048278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804827c:	f383 8811 	msr	BASEPRI, r3
 8048280:	f3bf 8f6f 	isb	sy
 8048284:	f3bf 8f4f 	dsb	sy
 8048288:	623b      	str	r3, [r7, #32]
    }
 804828a:	bf00      	nop
 804828c:	bf00      	nop
 804828e:	e7fd      	b.n	804828c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8048290:	4b19      	ldr	r3, [pc, #100]	@ (80482f8 <xTimerGenericCommand+0x98>)
 8048292:	681b      	ldr	r3, [r3, #0]
 8048294:	2b00      	cmp	r3, #0
 8048296:	d02a      	beq.n	80482ee <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8048298:	68bb      	ldr	r3, [r7, #8]
 804829a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 804829c:	687b      	ldr	r3, [r7, #4]
 804829e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80482a0:	68fb      	ldr	r3, [r7, #12]
 80482a2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80482a4:	68bb      	ldr	r3, [r7, #8]
 80482a6:	2b05      	cmp	r3, #5
 80482a8:	dc18      	bgt.n	80482dc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80482aa:	f7ff fbdd 	bl	8047a68 <xTaskGetSchedulerState>
 80482ae:	4603      	mov	r3, r0
 80482b0:	2b02      	cmp	r3, #2
 80482b2:	d109      	bne.n	80482c8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80482b4:	4b10      	ldr	r3, [pc, #64]	@ (80482f8 <xTimerGenericCommand+0x98>)
 80482b6:	6818      	ldr	r0, [r3, #0]
 80482b8:	f107 0114 	add.w	r1, r7, #20
 80482bc:	2300      	movs	r3, #0
 80482be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80482c0:	f7fe f986 	bl	80465d0 <xQueueGenericSend>
 80482c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80482c6:	e012      	b.n	80482ee <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80482c8:	4b0b      	ldr	r3, [pc, #44]	@ (80482f8 <xTimerGenericCommand+0x98>)
 80482ca:	6818      	ldr	r0, [r3, #0]
 80482cc:	f107 0114 	add.w	r1, r7, #20
 80482d0:	2300      	movs	r3, #0
 80482d2:	2200      	movs	r2, #0
 80482d4:	f7fe f97c 	bl	80465d0 <xQueueGenericSend>
 80482d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80482da:	e008      	b.n	80482ee <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80482dc:	4b06      	ldr	r3, [pc, #24]	@ (80482f8 <xTimerGenericCommand+0x98>)
 80482de:	6818      	ldr	r0, [r3, #0]
 80482e0:	f107 0114 	add.w	r1, r7, #20
 80482e4:	2300      	movs	r3, #0
 80482e6:	683a      	ldr	r2, [r7, #0]
 80482e8:	f7fe fa74 	bl	80467d4 <xQueueGenericSendFromISR>
 80482ec:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80482ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80482f0:	4618      	mov	r0, r3
 80482f2:	3728      	adds	r7, #40	@ 0x28
 80482f4:	46bd      	mov	sp, r7
 80482f6:	bd80      	pop	{r7, pc}
 80482f8:	2000053c 	.word	0x2000053c

080482fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80482fc:	b580      	push	{r7, lr}
 80482fe:	b088      	sub	sp, #32
 8048300:	af02      	add	r7, sp, #8
 8048302:	6078      	str	r0, [r7, #4]
 8048304:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8048306:	4b23      	ldr	r3, [pc, #140]	@ (8048394 <prvProcessExpiredTimer+0x98>)
 8048308:	681b      	ldr	r3, [r3, #0]
 804830a:	68db      	ldr	r3, [r3, #12]
 804830c:	68db      	ldr	r3, [r3, #12]
 804830e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8048310:	697b      	ldr	r3, [r7, #20]
 8048312:	3304      	adds	r3, #4
 8048314:	4618      	mov	r0, r3
 8048316:	f7fe f840 	bl	804639a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 804831a:	697b      	ldr	r3, [r7, #20]
 804831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8048320:	f003 0304 	and.w	r3, r3, #4
 8048324:	2b00      	cmp	r3, #0
 8048326:	d023      	beq.n	8048370 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8048328:	697b      	ldr	r3, [r7, #20]
 804832a:	699a      	ldr	r2, [r3, #24]
 804832c:	687b      	ldr	r3, [r7, #4]
 804832e:	18d1      	adds	r1, r2, r3
 8048330:	687b      	ldr	r3, [r7, #4]
 8048332:	683a      	ldr	r2, [r7, #0]
 8048334:	6978      	ldr	r0, [r7, #20]
 8048336:	f000 f8d5 	bl	80484e4 <prvInsertTimerInActiveList>
 804833a:	4603      	mov	r3, r0
 804833c:	2b00      	cmp	r3, #0
 804833e:	d020      	beq.n	8048382 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8048340:	2300      	movs	r3, #0
 8048342:	9300      	str	r3, [sp, #0]
 8048344:	2300      	movs	r3, #0
 8048346:	687a      	ldr	r2, [r7, #4]
 8048348:	2100      	movs	r1, #0
 804834a:	6978      	ldr	r0, [r7, #20]
 804834c:	f7ff ff88 	bl	8048260 <xTimerGenericCommand>
 8048350:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8048352:	693b      	ldr	r3, [r7, #16]
 8048354:	2b00      	cmp	r3, #0
 8048356:	d114      	bne.n	8048382 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8048358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804835c:	f383 8811 	msr	BASEPRI, r3
 8048360:	f3bf 8f6f 	isb	sy
 8048364:	f3bf 8f4f 	dsb	sy
 8048368:	60fb      	str	r3, [r7, #12]
    }
 804836a:	bf00      	nop
 804836c:	bf00      	nop
 804836e:	e7fd      	b.n	804836c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8048370:	697b      	ldr	r3, [r7, #20]
 8048372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8048376:	f023 0301 	bic.w	r3, r3, #1
 804837a:	b2da      	uxtb	r2, r3
 804837c:	697b      	ldr	r3, [r7, #20]
 804837e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8048382:	697b      	ldr	r3, [r7, #20]
 8048384:	6a1b      	ldr	r3, [r3, #32]
 8048386:	6978      	ldr	r0, [r7, #20]
 8048388:	4798      	blx	r3
    }
 804838a:	bf00      	nop
 804838c:	3718      	adds	r7, #24
 804838e:	46bd      	mov	sp, r7
 8048390:	bd80      	pop	{r7, pc}
 8048392:	bf00      	nop
 8048394:	20000534 	.word	0x20000534

08048398 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8048398:	b580      	push	{r7, lr}
 804839a:	b084      	sub	sp, #16
 804839c:	af00      	add	r7, sp, #0
 804839e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80483a0:	f107 0308 	add.w	r3, r7, #8
 80483a4:	4618      	mov	r0, r3
 80483a6:	f000 f859 	bl	804845c <prvGetNextExpireTime>
 80483aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80483ac:	68bb      	ldr	r3, [r7, #8]
 80483ae:	4619      	mov	r1, r3
 80483b0:	68f8      	ldr	r0, [r7, #12]
 80483b2:	f000 f805 	bl	80483c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80483b6:	f000 f8d7 	bl	8048568 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80483ba:	bf00      	nop
 80483bc:	e7f0      	b.n	80483a0 <prvTimerTask+0x8>
	...

080483c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80483c0:	b580      	push	{r7, lr}
 80483c2:	b084      	sub	sp, #16
 80483c4:	af00      	add	r7, sp, #0
 80483c6:	6078      	str	r0, [r7, #4]
 80483c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80483ca:	f7fe ff89 	bl	80472e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80483ce:	f107 0308 	add.w	r3, r7, #8
 80483d2:	4618      	mov	r0, r3
 80483d4:	f000 f866 	bl	80484a4 <prvSampleTimeNow>
 80483d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80483da:	68bb      	ldr	r3, [r7, #8]
 80483dc:	2b00      	cmp	r3, #0
 80483de:	d130      	bne.n	8048442 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80483e0:	683b      	ldr	r3, [r7, #0]
 80483e2:	2b00      	cmp	r3, #0
 80483e4:	d10a      	bne.n	80483fc <prvProcessTimerOrBlockTask+0x3c>
 80483e6:	687a      	ldr	r2, [r7, #4]
 80483e8:	68fb      	ldr	r3, [r7, #12]
 80483ea:	429a      	cmp	r2, r3
 80483ec:	d806      	bhi.n	80483fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80483ee:	f7fe ff85 	bl	80472fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80483f2:	68f9      	ldr	r1, [r7, #12]
 80483f4:	6878      	ldr	r0, [r7, #4]
 80483f6:	f7ff ff81 	bl	80482fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80483fa:	e024      	b.n	8048446 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80483fc:	683b      	ldr	r3, [r7, #0]
 80483fe:	2b00      	cmp	r3, #0
 8048400:	d008      	beq.n	8048414 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8048402:	4b13      	ldr	r3, [pc, #76]	@ (8048450 <prvProcessTimerOrBlockTask+0x90>)
 8048404:	681b      	ldr	r3, [r3, #0]
 8048406:	681b      	ldr	r3, [r3, #0]
 8048408:	2b00      	cmp	r3, #0
 804840a:	d101      	bne.n	8048410 <prvProcessTimerOrBlockTask+0x50>
 804840c:	2301      	movs	r3, #1
 804840e:	e000      	b.n	8048412 <prvProcessTimerOrBlockTask+0x52>
 8048410:	2300      	movs	r3, #0
 8048412:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8048414:	4b0f      	ldr	r3, [pc, #60]	@ (8048454 <prvProcessTimerOrBlockTask+0x94>)
 8048416:	6818      	ldr	r0, [r3, #0]
 8048418:	687a      	ldr	r2, [r7, #4]
 804841a:	68fb      	ldr	r3, [r7, #12]
 804841c:	1ad3      	subs	r3, r2, r3
 804841e:	683a      	ldr	r2, [r7, #0]
 8048420:	4619      	mov	r1, r3
 8048422:	f7fe fd5b 	bl	8046edc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8048426:	f7fe ff69 	bl	80472fc <xTaskResumeAll>
 804842a:	4603      	mov	r3, r0
 804842c:	2b00      	cmp	r3, #0
 804842e:	d10a      	bne.n	8048446 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8048430:	4b09      	ldr	r3, [pc, #36]	@ (8048458 <prvProcessTimerOrBlockTask+0x98>)
 8048432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8048436:	601a      	str	r2, [r3, #0]
 8048438:	f3bf 8f4f 	dsb	sy
 804843c:	f3bf 8f6f 	isb	sy
    }
 8048440:	e001      	b.n	8048446 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8048442:	f7fe ff5b 	bl	80472fc <xTaskResumeAll>
    }
 8048446:	bf00      	nop
 8048448:	3710      	adds	r7, #16
 804844a:	46bd      	mov	sp, r7
 804844c:	bd80      	pop	{r7, pc}
 804844e:	bf00      	nop
 8048450:	20000538 	.word	0x20000538
 8048454:	2000053c 	.word	0x2000053c
 8048458:	e000ed04 	.word	0xe000ed04

0804845c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 804845c:	b480      	push	{r7}
 804845e:	b085      	sub	sp, #20
 8048460:	af00      	add	r7, sp, #0
 8048462:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8048464:	4b0e      	ldr	r3, [pc, #56]	@ (80484a0 <prvGetNextExpireTime+0x44>)
 8048466:	681b      	ldr	r3, [r3, #0]
 8048468:	681b      	ldr	r3, [r3, #0]
 804846a:	2b00      	cmp	r3, #0
 804846c:	d101      	bne.n	8048472 <prvGetNextExpireTime+0x16>
 804846e:	2201      	movs	r2, #1
 8048470:	e000      	b.n	8048474 <prvGetNextExpireTime+0x18>
 8048472:	2200      	movs	r2, #0
 8048474:	687b      	ldr	r3, [r7, #4]
 8048476:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8048478:	687b      	ldr	r3, [r7, #4]
 804847a:	681b      	ldr	r3, [r3, #0]
 804847c:	2b00      	cmp	r3, #0
 804847e:	d105      	bne.n	804848c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8048480:	4b07      	ldr	r3, [pc, #28]	@ (80484a0 <prvGetNextExpireTime+0x44>)
 8048482:	681b      	ldr	r3, [r3, #0]
 8048484:	68db      	ldr	r3, [r3, #12]
 8048486:	681b      	ldr	r3, [r3, #0]
 8048488:	60fb      	str	r3, [r7, #12]
 804848a:	e001      	b.n	8048490 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 804848c:	2300      	movs	r3, #0
 804848e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8048490:	68fb      	ldr	r3, [r7, #12]
    }
 8048492:	4618      	mov	r0, r3
 8048494:	3714      	adds	r7, #20
 8048496:	46bd      	mov	sp, r7
 8048498:	f85d 7b04 	ldr.w	r7, [sp], #4
 804849c:	4770      	bx	lr
 804849e:	bf00      	nop
 80484a0:	20000534 	.word	0x20000534

080484a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80484a4:	b580      	push	{r7, lr}
 80484a6:	b084      	sub	sp, #16
 80484a8:	af00      	add	r7, sp, #0
 80484aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80484ac:	f7fe ffc4 	bl	8047438 <xTaskGetTickCount>
 80484b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80484b2:	4b0b      	ldr	r3, [pc, #44]	@ (80484e0 <prvSampleTimeNow+0x3c>)
 80484b4:	681b      	ldr	r3, [r3, #0]
 80484b6:	68fa      	ldr	r2, [r7, #12]
 80484b8:	429a      	cmp	r2, r3
 80484ba:	d205      	bcs.n	80484c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80484bc:	f000 f91e 	bl	80486fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80484c0:	687b      	ldr	r3, [r7, #4]
 80484c2:	2201      	movs	r2, #1
 80484c4:	601a      	str	r2, [r3, #0]
 80484c6:	e002      	b.n	80484ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80484c8:	687b      	ldr	r3, [r7, #4]
 80484ca:	2200      	movs	r2, #0
 80484cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80484ce:	4a04      	ldr	r2, [pc, #16]	@ (80484e0 <prvSampleTimeNow+0x3c>)
 80484d0:	68fb      	ldr	r3, [r7, #12]
 80484d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80484d4:	68fb      	ldr	r3, [r7, #12]
    }
 80484d6:	4618      	mov	r0, r3
 80484d8:	3710      	adds	r7, #16
 80484da:	46bd      	mov	sp, r7
 80484dc:	bd80      	pop	{r7, pc}
 80484de:	bf00      	nop
 80484e0:	20000544 	.word	0x20000544

080484e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80484e4:	b580      	push	{r7, lr}
 80484e6:	b086      	sub	sp, #24
 80484e8:	af00      	add	r7, sp, #0
 80484ea:	60f8      	str	r0, [r7, #12]
 80484ec:	60b9      	str	r1, [r7, #8]
 80484ee:	607a      	str	r2, [r7, #4]
 80484f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80484f2:	2300      	movs	r3, #0
 80484f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80484f6:	68fb      	ldr	r3, [r7, #12]
 80484f8:	68ba      	ldr	r2, [r7, #8]
 80484fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80484fc:	68fb      	ldr	r3, [r7, #12]
 80484fe:	68fa      	ldr	r2, [r7, #12]
 8048500:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8048502:	68ba      	ldr	r2, [r7, #8]
 8048504:	687b      	ldr	r3, [r7, #4]
 8048506:	429a      	cmp	r2, r3
 8048508:	d812      	bhi.n	8048530 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804850a:	687a      	ldr	r2, [r7, #4]
 804850c:	683b      	ldr	r3, [r7, #0]
 804850e:	1ad2      	subs	r2, r2, r3
 8048510:	68fb      	ldr	r3, [r7, #12]
 8048512:	699b      	ldr	r3, [r3, #24]
 8048514:	429a      	cmp	r2, r3
 8048516:	d302      	bcc.n	804851e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8048518:	2301      	movs	r3, #1
 804851a:	617b      	str	r3, [r7, #20]
 804851c:	e01b      	b.n	8048556 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 804851e:	4b10      	ldr	r3, [pc, #64]	@ (8048560 <prvInsertTimerInActiveList+0x7c>)
 8048520:	681a      	ldr	r2, [r3, #0]
 8048522:	68fb      	ldr	r3, [r7, #12]
 8048524:	3304      	adds	r3, #4
 8048526:	4619      	mov	r1, r3
 8048528:	4610      	mov	r0, r2
 804852a:	f7fd fefd 	bl	8046328 <vListInsert>
 804852e:	e012      	b.n	8048556 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8048530:	687a      	ldr	r2, [r7, #4]
 8048532:	683b      	ldr	r3, [r7, #0]
 8048534:	429a      	cmp	r2, r3
 8048536:	d206      	bcs.n	8048546 <prvInsertTimerInActiveList+0x62>
 8048538:	68ba      	ldr	r2, [r7, #8]
 804853a:	683b      	ldr	r3, [r7, #0]
 804853c:	429a      	cmp	r2, r3
 804853e:	d302      	bcc.n	8048546 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8048540:	2301      	movs	r3, #1
 8048542:	617b      	str	r3, [r7, #20]
 8048544:	e007      	b.n	8048556 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8048546:	4b07      	ldr	r3, [pc, #28]	@ (8048564 <prvInsertTimerInActiveList+0x80>)
 8048548:	681a      	ldr	r2, [r3, #0]
 804854a:	68fb      	ldr	r3, [r7, #12]
 804854c:	3304      	adds	r3, #4
 804854e:	4619      	mov	r1, r3
 8048550:	4610      	mov	r0, r2
 8048552:	f7fd fee9 	bl	8046328 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8048556:	697b      	ldr	r3, [r7, #20]
    }
 8048558:	4618      	mov	r0, r3
 804855a:	3718      	adds	r7, #24
 804855c:	46bd      	mov	sp, r7
 804855e:	bd80      	pop	{r7, pc}
 8048560:	20000538 	.word	0x20000538
 8048564:	20000534 	.word	0x20000534

08048568 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8048568:	b580      	push	{r7, lr}
 804856a:	b08c      	sub	sp, #48	@ 0x30
 804856c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 804856e:	e0b2      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8048570:	68bb      	ldr	r3, [r7, #8]
 8048572:	2b00      	cmp	r3, #0
 8048574:	f2c0 80af 	blt.w	80486d6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8048578:	693b      	ldr	r3, [r7, #16]
 804857a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 804857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804857e:	695b      	ldr	r3, [r3, #20]
 8048580:	2b00      	cmp	r3, #0
 8048582:	d004      	beq.n	804858e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8048584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048586:	3304      	adds	r3, #4
 8048588:	4618      	mov	r0, r3
 804858a:	f7fd ff06 	bl	804639a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 804858e:	1d3b      	adds	r3, r7, #4
 8048590:	4618      	mov	r0, r3
 8048592:	f7ff ff87 	bl	80484a4 <prvSampleTimeNow>
 8048596:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8048598:	68bb      	ldr	r3, [r7, #8]
 804859a:	2b09      	cmp	r3, #9
 804859c:	f200 8098 	bhi.w	80486d0 <prvProcessReceivedCommands+0x168>
 80485a0:	a201      	add	r2, pc, #4	@ (adr r2, 80485a8 <prvProcessReceivedCommands+0x40>)
 80485a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80485a6:	bf00      	nop
 80485a8:	080485d1 	.word	0x080485d1
 80485ac:	080485d1 	.word	0x080485d1
 80485b0:	080485d1 	.word	0x080485d1
 80485b4:	08048647 	.word	0x08048647
 80485b8:	0804865b 	.word	0x0804865b
 80485bc:	080486a7 	.word	0x080486a7
 80485c0:	080485d1 	.word	0x080485d1
 80485c4:	080485d1 	.word	0x080485d1
 80485c8:	08048647 	.word	0x08048647
 80485cc:	0804865b 	.word	0x0804865b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80485d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80485d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80485d6:	f043 0301 	orr.w	r3, r3, #1
 80485da:	b2da      	uxtb	r2, r3
 80485dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80485de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80485e2:	68fa      	ldr	r2, [r7, #12]
 80485e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80485e6:	699b      	ldr	r3, [r3, #24]
 80485e8:	18d1      	adds	r1, r2, r3
 80485ea:	68fb      	ldr	r3, [r7, #12]
 80485ec:	6a3a      	ldr	r2, [r7, #32]
 80485ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80485f0:	f7ff ff78 	bl	80484e4 <prvInsertTimerInActiveList>
 80485f4:	4603      	mov	r3, r0
 80485f6:	2b00      	cmp	r3, #0
 80485f8:	d06c      	beq.n	80486d4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80485fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80485fc:	6a1b      	ldr	r3, [r3, #32]
 80485fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8048600:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8048602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8048608:	f003 0304 	and.w	r3, r3, #4
 804860c:	2b00      	cmp	r3, #0
 804860e:	d061      	beq.n	80486d4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8048610:	68fa      	ldr	r2, [r7, #12]
 8048612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048614:	699b      	ldr	r3, [r3, #24]
 8048616:	441a      	add	r2, r3
 8048618:	2300      	movs	r3, #0
 804861a:	9300      	str	r3, [sp, #0]
 804861c:	2300      	movs	r3, #0
 804861e:	2100      	movs	r1, #0
 8048620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8048622:	f7ff fe1d 	bl	8048260 <xTimerGenericCommand>
 8048626:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8048628:	69fb      	ldr	r3, [r7, #28]
 804862a:	2b00      	cmp	r3, #0
 804862c:	d152      	bne.n	80486d4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 804862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048632:	f383 8811 	msr	BASEPRI, r3
 8048636:	f3bf 8f6f 	isb	sy
 804863a:	f3bf 8f4f 	dsb	sy
 804863e:	61bb      	str	r3, [r7, #24]
    }
 8048640:	bf00      	nop
 8048642:	bf00      	nop
 8048644:	e7fd      	b.n	8048642 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8048646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 804864c:	f023 0301 	bic.w	r3, r3, #1
 8048650:	b2da      	uxtb	r2, r3
 8048652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8048658:	e03d      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 804865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804865c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8048660:	f043 0301 	orr.w	r3, r3, #1
 8048664:	b2da      	uxtb	r2, r3
 8048666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 804866c:	68fa      	ldr	r2, [r7, #12]
 804866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048670:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8048672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048674:	699b      	ldr	r3, [r3, #24]
 8048676:	2b00      	cmp	r3, #0
 8048678:	d10b      	bne.n	8048692 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 804867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804867e:	f383 8811 	msr	BASEPRI, r3
 8048682:	f3bf 8f6f 	isb	sy
 8048686:	f3bf 8f4f 	dsb	sy
 804868a:	617b      	str	r3, [r7, #20]
    }
 804868c:	bf00      	nop
 804868e:	bf00      	nop
 8048690:	e7fd      	b.n	804868e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8048692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048694:	699a      	ldr	r2, [r3, #24]
 8048696:	6a3b      	ldr	r3, [r7, #32]
 8048698:	18d1      	adds	r1, r2, r3
 804869a:	6a3b      	ldr	r3, [r7, #32]
 804869c:	6a3a      	ldr	r2, [r7, #32]
 804869e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80486a0:	f7ff ff20 	bl	80484e4 <prvInsertTimerInActiveList>
                        break;
 80486a4:	e017      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80486a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80486a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80486ac:	f003 0302 	and.w	r3, r3, #2
 80486b0:	2b00      	cmp	r3, #0
 80486b2:	d103      	bne.n	80486bc <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80486b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80486b6:	f000 fbfd 	bl	8048eb4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80486ba:	e00c      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80486bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80486be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80486c2:	f023 0301 	bic.w	r3, r3, #1
 80486c6:	b2da      	uxtb	r2, r3
 80486c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80486ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80486ce:	e002      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80486d0:	bf00      	nop
 80486d2:	e000      	b.n	80486d6 <prvProcessReceivedCommands+0x16e>
                        break;
 80486d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80486d6:	4b08      	ldr	r3, [pc, #32]	@ (80486f8 <prvProcessReceivedCommands+0x190>)
 80486d8:	681b      	ldr	r3, [r3, #0]
 80486da:	f107 0108 	add.w	r1, r7, #8
 80486de:	2200      	movs	r2, #0
 80486e0:	4618      	mov	r0, r3
 80486e2:	f7fe f925 	bl	8046930 <xQueueReceive>
 80486e6:	4603      	mov	r3, r0
 80486e8:	2b00      	cmp	r3, #0
 80486ea:	f47f af41 	bne.w	8048570 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80486ee:	bf00      	nop
 80486f0:	bf00      	nop
 80486f2:	3728      	adds	r7, #40	@ 0x28
 80486f4:	46bd      	mov	sp, r7
 80486f6:	bd80      	pop	{r7, pc}
 80486f8:	2000053c 	.word	0x2000053c

080486fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80486fc:	b580      	push	{r7, lr}
 80486fe:	b088      	sub	sp, #32
 8048700:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8048702:	e049      	b.n	8048798 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8048704:	4b2e      	ldr	r3, [pc, #184]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 8048706:	681b      	ldr	r3, [r3, #0]
 8048708:	68db      	ldr	r3, [r3, #12]
 804870a:	681b      	ldr	r3, [r3, #0]
 804870c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804870e:	4b2c      	ldr	r3, [pc, #176]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 8048710:	681b      	ldr	r3, [r3, #0]
 8048712:	68db      	ldr	r3, [r3, #12]
 8048714:	68db      	ldr	r3, [r3, #12]
 8048716:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8048718:	68fb      	ldr	r3, [r7, #12]
 804871a:	3304      	adds	r3, #4
 804871c:	4618      	mov	r0, r3
 804871e:	f7fd fe3c 	bl	804639a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8048722:	68fb      	ldr	r3, [r7, #12]
 8048724:	6a1b      	ldr	r3, [r3, #32]
 8048726:	68f8      	ldr	r0, [r7, #12]
 8048728:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 804872a:	68fb      	ldr	r3, [r7, #12]
 804872c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8048730:	f003 0304 	and.w	r3, r3, #4
 8048734:	2b00      	cmp	r3, #0
 8048736:	d02f      	beq.n	8048798 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8048738:	68fb      	ldr	r3, [r7, #12]
 804873a:	699b      	ldr	r3, [r3, #24]
 804873c:	693a      	ldr	r2, [r7, #16]
 804873e:	4413      	add	r3, r2
 8048740:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8048742:	68ba      	ldr	r2, [r7, #8]
 8048744:	693b      	ldr	r3, [r7, #16]
 8048746:	429a      	cmp	r2, r3
 8048748:	d90e      	bls.n	8048768 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 804874a:	68fb      	ldr	r3, [r7, #12]
 804874c:	68ba      	ldr	r2, [r7, #8]
 804874e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8048750:	68fb      	ldr	r3, [r7, #12]
 8048752:	68fa      	ldr	r2, [r7, #12]
 8048754:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8048756:	4b1a      	ldr	r3, [pc, #104]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 8048758:	681a      	ldr	r2, [r3, #0]
 804875a:	68fb      	ldr	r3, [r7, #12]
 804875c:	3304      	adds	r3, #4
 804875e:	4619      	mov	r1, r3
 8048760:	4610      	mov	r0, r2
 8048762:	f7fd fde1 	bl	8046328 <vListInsert>
 8048766:	e017      	b.n	8048798 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8048768:	2300      	movs	r3, #0
 804876a:	9300      	str	r3, [sp, #0]
 804876c:	2300      	movs	r3, #0
 804876e:	693a      	ldr	r2, [r7, #16]
 8048770:	2100      	movs	r1, #0
 8048772:	68f8      	ldr	r0, [r7, #12]
 8048774:	f7ff fd74 	bl	8048260 <xTimerGenericCommand>
 8048778:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 804877a:	687b      	ldr	r3, [r7, #4]
 804877c:	2b00      	cmp	r3, #0
 804877e:	d10b      	bne.n	8048798 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8048780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048784:	f383 8811 	msr	BASEPRI, r3
 8048788:	f3bf 8f6f 	isb	sy
 804878c:	f3bf 8f4f 	dsb	sy
 8048790:	603b      	str	r3, [r7, #0]
    }
 8048792:	bf00      	nop
 8048794:	bf00      	nop
 8048796:	e7fd      	b.n	8048794 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8048798:	4b09      	ldr	r3, [pc, #36]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 804879a:	681b      	ldr	r3, [r3, #0]
 804879c:	681b      	ldr	r3, [r3, #0]
 804879e:	2b00      	cmp	r3, #0
 80487a0:	d1b0      	bne.n	8048704 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80487a2:	4b07      	ldr	r3, [pc, #28]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 80487a4:	681b      	ldr	r3, [r3, #0]
 80487a6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80487a8:	4b06      	ldr	r3, [pc, #24]	@ (80487c4 <prvSwitchTimerLists+0xc8>)
 80487aa:	681b      	ldr	r3, [r3, #0]
 80487ac:	4a04      	ldr	r2, [pc, #16]	@ (80487c0 <prvSwitchTimerLists+0xc4>)
 80487ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80487b0:	4a04      	ldr	r2, [pc, #16]	@ (80487c4 <prvSwitchTimerLists+0xc8>)
 80487b2:	697b      	ldr	r3, [r7, #20]
 80487b4:	6013      	str	r3, [r2, #0]
    }
 80487b6:	bf00      	nop
 80487b8:	3718      	adds	r7, #24
 80487ba:	46bd      	mov	sp, r7
 80487bc:	bd80      	pop	{r7, pc}
 80487be:	bf00      	nop
 80487c0:	20000534 	.word	0x20000534
 80487c4:	20000538 	.word	0x20000538

080487c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80487c8:	b580      	push	{r7, lr}
 80487ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80487cc:	f000 f966 	bl	8048a9c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80487d0:	4b12      	ldr	r3, [pc, #72]	@ (804881c <prvCheckForValidListAndQueue+0x54>)
 80487d2:	681b      	ldr	r3, [r3, #0]
 80487d4:	2b00      	cmp	r3, #0
 80487d6:	d11d      	bne.n	8048814 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80487d8:	4811      	ldr	r0, [pc, #68]	@ (8048820 <prvCheckForValidListAndQueue+0x58>)
 80487da:	f7fd fd54 	bl	8046286 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80487de:	4811      	ldr	r0, [pc, #68]	@ (8048824 <prvCheckForValidListAndQueue+0x5c>)
 80487e0:	f7fd fd51 	bl	8046286 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80487e4:	4b10      	ldr	r3, [pc, #64]	@ (8048828 <prvCheckForValidListAndQueue+0x60>)
 80487e6:	4a0e      	ldr	r2, [pc, #56]	@ (8048820 <prvCheckForValidListAndQueue+0x58>)
 80487e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80487ea:	4b10      	ldr	r3, [pc, #64]	@ (804882c <prvCheckForValidListAndQueue+0x64>)
 80487ec:	4a0d      	ldr	r2, [pc, #52]	@ (8048824 <prvCheckForValidListAndQueue+0x5c>)
 80487ee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80487f0:	2200      	movs	r2, #0
 80487f2:	210c      	movs	r1, #12
 80487f4:	200a      	movs	r0, #10
 80487f6:	f7fd fe65 	bl	80464c4 <xQueueGenericCreate>
 80487fa:	4603      	mov	r3, r0
 80487fc:	4a07      	ldr	r2, [pc, #28]	@ (804881c <prvCheckForValidListAndQueue+0x54>)
 80487fe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8048800:	4b06      	ldr	r3, [pc, #24]	@ (804881c <prvCheckForValidListAndQueue+0x54>)
 8048802:	681b      	ldr	r3, [r3, #0]
 8048804:	2b00      	cmp	r3, #0
 8048806:	d005      	beq.n	8048814 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8048808:	4b04      	ldr	r3, [pc, #16]	@ (804881c <prvCheckForValidListAndQueue+0x54>)
 804880a:	681b      	ldr	r3, [r3, #0]
 804880c:	4908      	ldr	r1, [pc, #32]	@ (8048830 <prvCheckForValidListAndQueue+0x68>)
 804880e:	4618      	mov	r0, r3
 8048810:	f7fe fb3a 	bl	8046e88 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8048814:	f000 f974 	bl	8048b00 <vPortExitCritical>
    }
 8048818:	bf00      	nop
 804881a:	bd80      	pop	{r7, pc}
 804881c:	2000053c 	.word	0x2000053c
 8048820:	2000050c 	.word	0x2000050c
 8048824:	20000520 	.word	0x20000520
 8048828:	20000534 	.word	0x20000534
 804882c:	20000538 	.word	0x20000538
 8048830:	0804ce84 	.word	0x0804ce84

08048834 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8048834:	b480      	push	{r7}
 8048836:	b085      	sub	sp, #20
 8048838:	af00      	add	r7, sp, #0
 804883a:	60f8      	str	r0, [r7, #12]
 804883c:	60b9      	str	r1, [r7, #8]
 804883e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8048840:	68fb      	ldr	r3, [r7, #12]
 8048842:	3b04      	subs	r3, #4
 8048844:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8048846:	68fb      	ldr	r3, [r7, #12]
 8048848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 804884c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 804884e:	68fb      	ldr	r3, [r7, #12]
 8048850:	3b04      	subs	r3, #4
 8048852:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8048854:	68bb      	ldr	r3, [r7, #8]
 8048856:	f023 0201 	bic.w	r2, r3, #1
 804885a:	68fb      	ldr	r3, [r7, #12]
 804885c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 804885e:	68fb      	ldr	r3, [r7, #12]
 8048860:	3b04      	subs	r3, #4
 8048862:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8048864:	4a0c      	ldr	r2, [pc, #48]	@ (8048898 <pxPortInitialiseStack+0x64>)
 8048866:	68fb      	ldr	r3, [r7, #12]
 8048868:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 804886a:	68fb      	ldr	r3, [r7, #12]
 804886c:	3b14      	subs	r3, #20
 804886e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8048870:	687a      	ldr	r2, [r7, #4]
 8048872:	68fb      	ldr	r3, [r7, #12]
 8048874:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8048876:	68fb      	ldr	r3, [r7, #12]
 8048878:	3b04      	subs	r3, #4
 804887a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 804887c:	68fb      	ldr	r3, [r7, #12]
 804887e:	f06f 0202 	mvn.w	r2, #2
 8048882:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8048884:	68fb      	ldr	r3, [r7, #12]
 8048886:	3b20      	subs	r3, #32
 8048888:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 804888a:	68fb      	ldr	r3, [r7, #12]
}
 804888c:	4618      	mov	r0, r3
 804888e:	3714      	adds	r7, #20
 8048890:	46bd      	mov	sp, r7
 8048892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048896:	4770      	bx	lr
 8048898:	0804889d 	.word	0x0804889d

0804889c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 804889c:	b480      	push	{r7}
 804889e:	b085      	sub	sp, #20
 80488a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80488a2:	2300      	movs	r3, #0
 80488a4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80488a6:	4b13      	ldr	r3, [pc, #76]	@ (80488f4 <prvTaskExitError+0x58>)
 80488a8:	681b      	ldr	r3, [r3, #0]
 80488aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80488ae:	d00b      	beq.n	80488c8 <prvTaskExitError+0x2c>
        __asm volatile
 80488b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80488b4:	f383 8811 	msr	BASEPRI, r3
 80488b8:	f3bf 8f6f 	isb	sy
 80488bc:	f3bf 8f4f 	dsb	sy
 80488c0:	60fb      	str	r3, [r7, #12]
    }
 80488c2:	bf00      	nop
 80488c4:	bf00      	nop
 80488c6:	e7fd      	b.n	80488c4 <prvTaskExitError+0x28>
        __asm volatile
 80488c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80488cc:	f383 8811 	msr	BASEPRI, r3
 80488d0:	f3bf 8f6f 	isb	sy
 80488d4:	f3bf 8f4f 	dsb	sy
 80488d8:	60bb      	str	r3, [r7, #8]
    }
 80488da:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80488dc:	bf00      	nop
 80488de:	687b      	ldr	r3, [r7, #4]
 80488e0:	2b00      	cmp	r3, #0
 80488e2:	d0fc      	beq.n	80488de <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80488e4:	bf00      	nop
 80488e6:	bf00      	nop
 80488e8:	3714      	adds	r7, #20
 80488ea:	46bd      	mov	sp, r7
 80488ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488f0:	4770      	bx	lr
 80488f2:	bf00      	nop
 80488f4:	20000014 	.word	0x20000014
	...

08048900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8048900:	4b07      	ldr	r3, [pc, #28]	@ (8048920 <pxCurrentTCBConst2>)
 8048902:	6819      	ldr	r1, [r3, #0]
 8048904:	6808      	ldr	r0, [r1, #0]
 8048906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804890a:	f380 8809 	msr	PSP, r0
 804890e:	f3bf 8f6f 	isb	sy
 8048912:	f04f 0000 	mov.w	r0, #0
 8048916:	f380 8811 	msr	BASEPRI, r0
 804891a:	4770      	bx	lr
 804891c:	f3af 8000 	nop.w

08048920 <pxCurrentTCBConst2>:
 8048920:	20000408 	.word	0x20000408
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8048924:	bf00      	nop
 8048926:	bf00      	nop

08048928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8048928:	4808      	ldr	r0, [pc, #32]	@ (804894c <prvPortStartFirstTask+0x24>)
 804892a:	6800      	ldr	r0, [r0, #0]
 804892c:	6800      	ldr	r0, [r0, #0]
 804892e:	f380 8808 	msr	MSP, r0
 8048932:	f04f 0000 	mov.w	r0, #0
 8048936:	f380 8814 	msr	CONTROL, r0
 804893a:	b662      	cpsie	i
 804893c:	b661      	cpsie	f
 804893e:	f3bf 8f4f 	dsb	sy
 8048942:	f3bf 8f6f 	isb	sy
 8048946:	df00      	svc	0
 8048948:	bf00      	nop
 804894a:	0000      	.short	0x0000
 804894c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8048950:	bf00      	nop
 8048952:	bf00      	nop

08048954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8048954:	b580      	push	{r7, lr}
 8048956:	b086      	sub	sp, #24
 8048958:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 804895a:	4b47      	ldr	r3, [pc, #284]	@ (8048a78 <xPortStartScheduler+0x124>)
 804895c:	681b      	ldr	r3, [r3, #0]
 804895e:	4a47      	ldr	r2, [pc, #284]	@ (8048a7c <xPortStartScheduler+0x128>)
 8048960:	4293      	cmp	r3, r2
 8048962:	d10b      	bne.n	804897c <xPortStartScheduler+0x28>
        __asm volatile
 8048964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048968:	f383 8811 	msr	BASEPRI, r3
 804896c:	f3bf 8f6f 	isb	sy
 8048970:	f3bf 8f4f 	dsb	sy
 8048974:	613b      	str	r3, [r7, #16]
    }
 8048976:	bf00      	nop
 8048978:	bf00      	nop
 804897a:	e7fd      	b.n	8048978 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 804897c:	4b3e      	ldr	r3, [pc, #248]	@ (8048a78 <xPortStartScheduler+0x124>)
 804897e:	681b      	ldr	r3, [r3, #0]
 8048980:	4a3f      	ldr	r2, [pc, #252]	@ (8048a80 <xPortStartScheduler+0x12c>)
 8048982:	4293      	cmp	r3, r2
 8048984:	d10b      	bne.n	804899e <xPortStartScheduler+0x4a>
        __asm volatile
 8048986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804898a:	f383 8811 	msr	BASEPRI, r3
 804898e:	f3bf 8f6f 	isb	sy
 8048992:	f3bf 8f4f 	dsb	sy
 8048996:	60fb      	str	r3, [r7, #12]
    }
 8048998:	bf00      	nop
 804899a:	bf00      	nop
 804899c:	e7fd      	b.n	804899a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 804899e:	4b39      	ldr	r3, [pc, #228]	@ (8048a84 <xPortStartScheduler+0x130>)
 80489a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80489a2:	697b      	ldr	r3, [r7, #20]
 80489a4:	781b      	ldrb	r3, [r3, #0]
 80489a6:	b2db      	uxtb	r3, r3
 80489a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80489aa:	697b      	ldr	r3, [r7, #20]
 80489ac:	22ff      	movs	r2, #255	@ 0xff
 80489ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80489b0:	697b      	ldr	r3, [r7, #20]
 80489b2:	781b      	ldrb	r3, [r3, #0]
 80489b4:	b2db      	uxtb	r3, r3
 80489b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80489b8:	78fb      	ldrb	r3, [r7, #3]
 80489ba:	b2db      	uxtb	r3, r3
 80489bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80489c0:	b2da      	uxtb	r2, r3
 80489c2:	4b31      	ldr	r3, [pc, #196]	@ (8048a88 <xPortStartScheduler+0x134>)
 80489c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80489c6:	4b31      	ldr	r3, [pc, #196]	@ (8048a8c <xPortStartScheduler+0x138>)
 80489c8:	2207      	movs	r2, #7
 80489ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80489cc:	e009      	b.n	80489e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80489ce:	4b2f      	ldr	r3, [pc, #188]	@ (8048a8c <xPortStartScheduler+0x138>)
 80489d0:	681b      	ldr	r3, [r3, #0]
 80489d2:	3b01      	subs	r3, #1
 80489d4:	4a2d      	ldr	r2, [pc, #180]	@ (8048a8c <xPortStartScheduler+0x138>)
 80489d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80489d8:	78fb      	ldrb	r3, [r7, #3]
 80489da:	b2db      	uxtb	r3, r3
 80489dc:	005b      	lsls	r3, r3, #1
 80489de:	b2db      	uxtb	r3, r3
 80489e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80489e2:	78fb      	ldrb	r3, [r7, #3]
 80489e4:	b2db      	uxtb	r3, r3
 80489e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80489ea:	2b80      	cmp	r3, #128	@ 0x80
 80489ec:	d0ef      	beq.n	80489ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80489ee:	4b27      	ldr	r3, [pc, #156]	@ (8048a8c <xPortStartScheduler+0x138>)
 80489f0:	681b      	ldr	r3, [r3, #0]
 80489f2:	f1c3 0307 	rsb	r3, r3, #7
 80489f6:	2b04      	cmp	r3, #4
 80489f8:	d00b      	beq.n	8048a12 <xPortStartScheduler+0xbe>
        __asm volatile
 80489fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80489fe:	f383 8811 	msr	BASEPRI, r3
 8048a02:	f3bf 8f6f 	isb	sy
 8048a06:	f3bf 8f4f 	dsb	sy
 8048a0a:	60bb      	str	r3, [r7, #8]
    }
 8048a0c:	bf00      	nop
 8048a0e:	bf00      	nop
 8048a10:	e7fd      	b.n	8048a0e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8048a12:	4b1e      	ldr	r3, [pc, #120]	@ (8048a8c <xPortStartScheduler+0x138>)
 8048a14:	681b      	ldr	r3, [r3, #0]
 8048a16:	021b      	lsls	r3, r3, #8
 8048a18:	4a1c      	ldr	r2, [pc, #112]	@ (8048a8c <xPortStartScheduler+0x138>)
 8048a1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8048a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8048a8c <xPortStartScheduler+0x138>)
 8048a1e:	681b      	ldr	r3, [r3, #0]
 8048a20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8048a24:	4a19      	ldr	r2, [pc, #100]	@ (8048a8c <xPortStartScheduler+0x138>)
 8048a26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8048a28:	687b      	ldr	r3, [r7, #4]
 8048a2a:	b2da      	uxtb	r2, r3
 8048a2c:	697b      	ldr	r3, [r7, #20]
 8048a2e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8048a30:	4b17      	ldr	r3, [pc, #92]	@ (8048a90 <xPortStartScheduler+0x13c>)
 8048a32:	681b      	ldr	r3, [r3, #0]
 8048a34:	4a16      	ldr	r2, [pc, #88]	@ (8048a90 <xPortStartScheduler+0x13c>)
 8048a36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8048a3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8048a3c:	4b14      	ldr	r3, [pc, #80]	@ (8048a90 <xPortStartScheduler+0x13c>)
 8048a3e:	681b      	ldr	r3, [r3, #0]
 8048a40:	4a13      	ldr	r2, [pc, #76]	@ (8048a90 <xPortStartScheduler+0x13c>)
 8048a42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8048a46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8048a48:	f000 f8e0 	bl	8048c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8048a4c:	4b11      	ldr	r3, [pc, #68]	@ (8048a94 <xPortStartScheduler+0x140>)
 8048a4e:	2200      	movs	r2, #0
 8048a50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8048a52:	f000 f8ff 	bl	8048c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8048a56:	4b10      	ldr	r3, [pc, #64]	@ (8048a98 <xPortStartScheduler+0x144>)
 8048a58:	681b      	ldr	r3, [r3, #0]
 8048a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8048a98 <xPortStartScheduler+0x144>)
 8048a5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8048a60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8048a62:	f7ff ff61 	bl	8048928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8048a66:	f7fe fdb1 	bl	80475cc <vTaskSwitchContext>
    prvTaskExitError();
 8048a6a:	f7ff ff17 	bl	804889c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8048a6e:	2300      	movs	r3, #0
}
 8048a70:	4618      	mov	r0, r3
 8048a72:	3718      	adds	r7, #24
 8048a74:	46bd      	mov	sp, r7
 8048a76:	bd80      	pop	{r7, pc}
 8048a78:	e000ed00 	.word	0xe000ed00
 8048a7c:	410fc271 	.word	0x410fc271
 8048a80:	410fc270 	.word	0x410fc270
 8048a84:	e000e400 	.word	0xe000e400
 8048a88:	20000548 	.word	0x20000548
 8048a8c:	2000054c 	.word	0x2000054c
 8048a90:	e000ed20 	.word	0xe000ed20
 8048a94:	20000014 	.word	0x20000014
 8048a98:	e000ef34 	.word	0xe000ef34

08048a9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8048a9c:	b480      	push	{r7}
 8048a9e:	b083      	sub	sp, #12
 8048aa0:	af00      	add	r7, sp, #0
        __asm volatile
 8048aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048aa6:	f383 8811 	msr	BASEPRI, r3
 8048aaa:	f3bf 8f6f 	isb	sy
 8048aae:	f3bf 8f4f 	dsb	sy
 8048ab2:	607b      	str	r3, [r7, #4]
    }
 8048ab4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8048ab6:	4b10      	ldr	r3, [pc, #64]	@ (8048af8 <vPortEnterCritical+0x5c>)
 8048ab8:	681b      	ldr	r3, [r3, #0]
 8048aba:	3301      	adds	r3, #1
 8048abc:	4a0e      	ldr	r2, [pc, #56]	@ (8048af8 <vPortEnterCritical+0x5c>)
 8048abe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8048ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8048af8 <vPortEnterCritical+0x5c>)
 8048ac2:	681b      	ldr	r3, [r3, #0]
 8048ac4:	2b01      	cmp	r3, #1
 8048ac6:	d110      	bne.n	8048aea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8048ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8048afc <vPortEnterCritical+0x60>)
 8048aca:	681b      	ldr	r3, [r3, #0]
 8048acc:	b2db      	uxtb	r3, r3
 8048ace:	2b00      	cmp	r3, #0
 8048ad0:	d00b      	beq.n	8048aea <vPortEnterCritical+0x4e>
        __asm volatile
 8048ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048ad6:	f383 8811 	msr	BASEPRI, r3
 8048ada:	f3bf 8f6f 	isb	sy
 8048ade:	f3bf 8f4f 	dsb	sy
 8048ae2:	603b      	str	r3, [r7, #0]
    }
 8048ae4:	bf00      	nop
 8048ae6:	bf00      	nop
 8048ae8:	e7fd      	b.n	8048ae6 <vPortEnterCritical+0x4a>
    }
}
 8048aea:	bf00      	nop
 8048aec:	370c      	adds	r7, #12
 8048aee:	46bd      	mov	sp, r7
 8048af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048af4:	4770      	bx	lr
 8048af6:	bf00      	nop
 8048af8:	20000014 	.word	0x20000014
 8048afc:	e000ed04 	.word	0xe000ed04

08048b00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8048b00:	b480      	push	{r7}
 8048b02:	b083      	sub	sp, #12
 8048b04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8048b06:	4b12      	ldr	r3, [pc, #72]	@ (8048b50 <vPortExitCritical+0x50>)
 8048b08:	681b      	ldr	r3, [r3, #0]
 8048b0a:	2b00      	cmp	r3, #0
 8048b0c:	d10b      	bne.n	8048b26 <vPortExitCritical+0x26>
        __asm volatile
 8048b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048b12:	f383 8811 	msr	BASEPRI, r3
 8048b16:	f3bf 8f6f 	isb	sy
 8048b1a:	f3bf 8f4f 	dsb	sy
 8048b1e:	607b      	str	r3, [r7, #4]
    }
 8048b20:	bf00      	nop
 8048b22:	bf00      	nop
 8048b24:	e7fd      	b.n	8048b22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8048b26:	4b0a      	ldr	r3, [pc, #40]	@ (8048b50 <vPortExitCritical+0x50>)
 8048b28:	681b      	ldr	r3, [r3, #0]
 8048b2a:	3b01      	subs	r3, #1
 8048b2c:	4a08      	ldr	r2, [pc, #32]	@ (8048b50 <vPortExitCritical+0x50>)
 8048b2e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8048b30:	4b07      	ldr	r3, [pc, #28]	@ (8048b50 <vPortExitCritical+0x50>)
 8048b32:	681b      	ldr	r3, [r3, #0]
 8048b34:	2b00      	cmp	r3, #0
 8048b36:	d105      	bne.n	8048b44 <vPortExitCritical+0x44>
 8048b38:	2300      	movs	r3, #0
 8048b3a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8048b3c:	683b      	ldr	r3, [r7, #0]
 8048b3e:	f383 8811 	msr	BASEPRI, r3
    }
 8048b42:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8048b44:	bf00      	nop
 8048b46:	370c      	adds	r7, #12
 8048b48:	46bd      	mov	sp, r7
 8048b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b4e:	4770      	bx	lr
 8048b50:	20000014 	.word	0x20000014
	...

08048b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8048b60:	f3ef 8009 	mrs	r0, PSP
 8048b64:	f3bf 8f6f 	isb	sy
 8048b68:	4b15      	ldr	r3, [pc, #84]	@ (8048bc0 <pxCurrentTCBConst>)
 8048b6a:	681a      	ldr	r2, [r3, #0]
 8048b6c:	f01e 0f10 	tst.w	lr, #16
 8048b70:	bf08      	it	eq
 8048b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8048b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048b7a:	6010      	str	r0, [r2, #0]
 8048b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8048b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8048b84:	f380 8811 	msr	BASEPRI, r0
 8048b88:	f3bf 8f4f 	dsb	sy
 8048b8c:	f3bf 8f6f 	isb	sy
 8048b90:	f7fe fd1c 	bl	80475cc <vTaskSwitchContext>
 8048b94:	f04f 0000 	mov.w	r0, #0
 8048b98:	f380 8811 	msr	BASEPRI, r0
 8048b9c:	bc09      	pop	{r0, r3}
 8048b9e:	6819      	ldr	r1, [r3, #0]
 8048ba0:	6808      	ldr	r0, [r1, #0]
 8048ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048ba6:	f01e 0f10 	tst.w	lr, #16
 8048baa:	bf08      	it	eq
 8048bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8048bb0:	f380 8809 	msr	PSP, r0
 8048bb4:	f3bf 8f6f 	isb	sy
 8048bb8:	4770      	bx	lr
 8048bba:	bf00      	nop
 8048bbc:	f3af 8000 	nop.w

08048bc0 <pxCurrentTCBConst>:
 8048bc0:	20000408 	.word	0x20000408
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8048bc4:	bf00      	nop
 8048bc6:	bf00      	nop

08048bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8048bc8:	b580      	push	{r7, lr}
 8048bca:	b082      	sub	sp, #8
 8048bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8048bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048bd2:	f383 8811 	msr	BASEPRI, r3
 8048bd6:	f3bf 8f6f 	isb	sy
 8048bda:	f3bf 8f4f 	dsb	sy
 8048bde:	607b      	str	r3, [r7, #4]
    }
 8048be0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8048be2:	f7fe fc39 	bl	8047458 <xTaskIncrementTick>
 8048be6:	4603      	mov	r3, r0
 8048be8:	2b00      	cmp	r3, #0
 8048bea:	d003      	beq.n	8048bf4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8048bec:	4b06      	ldr	r3, [pc, #24]	@ (8048c08 <SysTick_Handler+0x40>)
 8048bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8048bf2:	601a      	str	r2, [r3, #0]
 8048bf4:	2300      	movs	r3, #0
 8048bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8048bf8:	683b      	ldr	r3, [r7, #0]
 8048bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8048bfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8048c00:	bf00      	nop
 8048c02:	3708      	adds	r7, #8
 8048c04:	46bd      	mov	sp, r7
 8048c06:	bd80      	pop	{r7, pc}
 8048c08:	e000ed04 	.word	0xe000ed04

08048c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8048c0c:	b480      	push	{r7}
 8048c0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8048c10:	4b0b      	ldr	r3, [pc, #44]	@ (8048c40 <vPortSetupTimerInterrupt+0x34>)
 8048c12:	2200      	movs	r2, #0
 8048c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8048c16:	4b0b      	ldr	r3, [pc, #44]	@ (8048c44 <vPortSetupTimerInterrupt+0x38>)
 8048c18:	2200      	movs	r2, #0
 8048c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8048c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8048c48 <vPortSetupTimerInterrupt+0x3c>)
 8048c1e:	681b      	ldr	r3, [r3, #0]
 8048c20:	4a0a      	ldr	r2, [pc, #40]	@ (8048c4c <vPortSetupTimerInterrupt+0x40>)
 8048c22:	fba2 2303 	umull	r2, r3, r2, r3
 8048c26:	099b      	lsrs	r3, r3, #6
 8048c28:	4a09      	ldr	r2, [pc, #36]	@ (8048c50 <vPortSetupTimerInterrupt+0x44>)
 8048c2a:	3b01      	subs	r3, #1
 8048c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8048c2e:	4b04      	ldr	r3, [pc, #16]	@ (8048c40 <vPortSetupTimerInterrupt+0x34>)
 8048c30:	2207      	movs	r2, #7
 8048c32:	601a      	str	r2, [r3, #0]
}
 8048c34:	bf00      	nop
 8048c36:	46bd      	mov	sp, r7
 8048c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c3c:	4770      	bx	lr
 8048c3e:	bf00      	nop
 8048c40:	e000e010 	.word	0xe000e010
 8048c44:	e000e018 	.word	0xe000e018
 8048c48:	20000000 	.word	0x20000000
 8048c4c:	10624dd3 	.word	0x10624dd3
 8048c50:	e000e014 	.word	0xe000e014

08048c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8048c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8048c64 <vPortEnableVFP+0x10>
 8048c58:	6801      	ldr	r1, [r0, #0]
 8048c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8048c5e:	6001      	str	r1, [r0, #0]
 8048c60:	4770      	bx	lr
 8048c62:	0000      	.short	0x0000
 8048c64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8048c68:	bf00      	nop
 8048c6a:	bf00      	nop

08048c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8048c6c:	b480      	push	{r7}
 8048c6e:	b085      	sub	sp, #20
 8048c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8048c72:	f3ef 8305 	mrs	r3, IPSR
 8048c76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8048c78:	68fb      	ldr	r3, [r7, #12]
 8048c7a:	2b0f      	cmp	r3, #15
 8048c7c:	d915      	bls.n	8048caa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8048c7e:	4a18      	ldr	r2, [pc, #96]	@ (8048ce0 <vPortValidateInterruptPriority+0x74>)
 8048c80:	68fb      	ldr	r3, [r7, #12]
 8048c82:	4413      	add	r3, r2
 8048c84:	781b      	ldrb	r3, [r3, #0]
 8048c86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8048c88:	4b16      	ldr	r3, [pc, #88]	@ (8048ce4 <vPortValidateInterruptPriority+0x78>)
 8048c8a:	781b      	ldrb	r3, [r3, #0]
 8048c8c:	7afa      	ldrb	r2, [r7, #11]
 8048c8e:	429a      	cmp	r2, r3
 8048c90:	d20b      	bcs.n	8048caa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8048c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048c96:	f383 8811 	msr	BASEPRI, r3
 8048c9a:	f3bf 8f6f 	isb	sy
 8048c9e:	f3bf 8f4f 	dsb	sy
 8048ca2:	607b      	str	r3, [r7, #4]
    }
 8048ca4:	bf00      	nop
 8048ca6:	bf00      	nop
 8048ca8:	e7fd      	b.n	8048ca6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8048caa:	4b0f      	ldr	r3, [pc, #60]	@ (8048ce8 <vPortValidateInterruptPriority+0x7c>)
 8048cac:	681b      	ldr	r3, [r3, #0]
 8048cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8048cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8048cec <vPortValidateInterruptPriority+0x80>)
 8048cb4:	681b      	ldr	r3, [r3, #0]
 8048cb6:	429a      	cmp	r2, r3
 8048cb8:	d90b      	bls.n	8048cd2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8048cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048cbe:	f383 8811 	msr	BASEPRI, r3
 8048cc2:	f3bf 8f6f 	isb	sy
 8048cc6:	f3bf 8f4f 	dsb	sy
 8048cca:	603b      	str	r3, [r7, #0]
    }
 8048ccc:	bf00      	nop
 8048cce:	bf00      	nop
 8048cd0:	e7fd      	b.n	8048cce <vPortValidateInterruptPriority+0x62>
    }
 8048cd2:	bf00      	nop
 8048cd4:	3714      	adds	r7, #20
 8048cd6:	46bd      	mov	sp, r7
 8048cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cdc:	4770      	bx	lr
 8048cde:	bf00      	nop
 8048ce0:	e000e3f0 	.word	0xe000e3f0
 8048ce4:	20000548 	.word	0x20000548
 8048ce8:	e000ed0c 	.word	0xe000ed0c
 8048cec:	2000054c 	.word	0x2000054c

08048cf0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8048cf0:	b580      	push	{r7, lr}
 8048cf2:	b08a      	sub	sp, #40	@ 0x28
 8048cf4:	af00      	add	r7, sp, #0
 8048cf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8048cf8:	2300      	movs	r3, #0
 8048cfa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8048cfc:	f7fe faf0 	bl	80472e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8048d00:	4b66      	ldr	r3, [pc, #408]	@ (8048e9c <pvPortMalloc+0x1ac>)
 8048d02:	681b      	ldr	r3, [r3, #0]
 8048d04:	2b00      	cmp	r3, #0
 8048d06:	d101      	bne.n	8048d0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8048d08:	f000 f938 	bl	8048f7c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8048d0c:	4b64      	ldr	r3, [pc, #400]	@ (8048ea0 <pvPortMalloc+0x1b0>)
 8048d0e:	681a      	ldr	r2, [r3, #0]
 8048d10:	687b      	ldr	r3, [r7, #4]
 8048d12:	4013      	ands	r3, r2
 8048d14:	2b00      	cmp	r3, #0
 8048d16:	f040 80a9 	bne.w	8048e6c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8048d1a:	687b      	ldr	r3, [r7, #4]
 8048d1c:	2b00      	cmp	r3, #0
 8048d1e:	d02e      	beq.n	8048d7e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8048d20:	2208      	movs	r2, #8
 8048d22:	687b      	ldr	r3, [r7, #4]
 8048d24:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8048d26:	687a      	ldr	r2, [r7, #4]
 8048d28:	429a      	cmp	r2, r3
 8048d2a:	d228      	bcs.n	8048d7e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8048d2c:	2208      	movs	r2, #8
 8048d2e:	687b      	ldr	r3, [r7, #4]
 8048d30:	4413      	add	r3, r2
 8048d32:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8048d34:	687b      	ldr	r3, [r7, #4]
 8048d36:	f003 0307 	and.w	r3, r3, #7
 8048d3a:	2b00      	cmp	r3, #0
 8048d3c:	d022      	beq.n	8048d84 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8048d3e:	687b      	ldr	r3, [r7, #4]
 8048d40:	f023 0307 	bic.w	r3, r3, #7
 8048d44:	3308      	adds	r3, #8
 8048d46:	687a      	ldr	r2, [r7, #4]
 8048d48:	429a      	cmp	r2, r3
 8048d4a:	d215      	bcs.n	8048d78 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8048d4c:	687b      	ldr	r3, [r7, #4]
 8048d4e:	f023 0307 	bic.w	r3, r3, #7
 8048d52:	3308      	adds	r3, #8
 8048d54:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8048d56:	687b      	ldr	r3, [r7, #4]
 8048d58:	f003 0307 	and.w	r3, r3, #7
 8048d5c:	2b00      	cmp	r3, #0
 8048d5e:	d011      	beq.n	8048d84 <pvPortMalloc+0x94>
        __asm volatile
 8048d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048d64:	f383 8811 	msr	BASEPRI, r3
 8048d68:	f3bf 8f6f 	isb	sy
 8048d6c:	f3bf 8f4f 	dsb	sy
 8048d70:	617b      	str	r3, [r7, #20]
    }
 8048d72:	bf00      	nop
 8048d74:	bf00      	nop
 8048d76:	e7fd      	b.n	8048d74 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8048d78:	2300      	movs	r3, #0
 8048d7a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8048d7c:	e002      	b.n	8048d84 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8048d7e:	2300      	movs	r3, #0
 8048d80:	607b      	str	r3, [r7, #4]
 8048d82:	e000      	b.n	8048d86 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8048d84:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8048d86:	687b      	ldr	r3, [r7, #4]
 8048d88:	2b00      	cmp	r3, #0
 8048d8a:	d06f      	beq.n	8048e6c <pvPortMalloc+0x17c>
 8048d8c:	4b45      	ldr	r3, [pc, #276]	@ (8048ea4 <pvPortMalloc+0x1b4>)
 8048d8e:	681b      	ldr	r3, [r3, #0]
 8048d90:	687a      	ldr	r2, [r7, #4]
 8048d92:	429a      	cmp	r2, r3
 8048d94:	d86a      	bhi.n	8048e6c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8048d96:	4b44      	ldr	r3, [pc, #272]	@ (8048ea8 <pvPortMalloc+0x1b8>)
 8048d98:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8048d9a:	4b43      	ldr	r3, [pc, #268]	@ (8048ea8 <pvPortMalloc+0x1b8>)
 8048d9c:	681b      	ldr	r3, [r3, #0]
 8048d9e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8048da0:	e004      	b.n	8048dac <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8048da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048da4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8048da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048da8:	681b      	ldr	r3, [r3, #0]
 8048daa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8048dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048dae:	685b      	ldr	r3, [r3, #4]
 8048db0:	687a      	ldr	r2, [r7, #4]
 8048db2:	429a      	cmp	r2, r3
 8048db4:	d903      	bls.n	8048dbe <pvPortMalloc+0xce>
 8048db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048db8:	681b      	ldr	r3, [r3, #0]
 8048dba:	2b00      	cmp	r3, #0
 8048dbc:	d1f1      	bne.n	8048da2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8048dbe:	4b37      	ldr	r3, [pc, #220]	@ (8048e9c <pvPortMalloc+0x1ac>)
 8048dc0:	681b      	ldr	r3, [r3, #0]
 8048dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8048dc4:	429a      	cmp	r2, r3
 8048dc6:	d051      	beq.n	8048e6c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8048dc8:	6a3b      	ldr	r3, [r7, #32]
 8048dca:	681b      	ldr	r3, [r3, #0]
 8048dcc:	2208      	movs	r2, #8
 8048dce:	4413      	add	r3, r2
 8048dd0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8048dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048dd4:	681a      	ldr	r2, [r3, #0]
 8048dd6:	6a3b      	ldr	r3, [r7, #32]
 8048dd8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8048dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048ddc:	685a      	ldr	r2, [r3, #4]
 8048dde:	687b      	ldr	r3, [r7, #4]
 8048de0:	1ad2      	subs	r2, r2, r3
 8048de2:	2308      	movs	r3, #8
 8048de4:	005b      	lsls	r3, r3, #1
 8048de6:	429a      	cmp	r2, r3
 8048de8:	d920      	bls.n	8048e2c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8048dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8048dec:	687b      	ldr	r3, [r7, #4]
 8048dee:	4413      	add	r3, r2
 8048df0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8048df2:	69bb      	ldr	r3, [r7, #24]
 8048df4:	f003 0307 	and.w	r3, r3, #7
 8048df8:	2b00      	cmp	r3, #0
 8048dfa:	d00b      	beq.n	8048e14 <pvPortMalloc+0x124>
        __asm volatile
 8048dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048e00:	f383 8811 	msr	BASEPRI, r3
 8048e04:	f3bf 8f6f 	isb	sy
 8048e08:	f3bf 8f4f 	dsb	sy
 8048e0c:	613b      	str	r3, [r7, #16]
    }
 8048e0e:	bf00      	nop
 8048e10:	bf00      	nop
 8048e12:	e7fd      	b.n	8048e10 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8048e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e16:	685a      	ldr	r2, [r3, #4]
 8048e18:	687b      	ldr	r3, [r7, #4]
 8048e1a:	1ad2      	subs	r2, r2, r3
 8048e1c:	69bb      	ldr	r3, [r7, #24]
 8048e1e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8048e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e22:	687a      	ldr	r2, [r7, #4]
 8048e24:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8048e26:	69b8      	ldr	r0, [r7, #24]
 8048e28:	f000 f90a 	bl	8049040 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8048e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8048ea4 <pvPortMalloc+0x1b4>)
 8048e2e:	681a      	ldr	r2, [r3, #0]
 8048e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e32:	685b      	ldr	r3, [r3, #4]
 8048e34:	1ad3      	subs	r3, r2, r3
 8048e36:	4a1b      	ldr	r2, [pc, #108]	@ (8048ea4 <pvPortMalloc+0x1b4>)
 8048e38:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8048e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8048ea4 <pvPortMalloc+0x1b4>)
 8048e3c:	681a      	ldr	r2, [r3, #0]
 8048e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8048eac <pvPortMalloc+0x1bc>)
 8048e40:	681b      	ldr	r3, [r3, #0]
 8048e42:	429a      	cmp	r2, r3
 8048e44:	d203      	bcs.n	8048e4e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8048e46:	4b17      	ldr	r3, [pc, #92]	@ (8048ea4 <pvPortMalloc+0x1b4>)
 8048e48:	681b      	ldr	r3, [r3, #0]
 8048e4a:	4a18      	ldr	r2, [pc, #96]	@ (8048eac <pvPortMalloc+0x1bc>)
 8048e4c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8048e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e50:	685a      	ldr	r2, [r3, #4]
 8048e52:	4b13      	ldr	r3, [pc, #76]	@ (8048ea0 <pvPortMalloc+0x1b0>)
 8048e54:	681b      	ldr	r3, [r3, #0]
 8048e56:	431a      	orrs	r2, r3
 8048e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8048e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048e5e:	2200      	movs	r2, #0
 8048e60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8048e62:	4b13      	ldr	r3, [pc, #76]	@ (8048eb0 <pvPortMalloc+0x1c0>)
 8048e64:	681b      	ldr	r3, [r3, #0]
 8048e66:	3301      	adds	r3, #1
 8048e68:	4a11      	ldr	r2, [pc, #68]	@ (8048eb0 <pvPortMalloc+0x1c0>)
 8048e6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8048e6c:	f7fe fa46 	bl	80472fc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8048e70:	69fb      	ldr	r3, [r7, #28]
 8048e72:	f003 0307 	and.w	r3, r3, #7
 8048e76:	2b00      	cmp	r3, #0
 8048e78:	d00b      	beq.n	8048e92 <pvPortMalloc+0x1a2>
        __asm volatile
 8048e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048e7e:	f383 8811 	msr	BASEPRI, r3
 8048e82:	f3bf 8f6f 	isb	sy
 8048e86:	f3bf 8f4f 	dsb	sy
 8048e8a:	60fb      	str	r3, [r7, #12]
    }
 8048e8c:	bf00      	nop
 8048e8e:	bf00      	nop
 8048e90:	e7fd      	b.n	8048e8e <pvPortMalloc+0x19e>
    return pvReturn;
 8048e92:	69fb      	ldr	r3, [r7, #28]
}
 8048e94:	4618      	mov	r0, r3
 8048e96:	3728      	adds	r7, #40	@ 0x28
 8048e98:	46bd      	mov	sp, r7
 8048e9a:	bd80      	pop	{r7, pc}
 8048e9c:	20013158 	.word	0x20013158
 8048ea0:	2001316c 	.word	0x2001316c
 8048ea4:	2001315c 	.word	0x2001315c
 8048ea8:	20013150 	.word	0x20013150
 8048eac:	20013160 	.word	0x20013160
 8048eb0:	20013164 	.word	0x20013164

08048eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8048eb4:	b580      	push	{r7, lr}
 8048eb6:	b086      	sub	sp, #24
 8048eb8:	af00      	add	r7, sp, #0
 8048eba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8048ebc:	687b      	ldr	r3, [r7, #4]
 8048ebe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8048ec0:	687b      	ldr	r3, [r7, #4]
 8048ec2:	2b00      	cmp	r3, #0
 8048ec4:	d04f      	beq.n	8048f66 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8048ec6:	2308      	movs	r3, #8
 8048ec8:	425b      	negs	r3, r3
 8048eca:	697a      	ldr	r2, [r7, #20]
 8048ecc:	4413      	add	r3, r2
 8048ece:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8048ed0:	697b      	ldr	r3, [r7, #20]
 8048ed2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8048ed4:	693b      	ldr	r3, [r7, #16]
 8048ed6:	685a      	ldr	r2, [r3, #4]
 8048ed8:	4b25      	ldr	r3, [pc, #148]	@ (8048f70 <vPortFree+0xbc>)
 8048eda:	681b      	ldr	r3, [r3, #0]
 8048edc:	4013      	ands	r3, r2
 8048ede:	2b00      	cmp	r3, #0
 8048ee0:	d10b      	bne.n	8048efa <vPortFree+0x46>
        __asm volatile
 8048ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048ee6:	f383 8811 	msr	BASEPRI, r3
 8048eea:	f3bf 8f6f 	isb	sy
 8048eee:	f3bf 8f4f 	dsb	sy
 8048ef2:	60fb      	str	r3, [r7, #12]
    }
 8048ef4:	bf00      	nop
 8048ef6:	bf00      	nop
 8048ef8:	e7fd      	b.n	8048ef6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8048efa:	693b      	ldr	r3, [r7, #16]
 8048efc:	681b      	ldr	r3, [r3, #0]
 8048efe:	2b00      	cmp	r3, #0
 8048f00:	d00b      	beq.n	8048f1a <vPortFree+0x66>
        __asm volatile
 8048f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8048f06:	f383 8811 	msr	BASEPRI, r3
 8048f0a:	f3bf 8f6f 	isb	sy
 8048f0e:	f3bf 8f4f 	dsb	sy
 8048f12:	60bb      	str	r3, [r7, #8]
    }
 8048f14:	bf00      	nop
 8048f16:	bf00      	nop
 8048f18:	e7fd      	b.n	8048f16 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8048f1a:	693b      	ldr	r3, [r7, #16]
 8048f1c:	685a      	ldr	r2, [r3, #4]
 8048f1e:	4b14      	ldr	r3, [pc, #80]	@ (8048f70 <vPortFree+0xbc>)
 8048f20:	681b      	ldr	r3, [r3, #0]
 8048f22:	4013      	ands	r3, r2
 8048f24:	2b00      	cmp	r3, #0
 8048f26:	d01e      	beq.n	8048f66 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8048f28:	693b      	ldr	r3, [r7, #16]
 8048f2a:	681b      	ldr	r3, [r3, #0]
 8048f2c:	2b00      	cmp	r3, #0
 8048f2e:	d11a      	bne.n	8048f66 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8048f30:	693b      	ldr	r3, [r7, #16]
 8048f32:	685a      	ldr	r2, [r3, #4]
 8048f34:	4b0e      	ldr	r3, [pc, #56]	@ (8048f70 <vPortFree+0xbc>)
 8048f36:	681b      	ldr	r3, [r3, #0]
 8048f38:	43db      	mvns	r3, r3
 8048f3a:	401a      	ands	r2, r3
 8048f3c:	693b      	ldr	r3, [r7, #16]
 8048f3e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8048f40:	f7fe f9ce 	bl	80472e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8048f44:	693b      	ldr	r3, [r7, #16]
 8048f46:	685a      	ldr	r2, [r3, #4]
 8048f48:	4b0a      	ldr	r3, [pc, #40]	@ (8048f74 <vPortFree+0xc0>)
 8048f4a:	681b      	ldr	r3, [r3, #0]
 8048f4c:	4413      	add	r3, r2
 8048f4e:	4a09      	ldr	r2, [pc, #36]	@ (8048f74 <vPortFree+0xc0>)
 8048f50:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8048f52:	6938      	ldr	r0, [r7, #16]
 8048f54:	f000 f874 	bl	8049040 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8048f58:	4b07      	ldr	r3, [pc, #28]	@ (8048f78 <vPortFree+0xc4>)
 8048f5a:	681b      	ldr	r3, [r3, #0]
 8048f5c:	3301      	adds	r3, #1
 8048f5e:	4a06      	ldr	r2, [pc, #24]	@ (8048f78 <vPortFree+0xc4>)
 8048f60:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8048f62:	f7fe f9cb 	bl	80472fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8048f66:	bf00      	nop
 8048f68:	3718      	adds	r7, #24
 8048f6a:	46bd      	mov	sp, r7
 8048f6c:	bd80      	pop	{r7, pc}
 8048f6e:	bf00      	nop
 8048f70:	2001316c 	.word	0x2001316c
 8048f74:	2001315c 	.word	0x2001315c
 8048f78:	20013168 	.word	0x20013168

08048f7c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8048f7c:	b480      	push	{r7}
 8048f7e:	b085      	sub	sp, #20
 8048f80:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8048f82:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8048f86:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8048f88:	4b27      	ldr	r3, [pc, #156]	@ (8049028 <prvHeapInit+0xac>)
 8048f8a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8048f8c:	68fb      	ldr	r3, [r7, #12]
 8048f8e:	f003 0307 	and.w	r3, r3, #7
 8048f92:	2b00      	cmp	r3, #0
 8048f94:	d00c      	beq.n	8048fb0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8048f96:	68fb      	ldr	r3, [r7, #12]
 8048f98:	3307      	adds	r3, #7
 8048f9a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8048f9c:	68fb      	ldr	r3, [r7, #12]
 8048f9e:	f023 0307 	bic.w	r3, r3, #7
 8048fa2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8048fa4:	68ba      	ldr	r2, [r7, #8]
 8048fa6:	68fb      	ldr	r3, [r7, #12]
 8048fa8:	1ad3      	subs	r3, r2, r3
 8048faa:	4a1f      	ldr	r2, [pc, #124]	@ (8049028 <prvHeapInit+0xac>)
 8048fac:	4413      	add	r3, r2
 8048fae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8048fb0:	68fb      	ldr	r3, [r7, #12]
 8048fb2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8048fb4:	4a1d      	ldr	r2, [pc, #116]	@ (804902c <prvHeapInit+0xb0>)
 8048fb6:	687b      	ldr	r3, [r7, #4]
 8048fb8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8048fba:	4b1c      	ldr	r3, [pc, #112]	@ (804902c <prvHeapInit+0xb0>)
 8048fbc:	2200      	movs	r2, #0
 8048fbe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8048fc0:	687b      	ldr	r3, [r7, #4]
 8048fc2:	68ba      	ldr	r2, [r7, #8]
 8048fc4:	4413      	add	r3, r2
 8048fc6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8048fc8:	2208      	movs	r2, #8
 8048fca:	68fb      	ldr	r3, [r7, #12]
 8048fcc:	1a9b      	subs	r3, r3, r2
 8048fce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8048fd0:	68fb      	ldr	r3, [r7, #12]
 8048fd2:	f023 0307 	bic.w	r3, r3, #7
 8048fd6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8048fd8:	68fb      	ldr	r3, [r7, #12]
 8048fda:	4a15      	ldr	r2, [pc, #84]	@ (8049030 <prvHeapInit+0xb4>)
 8048fdc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8048fde:	4b14      	ldr	r3, [pc, #80]	@ (8049030 <prvHeapInit+0xb4>)
 8048fe0:	681b      	ldr	r3, [r3, #0]
 8048fe2:	2200      	movs	r2, #0
 8048fe4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8048fe6:	4b12      	ldr	r3, [pc, #72]	@ (8049030 <prvHeapInit+0xb4>)
 8048fe8:	681b      	ldr	r3, [r3, #0]
 8048fea:	2200      	movs	r2, #0
 8048fec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8048fee:	687b      	ldr	r3, [r7, #4]
 8048ff0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8048ff2:	683b      	ldr	r3, [r7, #0]
 8048ff4:	68fa      	ldr	r2, [r7, #12]
 8048ff6:	1ad2      	subs	r2, r2, r3
 8048ff8:	683b      	ldr	r3, [r7, #0]
 8048ffa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8048ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8049030 <prvHeapInit+0xb4>)
 8048ffe:	681a      	ldr	r2, [r3, #0]
 8049000:	683b      	ldr	r3, [r7, #0]
 8049002:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8049004:	683b      	ldr	r3, [r7, #0]
 8049006:	685b      	ldr	r3, [r3, #4]
 8049008:	4a0a      	ldr	r2, [pc, #40]	@ (8049034 <prvHeapInit+0xb8>)
 804900a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 804900c:	683b      	ldr	r3, [r7, #0]
 804900e:	685b      	ldr	r3, [r3, #4]
 8049010:	4a09      	ldr	r2, [pc, #36]	@ (8049038 <prvHeapInit+0xbc>)
 8049012:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8049014:	4b09      	ldr	r3, [pc, #36]	@ (804903c <prvHeapInit+0xc0>)
 8049016:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 804901a:	601a      	str	r2, [r3, #0]
}
 804901c:	bf00      	nop
 804901e:	3714      	adds	r7, #20
 8049020:	46bd      	mov	sp, r7
 8049022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049026:	4770      	bx	lr
 8049028:	20000550 	.word	0x20000550
 804902c:	20013150 	.word	0x20013150
 8049030:	20013158 	.word	0x20013158
 8049034:	20013160 	.word	0x20013160
 8049038:	2001315c 	.word	0x2001315c
 804903c:	2001316c 	.word	0x2001316c

08049040 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8049040:	b480      	push	{r7}
 8049042:	b085      	sub	sp, #20
 8049044:	af00      	add	r7, sp, #0
 8049046:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8049048:	4b28      	ldr	r3, [pc, #160]	@ (80490ec <prvInsertBlockIntoFreeList+0xac>)
 804904a:	60fb      	str	r3, [r7, #12]
 804904c:	e002      	b.n	8049054 <prvInsertBlockIntoFreeList+0x14>
 804904e:	68fb      	ldr	r3, [r7, #12]
 8049050:	681b      	ldr	r3, [r3, #0]
 8049052:	60fb      	str	r3, [r7, #12]
 8049054:	68fb      	ldr	r3, [r7, #12]
 8049056:	681b      	ldr	r3, [r3, #0]
 8049058:	687a      	ldr	r2, [r7, #4]
 804905a:	429a      	cmp	r2, r3
 804905c:	d8f7      	bhi.n	804904e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 804905e:	68fb      	ldr	r3, [r7, #12]
 8049060:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8049062:	68fb      	ldr	r3, [r7, #12]
 8049064:	685b      	ldr	r3, [r3, #4]
 8049066:	68ba      	ldr	r2, [r7, #8]
 8049068:	4413      	add	r3, r2
 804906a:	687a      	ldr	r2, [r7, #4]
 804906c:	429a      	cmp	r2, r3
 804906e:	d108      	bne.n	8049082 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8049070:	68fb      	ldr	r3, [r7, #12]
 8049072:	685a      	ldr	r2, [r3, #4]
 8049074:	687b      	ldr	r3, [r7, #4]
 8049076:	685b      	ldr	r3, [r3, #4]
 8049078:	441a      	add	r2, r3
 804907a:	68fb      	ldr	r3, [r7, #12]
 804907c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 804907e:	68fb      	ldr	r3, [r7, #12]
 8049080:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8049082:	687b      	ldr	r3, [r7, #4]
 8049084:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8049086:	687b      	ldr	r3, [r7, #4]
 8049088:	685b      	ldr	r3, [r3, #4]
 804908a:	68ba      	ldr	r2, [r7, #8]
 804908c:	441a      	add	r2, r3
 804908e:	68fb      	ldr	r3, [r7, #12]
 8049090:	681b      	ldr	r3, [r3, #0]
 8049092:	429a      	cmp	r2, r3
 8049094:	d118      	bne.n	80490c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8049096:	68fb      	ldr	r3, [r7, #12]
 8049098:	681a      	ldr	r2, [r3, #0]
 804909a:	4b15      	ldr	r3, [pc, #84]	@ (80490f0 <prvInsertBlockIntoFreeList+0xb0>)
 804909c:	681b      	ldr	r3, [r3, #0]
 804909e:	429a      	cmp	r2, r3
 80490a0:	d00d      	beq.n	80490be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80490a2:	687b      	ldr	r3, [r7, #4]
 80490a4:	685a      	ldr	r2, [r3, #4]
 80490a6:	68fb      	ldr	r3, [r7, #12]
 80490a8:	681b      	ldr	r3, [r3, #0]
 80490aa:	685b      	ldr	r3, [r3, #4]
 80490ac:	441a      	add	r2, r3
 80490ae:	687b      	ldr	r3, [r7, #4]
 80490b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80490b2:	68fb      	ldr	r3, [r7, #12]
 80490b4:	681b      	ldr	r3, [r3, #0]
 80490b6:	681a      	ldr	r2, [r3, #0]
 80490b8:	687b      	ldr	r3, [r7, #4]
 80490ba:	601a      	str	r2, [r3, #0]
 80490bc:	e008      	b.n	80490d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80490be:	4b0c      	ldr	r3, [pc, #48]	@ (80490f0 <prvInsertBlockIntoFreeList+0xb0>)
 80490c0:	681a      	ldr	r2, [r3, #0]
 80490c2:	687b      	ldr	r3, [r7, #4]
 80490c4:	601a      	str	r2, [r3, #0]
 80490c6:	e003      	b.n	80490d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80490c8:	68fb      	ldr	r3, [r7, #12]
 80490ca:	681a      	ldr	r2, [r3, #0]
 80490cc:	687b      	ldr	r3, [r7, #4]
 80490ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80490d0:	68fa      	ldr	r2, [r7, #12]
 80490d2:	687b      	ldr	r3, [r7, #4]
 80490d4:	429a      	cmp	r2, r3
 80490d6:	d002      	beq.n	80490de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80490d8:	68fb      	ldr	r3, [r7, #12]
 80490da:	687a      	ldr	r2, [r7, #4]
 80490dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80490de:	bf00      	nop
 80490e0:	3714      	adds	r7, #20
 80490e2:	46bd      	mov	sp, r7
 80490e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490e8:	4770      	bx	lr
 80490ea:	bf00      	nop
 80490ec:	20013150 	.word	0x20013150
 80490f0:	20013158 	.word	0x20013158

080490f4 <__cvt>:
 80490f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80490f8:	ec57 6b10 	vmov	r6, r7, d0
 80490fc:	2f00      	cmp	r7, #0
 80490fe:	460c      	mov	r4, r1
 8049100:	4619      	mov	r1, r3
 8049102:	463b      	mov	r3, r7
 8049104:	bfbb      	ittet	lt
 8049106:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 804910a:	461f      	movlt	r7, r3
 804910c:	2300      	movge	r3, #0
 804910e:	232d      	movlt	r3, #45	@ 0x2d
 8049110:	700b      	strb	r3, [r1, #0]
 8049112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8049114:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8049118:	4691      	mov	r9, r2
 804911a:	f023 0820 	bic.w	r8, r3, #32
 804911e:	bfbc      	itt	lt
 8049120:	4632      	movlt	r2, r6
 8049122:	4616      	movlt	r6, r2
 8049124:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8049128:	d005      	beq.n	8049136 <__cvt+0x42>
 804912a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 804912e:	d100      	bne.n	8049132 <__cvt+0x3e>
 8049130:	3401      	adds	r4, #1
 8049132:	2102      	movs	r1, #2
 8049134:	e000      	b.n	8049138 <__cvt+0x44>
 8049136:	2103      	movs	r1, #3
 8049138:	ab03      	add	r3, sp, #12
 804913a:	9301      	str	r3, [sp, #4]
 804913c:	ab02      	add	r3, sp, #8
 804913e:	9300      	str	r3, [sp, #0]
 8049140:	ec47 6b10 	vmov	d0, r6, r7
 8049144:	4653      	mov	r3, sl
 8049146:	4622      	mov	r2, r4
 8049148:	f000 fe6a 	bl	8049e20 <_dtoa_r>
 804914c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8049150:	4605      	mov	r5, r0
 8049152:	d119      	bne.n	8049188 <__cvt+0x94>
 8049154:	f019 0f01 	tst.w	r9, #1
 8049158:	d00e      	beq.n	8049178 <__cvt+0x84>
 804915a:	eb00 0904 	add.w	r9, r0, r4
 804915e:	2200      	movs	r2, #0
 8049160:	2300      	movs	r3, #0
 8049162:	4630      	mov	r0, r6
 8049164:	4639      	mov	r1, r7
 8049166:	f7f7 fcbf 	bl	8040ae8 <__aeabi_dcmpeq>
 804916a:	b108      	cbz	r0, 8049170 <__cvt+0x7c>
 804916c:	f8cd 900c 	str.w	r9, [sp, #12]
 8049170:	2230      	movs	r2, #48	@ 0x30
 8049172:	9b03      	ldr	r3, [sp, #12]
 8049174:	454b      	cmp	r3, r9
 8049176:	d31e      	bcc.n	80491b6 <__cvt+0xc2>
 8049178:	9b03      	ldr	r3, [sp, #12]
 804917a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 804917c:	1b5b      	subs	r3, r3, r5
 804917e:	4628      	mov	r0, r5
 8049180:	6013      	str	r3, [r2, #0]
 8049182:	b004      	add	sp, #16
 8049184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8049188:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 804918c:	eb00 0904 	add.w	r9, r0, r4
 8049190:	d1e5      	bne.n	804915e <__cvt+0x6a>
 8049192:	7803      	ldrb	r3, [r0, #0]
 8049194:	2b30      	cmp	r3, #48	@ 0x30
 8049196:	d10a      	bne.n	80491ae <__cvt+0xba>
 8049198:	2200      	movs	r2, #0
 804919a:	2300      	movs	r3, #0
 804919c:	4630      	mov	r0, r6
 804919e:	4639      	mov	r1, r7
 80491a0:	f7f7 fca2 	bl	8040ae8 <__aeabi_dcmpeq>
 80491a4:	b918      	cbnz	r0, 80491ae <__cvt+0xba>
 80491a6:	f1c4 0401 	rsb	r4, r4, #1
 80491aa:	f8ca 4000 	str.w	r4, [sl]
 80491ae:	f8da 3000 	ldr.w	r3, [sl]
 80491b2:	4499      	add	r9, r3
 80491b4:	e7d3      	b.n	804915e <__cvt+0x6a>
 80491b6:	1c59      	adds	r1, r3, #1
 80491b8:	9103      	str	r1, [sp, #12]
 80491ba:	701a      	strb	r2, [r3, #0]
 80491bc:	e7d9      	b.n	8049172 <__cvt+0x7e>

080491be <__exponent>:
 80491be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80491c0:	2900      	cmp	r1, #0
 80491c2:	bfba      	itte	lt
 80491c4:	4249      	neglt	r1, r1
 80491c6:	232d      	movlt	r3, #45	@ 0x2d
 80491c8:	232b      	movge	r3, #43	@ 0x2b
 80491ca:	2909      	cmp	r1, #9
 80491cc:	7002      	strb	r2, [r0, #0]
 80491ce:	7043      	strb	r3, [r0, #1]
 80491d0:	dd29      	ble.n	8049226 <__exponent+0x68>
 80491d2:	f10d 0307 	add.w	r3, sp, #7
 80491d6:	461d      	mov	r5, r3
 80491d8:	270a      	movs	r7, #10
 80491da:	461a      	mov	r2, r3
 80491dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80491e0:	fb07 1416 	mls	r4, r7, r6, r1
 80491e4:	3430      	adds	r4, #48	@ 0x30
 80491e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80491ea:	460c      	mov	r4, r1
 80491ec:	2c63      	cmp	r4, #99	@ 0x63
 80491ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80491f2:	4631      	mov	r1, r6
 80491f4:	dcf1      	bgt.n	80491da <__exponent+0x1c>
 80491f6:	3130      	adds	r1, #48	@ 0x30
 80491f8:	1e94      	subs	r4, r2, #2
 80491fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80491fe:	1c41      	adds	r1, r0, #1
 8049200:	4623      	mov	r3, r4
 8049202:	42ab      	cmp	r3, r5
 8049204:	d30a      	bcc.n	804921c <__exponent+0x5e>
 8049206:	f10d 0309 	add.w	r3, sp, #9
 804920a:	1a9b      	subs	r3, r3, r2
 804920c:	42ac      	cmp	r4, r5
 804920e:	bf88      	it	hi
 8049210:	2300      	movhi	r3, #0
 8049212:	3302      	adds	r3, #2
 8049214:	4403      	add	r3, r0
 8049216:	1a18      	subs	r0, r3, r0
 8049218:	b003      	add	sp, #12
 804921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804921c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8049220:	f801 6f01 	strb.w	r6, [r1, #1]!
 8049224:	e7ed      	b.n	8049202 <__exponent+0x44>
 8049226:	2330      	movs	r3, #48	@ 0x30
 8049228:	3130      	adds	r1, #48	@ 0x30
 804922a:	7083      	strb	r3, [r0, #2]
 804922c:	70c1      	strb	r1, [r0, #3]
 804922e:	1d03      	adds	r3, r0, #4
 8049230:	e7f1      	b.n	8049216 <__exponent+0x58>
	...

08049234 <_printf_float>:
 8049234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049238:	b08d      	sub	sp, #52	@ 0x34
 804923a:	460c      	mov	r4, r1
 804923c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8049240:	4616      	mov	r6, r2
 8049242:	461f      	mov	r7, r3
 8049244:	4605      	mov	r5, r0
 8049246:	f000 fcdb 	bl	8049c00 <_localeconv_r>
 804924a:	6803      	ldr	r3, [r0, #0]
 804924c:	9304      	str	r3, [sp, #16]
 804924e:	4618      	mov	r0, r3
 8049250:	f7f7 f81e 	bl	8040290 <strlen>
 8049254:	2300      	movs	r3, #0
 8049256:	930a      	str	r3, [sp, #40]	@ 0x28
 8049258:	f8d8 3000 	ldr.w	r3, [r8]
 804925c:	9005      	str	r0, [sp, #20]
 804925e:	3307      	adds	r3, #7
 8049260:	f023 0307 	bic.w	r3, r3, #7
 8049264:	f103 0208 	add.w	r2, r3, #8
 8049268:	f894 a018 	ldrb.w	sl, [r4, #24]
 804926c:	f8d4 b000 	ldr.w	fp, [r4]
 8049270:	f8c8 2000 	str.w	r2, [r8]
 8049274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8049278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 804927c:	9307      	str	r3, [sp, #28]
 804927e:	f8cd 8018 	str.w	r8, [sp, #24]
 8049282:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8049286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804928a:	4b9c      	ldr	r3, [pc, #624]	@ (80494fc <_printf_float+0x2c8>)
 804928c:	f04f 32ff 	mov.w	r2, #4294967295
 8049290:	f7f7 fc5c 	bl	8040b4c <__aeabi_dcmpun>
 8049294:	bb70      	cbnz	r0, 80492f4 <_printf_float+0xc0>
 8049296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804929a:	4b98      	ldr	r3, [pc, #608]	@ (80494fc <_printf_float+0x2c8>)
 804929c:	f04f 32ff 	mov.w	r2, #4294967295
 80492a0:	f7f7 fc36 	bl	8040b10 <__aeabi_dcmple>
 80492a4:	bb30      	cbnz	r0, 80492f4 <_printf_float+0xc0>
 80492a6:	2200      	movs	r2, #0
 80492a8:	2300      	movs	r3, #0
 80492aa:	4640      	mov	r0, r8
 80492ac:	4649      	mov	r1, r9
 80492ae:	f7f7 fc25 	bl	8040afc <__aeabi_dcmplt>
 80492b2:	b110      	cbz	r0, 80492ba <_printf_float+0x86>
 80492b4:	232d      	movs	r3, #45	@ 0x2d
 80492b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80492ba:	4a91      	ldr	r2, [pc, #580]	@ (8049500 <_printf_float+0x2cc>)
 80492bc:	4b91      	ldr	r3, [pc, #580]	@ (8049504 <_printf_float+0x2d0>)
 80492be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80492c2:	bf94      	ite	ls
 80492c4:	4690      	movls	r8, r2
 80492c6:	4698      	movhi	r8, r3
 80492c8:	2303      	movs	r3, #3
 80492ca:	6123      	str	r3, [r4, #16]
 80492cc:	f02b 0304 	bic.w	r3, fp, #4
 80492d0:	6023      	str	r3, [r4, #0]
 80492d2:	f04f 0900 	mov.w	r9, #0
 80492d6:	9700      	str	r7, [sp, #0]
 80492d8:	4633      	mov	r3, r6
 80492da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80492dc:	4621      	mov	r1, r4
 80492de:	4628      	mov	r0, r5
 80492e0:	f000 f9d2 	bl	8049688 <_printf_common>
 80492e4:	3001      	adds	r0, #1
 80492e6:	f040 808d 	bne.w	8049404 <_printf_float+0x1d0>
 80492ea:	f04f 30ff 	mov.w	r0, #4294967295
 80492ee:	b00d      	add	sp, #52	@ 0x34
 80492f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80492f4:	4642      	mov	r2, r8
 80492f6:	464b      	mov	r3, r9
 80492f8:	4640      	mov	r0, r8
 80492fa:	4649      	mov	r1, r9
 80492fc:	f7f7 fc26 	bl	8040b4c <__aeabi_dcmpun>
 8049300:	b140      	cbz	r0, 8049314 <_printf_float+0xe0>
 8049302:	464b      	mov	r3, r9
 8049304:	2b00      	cmp	r3, #0
 8049306:	bfbc      	itt	lt
 8049308:	232d      	movlt	r3, #45	@ 0x2d
 804930a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 804930e:	4a7e      	ldr	r2, [pc, #504]	@ (8049508 <_printf_float+0x2d4>)
 8049310:	4b7e      	ldr	r3, [pc, #504]	@ (804950c <_printf_float+0x2d8>)
 8049312:	e7d4      	b.n	80492be <_printf_float+0x8a>
 8049314:	6863      	ldr	r3, [r4, #4]
 8049316:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 804931a:	9206      	str	r2, [sp, #24]
 804931c:	1c5a      	adds	r2, r3, #1
 804931e:	d13b      	bne.n	8049398 <_printf_float+0x164>
 8049320:	2306      	movs	r3, #6
 8049322:	6063      	str	r3, [r4, #4]
 8049324:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8049328:	2300      	movs	r3, #0
 804932a:	6022      	str	r2, [r4, #0]
 804932c:	9303      	str	r3, [sp, #12]
 804932e:	ab0a      	add	r3, sp, #40	@ 0x28
 8049330:	e9cd a301 	strd	sl, r3, [sp, #4]
 8049334:	ab09      	add	r3, sp, #36	@ 0x24
 8049336:	9300      	str	r3, [sp, #0]
 8049338:	6861      	ldr	r1, [r4, #4]
 804933a:	ec49 8b10 	vmov	d0, r8, r9
 804933e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8049342:	4628      	mov	r0, r5
 8049344:	f7ff fed6 	bl	80490f4 <__cvt>
 8049348:	9b06      	ldr	r3, [sp, #24]
 804934a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 804934c:	2b47      	cmp	r3, #71	@ 0x47
 804934e:	4680      	mov	r8, r0
 8049350:	d129      	bne.n	80493a6 <_printf_float+0x172>
 8049352:	1cc8      	adds	r0, r1, #3
 8049354:	db02      	blt.n	804935c <_printf_float+0x128>
 8049356:	6863      	ldr	r3, [r4, #4]
 8049358:	4299      	cmp	r1, r3
 804935a:	dd41      	ble.n	80493e0 <_printf_float+0x1ac>
 804935c:	f1aa 0a02 	sub.w	sl, sl, #2
 8049360:	fa5f fa8a 	uxtb.w	sl, sl
 8049364:	3901      	subs	r1, #1
 8049366:	4652      	mov	r2, sl
 8049368:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 804936c:	9109      	str	r1, [sp, #36]	@ 0x24
 804936e:	f7ff ff26 	bl	80491be <__exponent>
 8049372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8049374:	1813      	adds	r3, r2, r0
 8049376:	2a01      	cmp	r2, #1
 8049378:	4681      	mov	r9, r0
 804937a:	6123      	str	r3, [r4, #16]
 804937c:	dc02      	bgt.n	8049384 <_printf_float+0x150>
 804937e:	6822      	ldr	r2, [r4, #0]
 8049380:	07d2      	lsls	r2, r2, #31
 8049382:	d501      	bpl.n	8049388 <_printf_float+0x154>
 8049384:	3301      	adds	r3, #1
 8049386:	6123      	str	r3, [r4, #16]
 8049388:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 804938c:	2b00      	cmp	r3, #0
 804938e:	d0a2      	beq.n	80492d6 <_printf_float+0xa2>
 8049390:	232d      	movs	r3, #45	@ 0x2d
 8049392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8049396:	e79e      	b.n	80492d6 <_printf_float+0xa2>
 8049398:	9a06      	ldr	r2, [sp, #24]
 804939a:	2a47      	cmp	r2, #71	@ 0x47
 804939c:	d1c2      	bne.n	8049324 <_printf_float+0xf0>
 804939e:	2b00      	cmp	r3, #0
 80493a0:	d1c0      	bne.n	8049324 <_printf_float+0xf0>
 80493a2:	2301      	movs	r3, #1
 80493a4:	e7bd      	b.n	8049322 <_printf_float+0xee>
 80493a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80493aa:	d9db      	bls.n	8049364 <_printf_float+0x130>
 80493ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80493b0:	d118      	bne.n	80493e4 <_printf_float+0x1b0>
 80493b2:	2900      	cmp	r1, #0
 80493b4:	6863      	ldr	r3, [r4, #4]
 80493b6:	dd0b      	ble.n	80493d0 <_printf_float+0x19c>
 80493b8:	6121      	str	r1, [r4, #16]
 80493ba:	b913      	cbnz	r3, 80493c2 <_printf_float+0x18e>
 80493bc:	6822      	ldr	r2, [r4, #0]
 80493be:	07d0      	lsls	r0, r2, #31
 80493c0:	d502      	bpl.n	80493c8 <_printf_float+0x194>
 80493c2:	3301      	adds	r3, #1
 80493c4:	440b      	add	r3, r1
 80493c6:	6123      	str	r3, [r4, #16]
 80493c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80493ca:	f04f 0900 	mov.w	r9, #0
 80493ce:	e7db      	b.n	8049388 <_printf_float+0x154>
 80493d0:	b913      	cbnz	r3, 80493d8 <_printf_float+0x1a4>
 80493d2:	6822      	ldr	r2, [r4, #0]
 80493d4:	07d2      	lsls	r2, r2, #31
 80493d6:	d501      	bpl.n	80493dc <_printf_float+0x1a8>
 80493d8:	3302      	adds	r3, #2
 80493da:	e7f4      	b.n	80493c6 <_printf_float+0x192>
 80493dc:	2301      	movs	r3, #1
 80493de:	e7f2      	b.n	80493c6 <_printf_float+0x192>
 80493e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80493e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80493e6:	4299      	cmp	r1, r3
 80493e8:	db05      	blt.n	80493f6 <_printf_float+0x1c2>
 80493ea:	6823      	ldr	r3, [r4, #0]
 80493ec:	6121      	str	r1, [r4, #16]
 80493ee:	07d8      	lsls	r0, r3, #31
 80493f0:	d5ea      	bpl.n	80493c8 <_printf_float+0x194>
 80493f2:	1c4b      	adds	r3, r1, #1
 80493f4:	e7e7      	b.n	80493c6 <_printf_float+0x192>
 80493f6:	2900      	cmp	r1, #0
 80493f8:	bfd4      	ite	le
 80493fa:	f1c1 0202 	rsble	r2, r1, #2
 80493fe:	2201      	movgt	r2, #1
 8049400:	4413      	add	r3, r2
 8049402:	e7e0      	b.n	80493c6 <_printf_float+0x192>
 8049404:	6823      	ldr	r3, [r4, #0]
 8049406:	055a      	lsls	r2, r3, #21
 8049408:	d407      	bmi.n	804941a <_printf_float+0x1e6>
 804940a:	6923      	ldr	r3, [r4, #16]
 804940c:	4642      	mov	r2, r8
 804940e:	4631      	mov	r1, r6
 8049410:	4628      	mov	r0, r5
 8049412:	47b8      	blx	r7
 8049414:	3001      	adds	r0, #1
 8049416:	d12b      	bne.n	8049470 <_printf_float+0x23c>
 8049418:	e767      	b.n	80492ea <_printf_float+0xb6>
 804941a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 804941e:	f240 80dd 	bls.w	80495dc <_printf_float+0x3a8>
 8049422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8049426:	2200      	movs	r2, #0
 8049428:	2300      	movs	r3, #0
 804942a:	f7f7 fb5d 	bl	8040ae8 <__aeabi_dcmpeq>
 804942e:	2800      	cmp	r0, #0
 8049430:	d033      	beq.n	804949a <_printf_float+0x266>
 8049432:	4a37      	ldr	r2, [pc, #220]	@ (8049510 <_printf_float+0x2dc>)
 8049434:	2301      	movs	r3, #1
 8049436:	4631      	mov	r1, r6
 8049438:	4628      	mov	r0, r5
 804943a:	47b8      	blx	r7
 804943c:	3001      	adds	r0, #1
 804943e:	f43f af54 	beq.w	80492ea <_printf_float+0xb6>
 8049442:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8049446:	4543      	cmp	r3, r8
 8049448:	db02      	blt.n	8049450 <_printf_float+0x21c>
 804944a:	6823      	ldr	r3, [r4, #0]
 804944c:	07d8      	lsls	r0, r3, #31
 804944e:	d50f      	bpl.n	8049470 <_printf_float+0x23c>
 8049450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8049454:	4631      	mov	r1, r6
 8049456:	4628      	mov	r0, r5
 8049458:	47b8      	blx	r7
 804945a:	3001      	adds	r0, #1
 804945c:	f43f af45 	beq.w	80492ea <_printf_float+0xb6>
 8049460:	f04f 0900 	mov.w	r9, #0
 8049464:	f108 38ff 	add.w	r8, r8, #4294967295
 8049468:	f104 0a1a 	add.w	sl, r4, #26
 804946c:	45c8      	cmp	r8, r9
 804946e:	dc09      	bgt.n	8049484 <_printf_float+0x250>
 8049470:	6823      	ldr	r3, [r4, #0]
 8049472:	079b      	lsls	r3, r3, #30
 8049474:	f100 8103 	bmi.w	804967e <_printf_float+0x44a>
 8049478:	68e0      	ldr	r0, [r4, #12]
 804947a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 804947c:	4298      	cmp	r0, r3
 804947e:	bfb8      	it	lt
 8049480:	4618      	movlt	r0, r3
 8049482:	e734      	b.n	80492ee <_printf_float+0xba>
 8049484:	2301      	movs	r3, #1
 8049486:	4652      	mov	r2, sl
 8049488:	4631      	mov	r1, r6
 804948a:	4628      	mov	r0, r5
 804948c:	47b8      	blx	r7
 804948e:	3001      	adds	r0, #1
 8049490:	f43f af2b 	beq.w	80492ea <_printf_float+0xb6>
 8049494:	f109 0901 	add.w	r9, r9, #1
 8049498:	e7e8      	b.n	804946c <_printf_float+0x238>
 804949a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804949c:	2b00      	cmp	r3, #0
 804949e:	dc39      	bgt.n	8049514 <_printf_float+0x2e0>
 80494a0:	4a1b      	ldr	r2, [pc, #108]	@ (8049510 <_printf_float+0x2dc>)
 80494a2:	2301      	movs	r3, #1
 80494a4:	4631      	mov	r1, r6
 80494a6:	4628      	mov	r0, r5
 80494a8:	47b8      	blx	r7
 80494aa:	3001      	adds	r0, #1
 80494ac:	f43f af1d 	beq.w	80492ea <_printf_float+0xb6>
 80494b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80494b4:	ea59 0303 	orrs.w	r3, r9, r3
 80494b8:	d102      	bne.n	80494c0 <_printf_float+0x28c>
 80494ba:	6823      	ldr	r3, [r4, #0]
 80494bc:	07d9      	lsls	r1, r3, #31
 80494be:	d5d7      	bpl.n	8049470 <_printf_float+0x23c>
 80494c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80494c4:	4631      	mov	r1, r6
 80494c6:	4628      	mov	r0, r5
 80494c8:	47b8      	blx	r7
 80494ca:	3001      	adds	r0, #1
 80494cc:	f43f af0d 	beq.w	80492ea <_printf_float+0xb6>
 80494d0:	f04f 0a00 	mov.w	sl, #0
 80494d4:	f104 0b1a 	add.w	fp, r4, #26
 80494d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80494da:	425b      	negs	r3, r3
 80494dc:	4553      	cmp	r3, sl
 80494de:	dc01      	bgt.n	80494e4 <_printf_float+0x2b0>
 80494e0:	464b      	mov	r3, r9
 80494e2:	e793      	b.n	804940c <_printf_float+0x1d8>
 80494e4:	2301      	movs	r3, #1
 80494e6:	465a      	mov	r2, fp
 80494e8:	4631      	mov	r1, r6
 80494ea:	4628      	mov	r0, r5
 80494ec:	47b8      	blx	r7
 80494ee:	3001      	adds	r0, #1
 80494f0:	f43f aefb 	beq.w	80492ea <_printf_float+0xb6>
 80494f4:	f10a 0a01 	add.w	sl, sl, #1
 80494f8:	e7ee      	b.n	80494d8 <_printf_float+0x2a4>
 80494fa:	bf00      	nop
 80494fc:	7fefffff 	.word	0x7fefffff
 8049500:	0804ceb0 	.word	0x0804ceb0
 8049504:	0804ceb4 	.word	0x0804ceb4
 8049508:	0804ceb8 	.word	0x0804ceb8
 804950c:	0804cebc 	.word	0x0804cebc
 8049510:	0804cec0 	.word	0x0804cec0
 8049514:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8049516:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 804951a:	4553      	cmp	r3, sl
 804951c:	bfa8      	it	ge
 804951e:	4653      	movge	r3, sl
 8049520:	2b00      	cmp	r3, #0
 8049522:	4699      	mov	r9, r3
 8049524:	dc36      	bgt.n	8049594 <_printf_float+0x360>
 8049526:	f04f 0b00 	mov.w	fp, #0
 804952a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 804952e:	f104 021a 	add.w	r2, r4, #26
 8049532:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8049534:	9306      	str	r3, [sp, #24]
 8049536:	eba3 0309 	sub.w	r3, r3, r9
 804953a:	455b      	cmp	r3, fp
 804953c:	dc31      	bgt.n	80495a2 <_printf_float+0x36e>
 804953e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8049540:	459a      	cmp	sl, r3
 8049542:	dc3a      	bgt.n	80495ba <_printf_float+0x386>
 8049544:	6823      	ldr	r3, [r4, #0]
 8049546:	07da      	lsls	r2, r3, #31
 8049548:	d437      	bmi.n	80495ba <_printf_float+0x386>
 804954a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804954c:	ebaa 0903 	sub.w	r9, sl, r3
 8049550:	9b06      	ldr	r3, [sp, #24]
 8049552:	ebaa 0303 	sub.w	r3, sl, r3
 8049556:	4599      	cmp	r9, r3
 8049558:	bfa8      	it	ge
 804955a:	4699      	movge	r9, r3
 804955c:	f1b9 0f00 	cmp.w	r9, #0
 8049560:	dc33      	bgt.n	80495ca <_printf_float+0x396>
 8049562:	f04f 0800 	mov.w	r8, #0
 8049566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 804956a:	f104 0b1a 	add.w	fp, r4, #26
 804956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8049570:	ebaa 0303 	sub.w	r3, sl, r3
 8049574:	eba3 0309 	sub.w	r3, r3, r9
 8049578:	4543      	cmp	r3, r8
 804957a:	f77f af79 	ble.w	8049470 <_printf_float+0x23c>
 804957e:	2301      	movs	r3, #1
 8049580:	465a      	mov	r2, fp
 8049582:	4631      	mov	r1, r6
 8049584:	4628      	mov	r0, r5
 8049586:	47b8      	blx	r7
 8049588:	3001      	adds	r0, #1
 804958a:	f43f aeae 	beq.w	80492ea <_printf_float+0xb6>
 804958e:	f108 0801 	add.w	r8, r8, #1
 8049592:	e7ec      	b.n	804956e <_printf_float+0x33a>
 8049594:	4642      	mov	r2, r8
 8049596:	4631      	mov	r1, r6
 8049598:	4628      	mov	r0, r5
 804959a:	47b8      	blx	r7
 804959c:	3001      	adds	r0, #1
 804959e:	d1c2      	bne.n	8049526 <_printf_float+0x2f2>
 80495a0:	e6a3      	b.n	80492ea <_printf_float+0xb6>
 80495a2:	2301      	movs	r3, #1
 80495a4:	4631      	mov	r1, r6
 80495a6:	4628      	mov	r0, r5
 80495a8:	9206      	str	r2, [sp, #24]
 80495aa:	47b8      	blx	r7
 80495ac:	3001      	adds	r0, #1
 80495ae:	f43f ae9c 	beq.w	80492ea <_printf_float+0xb6>
 80495b2:	9a06      	ldr	r2, [sp, #24]
 80495b4:	f10b 0b01 	add.w	fp, fp, #1
 80495b8:	e7bb      	b.n	8049532 <_printf_float+0x2fe>
 80495ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80495be:	4631      	mov	r1, r6
 80495c0:	4628      	mov	r0, r5
 80495c2:	47b8      	blx	r7
 80495c4:	3001      	adds	r0, #1
 80495c6:	d1c0      	bne.n	804954a <_printf_float+0x316>
 80495c8:	e68f      	b.n	80492ea <_printf_float+0xb6>
 80495ca:	9a06      	ldr	r2, [sp, #24]
 80495cc:	464b      	mov	r3, r9
 80495ce:	4442      	add	r2, r8
 80495d0:	4631      	mov	r1, r6
 80495d2:	4628      	mov	r0, r5
 80495d4:	47b8      	blx	r7
 80495d6:	3001      	adds	r0, #1
 80495d8:	d1c3      	bne.n	8049562 <_printf_float+0x32e>
 80495da:	e686      	b.n	80492ea <_printf_float+0xb6>
 80495dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80495e0:	f1ba 0f01 	cmp.w	sl, #1
 80495e4:	dc01      	bgt.n	80495ea <_printf_float+0x3b6>
 80495e6:	07db      	lsls	r3, r3, #31
 80495e8:	d536      	bpl.n	8049658 <_printf_float+0x424>
 80495ea:	2301      	movs	r3, #1
 80495ec:	4642      	mov	r2, r8
 80495ee:	4631      	mov	r1, r6
 80495f0:	4628      	mov	r0, r5
 80495f2:	47b8      	blx	r7
 80495f4:	3001      	adds	r0, #1
 80495f6:	f43f ae78 	beq.w	80492ea <_printf_float+0xb6>
 80495fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80495fe:	4631      	mov	r1, r6
 8049600:	4628      	mov	r0, r5
 8049602:	47b8      	blx	r7
 8049604:	3001      	adds	r0, #1
 8049606:	f43f ae70 	beq.w	80492ea <_printf_float+0xb6>
 804960a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 804960e:	2200      	movs	r2, #0
 8049610:	2300      	movs	r3, #0
 8049612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049616:	f7f7 fa67 	bl	8040ae8 <__aeabi_dcmpeq>
 804961a:	b9c0      	cbnz	r0, 804964e <_printf_float+0x41a>
 804961c:	4653      	mov	r3, sl
 804961e:	f108 0201 	add.w	r2, r8, #1
 8049622:	4631      	mov	r1, r6
 8049624:	4628      	mov	r0, r5
 8049626:	47b8      	blx	r7
 8049628:	3001      	adds	r0, #1
 804962a:	d10c      	bne.n	8049646 <_printf_float+0x412>
 804962c:	e65d      	b.n	80492ea <_printf_float+0xb6>
 804962e:	2301      	movs	r3, #1
 8049630:	465a      	mov	r2, fp
 8049632:	4631      	mov	r1, r6
 8049634:	4628      	mov	r0, r5
 8049636:	47b8      	blx	r7
 8049638:	3001      	adds	r0, #1
 804963a:	f43f ae56 	beq.w	80492ea <_printf_float+0xb6>
 804963e:	f108 0801 	add.w	r8, r8, #1
 8049642:	45d0      	cmp	r8, sl
 8049644:	dbf3      	blt.n	804962e <_printf_float+0x3fa>
 8049646:	464b      	mov	r3, r9
 8049648:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 804964c:	e6df      	b.n	804940e <_printf_float+0x1da>
 804964e:	f04f 0800 	mov.w	r8, #0
 8049652:	f104 0b1a 	add.w	fp, r4, #26
 8049656:	e7f4      	b.n	8049642 <_printf_float+0x40e>
 8049658:	2301      	movs	r3, #1
 804965a:	4642      	mov	r2, r8
 804965c:	e7e1      	b.n	8049622 <_printf_float+0x3ee>
 804965e:	2301      	movs	r3, #1
 8049660:	464a      	mov	r2, r9
 8049662:	4631      	mov	r1, r6
 8049664:	4628      	mov	r0, r5
 8049666:	47b8      	blx	r7
 8049668:	3001      	adds	r0, #1
 804966a:	f43f ae3e 	beq.w	80492ea <_printf_float+0xb6>
 804966e:	f108 0801 	add.w	r8, r8, #1
 8049672:	68e3      	ldr	r3, [r4, #12]
 8049674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8049676:	1a5b      	subs	r3, r3, r1
 8049678:	4543      	cmp	r3, r8
 804967a:	dcf0      	bgt.n	804965e <_printf_float+0x42a>
 804967c:	e6fc      	b.n	8049478 <_printf_float+0x244>
 804967e:	f04f 0800 	mov.w	r8, #0
 8049682:	f104 0919 	add.w	r9, r4, #25
 8049686:	e7f4      	b.n	8049672 <_printf_float+0x43e>

08049688 <_printf_common>:
 8049688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804968c:	4616      	mov	r6, r2
 804968e:	4698      	mov	r8, r3
 8049690:	688a      	ldr	r2, [r1, #8]
 8049692:	690b      	ldr	r3, [r1, #16]
 8049694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8049698:	4293      	cmp	r3, r2
 804969a:	bfb8      	it	lt
 804969c:	4613      	movlt	r3, r2
 804969e:	6033      	str	r3, [r6, #0]
 80496a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80496a4:	4607      	mov	r7, r0
 80496a6:	460c      	mov	r4, r1
 80496a8:	b10a      	cbz	r2, 80496ae <_printf_common+0x26>
 80496aa:	3301      	adds	r3, #1
 80496ac:	6033      	str	r3, [r6, #0]
 80496ae:	6823      	ldr	r3, [r4, #0]
 80496b0:	0699      	lsls	r1, r3, #26
 80496b2:	bf42      	ittt	mi
 80496b4:	6833      	ldrmi	r3, [r6, #0]
 80496b6:	3302      	addmi	r3, #2
 80496b8:	6033      	strmi	r3, [r6, #0]
 80496ba:	6825      	ldr	r5, [r4, #0]
 80496bc:	f015 0506 	ands.w	r5, r5, #6
 80496c0:	d106      	bne.n	80496d0 <_printf_common+0x48>
 80496c2:	f104 0a19 	add.w	sl, r4, #25
 80496c6:	68e3      	ldr	r3, [r4, #12]
 80496c8:	6832      	ldr	r2, [r6, #0]
 80496ca:	1a9b      	subs	r3, r3, r2
 80496cc:	42ab      	cmp	r3, r5
 80496ce:	dc26      	bgt.n	804971e <_printf_common+0x96>
 80496d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80496d4:	6822      	ldr	r2, [r4, #0]
 80496d6:	3b00      	subs	r3, #0
 80496d8:	bf18      	it	ne
 80496da:	2301      	movne	r3, #1
 80496dc:	0692      	lsls	r2, r2, #26
 80496de:	d42b      	bmi.n	8049738 <_printf_common+0xb0>
 80496e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80496e4:	4641      	mov	r1, r8
 80496e6:	4638      	mov	r0, r7
 80496e8:	47c8      	blx	r9
 80496ea:	3001      	adds	r0, #1
 80496ec:	d01e      	beq.n	804972c <_printf_common+0xa4>
 80496ee:	6823      	ldr	r3, [r4, #0]
 80496f0:	6922      	ldr	r2, [r4, #16]
 80496f2:	f003 0306 	and.w	r3, r3, #6
 80496f6:	2b04      	cmp	r3, #4
 80496f8:	bf02      	ittt	eq
 80496fa:	68e5      	ldreq	r5, [r4, #12]
 80496fc:	6833      	ldreq	r3, [r6, #0]
 80496fe:	1aed      	subeq	r5, r5, r3
 8049700:	68a3      	ldr	r3, [r4, #8]
 8049702:	bf0c      	ite	eq
 8049704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8049708:	2500      	movne	r5, #0
 804970a:	4293      	cmp	r3, r2
 804970c:	bfc4      	itt	gt
 804970e:	1a9b      	subgt	r3, r3, r2
 8049710:	18ed      	addgt	r5, r5, r3
 8049712:	2600      	movs	r6, #0
 8049714:	341a      	adds	r4, #26
 8049716:	42b5      	cmp	r5, r6
 8049718:	d11a      	bne.n	8049750 <_printf_common+0xc8>
 804971a:	2000      	movs	r0, #0
 804971c:	e008      	b.n	8049730 <_printf_common+0xa8>
 804971e:	2301      	movs	r3, #1
 8049720:	4652      	mov	r2, sl
 8049722:	4641      	mov	r1, r8
 8049724:	4638      	mov	r0, r7
 8049726:	47c8      	blx	r9
 8049728:	3001      	adds	r0, #1
 804972a:	d103      	bne.n	8049734 <_printf_common+0xac>
 804972c:	f04f 30ff 	mov.w	r0, #4294967295
 8049730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8049734:	3501      	adds	r5, #1
 8049736:	e7c6      	b.n	80496c6 <_printf_common+0x3e>
 8049738:	18e1      	adds	r1, r4, r3
 804973a:	1c5a      	adds	r2, r3, #1
 804973c:	2030      	movs	r0, #48	@ 0x30
 804973e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8049742:	4422      	add	r2, r4
 8049744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8049748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804974c:	3302      	adds	r3, #2
 804974e:	e7c7      	b.n	80496e0 <_printf_common+0x58>
 8049750:	2301      	movs	r3, #1
 8049752:	4622      	mov	r2, r4
 8049754:	4641      	mov	r1, r8
 8049756:	4638      	mov	r0, r7
 8049758:	47c8      	blx	r9
 804975a:	3001      	adds	r0, #1
 804975c:	d0e6      	beq.n	804972c <_printf_common+0xa4>
 804975e:	3601      	adds	r6, #1
 8049760:	e7d9      	b.n	8049716 <_printf_common+0x8e>
	...

08049764 <_printf_i>:
 8049764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8049768:	7e0f      	ldrb	r7, [r1, #24]
 804976a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804976c:	2f78      	cmp	r7, #120	@ 0x78
 804976e:	4691      	mov	r9, r2
 8049770:	4680      	mov	r8, r0
 8049772:	460c      	mov	r4, r1
 8049774:	469a      	mov	sl, r3
 8049776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804977a:	d807      	bhi.n	804978c <_printf_i+0x28>
 804977c:	2f62      	cmp	r7, #98	@ 0x62
 804977e:	d80a      	bhi.n	8049796 <_printf_i+0x32>
 8049780:	2f00      	cmp	r7, #0
 8049782:	f000 80d2 	beq.w	804992a <_printf_i+0x1c6>
 8049786:	2f58      	cmp	r7, #88	@ 0x58
 8049788:	f000 80b9 	beq.w	80498fe <_printf_i+0x19a>
 804978c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8049790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8049794:	e03a      	b.n	804980c <_printf_i+0xa8>
 8049796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804979a:	2b15      	cmp	r3, #21
 804979c:	d8f6      	bhi.n	804978c <_printf_i+0x28>
 804979e:	a101      	add	r1, pc, #4	@ (adr r1, 80497a4 <_printf_i+0x40>)
 80497a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80497a4:	080497fd 	.word	0x080497fd
 80497a8:	08049811 	.word	0x08049811
 80497ac:	0804978d 	.word	0x0804978d
 80497b0:	0804978d 	.word	0x0804978d
 80497b4:	0804978d 	.word	0x0804978d
 80497b8:	0804978d 	.word	0x0804978d
 80497bc:	08049811 	.word	0x08049811
 80497c0:	0804978d 	.word	0x0804978d
 80497c4:	0804978d 	.word	0x0804978d
 80497c8:	0804978d 	.word	0x0804978d
 80497cc:	0804978d 	.word	0x0804978d
 80497d0:	08049911 	.word	0x08049911
 80497d4:	0804983b 	.word	0x0804983b
 80497d8:	080498cb 	.word	0x080498cb
 80497dc:	0804978d 	.word	0x0804978d
 80497e0:	0804978d 	.word	0x0804978d
 80497e4:	08049933 	.word	0x08049933
 80497e8:	0804978d 	.word	0x0804978d
 80497ec:	0804983b 	.word	0x0804983b
 80497f0:	0804978d 	.word	0x0804978d
 80497f4:	0804978d 	.word	0x0804978d
 80497f8:	080498d3 	.word	0x080498d3
 80497fc:	6833      	ldr	r3, [r6, #0]
 80497fe:	1d1a      	adds	r2, r3, #4
 8049800:	681b      	ldr	r3, [r3, #0]
 8049802:	6032      	str	r2, [r6, #0]
 8049804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8049808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 804980c:	2301      	movs	r3, #1
 804980e:	e09d      	b.n	804994c <_printf_i+0x1e8>
 8049810:	6833      	ldr	r3, [r6, #0]
 8049812:	6820      	ldr	r0, [r4, #0]
 8049814:	1d19      	adds	r1, r3, #4
 8049816:	6031      	str	r1, [r6, #0]
 8049818:	0606      	lsls	r6, r0, #24
 804981a:	d501      	bpl.n	8049820 <_printf_i+0xbc>
 804981c:	681d      	ldr	r5, [r3, #0]
 804981e:	e003      	b.n	8049828 <_printf_i+0xc4>
 8049820:	0645      	lsls	r5, r0, #25
 8049822:	d5fb      	bpl.n	804981c <_printf_i+0xb8>
 8049824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8049828:	2d00      	cmp	r5, #0
 804982a:	da03      	bge.n	8049834 <_printf_i+0xd0>
 804982c:	232d      	movs	r3, #45	@ 0x2d
 804982e:	426d      	negs	r5, r5
 8049830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8049834:	4859      	ldr	r0, [pc, #356]	@ (804999c <_printf_i+0x238>)
 8049836:	230a      	movs	r3, #10
 8049838:	e011      	b.n	804985e <_printf_i+0xfa>
 804983a:	6821      	ldr	r1, [r4, #0]
 804983c:	6833      	ldr	r3, [r6, #0]
 804983e:	0608      	lsls	r0, r1, #24
 8049840:	f853 5b04 	ldr.w	r5, [r3], #4
 8049844:	d402      	bmi.n	804984c <_printf_i+0xe8>
 8049846:	0649      	lsls	r1, r1, #25
 8049848:	bf48      	it	mi
 804984a:	b2ad      	uxthmi	r5, r5
 804984c:	2f6f      	cmp	r7, #111	@ 0x6f
 804984e:	4853      	ldr	r0, [pc, #332]	@ (804999c <_printf_i+0x238>)
 8049850:	6033      	str	r3, [r6, #0]
 8049852:	bf14      	ite	ne
 8049854:	230a      	movne	r3, #10
 8049856:	2308      	moveq	r3, #8
 8049858:	2100      	movs	r1, #0
 804985a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804985e:	6866      	ldr	r6, [r4, #4]
 8049860:	60a6      	str	r6, [r4, #8]
 8049862:	2e00      	cmp	r6, #0
 8049864:	bfa2      	ittt	ge
 8049866:	6821      	ldrge	r1, [r4, #0]
 8049868:	f021 0104 	bicge.w	r1, r1, #4
 804986c:	6021      	strge	r1, [r4, #0]
 804986e:	b90d      	cbnz	r5, 8049874 <_printf_i+0x110>
 8049870:	2e00      	cmp	r6, #0
 8049872:	d04b      	beq.n	804990c <_printf_i+0x1a8>
 8049874:	4616      	mov	r6, r2
 8049876:	fbb5 f1f3 	udiv	r1, r5, r3
 804987a:	fb03 5711 	mls	r7, r3, r1, r5
 804987e:	5dc7      	ldrb	r7, [r0, r7]
 8049880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8049884:	462f      	mov	r7, r5
 8049886:	42bb      	cmp	r3, r7
 8049888:	460d      	mov	r5, r1
 804988a:	d9f4      	bls.n	8049876 <_printf_i+0x112>
 804988c:	2b08      	cmp	r3, #8
 804988e:	d10b      	bne.n	80498a8 <_printf_i+0x144>
 8049890:	6823      	ldr	r3, [r4, #0]
 8049892:	07df      	lsls	r7, r3, #31
 8049894:	d508      	bpl.n	80498a8 <_printf_i+0x144>
 8049896:	6923      	ldr	r3, [r4, #16]
 8049898:	6861      	ldr	r1, [r4, #4]
 804989a:	4299      	cmp	r1, r3
 804989c:	bfde      	ittt	le
 804989e:	2330      	movle	r3, #48	@ 0x30
 80498a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80498a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80498a8:	1b92      	subs	r2, r2, r6
 80498aa:	6122      	str	r2, [r4, #16]
 80498ac:	f8cd a000 	str.w	sl, [sp]
 80498b0:	464b      	mov	r3, r9
 80498b2:	aa03      	add	r2, sp, #12
 80498b4:	4621      	mov	r1, r4
 80498b6:	4640      	mov	r0, r8
 80498b8:	f7ff fee6 	bl	8049688 <_printf_common>
 80498bc:	3001      	adds	r0, #1
 80498be:	d14a      	bne.n	8049956 <_printf_i+0x1f2>
 80498c0:	f04f 30ff 	mov.w	r0, #4294967295
 80498c4:	b004      	add	sp, #16
 80498c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80498ca:	6823      	ldr	r3, [r4, #0]
 80498cc:	f043 0320 	orr.w	r3, r3, #32
 80498d0:	6023      	str	r3, [r4, #0]
 80498d2:	4833      	ldr	r0, [pc, #204]	@ (80499a0 <_printf_i+0x23c>)
 80498d4:	2778      	movs	r7, #120	@ 0x78
 80498d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80498da:	6823      	ldr	r3, [r4, #0]
 80498dc:	6831      	ldr	r1, [r6, #0]
 80498de:	061f      	lsls	r7, r3, #24
 80498e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80498e4:	d402      	bmi.n	80498ec <_printf_i+0x188>
 80498e6:	065f      	lsls	r7, r3, #25
 80498e8:	bf48      	it	mi
 80498ea:	b2ad      	uxthmi	r5, r5
 80498ec:	6031      	str	r1, [r6, #0]
 80498ee:	07d9      	lsls	r1, r3, #31
 80498f0:	bf44      	itt	mi
 80498f2:	f043 0320 	orrmi.w	r3, r3, #32
 80498f6:	6023      	strmi	r3, [r4, #0]
 80498f8:	b11d      	cbz	r5, 8049902 <_printf_i+0x19e>
 80498fa:	2310      	movs	r3, #16
 80498fc:	e7ac      	b.n	8049858 <_printf_i+0xf4>
 80498fe:	4827      	ldr	r0, [pc, #156]	@ (804999c <_printf_i+0x238>)
 8049900:	e7e9      	b.n	80498d6 <_printf_i+0x172>
 8049902:	6823      	ldr	r3, [r4, #0]
 8049904:	f023 0320 	bic.w	r3, r3, #32
 8049908:	6023      	str	r3, [r4, #0]
 804990a:	e7f6      	b.n	80498fa <_printf_i+0x196>
 804990c:	4616      	mov	r6, r2
 804990e:	e7bd      	b.n	804988c <_printf_i+0x128>
 8049910:	6833      	ldr	r3, [r6, #0]
 8049912:	6825      	ldr	r5, [r4, #0]
 8049914:	6961      	ldr	r1, [r4, #20]
 8049916:	1d18      	adds	r0, r3, #4
 8049918:	6030      	str	r0, [r6, #0]
 804991a:	062e      	lsls	r6, r5, #24
 804991c:	681b      	ldr	r3, [r3, #0]
 804991e:	d501      	bpl.n	8049924 <_printf_i+0x1c0>
 8049920:	6019      	str	r1, [r3, #0]
 8049922:	e002      	b.n	804992a <_printf_i+0x1c6>
 8049924:	0668      	lsls	r0, r5, #25
 8049926:	d5fb      	bpl.n	8049920 <_printf_i+0x1bc>
 8049928:	8019      	strh	r1, [r3, #0]
 804992a:	2300      	movs	r3, #0
 804992c:	6123      	str	r3, [r4, #16]
 804992e:	4616      	mov	r6, r2
 8049930:	e7bc      	b.n	80498ac <_printf_i+0x148>
 8049932:	6833      	ldr	r3, [r6, #0]
 8049934:	1d1a      	adds	r2, r3, #4
 8049936:	6032      	str	r2, [r6, #0]
 8049938:	681e      	ldr	r6, [r3, #0]
 804993a:	6862      	ldr	r2, [r4, #4]
 804993c:	2100      	movs	r1, #0
 804993e:	4630      	mov	r0, r6
 8049940:	f7f6 fc56 	bl	80401f0 <memchr>
 8049944:	b108      	cbz	r0, 804994a <_printf_i+0x1e6>
 8049946:	1b80      	subs	r0, r0, r6
 8049948:	6060      	str	r0, [r4, #4]
 804994a:	6863      	ldr	r3, [r4, #4]
 804994c:	6123      	str	r3, [r4, #16]
 804994e:	2300      	movs	r3, #0
 8049950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8049954:	e7aa      	b.n	80498ac <_printf_i+0x148>
 8049956:	6923      	ldr	r3, [r4, #16]
 8049958:	4632      	mov	r2, r6
 804995a:	4649      	mov	r1, r9
 804995c:	4640      	mov	r0, r8
 804995e:	47d0      	blx	sl
 8049960:	3001      	adds	r0, #1
 8049962:	d0ad      	beq.n	80498c0 <_printf_i+0x15c>
 8049964:	6823      	ldr	r3, [r4, #0]
 8049966:	079b      	lsls	r3, r3, #30
 8049968:	d413      	bmi.n	8049992 <_printf_i+0x22e>
 804996a:	68e0      	ldr	r0, [r4, #12]
 804996c:	9b03      	ldr	r3, [sp, #12]
 804996e:	4298      	cmp	r0, r3
 8049970:	bfb8      	it	lt
 8049972:	4618      	movlt	r0, r3
 8049974:	e7a6      	b.n	80498c4 <_printf_i+0x160>
 8049976:	2301      	movs	r3, #1
 8049978:	4632      	mov	r2, r6
 804997a:	4649      	mov	r1, r9
 804997c:	4640      	mov	r0, r8
 804997e:	47d0      	blx	sl
 8049980:	3001      	adds	r0, #1
 8049982:	d09d      	beq.n	80498c0 <_printf_i+0x15c>
 8049984:	3501      	adds	r5, #1
 8049986:	68e3      	ldr	r3, [r4, #12]
 8049988:	9903      	ldr	r1, [sp, #12]
 804998a:	1a5b      	subs	r3, r3, r1
 804998c:	42ab      	cmp	r3, r5
 804998e:	dcf2      	bgt.n	8049976 <_printf_i+0x212>
 8049990:	e7eb      	b.n	804996a <_printf_i+0x206>
 8049992:	2500      	movs	r5, #0
 8049994:	f104 0619 	add.w	r6, r4, #25
 8049998:	e7f5      	b.n	8049986 <_printf_i+0x222>
 804999a:	bf00      	nop
 804999c:	0804cec2 	.word	0x0804cec2
 80499a0:	0804ced3 	.word	0x0804ced3

080499a4 <std>:
 80499a4:	2300      	movs	r3, #0
 80499a6:	b510      	push	{r4, lr}
 80499a8:	4604      	mov	r4, r0
 80499aa:	e9c0 3300 	strd	r3, r3, [r0]
 80499ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80499b2:	6083      	str	r3, [r0, #8]
 80499b4:	8181      	strh	r1, [r0, #12]
 80499b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80499b8:	81c2      	strh	r2, [r0, #14]
 80499ba:	6183      	str	r3, [r0, #24]
 80499bc:	4619      	mov	r1, r3
 80499be:	2208      	movs	r2, #8
 80499c0:	305c      	adds	r0, #92	@ 0x5c
 80499c2:	f000 f914 	bl	8049bee <memset>
 80499c6:	4b0d      	ldr	r3, [pc, #52]	@ (80499fc <std+0x58>)
 80499c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80499ca:	4b0d      	ldr	r3, [pc, #52]	@ (8049a00 <std+0x5c>)
 80499cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80499ce:	4b0d      	ldr	r3, [pc, #52]	@ (8049a04 <std+0x60>)
 80499d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80499d2:	4b0d      	ldr	r3, [pc, #52]	@ (8049a08 <std+0x64>)
 80499d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80499d6:	4b0d      	ldr	r3, [pc, #52]	@ (8049a0c <std+0x68>)
 80499d8:	6224      	str	r4, [r4, #32]
 80499da:	429c      	cmp	r4, r3
 80499dc:	d006      	beq.n	80499ec <std+0x48>
 80499de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80499e2:	4294      	cmp	r4, r2
 80499e4:	d002      	beq.n	80499ec <std+0x48>
 80499e6:	33d0      	adds	r3, #208	@ 0xd0
 80499e8:	429c      	cmp	r4, r3
 80499ea:	d105      	bne.n	80499f8 <std+0x54>
 80499ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80499f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80499f4:	f000 b978 	b.w	8049ce8 <__retarget_lock_init_recursive>
 80499f8:	bd10      	pop	{r4, pc}
 80499fa:	bf00      	nop
 80499fc:	08049b69 	.word	0x08049b69
 8049a00:	08049b8b 	.word	0x08049b8b
 8049a04:	08049bc3 	.word	0x08049bc3
 8049a08:	08049be7 	.word	0x08049be7
 8049a0c:	20013170 	.word	0x20013170

08049a10 <stdio_exit_handler>:
 8049a10:	4a02      	ldr	r2, [pc, #8]	@ (8049a1c <stdio_exit_handler+0xc>)
 8049a12:	4903      	ldr	r1, [pc, #12]	@ (8049a20 <stdio_exit_handler+0x10>)
 8049a14:	4803      	ldr	r0, [pc, #12]	@ (8049a24 <stdio_exit_handler+0x14>)
 8049a16:	f000 b869 	b.w	8049aec <_fwalk_sglue>
 8049a1a:	bf00      	nop
 8049a1c:	20000018 	.word	0x20000018
 8049a20:	0804b665 	.word	0x0804b665
 8049a24:	20000028 	.word	0x20000028

08049a28 <cleanup_stdio>:
 8049a28:	6841      	ldr	r1, [r0, #4]
 8049a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8049a5c <cleanup_stdio+0x34>)
 8049a2c:	4299      	cmp	r1, r3
 8049a2e:	b510      	push	{r4, lr}
 8049a30:	4604      	mov	r4, r0
 8049a32:	d001      	beq.n	8049a38 <cleanup_stdio+0x10>
 8049a34:	f001 fe16 	bl	804b664 <_fflush_r>
 8049a38:	68a1      	ldr	r1, [r4, #8]
 8049a3a:	4b09      	ldr	r3, [pc, #36]	@ (8049a60 <cleanup_stdio+0x38>)
 8049a3c:	4299      	cmp	r1, r3
 8049a3e:	d002      	beq.n	8049a46 <cleanup_stdio+0x1e>
 8049a40:	4620      	mov	r0, r4
 8049a42:	f001 fe0f 	bl	804b664 <_fflush_r>
 8049a46:	68e1      	ldr	r1, [r4, #12]
 8049a48:	4b06      	ldr	r3, [pc, #24]	@ (8049a64 <cleanup_stdio+0x3c>)
 8049a4a:	4299      	cmp	r1, r3
 8049a4c:	d004      	beq.n	8049a58 <cleanup_stdio+0x30>
 8049a4e:	4620      	mov	r0, r4
 8049a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8049a54:	f001 be06 	b.w	804b664 <_fflush_r>
 8049a58:	bd10      	pop	{r4, pc}
 8049a5a:	bf00      	nop
 8049a5c:	20013170 	.word	0x20013170
 8049a60:	200131d8 	.word	0x200131d8
 8049a64:	20013240 	.word	0x20013240

08049a68 <global_stdio_init.part.0>:
 8049a68:	b510      	push	{r4, lr}
 8049a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8049a98 <global_stdio_init.part.0+0x30>)
 8049a6c:	4c0b      	ldr	r4, [pc, #44]	@ (8049a9c <global_stdio_init.part.0+0x34>)
 8049a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8049aa0 <global_stdio_init.part.0+0x38>)
 8049a70:	601a      	str	r2, [r3, #0]
 8049a72:	4620      	mov	r0, r4
 8049a74:	2200      	movs	r2, #0
 8049a76:	2104      	movs	r1, #4
 8049a78:	f7ff ff94 	bl	80499a4 <std>
 8049a7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8049a80:	2201      	movs	r2, #1
 8049a82:	2109      	movs	r1, #9
 8049a84:	f7ff ff8e 	bl	80499a4 <std>
 8049a88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8049a8c:	2202      	movs	r2, #2
 8049a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8049a92:	2112      	movs	r1, #18
 8049a94:	f7ff bf86 	b.w	80499a4 <std>
 8049a98:	200132a8 	.word	0x200132a8
 8049a9c:	20013170 	.word	0x20013170
 8049aa0:	08049a11 	.word	0x08049a11

08049aa4 <__sfp_lock_acquire>:
 8049aa4:	4801      	ldr	r0, [pc, #4]	@ (8049aac <__sfp_lock_acquire+0x8>)
 8049aa6:	f000 b920 	b.w	8049cea <__retarget_lock_acquire_recursive>
 8049aaa:	bf00      	nop
 8049aac:	200132b1 	.word	0x200132b1

08049ab0 <__sfp_lock_release>:
 8049ab0:	4801      	ldr	r0, [pc, #4]	@ (8049ab8 <__sfp_lock_release+0x8>)
 8049ab2:	f000 b91b 	b.w	8049cec <__retarget_lock_release_recursive>
 8049ab6:	bf00      	nop
 8049ab8:	200132b1 	.word	0x200132b1

08049abc <__sinit>:
 8049abc:	b510      	push	{r4, lr}
 8049abe:	4604      	mov	r4, r0
 8049ac0:	f7ff fff0 	bl	8049aa4 <__sfp_lock_acquire>
 8049ac4:	6a23      	ldr	r3, [r4, #32]
 8049ac6:	b11b      	cbz	r3, 8049ad0 <__sinit+0x14>
 8049ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8049acc:	f7ff bff0 	b.w	8049ab0 <__sfp_lock_release>
 8049ad0:	4b04      	ldr	r3, [pc, #16]	@ (8049ae4 <__sinit+0x28>)
 8049ad2:	6223      	str	r3, [r4, #32]
 8049ad4:	4b04      	ldr	r3, [pc, #16]	@ (8049ae8 <__sinit+0x2c>)
 8049ad6:	681b      	ldr	r3, [r3, #0]
 8049ad8:	2b00      	cmp	r3, #0
 8049ada:	d1f5      	bne.n	8049ac8 <__sinit+0xc>
 8049adc:	f7ff ffc4 	bl	8049a68 <global_stdio_init.part.0>
 8049ae0:	e7f2      	b.n	8049ac8 <__sinit+0xc>
 8049ae2:	bf00      	nop
 8049ae4:	08049a29 	.word	0x08049a29
 8049ae8:	200132a8 	.word	0x200132a8

08049aec <_fwalk_sglue>:
 8049aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8049af0:	4607      	mov	r7, r0
 8049af2:	4688      	mov	r8, r1
 8049af4:	4614      	mov	r4, r2
 8049af6:	2600      	movs	r6, #0
 8049af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8049afc:	f1b9 0901 	subs.w	r9, r9, #1
 8049b00:	d505      	bpl.n	8049b0e <_fwalk_sglue+0x22>
 8049b02:	6824      	ldr	r4, [r4, #0]
 8049b04:	2c00      	cmp	r4, #0
 8049b06:	d1f7      	bne.n	8049af8 <_fwalk_sglue+0xc>
 8049b08:	4630      	mov	r0, r6
 8049b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8049b0e:	89ab      	ldrh	r3, [r5, #12]
 8049b10:	2b01      	cmp	r3, #1
 8049b12:	d907      	bls.n	8049b24 <_fwalk_sglue+0x38>
 8049b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8049b18:	3301      	adds	r3, #1
 8049b1a:	d003      	beq.n	8049b24 <_fwalk_sglue+0x38>
 8049b1c:	4629      	mov	r1, r5
 8049b1e:	4638      	mov	r0, r7
 8049b20:	47c0      	blx	r8
 8049b22:	4306      	orrs	r6, r0
 8049b24:	3568      	adds	r5, #104	@ 0x68
 8049b26:	e7e9      	b.n	8049afc <_fwalk_sglue+0x10>

08049b28 <siprintf>:
 8049b28:	b40e      	push	{r1, r2, r3}
 8049b2a:	b500      	push	{lr}
 8049b2c:	b09c      	sub	sp, #112	@ 0x70
 8049b2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8049b30:	9002      	str	r0, [sp, #8]
 8049b32:	9006      	str	r0, [sp, #24]
 8049b34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8049b38:	4809      	ldr	r0, [pc, #36]	@ (8049b60 <siprintf+0x38>)
 8049b3a:	9107      	str	r1, [sp, #28]
 8049b3c:	9104      	str	r1, [sp, #16]
 8049b3e:	4909      	ldr	r1, [pc, #36]	@ (8049b64 <siprintf+0x3c>)
 8049b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8049b44:	9105      	str	r1, [sp, #20]
 8049b46:	6800      	ldr	r0, [r0, #0]
 8049b48:	9301      	str	r3, [sp, #4]
 8049b4a:	a902      	add	r1, sp, #8
 8049b4c:	f001 fc0a 	bl	804b364 <_svfiprintf_r>
 8049b50:	9b02      	ldr	r3, [sp, #8]
 8049b52:	2200      	movs	r2, #0
 8049b54:	701a      	strb	r2, [r3, #0]
 8049b56:	b01c      	add	sp, #112	@ 0x70
 8049b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8049b5c:	b003      	add	sp, #12
 8049b5e:	4770      	bx	lr
 8049b60:	20000024 	.word	0x20000024
 8049b64:	ffff0208 	.word	0xffff0208

08049b68 <__sread>:
 8049b68:	b510      	push	{r4, lr}
 8049b6a:	460c      	mov	r4, r1
 8049b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8049b70:	f000 f86c 	bl	8049c4c <_read_r>
 8049b74:	2800      	cmp	r0, #0
 8049b76:	bfab      	itete	ge
 8049b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8049b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8049b7c:	181b      	addge	r3, r3, r0
 8049b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8049b82:	bfac      	ite	ge
 8049b84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8049b86:	81a3      	strhlt	r3, [r4, #12]
 8049b88:	bd10      	pop	{r4, pc}

08049b8a <__swrite>:
 8049b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049b8e:	461f      	mov	r7, r3
 8049b90:	898b      	ldrh	r3, [r1, #12]
 8049b92:	05db      	lsls	r3, r3, #23
 8049b94:	4605      	mov	r5, r0
 8049b96:	460c      	mov	r4, r1
 8049b98:	4616      	mov	r6, r2
 8049b9a:	d505      	bpl.n	8049ba8 <__swrite+0x1e>
 8049b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8049ba0:	2302      	movs	r3, #2
 8049ba2:	2200      	movs	r2, #0
 8049ba4:	f000 f840 	bl	8049c28 <_lseek_r>
 8049ba8:	89a3      	ldrh	r3, [r4, #12]
 8049baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8049bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8049bb2:	81a3      	strh	r3, [r4, #12]
 8049bb4:	4632      	mov	r2, r6
 8049bb6:	463b      	mov	r3, r7
 8049bb8:	4628      	mov	r0, r5
 8049bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8049bbe:	f000 b857 	b.w	8049c70 <_write_r>

08049bc2 <__sseek>:
 8049bc2:	b510      	push	{r4, lr}
 8049bc4:	460c      	mov	r4, r1
 8049bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8049bca:	f000 f82d 	bl	8049c28 <_lseek_r>
 8049bce:	1c43      	adds	r3, r0, #1
 8049bd0:	89a3      	ldrh	r3, [r4, #12]
 8049bd2:	bf15      	itete	ne
 8049bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8049bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8049bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8049bde:	81a3      	strheq	r3, [r4, #12]
 8049be0:	bf18      	it	ne
 8049be2:	81a3      	strhne	r3, [r4, #12]
 8049be4:	bd10      	pop	{r4, pc}

08049be6 <__sclose>:
 8049be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8049bea:	f000 b80d 	b.w	8049c08 <_close_r>

08049bee <memset>:
 8049bee:	4402      	add	r2, r0
 8049bf0:	4603      	mov	r3, r0
 8049bf2:	4293      	cmp	r3, r2
 8049bf4:	d100      	bne.n	8049bf8 <memset+0xa>
 8049bf6:	4770      	bx	lr
 8049bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8049bfc:	e7f9      	b.n	8049bf2 <memset+0x4>
	...

08049c00 <_localeconv_r>:
 8049c00:	4800      	ldr	r0, [pc, #0]	@ (8049c04 <_localeconv_r+0x4>)
 8049c02:	4770      	bx	lr
 8049c04:	20000164 	.word	0x20000164

08049c08 <_close_r>:
 8049c08:	b538      	push	{r3, r4, r5, lr}
 8049c0a:	4d06      	ldr	r5, [pc, #24]	@ (8049c24 <_close_r+0x1c>)
 8049c0c:	2300      	movs	r3, #0
 8049c0e:	4604      	mov	r4, r0
 8049c10:	4608      	mov	r0, r1
 8049c12:	602b      	str	r3, [r5, #0]
 8049c14:	f7f8 fa16 	bl	8042044 <_close>
 8049c18:	1c43      	adds	r3, r0, #1
 8049c1a:	d102      	bne.n	8049c22 <_close_r+0x1a>
 8049c1c:	682b      	ldr	r3, [r5, #0]
 8049c1e:	b103      	cbz	r3, 8049c22 <_close_r+0x1a>
 8049c20:	6023      	str	r3, [r4, #0]
 8049c22:	bd38      	pop	{r3, r4, r5, pc}
 8049c24:	200132ac 	.word	0x200132ac

08049c28 <_lseek_r>:
 8049c28:	b538      	push	{r3, r4, r5, lr}
 8049c2a:	4d07      	ldr	r5, [pc, #28]	@ (8049c48 <_lseek_r+0x20>)
 8049c2c:	4604      	mov	r4, r0
 8049c2e:	4608      	mov	r0, r1
 8049c30:	4611      	mov	r1, r2
 8049c32:	2200      	movs	r2, #0
 8049c34:	602a      	str	r2, [r5, #0]
 8049c36:	461a      	mov	r2, r3
 8049c38:	f7f8 fa2b 	bl	8042092 <_lseek>
 8049c3c:	1c43      	adds	r3, r0, #1
 8049c3e:	d102      	bne.n	8049c46 <_lseek_r+0x1e>
 8049c40:	682b      	ldr	r3, [r5, #0]
 8049c42:	b103      	cbz	r3, 8049c46 <_lseek_r+0x1e>
 8049c44:	6023      	str	r3, [r4, #0]
 8049c46:	bd38      	pop	{r3, r4, r5, pc}
 8049c48:	200132ac 	.word	0x200132ac

08049c4c <_read_r>:
 8049c4c:	b538      	push	{r3, r4, r5, lr}
 8049c4e:	4d07      	ldr	r5, [pc, #28]	@ (8049c6c <_read_r+0x20>)
 8049c50:	4604      	mov	r4, r0
 8049c52:	4608      	mov	r0, r1
 8049c54:	4611      	mov	r1, r2
 8049c56:	2200      	movs	r2, #0
 8049c58:	602a      	str	r2, [r5, #0]
 8049c5a:	461a      	mov	r2, r3
 8049c5c:	f7f8 f9b9 	bl	8041fd2 <_read>
 8049c60:	1c43      	adds	r3, r0, #1
 8049c62:	d102      	bne.n	8049c6a <_read_r+0x1e>
 8049c64:	682b      	ldr	r3, [r5, #0]
 8049c66:	b103      	cbz	r3, 8049c6a <_read_r+0x1e>
 8049c68:	6023      	str	r3, [r4, #0]
 8049c6a:	bd38      	pop	{r3, r4, r5, pc}
 8049c6c:	200132ac 	.word	0x200132ac

08049c70 <_write_r>:
 8049c70:	b538      	push	{r3, r4, r5, lr}
 8049c72:	4d07      	ldr	r5, [pc, #28]	@ (8049c90 <_write_r+0x20>)
 8049c74:	4604      	mov	r4, r0
 8049c76:	4608      	mov	r0, r1
 8049c78:	4611      	mov	r1, r2
 8049c7a:	2200      	movs	r2, #0
 8049c7c:	602a      	str	r2, [r5, #0]
 8049c7e:	461a      	mov	r2, r3
 8049c80:	f7f8 f9c4 	bl	804200c <_write>
 8049c84:	1c43      	adds	r3, r0, #1
 8049c86:	d102      	bne.n	8049c8e <_write_r+0x1e>
 8049c88:	682b      	ldr	r3, [r5, #0]
 8049c8a:	b103      	cbz	r3, 8049c8e <_write_r+0x1e>
 8049c8c:	6023      	str	r3, [r4, #0]
 8049c8e:	bd38      	pop	{r3, r4, r5, pc}
 8049c90:	200132ac 	.word	0x200132ac

08049c94 <__errno>:
 8049c94:	4b01      	ldr	r3, [pc, #4]	@ (8049c9c <__errno+0x8>)
 8049c96:	6818      	ldr	r0, [r3, #0]
 8049c98:	4770      	bx	lr
 8049c9a:	bf00      	nop
 8049c9c:	20000024 	.word	0x20000024

08049ca0 <__libc_init_array>:
 8049ca0:	b570      	push	{r4, r5, r6, lr}
 8049ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8049cd8 <__libc_init_array+0x38>)
 8049ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8049cdc <__libc_init_array+0x3c>)
 8049ca6:	1b64      	subs	r4, r4, r5
 8049ca8:	10a4      	asrs	r4, r4, #2
 8049caa:	2600      	movs	r6, #0
 8049cac:	42a6      	cmp	r6, r4
 8049cae:	d109      	bne.n	8049cc4 <__libc_init_array+0x24>
 8049cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8049ce0 <__libc_init_array+0x40>)
 8049cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8049ce4 <__libc_init_array+0x44>)
 8049cb4:	f002 ffd4 	bl	804cc60 <_init>
 8049cb8:	1b64      	subs	r4, r4, r5
 8049cba:	10a4      	asrs	r4, r4, #2
 8049cbc:	2600      	movs	r6, #0
 8049cbe:	42a6      	cmp	r6, r4
 8049cc0:	d105      	bne.n	8049cce <__libc_init_array+0x2e>
 8049cc2:	bd70      	pop	{r4, r5, r6, pc}
 8049cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8049cc8:	4798      	blx	r3
 8049cca:	3601      	adds	r6, #1
 8049ccc:	e7ee      	b.n	8049cac <__libc_init_array+0xc>
 8049cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8049cd2:	4798      	blx	r3
 8049cd4:	3601      	adds	r6, #1
 8049cd6:	e7f2      	b.n	8049cbe <__libc_init_array+0x1e>
 8049cd8:	0804d258 	.word	0x0804d258
 8049cdc:	0804d258 	.word	0x0804d258
 8049ce0:	0804d258 	.word	0x0804d258
 8049ce4:	0804d25c 	.word	0x0804d25c

08049ce8 <__retarget_lock_init_recursive>:
 8049ce8:	4770      	bx	lr

08049cea <__retarget_lock_acquire_recursive>:
 8049cea:	4770      	bx	lr

08049cec <__retarget_lock_release_recursive>:
 8049cec:	4770      	bx	lr

08049cee <memcpy>:
 8049cee:	440a      	add	r2, r1
 8049cf0:	4291      	cmp	r1, r2
 8049cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8049cf6:	d100      	bne.n	8049cfa <memcpy+0xc>
 8049cf8:	4770      	bx	lr
 8049cfa:	b510      	push	{r4, lr}
 8049cfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8049d00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8049d04:	4291      	cmp	r1, r2
 8049d06:	d1f9      	bne.n	8049cfc <memcpy+0xe>
 8049d08:	bd10      	pop	{r4, pc}

08049d0a <quorem>:
 8049d0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049d0e:	6903      	ldr	r3, [r0, #16]
 8049d10:	690c      	ldr	r4, [r1, #16]
 8049d12:	42a3      	cmp	r3, r4
 8049d14:	4607      	mov	r7, r0
 8049d16:	db7e      	blt.n	8049e16 <quorem+0x10c>
 8049d18:	3c01      	subs	r4, #1
 8049d1a:	f101 0814 	add.w	r8, r1, #20
 8049d1e:	00a3      	lsls	r3, r4, #2
 8049d20:	f100 0514 	add.w	r5, r0, #20
 8049d24:	9300      	str	r3, [sp, #0]
 8049d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8049d2a:	9301      	str	r3, [sp, #4]
 8049d2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8049d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8049d34:	3301      	adds	r3, #1
 8049d36:	429a      	cmp	r2, r3
 8049d38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8049d3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8049d40:	d32e      	bcc.n	8049da0 <quorem+0x96>
 8049d42:	f04f 0a00 	mov.w	sl, #0
 8049d46:	46c4      	mov	ip, r8
 8049d48:	46ae      	mov	lr, r5
 8049d4a:	46d3      	mov	fp, sl
 8049d4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8049d50:	b298      	uxth	r0, r3
 8049d52:	fb06 a000 	mla	r0, r6, r0, sl
 8049d56:	0c02      	lsrs	r2, r0, #16
 8049d58:	0c1b      	lsrs	r3, r3, #16
 8049d5a:	fb06 2303 	mla	r3, r6, r3, r2
 8049d5e:	f8de 2000 	ldr.w	r2, [lr]
 8049d62:	b280      	uxth	r0, r0
 8049d64:	b292      	uxth	r2, r2
 8049d66:	1a12      	subs	r2, r2, r0
 8049d68:	445a      	add	r2, fp
 8049d6a:	f8de 0000 	ldr.w	r0, [lr]
 8049d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8049d72:	b29b      	uxth	r3, r3
 8049d74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8049d78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8049d7c:	b292      	uxth	r2, r2
 8049d7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8049d82:	45e1      	cmp	r9, ip
 8049d84:	f84e 2b04 	str.w	r2, [lr], #4
 8049d88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8049d8c:	d2de      	bcs.n	8049d4c <quorem+0x42>
 8049d8e:	9b00      	ldr	r3, [sp, #0]
 8049d90:	58eb      	ldr	r3, [r5, r3]
 8049d92:	b92b      	cbnz	r3, 8049da0 <quorem+0x96>
 8049d94:	9b01      	ldr	r3, [sp, #4]
 8049d96:	3b04      	subs	r3, #4
 8049d98:	429d      	cmp	r5, r3
 8049d9a:	461a      	mov	r2, r3
 8049d9c:	d32f      	bcc.n	8049dfe <quorem+0xf4>
 8049d9e:	613c      	str	r4, [r7, #16]
 8049da0:	4638      	mov	r0, r7
 8049da2:	f001 f97b 	bl	804b09c <__mcmp>
 8049da6:	2800      	cmp	r0, #0
 8049da8:	db25      	blt.n	8049df6 <quorem+0xec>
 8049daa:	4629      	mov	r1, r5
 8049dac:	2000      	movs	r0, #0
 8049dae:	f858 2b04 	ldr.w	r2, [r8], #4
 8049db2:	f8d1 c000 	ldr.w	ip, [r1]
 8049db6:	fa1f fe82 	uxth.w	lr, r2
 8049dba:	fa1f f38c 	uxth.w	r3, ip
 8049dbe:	eba3 030e 	sub.w	r3, r3, lr
 8049dc2:	4403      	add	r3, r0
 8049dc4:	0c12      	lsrs	r2, r2, #16
 8049dc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8049dca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8049dce:	b29b      	uxth	r3, r3
 8049dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8049dd4:	45c1      	cmp	r9, r8
 8049dd6:	f841 3b04 	str.w	r3, [r1], #4
 8049dda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8049dde:	d2e6      	bcs.n	8049dae <quorem+0xa4>
 8049de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8049de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8049de8:	b922      	cbnz	r2, 8049df4 <quorem+0xea>
 8049dea:	3b04      	subs	r3, #4
 8049dec:	429d      	cmp	r5, r3
 8049dee:	461a      	mov	r2, r3
 8049df0:	d30b      	bcc.n	8049e0a <quorem+0x100>
 8049df2:	613c      	str	r4, [r7, #16]
 8049df4:	3601      	adds	r6, #1
 8049df6:	4630      	mov	r0, r6
 8049df8:	b003      	add	sp, #12
 8049dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049dfe:	6812      	ldr	r2, [r2, #0]
 8049e00:	3b04      	subs	r3, #4
 8049e02:	2a00      	cmp	r2, #0
 8049e04:	d1cb      	bne.n	8049d9e <quorem+0x94>
 8049e06:	3c01      	subs	r4, #1
 8049e08:	e7c6      	b.n	8049d98 <quorem+0x8e>
 8049e0a:	6812      	ldr	r2, [r2, #0]
 8049e0c:	3b04      	subs	r3, #4
 8049e0e:	2a00      	cmp	r2, #0
 8049e10:	d1ef      	bne.n	8049df2 <quorem+0xe8>
 8049e12:	3c01      	subs	r4, #1
 8049e14:	e7ea      	b.n	8049dec <quorem+0xe2>
 8049e16:	2000      	movs	r0, #0
 8049e18:	e7ee      	b.n	8049df8 <quorem+0xee>
 8049e1a:	0000      	movs	r0, r0
 8049e1c:	0000      	movs	r0, r0
	...

08049e20 <_dtoa_r>:
 8049e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049e24:	69c7      	ldr	r7, [r0, #28]
 8049e26:	b099      	sub	sp, #100	@ 0x64
 8049e28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8049e2c:	ec55 4b10 	vmov	r4, r5, d0
 8049e30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8049e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8049e34:	4683      	mov	fp, r0
 8049e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8049e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8049e3a:	b97f      	cbnz	r7, 8049e5c <_dtoa_r+0x3c>
 8049e3c:	2010      	movs	r0, #16
 8049e3e:	f000 fdfd 	bl	804aa3c <malloc>
 8049e42:	4602      	mov	r2, r0
 8049e44:	f8cb 001c 	str.w	r0, [fp, #28]
 8049e48:	b920      	cbnz	r0, 8049e54 <_dtoa_r+0x34>
 8049e4a:	4ba7      	ldr	r3, [pc, #668]	@ (804a0e8 <_dtoa_r+0x2c8>)
 8049e4c:	21ef      	movs	r1, #239	@ 0xef
 8049e4e:	48a7      	ldr	r0, [pc, #668]	@ (804a0ec <_dtoa_r+0x2cc>)
 8049e50:	f001 fc5a 	bl	804b708 <__assert_func>
 8049e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8049e58:	6007      	str	r7, [r0, #0]
 8049e5a:	60c7      	str	r7, [r0, #12]
 8049e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8049e60:	6819      	ldr	r1, [r3, #0]
 8049e62:	b159      	cbz	r1, 8049e7c <_dtoa_r+0x5c>
 8049e64:	685a      	ldr	r2, [r3, #4]
 8049e66:	604a      	str	r2, [r1, #4]
 8049e68:	2301      	movs	r3, #1
 8049e6a:	4093      	lsls	r3, r2
 8049e6c:	608b      	str	r3, [r1, #8]
 8049e6e:	4658      	mov	r0, fp
 8049e70:	f000 feda 	bl	804ac28 <_Bfree>
 8049e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8049e78:	2200      	movs	r2, #0
 8049e7a:	601a      	str	r2, [r3, #0]
 8049e7c:	1e2b      	subs	r3, r5, #0
 8049e7e:	bfb9      	ittee	lt
 8049e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8049e84:	9303      	strlt	r3, [sp, #12]
 8049e86:	2300      	movge	r3, #0
 8049e88:	6033      	strge	r3, [r6, #0]
 8049e8a:	9f03      	ldr	r7, [sp, #12]
 8049e8c:	4b98      	ldr	r3, [pc, #608]	@ (804a0f0 <_dtoa_r+0x2d0>)
 8049e8e:	bfbc      	itt	lt
 8049e90:	2201      	movlt	r2, #1
 8049e92:	6032      	strlt	r2, [r6, #0]
 8049e94:	43bb      	bics	r3, r7
 8049e96:	d112      	bne.n	8049ebe <_dtoa_r+0x9e>
 8049e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8049e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8049e9e:	6013      	str	r3, [r2, #0]
 8049ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8049ea4:	4323      	orrs	r3, r4
 8049ea6:	f000 854d 	beq.w	804a944 <_dtoa_r+0xb24>
 8049eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8049eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 804a104 <_dtoa_r+0x2e4>
 8049eb0:	2b00      	cmp	r3, #0
 8049eb2:	f000 854f 	beq.w	804a954 <_dtoa_r+0xb34>
 8049eb6:	f10a 0303 	add.w	r3, sl, #3
 8049eba:	f000 bd49 	b.w	804a950 <_dtoa_r+0xb30>
 8049ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8049ec2:	2200      	movs	r2, #0
 8049ec4:	ec51 0b17 	vmov	r0, r1, d7
 8049ec8:	2300      	movs	r3, #0
 8049eca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8049ece:	f7f6 fe0b 	bl	8040ae8 <__aeabi_dcmpeq>
 8049ed2:	4680      	mov	r8, r0
 8049ed4:	b158      	cbz	r0, 8049eee <_dtoa_r+0xce>
 8049ed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8049ed8:	2301      	movs	r3, #1
 8049eda:	6013      	str	r3, [r2, #0]
 8049edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8049ede:	b113      	cbz	r3, 8049ee6 <_dtoa_r+0xc6>
 8049ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8049ee2:	4b84      	ldr	r3, [pc, #528]	@ (804a0f4 <_dtoa_r+0x2d4>)
 8049ee4:	6013      	str	r3, [r2, #0]
 8049ee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 804a108 <_dtoa_r+0x2e8>
 8049eea:	f000 bd33 	b.w	804a954 <_dtoa_r+0xb34>
 8049eee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8049ef2:	aa16      	add	r2, sp, #88	@ 0x58
 8049ef4:	a917      	add	r1, sp, #92	@ 0x5c
 8049ef6:	4658      	mov	r0, fp
 8049ef8:	f001 f980 	bl	804b1fc <__d2b>
 8049efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8049f00:	4681      	mov	r9, r0
 8049f02:	2e00      	cmp	r6, #0
 8049f04:	d077      	beq.n	8049ff6 <_dtoa_r+0x1d6>
 8049f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8049f08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8049f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8049f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8049f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8049f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8049f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8049f20:	4619      	mov	r1, r3
 8049f22:	2200      	movs	r2, #0
 8049f24:	4b74      	ldr	r3, [pc, #464]	@ (804a0f8 <_dtoa_r+0x2d8>)
 8049f26:	f7f6 f9bf 	bl	80402a8 <__aeabi_dsub>
 8049f2a:	a369      	add	r3, pc, #420	@ (adr r3, 804a0d0 <_dtoa_r+0x2b0>)
 8049f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049f30:	f7f6 fb72 	bl	8040618 <__aeabi_dmul>
 8049f34:	a368      	add	r3, pc, #416	@ (adr r3, 804a0d8 <_dtoa_r+0x2b8>)
 8049f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049f3a:	f7f6 f9b7 	bl	80402ac <__adddf3>
 8049f3e:	4604      	mov	r4, r0
 8049f40:	4630      	mov	r0, r6
 8049f42:	460d      	mov	r5, r1
 8049f44:	f7f6 fafe 	bl	8040544 <__aeabi_i2d>
 8049f48:	a365      	add	r3, pc, #404	@ (adr r3, 804a0e0 <_dtoa_r+0x2c0>)
 8049f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049f4e:	f7f6 fb63 	bl	8040618 <__aeabi_dmul>
 8049f52:	4602      	mov	r2, r0
 8049f54:	460b      	mov	r3, r1
 8049f56:	4620      	mov	r0, r4
 8049f58:	4629      	mov	r1, r5
 8049f5a:	f7f6 f9a7 	bl	80402ac <__adddf3>
 8049f5e:	4604      	mov	r4, r0
 8049f60:	460d      	mov	r5, r1
 8049f62:	f7f6 fe09 	bl	8040b78 <__aeabi_d2iz>
 8049f66:	2200      	movs	r2, #0
 8049f68:	4607      	mov	r7, r0
 8049f6a:	2300      	movs	r3, #0
 8049f6c:	4620      	mov	r0, r4
 8049f6e:	4629      	mov	r1, r5
 8049f70:	f7f6 fdc4 	bl	8040afc <__aeabi_dcmplt>
 8049f74:	b140      	cbz	r0, 8049f88 <_dtoa_r+0x168>
 8049f76:	4638      	mov	r0, r7
 8049f78:	f7f6 fae4 	bl	8040544 <__aeabi_i2d>
 8049f7c:	4622      	mov	r2, r4
 8049f7e:	462b      	mov	r3, r5
 8049f80:	f7f6 fdb2 	bl	8040ae8 <__aeabi_dcmpeq>
 8049f84:	b900      	cbnz	r0, 8049f88 <_dtoa_r+0x168>
 8049f86:	3f01      	subs	r7, #1
 8049f88:	2f16      	cmp	r7, #22
 8049f8a:	d851      	bhi.n	804a030 <_dtoa_r+0x210>
 8049f8c:	4b5b      	ldr	r3, [pc, #364]	@ (804a0fc <_dtoa_r+0x2dc>)
 8049f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8049f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8049f9a:	f7f6 fdaf 	bl	8040afc <__aeabi_dcmplt>
 8049f9e:	2800      	cmp	r0, #0
 8049fa0:	d048      	beq.n	804a034 <_dtoa_r+0x214>
 8049fa2:	3f01      	subs	r7, #1
 8049fa4:	2300      	movs	r3, #0
 8049fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8049fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8049faa:	1b9b      	subs	r3, r3, r6
 8049fac:	1e5a      	subs	r2, r3, #1
 8049fae:	bf44      	itt	mi
 8049fb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8049fb4:	2300      	movmi	r3, #0
 8049fb6:	9208      	str	r2, [sp, #32]
 8049fb8:	bf54      	ite	pl
 8049fba:	f04f 0800 	movpl.w	r8, #0
 8049fbe:	9308      	strmi	r3, [sp, #32]
 8049fc0:	2f00      	cmp	r7, #0
 8049fc2:	db39      	blt.n	804a038 <_dtoa_r+0x218>
 8049fc4:	9b08      	ldr	r3, [sp, #32]
 8049fc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8049fc8:	443b      	add	r3, r7
 8049fca:	9308      	str	r3, [sp, #32]
 8049fcc:	2300      	movs	r3, #0
 8049fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8049fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8049fd2:	2b09      	cmp	r3, #9
 8049fd4:	d864      	bhi.n	804a0a0 <_dtoa_r+0x280>
 8049fd6:	2b05      	cmp	r3, #5
 8049fd8:	bfc4      	itt	gt
 8049fda:	3b04      	subgt	r3, #4
 8049fdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8049fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8049fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8049fe4:	bfcc      	ite	gt
 8049fe6:	2400      	movgt	r4, #0
 8049fe8:	2401      	movle	r4, #1
 8049fea:	2b03      	cmp	r3, #3
 8049fec:	d863      	bhi.n	804a0b6 <_dtoa_r+0x296>
 8049fee:	e8df f003 	tbb	[pc, r3]
 8049ff2:	372a      	.short	0x372a
 8049ff4:	5535      	.short	0x5535
 8049ff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8049ffa:	441e      	add	r6, r3
 8049ffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 804a000:	2b20      	cmp	r3, #32
 804a002:	bfc1      	itttt	gt
 804a004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 804a008:	409f      	lslgt	r7, r3
 804a00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 804a00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 804a012:	bfd6      	itet	le
 804a014:	f1c3 0320 	rsble	r3, r3, #32
 804a018:	ea47 0003 	orrgt.w	r0, r7, r3
 804a01c:	fa04 f003 	lslle.w	r0, r4, r3
 804a020:	f7f6 fa80 	bl	8040524 <__aeabi_ui2d>
 804a024:	2201      	movs	r2, #1
 804a026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 804a02a:	3e01      	subs	r6, #1
 804a02c:	9214      	str	r2, [sp, #80]	@ 0x50
 804a02e:	e777      	b.n	8049f20 <_dtoa_r+0x100>
 804a030:	2301      	movs	r3, #1
 804a032:	e7b8      	b.n	8049fa6 <_dtoa_r+0x186>
 804a034:	9012      	str	r0, [sp, #72]	@ 0x48
 804a036:	e7b7      	b.n	8049fa8 <_dtoa_r+0x188>
 804a038:	427b      	negs	r3, r7
 804a03a:	930a      	str	r3, [sp, #40]	@ 0x28
 804a03c:	2300      	movs	r3, #0
 804a03e:	eba8 0807 	sub.w	r8, r8, r7
 804a042:	930f      	str	r3, [sp, #60]	@ 0x3c
 804a044:	e7c4      	b.n	8049fd0 <_dtoa_r+0x1b0>
 804a046:	2300      	movs	r3, #0
 804a048:	930b      	str	r3, [sp, #44]	@ 0x2c
 804a04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 804a04c:	2b00      	cmp	r3, #0
 804a04e:	dc35      	bgt.n	804a0bc <_dtoa_r+0x29c>
 804a050:	2301      	movs	r3, #1
 804a052:	9300      	str	r3, [sp, #0]
 804a054:	9307      	str	r3, [sp, #28]
 804a056:	461a      	mov	r2, r3
 804a058:	920e      	str	r2, [sp, #56]	@ 0x38
 804a05a:	e00b      	b.n	804a074 <_dtoa_r+0x254>
 804a05c:	2301      	movs	r3, #1
 804a05e:	e7f3      	b.n	804a048 <_dtoa_r+0x228>
 804a060:	2300      	movs	r3, #0
 804a062:	930b      	str	r3, [sp, #44]	@ 0x2c
 804a064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 804a066:	18fb      	adds	r3, r7, r3
 804a068:	9300      	str	r3, [sp, #0]
 804a06a:	3301      	adds	r3, #1
 804a06c:	2b01      	cmp	r3, #1
 804a06e:	9307      	str	r3, [sp, #28]
 804a070:	bfb8      	it	lt
 804a072:	2301      	movlt	r3, #1
 804a074:	f8db 001c 	ldr.w	r0, [fp, #28]
 804a078:	2100      	movs	r1, #0
 804a07a:	2204      	movs	r2, #4
 804a07c:	f102 0514 	add.w	r5, r2, #20
 804a080:	429d      	cmp	r5, r3
 804a082:	d91f      	bls.n	804a0c4 <_dtoa_r+0x2a4>
 804a084:	6041      	str	r1, [r0, #4]
 804a086:	4658      	mov	r0, fp
 804a088:	f000 fd8e 	bl	804aba8 <_Balloc>
 804a08c:	4682      	mov	sl, r0
 804a08e:	2800      	cmp	r0, #0
 804a090:	d13c      	bne.n	804a10c <_dtoa_r+0x2ec>
 804a092:	4b1b      	ldr	r3, [pc, #108]	@ (804a100 <_dtoa_r+0x2e0>)
 804a094:	4602      	mov	r2, r0
 804a096:	f240 11af 	movw	r1, #431	@ 0x1af
 804a09a:	e6d8      	b.n	8049e4e <_dtoa_r+0x2e>
 804a09c:	2301      	movs	r3, #1
 804a09e:	e7e0      	b.n	804a062 <_dtoa_r+0x242>
 804a0a0:	2401      	movs	r4, #1
 804a0a2:	2300      	movs	r3, #0
 804a0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 804a0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 804a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 804a0ac:	9300      	str	r3, [sp, #0]
 804a0ae:	9307      	str	r3, [sp, #28]
 804a0b0:	2200      	movs	r2, #0
 804a0b2:	2312      	movs	r3, #18
 804a0b4:	e7d0      	b.n	804a058 <_dtoa_r+0x238>
 804a0b6:	2301      	movs	r3, #1
 804a0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 804a0ba:	e7f5      	b.n	804a0a8 <_dtoa_r+0x288>
 804a0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 804a0be:	9300      	str	r3, [sp, #0]
 804a0c0:	9307      	str	r3, [sp, #28]
 804a0c2:	e7d7      	b.n	804a074 <_dtoa_r+0x254>
 804a0c4:	3101      	adds	r1, #1
 804a0c6:	0052      	lsls	r2, r2, #1
 804a0c8:	e7d8      	b.n	804a07c <_dtoa_r+0x25c>
 804a0ca:	bf00      	nop
 804a0cc:	f3af 8000 	nop.w
 804a0d0:	636f4361 	.word	0x636f4361
 804a0d4:	3fd287a7 	.word	0x3fd287a7
 804a0d8:	8b60c8b3 	.word	0x8b60c8b3
 804a0dc:	3fc68a28 	.word	0x3fc68a28
 804a0e0:	509f79fb 	.word	0x509f79fb
 804a0e4:	3fd34413 	.word	0x3fd34413
 804a0e8:	0804cef1 	.word	0x0804cef1
 804a0ec:	0804cf08 	.word	0x0804cf08
 804a0f0:	7ff00000 	.word	0x7ff00000
 804a0f4:	0804cec1 	.word	0x0804cec1
 804a0f8:	3ff80000 	.word	0x3ff80000
 804a0fc:	0804d000 	.word	0x0804d000
 804a100:	0804cf60 	.word	0x0804cf60
 804a104:	0804ceed 	.word	0x0804ceed
 804a108:	0804cec0 	.word	0x0804cec0
 804a10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 804a110:	6018      	str	r0, [r3, #0]
 804a112:	9b07      	ldr	r3, [sp, #28]
 804a114:	2b0e      	cmp	r3, #14
 804a116:	f200 80a4 	bhi.w	804a262 <_dtoa_r+0x442>
 804a11a:	2c00      	cmp	r4, #0
 804a11c:	f000 80a1 	beq.w	804a262 <_dtoa_r+0x442>
 804a120:	2f00      	cmp	r7, #0
 804a122:	dd33      	ble.n	804a18c <_dtoa_r+0x36c>
 804a124:	4bad      	ldr	r3, [pc, #692]	@ (804a3dc <_dtoa_r+0x5bc>)
 804a126:	f007 020f 	and.w	r2, r7, #15
 804a12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a12e:	ed93 7b00 	vldr	d7, [r3]
 804a132:	05f8      	lsls	r0, r7, #23
 804a134:	ed8d 7b04 	vstr	d7, [sp, #16]
 804a138:	ea4f 1427 	mov.w	r4, r7, asr #4
 804a13c:	d516      	bpl.n	804a16c <_dtoa_r+0x34c>
 804a13e:	4ba8      	ldr	r3, [pc, #672]	@ (804a3e0 <_dtoa_r+0x5c0>)
 804a140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 804a144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 804a148:	f7f6 fb90 	bl	804086c <__aeabi_ddiv>
 804a14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a150:	f004 040f 	and.w	r4, r4, #15
 804a154:	2603      	movs	r6, #3
 804a156:	4da2      	ldr	r5, [pc, #648]	@ (804a3e0 <_dtoa_r+0x5c0>)
 804a158:	b954      	cbnz	r4, 804a170 <_dtoa_r+0x350>
 804a15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804a15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a162:	f7f6 fb83 	bl	804086c <__aeabi_ddiv>
 804a166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a16a:	e028      	b.n	804a1be <_dtoa_r+0x39e>
 804a16c:	2602      	movs	r6, #2
 804a16e:	e7f2      	b.n	804a156 <_dtoa_r+0x336>
 804a170:	07e1      	lsls	r1, r4, #31
 804a172:	d508      	bpl.n	804a186 <_dtoa_r+0x366>
 804a174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804a178:	e9d5 2300 	ldrd	r2, r3, [r5]
 804a17c:	f7f6 fa4c 	bl	8040618 <__aeabi_dmul>
 804a180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804a184:	3601      	adds	r6, #1
 804a186:	1064      	asrs	r4, r4, #1
 804a188:	3508      	adds	r5, #8
 804a18a:	e7e5      	b.n	804a158 <_dtoa_r+0x338>
 804a18c:	f000 80d2 	beq.w	804a334 <_dtoa_r+0x514>
 804a190:	427c      	negs	r4, r7
 804a192:	4b92      	ldr	r3, [pc, #584]	@ (804a3dc <_dtoa_r+0x5bc>)
 804a194:	4d92      	ldr	r5, [pc, #584]	@ (804a3e0 <_dtoa_r+0x5c0>)
 804a196:	f004 020f 	and.w	r2, r4, #15
 804a19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 804a1a6:	f7f6 fa37 	bl	8040618 <__aeabi_dmul>
 804a1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a1ae:	1124      	asrs	r4, r4, #4
 804a1b0:	2300      	movs	r3, #0
 804a1b2:	2602      	movs	r6, #2
 804a1b4:	2c00      	cmp	r4, #0
 804a1b6:	f040 80b2 	bne.w	804a31e <_dtoa_r+0x4fe>
 804a1ba:	2b00      	cmp	r3, #0
 804a1bc:	d1d3      	bne.n	804a166 <_dtoa_r+0x346>
 804a1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 804a1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 804a1c4:	2b00      	cmp	r3, #0
 804a1c6:	f000 80b7 	beq.w	804a338 <_dtoa_r+0x518>
 804a1ca:	4b86      	ldr	r3, [pc, #536]	@ (804a3e4 <_dtoa_r+0x5c4>)
 804a1cc:	2200      	movs	r2, #0
 804a1ce:	4620      	mov	r0, r4
 804a1d0:	4629      	mov	r1, r5
 804a1d2:	f7f6 fc93 	bl	8040afc <__aeabi_dcmplt>
 804a1d6:	2800      	cmp	r0, #0
 804a1d8:	f000 80ae 	beq.w	804a338 <_dtoa_r+0x518>
 804a1dc:	9b07      	ldr	r3, [sp, #28]
 804a1de:	2b00      	cmp	r3, #0
 804a1e0:	f000 80aa 	beq.w	804a338 <_dtoa_r+0x518>
 804a1e4:	9b00      	ldr	r3, [sp, #0]
 804a1e6:	2b00      	cmp	r3, #0
 804a1e8:	dd37      	ble.n	804a25a <_dtoa_r+0x43a>
 804a1ea:	1e7b      	subs	r3, r7, #1
 804a1ec:	9304      	str	r3, [sp, #16]
 804a1ee:	4620      	mov	r0, r4
 804a1f0:	4b7d      	ldr	r3, [pc, #500]	@ (804a3e8 <_dtoa_r+0x5c8>)
 804a1f2:	2200      	movs	r2, #0
 804a1f4:	4629      	mov	r1, r5
 804a1f6:	f7f6 fa0f 	bl	8040618 <__aeabi_dmul>
 804a1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a1fe:	9c00      	ldr	r4, [sp, #0]
 804a200:	3601      	adds	r6, #1
 804a202:	4630      	mov	r0, r6
 804a204:	f7f6 f99e 	bl	8040544 <__aeabi_i2d>
 804a208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804a20c:	f7f6 fa04 	bl	8040618 <__aeabi_dmul>
 804a210:	4b76      	ldr	r3, [pc, #472]	@ (804a3ec <_dtoa_r+0x5cc>)
 804a212:	2200      	movs	r2, #0
 804a214:	f7f6 f84a 	bl	80402ac <__adddf3>
 804a218:	4605      	mov	r5, r0
 804a21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 804a21e:	2c00      	cmp	r4, #0
 804a220:	f040 808d 	bne.w	804a33e <_dtoa_r+0x51e>
 804a224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a228:	4b71      	ldr	r3, [pc, #452]	@ (804a3f0 <_dtoa_r+0x5d0>)
 804a22a:	2200      	movs	r2, #0
 804a22c:	f7f6 f83c 	bl	80402a8 <__aeabi_dsub>
 804a230:	4602      	mov	r2, r0
 804a232:	460b      	mov	r3, r1
 804a234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 804a238:	462a      	mov	r2, r5
 804a23a:	4633      	mov	r3, r6
 804a23c:	f7f6 fc7c 	bl	8040b38 <__aeabi_dcmpgt>
 804a240:	2800      	cmp	r0, #0
 804a242:	f040 828b 	bne.w	804a75c <_dtoa_r+0x93c>
 804a246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a24a:	462a      	mov	r2, r5
 804a24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 804a250:	f7f6 fc54 	bl	8040afc <__aeabi_dcmplt>
 804a254:	2800      	cmp	r0, #0
 804a256:	f040 8128 	bne.w	804a4aa <_dtoa_r+0x68a>
 804a25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 804a25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 804a262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 804a264:	2b00      	cmp	r3, #0
 804a266:	f2c0 815a 	blt.w	804a51e <_dtoa_r+0x6fe>
 804a26a:	2f0e      	cmp	r7, #14
 804a26c:	f300 8157 	bgt.w	804a51e <_dtoa_r+0x6fe>
 804a270:	4b5a      	ldr	r3, [pc, #360]	@ (804a3dc <_dtoa_r+0x5bc>)
 804a272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 804a276:	ed93 7b00 	vldr	d7, [r3]
 804a27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 804a27c:	2b00      	cmp	r3, #0
 804a27e:	ed8d 7b00 	vstr	d7, [sp]
 804a282:	da03      	bge.n	804a28c <_dtoa_r+0x46c>
 804a284:	9b07      	ldr	r3, [sp, #28]
 804a286:	2b00      	cmp	r3, #0
 804a288:	f340 8101 	ble.w	804a48e <_dtoa_r+0x66e>
 804a28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 804a290:	4656      	mov	r6, sl
 804a292:	e9dd 2300 	ldrd	r2, r3, [sp]
 804a296:	4620      	mov	r0, r4
 804a298:	4629      	mov	r1, r5
 804a29a:	f7f6 fae7 	bl	804086c <__aeabi_ddiv>
 804a29e:	f7f6 fc6b 	bl	8040b78 <__aeabi_d2iz>
 804a2a2:	4680      	mov	r8, r0
 804a2a4:	f7f6 f94e 	bl	8040544 <__aeabi_i2d>
 804a2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 804a2ac:	f7f6 f9b4 	bl	8040618 <__aeabi_dmul>
 804a2b0:	4602      	mov	r2, r0
 804a2b2:	460b      	mov	r3, r1
 804a2b4:	4620      	mov	r0, r4
 804a2b6:	4629      	mov	r1, r5
 804a2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 804a2bc:	f7f5 fff4 	bl	80402a8 <__aeabi_dsub>
 804a2c0:	f806 4b01 	strb.w	r4, [r6], #1
 804a2c4:	9d07      	ldr	r5, [sp, #28]
 804a2c6:	eba6 040a 	sub.w	r4, r6, sl
 804a2ca:	42a5      	cmp	r5, r4
 804a2cc:	4602      	mov	r2, r0
 804a2ce:	460b      	mov	r3, r1
 804a2d0:	f040 8117 	bne.w	804a502 <_dtoa_r+0x6e2>
 804a2d4:	f7f5 ffea 	bl	80402ac <__adddf3>
 804a2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 804a2dc:	4604      	mov	r4, r0
 804a2de:	460d      	mov	r5, r1
 804a2e0:	f7f6 fc2a 	bl	8040b38 <__aeabi_dcmpgt>
 804a2e4:	2800      	cmp	r0, #0
 804a2e6:	f040 80f9 	bne.w	804a4dc <_dtoa_r+0x6bc>
 804a2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 804a2ee:	4620      	mov	r0, r4
 804a2f0:	4629      	mov	r1, r5
 804a2f2:	f7f6 fbf9 	bl	8040ae8 <__aeabi_dcmpeq>
 804a2f6:	b118      	cbz	r0, 804a300 <_dtoa_r+0x4e0>
 804a2f8:	f018 0f01 	tst.w	r8, #1
 804a2fc:	f040 80ee 	bne.w	804a4dc <_dtoa_r+0x6bc>
 804a300:	4649      	mov	r1, r9
 804a302:	4658      	mov	r0, fp
 804a304:	f000 fc90 	bl	804ac28 <_Bfree>
 804a308:	2300      	movs	r3, #0
 804a30a:	7033      	strb	r3, [r6, #0]
 804a30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 804a30e:	3701      	adds	r7, #1
 804a310:	601f      	str	r7, [r3, #0]
 804a312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 804a314:	2b00      	cmp	r3, #0
 804a316:	f000 831d 	beq.w	804a954 <_dtoa_r+0xb34>
 804a31a:	601e      	str	r6, [r3, #0]
 804a31c:	e31a      	b.n	804a954 <_dtoa_r+0xb34>
 804a31e:	07e2      	lsls	r2, r4, #31
 804a320:	d505      	bpl.n	804a32e <_dtoa_r+0x50e>
 804a322:	e9d5 2300 	ldrd	r2, r3, [r5]
 804a326:	f7f6 f977 	bl	8040618 <__aeabi_dmul>
 804a32a:	3601      	adds	r6, #1
 804a32c:	2301      	movs	r3, #1
 804a32e:	1064      	asrs	r4, r4, #1
 804a330:	3508      	adds	r5, #8
 804a332:	e73f      	b.n	804a1b4 <_dtoa_r+0x394>
 804a334:	2602      	movs	r6, #2
 804a336:	e742      	b.n	804a1be <_dtoa_r+0x39e>
 804a338:	9c07      	ldr	r4, [sp, #28]
 804a33a:	9704      	str	r7, [sp, #16]
 804a33c:	e761      	b.n	804a202 <_dtoa_r+0x3e2>
 804a33e:	4b27      	ldr	r3, [pc, #156]	@ (804a3dc <_dtoa_r+0x5bc>)
 804a340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 804a342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 804a346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 804a34a:	4454      	add	r4, sl
 804a34c:	2900      	cmp	r1, #0
 804a34e:	d053      	beq.n	804a3f8 <_dtoa_r+0x5d8>
 804a350:	4928      	ldr	r1, [pc, #160]	@ (804a3f4 <_dtoa_r+0x5d4>)
 804a352:	2000      	movs	r0, #0
 804a354:	f7f6 fa8a 	bl	804086c <__aeabi_ddiv>
 804a358:	4633      	mov	r3, r6
 804a35a:	462a      	mov	r2, r5
 804a35c:	f7f5 ffa4 	bl	80402a8 <__aeabi_dsub>
 804a360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 804a364:	4656      	mov	r6, sl
 804a366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a36a:	f7f6 fc05 	bl	8040b78 <__aeabi_d2iz>
 804a36e:	4605      	mov	r5, r0
 804a370:	f7f6 f8e8 	bl	8040544 <__aeabi_i2d>
 804a374:	4602      	mov	r2, r0
 804a376:	460b      	mov	r3, r1
 804a378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a37c:	f7f5 ff94 	bl	80402a8 <__aeabi_dsub>
 804a380:	3530      	adds	r5, #48	@ 0x30
 804a382:	4602      	mov	r2, r0
 804a384:	460b      	mov	r3, r1
 804a386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 804a38a:	f806 5b01 	strb.w	r5, [r6], #1
 804a38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 804a392:	f7f6 fbb3 	bl	8040afc <__aeabi_dcmplt>
 804a396:	2800      	cmp	r0, #0
 804a398:	d171      	bne.n	804a47e <_dtoa_r+0x65e>
 804a39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804a39e:	4911      	ldr	r1, [pc, #68]	@ (804a3e4 <_dtoa_r+0x5c4>)
 804a3a0:	2000      	movs	r0, #0
 804a3a2:	f7f5 ff81 	bl	80402a8 <__aeabi_dsub>
 804a3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 804a3aa:	f7f6 fba7 	bl	8040afc <__aeabi_dcmplt>
 804a3ae:	2800      	cmp	r0, #0
 804a3b0:	f040 8095 	bne.w	804a4de <_dtoa_r+0x6be>
 804a3b4:	42a6      	cmp	r6, r4
 804a3b6:	f43f af50 	beq.w	804a25a <_dtoa_r+0x43a>
 804a3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 804a3be:	4b0a      	ldr	r3, [pc, #40]	@ (804a3e8 <_dtoa_r+0x5c8>)
 804a3c0:	2200      	movs	r2, #0
 804a3c2:	f7f6 f929 	bl	8040618 <__aeabi_dmul>
 804a3c6:	4b08      	ldr	r3, [pc, #32]	@ (804a3e8 <_dtoa_r+0x5c8>)
 804a3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 804a3cc:	2200      	movs	r2, #0
 804a3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a3d2:	f7f6 f921 	bl	8040618 <__aeabi_dmul>
 804a3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a3da:	e7c4      	b.n	804a366 <_dtoa_r+0x546>
 804a3dc:	0804d000 	.word	0x0804d000
 804a3e0:	0804cfd8 	.word	0x0804cfd8
 804a3e4:	3ff00000 	.word	0x3ff00000
 804a3e8:	40240000 	.word	0x40240000
 804a3ec:	401c0000 	.word	0x401c0000
 804a3f0:	40140000 	.word	0x40140000
 804a3f4:	3fe00000 	.word	0x3fe00000
 804a3f8:	4631      	mov	r1, r6
 804a3fa:	4628      	mov	r0, r5
 804a3fc:	f7f6 f90c 	bl	8040618 <__aeabi_dmul>
 804a400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 804a404:	9415      	str	r4, [sp, #84]	@ 0x54
 804a406:	4656      	mov	r6, sl
 804a408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a40c:	f7f6 fbb4 	bl	8040b78 <__aeabi_d2iz>
 804a410:	4605      	mov	r5, r0
 804a412:	f7f6 f897 	bl	8040544 <__aeabi_i2d>
 804a416:	4602      	mov	r2, r0
 804a418:	460b      	mov	r3, r1
 804a41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a41e:	f7f5 ff43 	bl	80402a8 <__aeabi_dsub>
 804a422:	3530      	adds	r5, #48	@ 0x30
 804a424:	f806 5b01 	strb.w	r5, [r6], #1
 804a428:	4602      	mov	r2, r0
 804a42a:	460b      	mov	r3, r1
 804a42c:	42a6      	cmp	r6, r4
 804a42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 804a432:	f04f 0200 	mov.w	r2, #0
 804a436:	d124      	bne.n	804a482 <_dtoa_r+0x662>
 804a438:	4bac      	ldr	r3, [pc, #688]	@ (804a6ec <_dtoa_r+0x8cc>)
 804a43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 804a43e:	f7f5 ff35 	bl	80402ac <__adddf3>
 804a442:	4602      	mov	r2, r0
 804a444:	460b      	mov	r3, r1
 804a446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a44a:	f7f6 fb75 	bl	8040b38 <__aeabi_dcmpgt>
 804a44e:	2800      	cmp	r0, #0
 804a450:	d145      	bne.n	804a4de <_dtoa_r+0x6be>
 804a452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 804a456:	49a5      	ldr	r1, [pc, #660]	@ (804a6ec <_dtoa_r+0x8cc>)
 804a458:	2000      	movs	r0, #0
 804a45a:	f7f5 ff25 	bl	80402a8 <__aeabi_dsub>
 804a45e:	4602      	mov	r2, r0
 804a460:	460b      	mov	r3, r1
 804a462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804a466:	f7f6 fb49 	bl	8040afc <__aeabi_dcmplt>
 804a46a:	2800      	cmp	r0, #0
 804a46c:	f43f aef5 	beq.w	804a25a <_dtoa_r+0x43a>
 804a470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 804a472:	1e73      	subs	r3, r6, #1
 804a474:	9315      	str	r3, [sp, #84]	@ 0x54
 804a476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 804a47a:	2b30      	cmp	r3, #48	@ 0x30
 804a47c:	d0f8      	beq.n	804a470 <_dtoa_r+0x650>
 804a47e:	9f04      	ldr	r7, [sp, #16]
 804a480:	e73e      	b.n	804a300 <_dtoa_r+0x4e0>
 804a482:	4b9b      	ldr	r3, [pc, #620]	@ (804a6f0 <_dtoa_r+0x8d0>)
 804a484:	f7f6 f8c8 	bl	8040618 <__aeabi_dmul>
 804a488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804a48c:	e7bc      	b.n	804a408 <_dtoa_r+0x5e8>
 804a48e:	d10c      	bne.n	804a4aa <_dtoa_r+0x68a>
 804a490:	4b98      	ldr	r3, [pc, #608]	@ (804a6f4 <_dtoa_r+0x8d4>)
 804a492:	2200      	movs	r2, #0
 804a494:	e9dd 0100 	ldrd	r0, r1, [sp]
 804a498:	f7f6 f8be 	bl	8040618 <__aeabi_dmul>
 804a49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804a4a0:	f7f6 fb40 	bl	8040b24 <__aeabi_dcmpge>
 804a4a4:	2800      	cmp	r0, #0
 804a4a6:	f000 8157 	beq.w	804a758 <_dtoa_r+0x938>
 804a4aa:	2400      	movs	r4, #0
 804a4ac:	4625      	mov	r5, r4
 804a4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 804a4b0:	43db      	mvns	r3, r3
 804a4b2:	9304      	str	r3, [sp, #16]
 804a4b4:	4656      	mov	r6, sl
 804a4b6:	2700      	movs	r7, #0
 804a4b8:	4621      	mov	r1, r4
 804a4ba:	4658      	mov	r0, fp
 804a4bc:	f000 fbb4 	bl	804ac28 <_Bfree>
 804a4c0:	2d00      	cmp	r5, #0
 804a4c2:	d0dc      	beq.n	804a47e <_dtoa_r+0x65e>
 804a4c4:	b12f      	cbz	r7, 804a4d2 <_dtoa_r+0x6b2>
 804a4c6:	42af      	cmp	r7, r5
 804a4c8:	d003      	beq.n	804a4d2 <_dtoa_r+0x6b2>
 804a4ca:	4639      	mov	r1, r7
 804a4cc:	4658      	mov	r0, fp
 804a4ce:	f000 fbab 	bl	804ac28 <_Bfree>
 804a4d2:	4629      	mov	r1, r5
 804a4d4:	4658      	mov	r0, fp
 804a4d6:	f000 fba7 	bl	804ac28 <_Bfree>
 804a4da:	e7d0      	b.n	804a47e <_dtoa_r+0x65e>
 804a4dc:	9704      	str	r7, [sp, #16]
 804a4de:	4633      	mov	r3, r6
 804a4e0:	461e      	mov	r6, r3
 804a4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804a4e6:	2a39      	cmp	r2, #57	@ 0x39
 804a4e8:	d107      	bne.n	804a4fa <_dtoa_r+0x6da>
 804a4ea:	459a      	cmp	sl, r3
 804a4ec:	d1f8      	bne.n	804a4e0 <_dtoa_r+0x6c0>
 804a4ee:	9a04      	ldr	r2, [sp, #16]
 804a4f0:	3201      	adds	r2, #1
 804a4f2:	9204      	str	r2, [sp, #16]
 804a4f4:	2230      	movs	r2, #48	@ 0x30
 804a4f6:	f88a 2000 	strb.w	r2, [sl]
 804a4fa:	781a      	ldrb	r2, [r3, #0]
 804a4fc:	3201      	adds	r2, #1
 804a4fe:	701a      	strb	r2, [r3, #0]
 804a500:	e7bd      	b.n	804a47e <_dtoa_r+0x65e>
 804a502:	4b7b      	ldr	r3, [pc, #492]	@ (804a6f0 <_dtoa_r+0x8d0>)
 804a504:	2200      	movs	r2, #0
 804a506:	f7f6 f887 	bl	8040618 <__aeabi_dmul>
 804a50a:	2200      	movs	r2, #0
 804a50c:	2300      	movs	r3, #0
 804a50e:	4604      	mov	r4, r0
 804a510:	460d      	mov	r5, r1
 804a512:	f7f6 fae9 	bl	8040ae8 <__aeabi_dcmpeq>
 804a516:	2800      	cmp	r0, #0
 804a518:	f43f aebb 	beq.w	804a292 <_dtoa_r+0x472>
 804a51c:	e6f0      	b.n	804a300 <_dtoa_r+0x4e0>
 804a51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 804a520:	2a00      	cmp	r2, #0
 804a522:	f000 80db 	beq.w	804a6dc <_dtoa_r+0x8bc>
 804a526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804a528:	2a01      	cmp	r2, #1
 804a52a:	f300 80bf 	bgt.w	804a6ac <_dtoa_r+0x88c>
 804a52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 804a530:	2a00      	cmp	r2, #0
 804a532:	f000 80b7 	beq.w	804a6a4 <_dtoa_r+0x884>
 804a536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 804a53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 804a53c:	4646      	mov	r6, r8
 804a53e:	9a08      	ldr	r2, [sp, #32]
 804a540:	2101      	movs	r1, #1
 804a542:	441a      	add	r2, r3
 804a544:	4658      	mov	r0, fp
 804a546:	4498      	add	r8, r3
 804a548:	9208      	str	r2, [sp, #32]
 804a54a:	f000 fc21 	bl	804ad90 <__i2b>
 804a54e:	4605      	mov	r5, r0
 804a550:	b15e      	cbz	r6, 804a56a <_dtoa_r+0x74a>
 804a552:	9b08      	ldr	r3, [sp, #32]
 804a554:	2b00      	cmp	r3, #0
 804a556:	dd08      	ble.n	804a56a <_dtoa_r+0x74a>
 804a558:	42b3      	cmp	r3, r6
 804a55a:	9a08      	ldr	r2, [sp, #32]
 804a55c:	bfa8      	it	ge
 804a55e:	4633      	movge	r3, r6
 804a560:	eba8 0803 	sub.w	r8, r8, r3
 804a564:	1af6      	subs	r6, r6, r3
 804a566:	1ad3      	subs	r3, r2, r3
 804a568:	9308      	str	r3, [sp, #32]
 804a56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804a56c:	b1f3      	cbz	r3, 804a5ac <_dtoa_r+0x78c>
 804a56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 804a570:	2b00      	cmp	r3, #0
 804a572:	f000 80b7 	beq.w	804a6e4 <_dtoa_r+0x8c4>
 804a576:	b18c      	cbz	r4, 804a59c <_dtoa_r+0x77c>
 804a578:	4629      	mov	r1, r5
 804a57a:	4622      	mov	r2, r4
 804a57c:	4658      	mov	r0, fp
 804a57e:	f000 fcc7 	bl	804af10 <__pow5mult>
 804a582:	464a      	mov	r2, r9
 804a584:	4601      	mov	r1, r0
 804a586:	4605      	mov	r5, r0
 804a588:	4658      	mov	r0, fp
 804a58a:	f000 fc17 	bl	804adbc <__multiply>
 804a58e:	4649      	mov	r1, r9
 804a590:	9004      	str	r0, [sp, #16]
 804a592:	4658      	mov	r0, fp
 804a594:	f000 fb48 	bl	804ac28 <_Bfree>
 804a598:	9b04      	ldr	r3, [sp, #16]
 804a59a:	4699      	mov	r9, r3
 804a59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804a59e:	1b1a      	subs	r2, r3, r4
 804a5a0:	d004      	beq.n	804a5ac <_dtoa_r+0x78c>
 804a5a2:	4649      	mov	r1, r9
 804a5a4:	4658      	mov	r0, fp
 804a5a6:	f000 fcb3 	bl	804af10 <__pow5mult>
 804a5aa:	4681      	mov	r9, r0
 804a5ac:	2101      	movs	r1, #1
 804a5ae:	4658      	mov	r0, fp
 804a5b0:	f000 fbee 	bl	804ad90 <__i2b>
 804a5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 804a5b6:	4604      	mov	r4, r0
 804a5b8:	2b00      	cmp	r3, #0
 804a5ba:	f000 81cf 	beq.w	804a95c <_dtoa_r+0xb3c>
 804a5be:	461a      	mov	r2, r3
 804a5c0:	4601      	mov	r1, r0
 804a5c2:	4658      	mov	r0, fp
 804a5c4:	f000 fca4 	bl	804af10 <__pow5mult>
 804a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804a5ca:	2b01      	cmp	r3, #1
 804a5cc:	4604      	mov	r4, r0
 804a5ce:	f300 8095 	bgt.w	804a6fc <_dtoa_r+0x8dc>
 804a5d2:	9b02      	ldr	r3, [sp, #8]
 804a5d4:	2b00      	cmp	r3, #0
 804a5d6:	f040 8087 	bne.w	804a6e8 <_dtoa_r+0x8c8>
 804a5da:	9b03      	ldr	r3, [sp, #12]
 804a5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 804a5e0:	2b00      	cmp	r3, #0
 804a5e2:	f040 8089 	bne.w	804a6f8 <_dtoa_r+0x8d8>
 804a5e6:	9b03      	ldr	r3, [sp, #12]
 804a5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 804a5ec:	0d1b      	lsrs	r3, r3, #20
 804a5ee:	051b      	lsls	r3, r3, #20
 804a5f0:	b12b      	cbz	r3, 804a5fe <_dtoa_r+0x7de>
 804a5f2:	9b08      	ldr	r3, [sp, #32]
 804a5f4:	3301      	adds	r3, #1
 804a5f6:	9308      	str	r3, [sp, #32]
 804a5f8:	f108 0801 	add.w	r8, r8, #1
 804a5fc:	2301      	movs	r3, #1
 804a5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 804a600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 804a602:	2b00      	cmp	r3, #0
 804a604:	f000 81b0 	beq.w	804a968 <_dtoa_r+0xb48>
 804a608:	6923      	ldr	r3, [r4, #16]
 804a60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 804a60e:	6918      	ldr	r0, [r3, #16]
 804a610:	f000 fb72 	bl	804acf8 <__hi0bits>
 804a614:	f1c0 0020 	rsb	r0, r0, #32
 804a618:	9b08      	ldr	r3, [sp, #32]
 804a61a:	4418      	add	r0, r3
 804a61c:	f010 001f 	ands.w	r0, r0, #31
 804a620:	d077      	beq.n	804a712 <_dtoa_r+0x8f2>
 804a622:	f1c0 0320 	rsb	r3, r0, #32
 804a626:	2b04      	cmp	r3, #4
 804a628:	dd6b      	ble.n	804a702 <_dtoa_r+0x8e2>
 804a62a:	9b08      	ldr	r3, [sp, #32]
 804a62c:	f1c0 001c 	rsb	r0, r0, #28
 804a630:	4403      	add	r3, r0
 804a632:	4480      	add	r8, r0
 804a634:	4406      	add	r6, r0
 804a636:	9308      	str	r3, [sp, #32]
 804a638:	f1b8 0f00 	cmp.w	r8, #0
 804a63c:	dd05      	ble.n	804a64a <_dtoa_r+0x82a>
 804a63e:	4649      	mov	r1, r9
 804a640:	4642      	mov	r2, r8
 804a642:	4658      	mov	r0, fp
 804a644:	f000 fcbe 	bl	804afc4 <__lshift>
 804a648:	4681      	mov	r9, r0
 804a64a:	9b08      	ldr	r3, [sp, #32]
 804a64c:	2b00      	cmp	r3, #0
 804a64e:	dd05      	ble.n	804a65c <_dtoa_r+0x83c>
 804a650:	4621      	mov	r1, r4
 804a652:	461a      	mov	r2, r3
 804a654:	4658      	mov	r0, fp
 804a656:	f000 fcb5 	bl	804afc4 <__lshift>
 804a65a:	4604      	mov	r4, r0
 804a65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 804a65e:	2b00      	cmp	r3, #0
 804a660:	d059      	beq.n	804a716 <_dtoa_r+0x8f6>
 804a662:	4621      	mov	r1, r4
 804a664:	4648      	mov	r0, r9
 804a666:	f000 fd19 	bl	804b09c <__mcmp>
 804a66a:	2800      	cmp	r0, #0
 804a66c:	da53      	bge.n	804a716 <_dtoa_r+0x8f6>
 804a66e:	1e7b      	subs	r3, r7, #1
 804a670:	9304      	str	r3, [sp, #16]
 804a672:	4649      	mov	r1, r9
 804a674:	2300      	movs	r3, #0
 804a676:	220a      	movs	r2, #10
 804a678:	4658      	mov	r0, fp
 804a67a:	f000 faf7 	bl	804ac6c <__multadd>
 804a67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 804a680:	4681      	mov	r9, r0
 804a682:	2b00      	cmp	r3, #0
 804a684:	f000 8172 	beq.w	804a96c <_dtoa_r+0xb4c>
 804a688:	2300      	movs	r3, #0
 804a68a:	4629      	mov	r1, r5
 804a68c:	220a      	movs	r2, #10
 804a68e:	4658      	mov	r0, fp
 804a690:	f000 faec 	bl	804ac6c <__multadd>
 804a694:	9b00      	ldr	r3, [sp, #0]
 804a696:	2b00      	cmp	r3, #0
 804a698:	4605      	mov	r5, r0
 804a69a:	dc67      	bgt.n	804a76c <_dtoa_r+0x94c>
 804a69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804a69e:	2b02      	cmp	r3, #2
 804a6a0:	dc41      	bgt.n	804a726 <_dtoa_r+0x906>
 804a6a2:	e063      	b.n	804a76c <_dtoa_r+0x94c>
 804a6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 804a6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 804a6aa:	e746      	b.n	804a53a <_dtoa_r+0x71a>
 804a6ac:	9b07      	ldr	r3, [sp, #28]
 804a6ae:	1e5c      	subs	r4, r3, #1
 804a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804a6b2:	42a3      	cmp	r3, r4
 804a6b4:	bfbf      	itttt	lt
 804a6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 804a6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 804a6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 804a6bc:	1ae3      	sublt	r3, r4, r3
 804a6be:	bfb4      	ite	lt
 804a6c0:	18d2      	addlt	r2, r2, r3
 804a6c2:	1b1c      	subge	r4, r3, r4
 804a6c4:	9b07      	ldr	r3, [sp, #28]
 804a6c6:	bfbc      	itt	lt
 804a6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 804a6ca:	2400      	movlt	r4, #0
 804a6cc:	2b00      	cmp	r3, #0
 804a6ce:	bfb5      	itete	lt
 804a6d0:	eba8 0603 	sublt.w	r6, r8, r3
 804a6d4:	9b07      	ldrge	r3, [sp, #28]
 804a6d6:	2300      	movlt	r3, #0
 804a6d8:	4646      	movge	r6, r8
 804a6da:	e730      	b.n	804a53e <_dtoa_r+0x71e>
 804a6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 804a6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 804a6e0:	4646      	mov	r6, r8
 804a6e2:	e735      	b.n	804a550 <_dtoa_r+0x730>
 804a6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 804a6e6:	e75c      	b.n	804a5a2 <_dtoa_r+0x782>
 804a6e8:	2300      	movs	r3, #0
 804a6ea:	e788      	b.n	804a5fe <_dtoa_r+0x7de>
 804a6ec:	3fe00000 	.word	0x3fe00000
 804a6f0:	40240000 	.word	0x40240000
 804a6f4:	40140000 	.word	0x40140000
 804a6f8:	9b02      	ldr	r3, [sp, #8]
 804a6fa:	e780      	b.n	804a5fe <_dtoa_r+0x7de>
 804a6fc:	2300      	movs	r3, #0
 804a6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 804a700:	e782      	b.n	804a608 <_dtoa_r+0x7e8>
 804a702:	d099      	beq.n	804a638 <_dtoa_r+0x818>
 804a704:	9a08      	ldr	r2, [sp, #32]
 804a706:	331c      	adds	r3, #28
 804a708:	441a      	add	r2, r3
 804a70a:	4498      	add	r8, r3
 804a70c:	441e      	add	r6, r3
 804a70e:	9208      	str	r2, [sp, #32]
 804a710:	e792      	b.n	804a638 <_dtoa_r+0x818>
 804a712:	4603      	mov	r3, r0
 804a714:	e7f6      	b.n	804a704 <_dtoa_r+0x8e4>
 804a716:	9b07      	ldr	r3, [sp, #28]
 804a718:	9704      	str	r7, [sp, #16]
 804a71a:	2b00      	cmp	r3, #0
 804a71c:	dc20      	bgt.n	804a760 <_dtoa_r+0x940>
 804a71e:	9300      	str	r3, [sp, #0]
 804a720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804a722:	2b02      	cmp	r3, #2
 804a724:	dd1e      	ble.n	804a764 <_dtoa_r+0x944>
 804a726:	9b00      	ldr	r3, [sp, #0]
 804a728:	2b00      	cmp	r3, #0
 804a72a:	f47f aec0 	bne.w	804a4ae <_dtoa_r+0x68e>
 804a72e:	4621      	mov	r1, r4
 804a730:	2205      	movs	r2, #5
 804a732:	4658      	mov	r0, fp
 804a734:	f000 fa9a 	bl	804ac6c <__multadd>
 804a738:	4601      	mov	r1, r0
 804a73a:	4604      	mov	r4, r0
 804a73c:	4648      	mov	r0, r9
 804a73e:	f000 fcad 	bl	804b09c <__mcmp>
 804a742:	2800      	cmp	r0, #0
 804a744:	f77f aeb3 	ble.w	804a4ae <_dtoa_r+0x68e>
 804a748:	4656      	mov	r6, sl
 804a74a:	2331      	movs	r3, #49	@ 0x31
 804a74c:	f806 3b01 	strb.w	r3, [r6], #1
 804a750:	9b04      	ldr	r3, [sp, #16]
 804a752:	3301      	adds	r3, #1
 804a754:	9304      	str	r3, [sp, #16]
 804a756:	e6ae      	b.n	804a4b6 <_dtoa_r+0x696>
 804a758:	9c07      	ldr	r4, [sp, #28]
 804a75a:	9704      	str	r7, [sp, #16]
 804a75c:	4625      	mov	r5, r4
 804a75e:	e7f3      	b.n	804a748 <_dtoa_r+0x928>
 804a760:	9b07      	ldr	r3, [sp, #28]
 804a762:	9300      	str	r3, [sp, #0]
 804a764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 804a766:	2b00      	cmp	r3, #0
 804a768:	f000 8104 	beq.w	804a974 <_dtoa_r+0xb54>
 804a76c:	2e00      	cmp	r6, #0
 804a76e:	dd05      	ble.n	804a77c <_dtoa_r+0x95c>
 804a770:	4629      	mov	r1, r5
 804a772:	4632      	mov	r2, r6
 804a774:	4658      	mov	r0, fp
 804a776:	f000 fc25 	bl	804afc4 <__lshift>
 804a77a:	4605      	mov	r5, r0
 804a77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804a77e:	2b00      	cmp	r3, #0
 804a780:	d05a      	beq.n	804a838 <_dtoa_r+0xa18>
 804a782:	6869      	ldr	r1, [r5, #4]
 804a784:	4658      	mov	r0, fp
 804a786:	f000 fa0f 	bl	804aba8 <_Balloc>
 804a78a:	4606      	mov	r6, r0
 804a78c:	b928      	cbnz	r0, 804a79a <_dtoa_r+0x97a>
 804a78e:	4b84      	ldr	r3, [pc, #528]	@ (804a9a0 <_dtoa_r+0xb80>)
 804a790:	4602      	mov	r2, r0
 804a792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 804a796:	f7ff bb5a 	b.w	8049e4e <_dtoa_r+0x2e>
 804a79a:	692a      	ldr	r2, [r5, #16]
 804a79c:	3202      	adds	r2, #2
 804a79e:	0092      	lsls	r2, r2, #2
 804a7a0:	f105 010c 	add.w	r1, r5, #12
 804a7a4:	300c      	adds	r0, #12
 804a7a6:	f7ff faa2 	bl	8049cee <memcpy>
 804a7aa:	2201      	movs	r2, #1
 804a7ac:	4631      	mov	r1, r6
 804a7ae:	4658      	mov	r0, fp
 804a7b0:	f000 fc08 	bl	804afc4 <__lshift>
 804a7b4:	f10a 0301 	add.w	r3, sl, #1
 804a7b8:	9307      	str	r3, [sp, #28]
 804a7ba:	9b00      	ldr	r3, [sp, #0]
 804a7bc:	4453      	add	r3, sl
 804a7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 804a7c0:	9b02      	ldr	r3, [sp, #8]
 804a7c2:	f003 0301 	and.w	r3, r3, #1
 804a7c6:	462f      	mov	r7, r5
 804a7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 804a7ca:	4605      	mov	r5, r0
 804a7cc:	9b07      	ldr	r3, [sp, #28]
 804a7ce:	4621      	mov	r1, r4
 804a7d0:	3b01      	subs	r3, #1
 804a7d2:	4648      	mov	r0, r9
 804a7d4:	9300      	str	r3, [sp, #0]
 804a7d6:	f7ff fa98 	bl	8049d0a <quorem>
 804a7da:	4639      	mov	r1, r7
 804a7dc:	9002      	str	r0, [sp, #8]
 804a7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 804a7e2:	4648      	mov	r0, r9
 804a7e4:	f000 fc5a 	bl	804b09c <__mcmp>
 804a7e8:	462a      	mov	r2, r5
 804a7ea:	9008      	str	r0, [sp, #32]
 804a7ec:	4621      	mov	r1, r4
 804a7ee:	4658      	mov	r0, fp
 804a7f0:	f000 fc70 	bl	804b0d4 <__mdiff>
 804a7f4:	68c2      	ldr	r2, [r0, #12]
 804a7f6:	4606      	mov	r6, r0
 804a7f8:	bb02      	cbnz	r2, 804a83c <_dtoa_r+0xa1c>
 804a7fa:	4601      	mov	r1, r0
 804a7fc:	4648      	mov	r0, r9
 804a7fe:	f000 fc4d 	bl	804b09c <__mcmp>
 804a802:	4602      	mov	r2, r0
 804a804:	4631      	mov	r1, r6
 804a806:	4658      	mov	r0, fp
 804a808:	920e      	str	r2, [sp, #56]	@ 0x38
 804a80a:	f000 fa0d 	bl	804ac28 <_Bfree>
 804a80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804a810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 804a812:	9e07      	ldr	r6, [sp, #28]
 804a814:	ea43 0102 	orr.w	r1, r3, r2
 804a818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804a81a:	4319      	orrs	r1, r3
 804a81c:	d110      	bne.n	804a840 <_dtoa_r+0xa20>
 804a81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 804a822:	d029      	beq.n	804a878 <_dtoa_r+0xa58>
 804a824:	9b08      	ldr	r3, [sp, #32]
 804a826:	2b00      	cmp	r3, #0
 804a828:	dd02      	ble.n	804a830 <_dtoa_r+0xa10>
 804a82a:	9b02      	ldr	r3, [sp, #8]
 804a82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 804a830:	9b00      	ldr	r3, [sp, #0]
 804a832:	f883 8000 	strb.w	r8, [r3]
 804a836:	e63f      	b.n	804a4b8 <_dtoa_r+0x698>
 804a838:	4628      	mov	r0, r5
 804a83a:	e7bb      	b.n	804a7b4 <_dtoa_r+0x994>
 804a83c:	2201      	movs	r2, #1
 804a83e:	e7e1      	b.n	804a804 <_dtoa_r+0x9e4>
 804a840:	9b08      	ldr	r3, [sp, #32]
 804a842:	2b00      	cmp	r3, #0
 804a844:	db04      	blt.n	804a850 <_dtoa_r+0xa30>
 804a846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 804a848:	430b      	orrs	r3, r1
 804a84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 804a84c:	430b      	orrs	r3, r1
 804a84e:	d120      	bne.n	804a892 <_dtoa_r+0xa72>
 804a850:	2a00      	cmp	r2, #0
 804a852:	dded      	ble.n	804a830 <_dtoa_r+0xa10>
 804a854:	4649      	mov	r1, r9
 804a856:	2201      	movs	r2, #1
 804a858:	4658      	mov	r0, fp
 804a85a:	f000 fbb3 	bl	804afc4 <__lshift>
 804a85e:	4621      	mov	r1, r4
 804a860:	4681      	mov	r9, r0
 804a862:	f000 fc1b 	bl	804b09c <__mcmp>
 804a866:	2800      	cmp	r0, #0
 804a868:	dc03      	bgt.n	804a872 <_dtoa_r+0xa52>
 804a86a:	d1e1      	bne.n	804a830 <_dtoa_r+0xa10>
 804a86c:	f018 0f01 	tst.w	r8, #1
 804a870:	d0de      	beq.n	804a830 <_dtoa_r+0xa10>
 804a872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 804a876:	d1d8      	bne.n	804a82a <_dtoa_r+0xa0a>
 804a878:	9a00      	ldr	r2, [sp, #0]
 804a87a:	2339      	movs	r3, #57	@ 0x39
 804a87c:	7013      	strb	r3, [r2, #0]
 804a87e:	4633      	mov	r3, r6
 804a880:	461e      	mov	r6, r3
 804a882:	3b01      	subs	r3, #1
 804a884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 804a888:	2a39      	cmp	r2, #57	@ 0x39
 804a88a:	d052      	beq.n	804a932 <_dtoa_r+0xb12>
 804a88c:	3201      	adds	r2, #1
 804a88e:	701a      	strb	r2, [r3, #0]
 804a890:	e612      	b.n	804a4b8 <_dtoa_r+0x698>
 804a892:	2a00      	cmp	r2, #0
 804a894:	dd07      	ble.n	804a8a6 <_dtoa_r+0xa86>
 804a896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 804a89a:	d0ed      	beq.n	804a878 <_dtoa_r+0xa58>
 804a89c:	9a00      	ldr	r2, [sp, #0]
 804a89e:	f108 0301 	add.w	r3, r8, #1
 804a8a2:	7013      	strb	r3, [r2, #0]
 804a8a4:	e608      	b.n	804a4b8 <_dtoa_r+0x698>
 804a8a6:	9b07      	ldr	r3, [sp, #28]
 804a8a8:	9a07      	ldr	r2, [sp, #28]
 804a8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 804a8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 804a8b0:	4293      	cmp	r3, r2
 804a8b2:	d028      	beq.n	804a906 <_dtoa_r+0xae6>
 804a8b4:	4649      	mov	r1, r9
 804a8b6:	2300      	movs	r3, #0
 804a8b8:	220a      	movs	r2, #10
 804a8ba:	4658      	mov	r0, fp
 804a8bc:	f000 f9d6 	bl	804ac6c <__multadd>
 804a8c0:	42af      	cmp	r7, r5
 804a8c2:	4681      	mov	r9, r0
 804a8c4:	f04f 0300 	mov.w	r3, #0
 804a8c8:	f04f 020a 	mov.w	r2, #10
 804a8cc:	4639      	mov	r1, r7
 804a8ce:	4658      	mov	r0, fp
 804a8d0:	d107      	bne.n	804a8e2 <_dtoa_r+0xac2>
 804a8d2:	f000 f9cb 	bl	804ac6c <__multadd>
 804a8d6:	4607      	mov	r7, r0
 804a8d8:	4605      	mov	r5, r0
 804a8da:	9b07      	ldr	r3, [sp, #28]
 804a8dc:	3301      	adds	r3, #1
 804a8de:	9307      	str	r3, [sp, #28]
 804a8e0:	e774      	b.n	804a7cc <_dtoa_r+0x9ac>
 804a8e2:	f000 f9c3 	bl	804ac6c <__multadd>
 804a8e6:	4629      	mov	r1, r5
 804a8e8:	4607      	mov	r7, r0
 804a8ea:	2300      	movs	r3, #0
 804a8ec:	220a      	movs	r2, #10
 804a8ee:	4658      	mov	r0, fp
 804a8f0:	f000 f9bc 	bl	804ac6c <__multadd>
 804a8f4:	4605      	mov	r5, r0
 804a8f6:	e7f0      	b.n	804a8da <_dtoa_r+0xaba>
 804a8f8:	9b00      	ldr	r3, [sp, #0]
 804a8fa:	2b00      	cmp	r3, #0
 804a8fc:	bfcc      	ite	gt
 804a8fe:	461e      	movgt	r6, r3
 804a900:	2601      	movle	r6, #1
 804a902:	4456      	add	r6, sl
 804a904:	2700      	movs	r7, #0
 804a906:	4649      	mov	r1, r9
 804a908:	2201      	movs	r2, #1
 804a90a:	4658      	mov	r0, fp
 804a90c:	f000 fb5a 	bl	804afc4 <__lshift>
 804a910:	4621      	mov	r1, r4
 804a912:	4681      	mov	r9, r0
 804a914:	f000 fbc2 	bl	804b09c <__mcmp>
 804a918:	2800      	cmp	r0, #0
 804a91a:	dcb0      	bgt.n	804a87e <_dtoa_r+0xa5e>
 804a91c:	d102      	bne.n	804a924 <_dtoa_r+0xb04>
 804a91e:	f018 0f01 	tst.w	r8, #1
 804a922:	d1ac      	bne.n	804a87e <_dtoa_r+0xa5e>
 804a924:	4633      	mov	r3, r6
 804a926:	461e      	mov	r6, r3
 804a928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804a92c:	2a30      	cmp	r2, #48	@ 0x30
 804a92e:	d0fa      	beq.n	804a926 <_dtoa_r+0xb06>
 804a930:	e5c2      	b.n	804a4b8 <_dtoa_r+0x698>
 804a932:	459a      	cmp	sl, r3
 804a934:	d1a4      	bne.n	804a880 <_dtoa_r+0xa60>
 804a936:	9b04      	ldr	r3, [sp, #16]
 804a938:	3301      	adds	r3, #1
 804a93a:	9304      	str	r3, [sp, #16]
 804a93c:	2331      	movs	r3, #49	@ 0x31
 804a93e:	f88a 3000 	strb.w	r3, [sl]
 804a942:	e5b9      	b.n	804a4b8 <_dtoa_r+0x698>
 804a944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 804a946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 804a9a4 <_dtoa_r+0xb84>
 804a94a:	b11b      	cbz	r3, 804a954 <_dtoa_r+0xb34>
 804a94c:	f10a 0308 	add.w	r3, sl, #8
 804a950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 804a952:	6013      	str	r3, [r2, #0]
 804a954:	4650      	mov	r0, sl
 804a956:	b019      	add	sp, #100	@ 0x64
 804a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804a95e:	2b01      	cmp	r3, #1
 804a960:	f77f ae37 	ble.w	804a5d2 <_dtoa_r+0x7b2>
 804a964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 804a966:	930a      	str	r3, [sp, #40]	@ 0x28
 804a968:	2001      	movs	r0, #1
 804a96a:	e655      	b.n	804a618 <_dtoa_r+0x7f8>
 804a96c:	9b00      	ldr	r3, [sp, #0]
 804a96e:	2b00      	cmp	r3, #0
 804a970:	f77f aed6 	ble.w	804a720 <_dtoa_r+0x900>
 804a974:	4656      	mov	r6, sl
 804a976:	4621      	mov	r1, r4
 804a978:	4648      	mov	r0, r9
 804a97a:	f7ff f9c6 	bl	8049d0a <quorem>
 804a97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 804a982:	f806 8b01 	strb.w	r8, [r6], #1
 804a986:	9b00      	ldr	r3, [sp, #0]
 804a988:	eba6 020a 	sub.w	r2, r6, sl
 804a98c:	4293      	cmp	r3, r2
 804a98e:	ddb3      	ble.n	804a8f8 <_dtoa_r+0xad8>
 804a990:	4649      	mov	r1, r9
 804a992:	2300      	movs	r3, #0
 804a994:	220a      	movs	r2, #10
 804a996:	4658      	mov	r0, fp
 804a998:	f000 f968 	bl	804ac6c <__multadd>
 804a99c:	4681      	mov	r9, r0
 804a99e:	e7ea      	b.n	804a976 <_dtoa_r+0xb56>
 804a9a0:	0804cf60 	.word	0x0804cf60
 804a9a4:	0804cee4 	.word	0x0804cee4

0804a9a8 <_free_r>:
 804a9a8:	b538      	push	{r3, r4, r5, lr}
 804a9aa:	4605      	mov	r5, r0
 804a9ac:	2900      	cmp	r1, #0
 804a9ae:	d041      	beq.n	804aa34 <_free_r+0x8c>
 804a9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804a9b4:	1f0c      	subs	r4, r1, #4
 804a9b6:	2b00      	cmp	r3, #0
 804a9b8:	bfb8      	it	lt
 804a9ba:	18e4      	addlt	r4, r4, r3
 804a9bc:	f000 f8e8 	bl	804ab90 <__malloc_lock>
 804a9c0:	4a1d      	ldr	r2, [pc, #116]	@ (804aa38 <_free_r+0x90>)
 804a9c2:	6813      	ldr	r3, [r2, #0]
 804a9c4:	b933      	cbnz	r3, 804a9d4 <_free_r+0x2c>
 804a9c6:	6063      	str	r3, [r4, #4]
 804a9c8:	6014      	str	r4, [r2, #0]
 804a9ca:	4628      	mov	r0, r5
 804a9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804a9d0:	f000 b8e4 	b.w	804ab9c <__malloc_unlock>
 804a9d4:	42a3      	cmp	r3, r4
 804a9d6:	d908      	bls.n	804a9ea <_free_r+0x42>
 804a9d8:	6820      	ldr	r0, [r4, #0]
 804a9da:	1821      	adds	r1, r4, r0
 804a9dc:	428b      	cmp	r3, r1
 804a9de:	bf01      	itttt	eq
 804a9e0:	6819      	ldreq	r1, [r3, #0]
 804a9e2:	685b      	ldreq	r3, [r3, #4]
 804a9e4:	1809      	addeq	r1, r1, r0
 804a9e6:	6021      	streq	r1, [r4, #0]
 804a9e8:	e7ed      	b.n	804a9c6 <_free_r+0x1e>
 804a9ea:	461a      	mov	r2, r3
 804a9ec:	685b      	ldr	r3, [r3, #4]
 804a9ee:	b10b      	cbz	r3, 804a9f4 <_free_r+0x4c>
 804a9f0:	42a3      	cmp	r3, r4
 804a9f2:	d9fa      	bls.n	804a9ea <_free_r+0x42>
 804a9f4:	6811      	ldr	r1, [r2, #0]
 804a9f6:	1850      	adds	r0, r2, r1
 804a9f8:	42a0      	cmp	r0, r4
 804a9fa:	d10b      	bne.n	804aa14 <_free_r+0x6c>
 804a9fc:	6820      	ldr	r0, [r4, #0]
 804a9fe:	4401      	add	r1, r0
 804aa00:	1850      	adds	r0, r2, r1
 804aa02:	4283      	cmp	r3, r0
 804aa04:	6011      	str	r1, [r2, #0]
 804aa06:	d1e0      	bne.n	804a9ca <_free_r+0x22>
 804aa08:	6818      	ldr	r0, [r3, #0]
 804aa0a:	685b      	ldr	r3, [r3, #4]
 804aa0c:	6053      	str	r3, [r2, #4]
 804aa0e:	4408      	add	r0, r1
 804aa10:	6010      	str	r0, [r2, #0]
 804aa12:	e7da      	b.n	804a9ca <_free_r+0x22>
 804aa14:	d902      	bls.n	804aa1c <_free_r+0x74>
 804aa16:	230c      	movs	r3, #12
 804aa18:	602b      	str	r3, [r5, #0]
 804aa1a:	e7d6      	b.n	804a9ca <_free_r+0x22>
 804aa1c:	6820      	ldr	r0, [r4, #0]
 804aa1e:	1821      	adds	r1, r4, r0
 804aa20:	428b      	cmp	r3, r1
 804aa22:	bf04      	itt	eq
 804aa24:	6819      	ldreq	r1, [r3, #0]
 804aa26:	685b      	ldreq	r3, [r3, #4]
 804aa28:	6063      	str	r3, [r4, #4]
 804aa2a:	bf04      	itt	eq
 804aa2c:	1809      	addeq	r1, r1, r0
 804aa2e:	6021      	streq	r1, [r4, #0]
 804aa30:	6054      	str	r4, [r2, #4]
 804aa32:	e7ca      	b.n	804a9ca <_free_r+0x22>
 804aa34:	bd38      	pop	{r3, r4, r5, pc}
 804aa36:	bf00      	nop
 804aa38:	200132b8 	.word	0x200132b8

0804aa3c <malloc>:
 804aa3c:	4b02      	ldr	r3, [pc, #8]	@ (804aa48 <malloc+0xc>)
 804aa3e:	4601      	mov	r1, r0
 804aa40:	6818      	ldr	r0, [r3, #0]
 804aa42:	f000 b825 	b.w	804aa90 <_malloc_r>
 804aa46:	bf00      	nop
 804aa48:	20000024 	.word	0x20000024

0804aa4c <sbrk_aligned>:
 804aa4c:	b570      	push	{r4, r5, r6, lr}
 804aa4e:	4e0f      	ldr	r6, [pc, #60]	@ (804aa8c <sbrk_aligned+0x40>)
 804aa50:	460c      	mov	r4, r1
 804aa52:	6831      	ldr	r1, [r6, #0]
 804aa54:	4605      	mov	r5, r0
 804aa56:	b911      	cbnz	r1, 804aa5e <sbrk_aligned+0x12>
 804aa58:	f000 fe46 	bl	804b6e8 <_sbrk_r>
 804aa5c:	6030      	str	r0, [r6, #0]
 804aa5e:	4621      	mov	r1, r4
 804aa60:	4628      	mov	r0, r5
 804aa62:	f000 fe41 	bl	804b6e8 <_sbrk_r>
 804aa66:	1c43      	adds	r3, r0, #1
 804aa68:	d103      	bne.n	804aa72 <sbrk_aligned+0x26>
 804aa6a:	f04f 34ff 	mov.w	r4, #4294967295
 804aa6e:	4620      	mov	r0, r4
 804aa70:	bd70      	pop	{r4, r5, r6, pc}
 804aa72:	1cc4      	adds	r4, r0, #3
 804aa74:	f024 0403 	bic.w	r4, r4, #3
 804aa78:	42a0      	cmp	r0, r4
 804aa7a:	d0f8      	beq.n	804aa6e <sbrk_aligned+0x22>
 804aa7c:	1a21      	subs	r1, r4, r0
 804aa7e:	4628      	mov	r0, r5
 804aa80:	f000 fe32 	bl	804b6e8 <_sbrk_r>
 804aa84:	3001      	adds	r0, #1
 804aa86:	d1f2      	bne.n	804aa6e <sbrk_aligned+0x22>
 804aa88:	e7ef      	b.n	804aa6a <sbrk_aligned+0x1e>
 804aa8a:	bf00      	nop
 804aa8c:	200132b4 	.word	0x200132b4

0804aa90 <_malloc_r>:
 804aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804aa94:	1ccd      	adds	r5, r1, #3
 804aa96:	f025 0503 	bic.w	r5, r5, #3
 804aa9a:	3508      	adds	r5, #8
 804aa9c:	2d0c      	cmp	r5, #12
 804aa9e:	bf38      	it	cc
 804aaa0:	250c      	movcc	r5, #12
 804aaa2:	2d00      	cmp	r5, #0
 804aaa4:	4606      	mov	r6, r0
 804aaa6:	db01      	blt.n	804aaac <_malloc_r+0x1c>
 804aaa8:	42a9      	cmp	r1, r5
 804aaaa:	d904      	bls.n	804aab6 <_malloc_r+0x26>
 804aaac:	230c      	movs	r3, #12
 804aaae:	6033      	str	r3, [r6, #0]
 804aab0:	2000      	movs	r0, #0
 804aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804aab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 804ab8c <_malloc_r+0xfc>
 804aaba:	f000 f869 	bl	804ab90 <__malloc_lock>
 804aabe:	f8d8 3000 	ldr.w	r3, [r8]
 804aac2:	461c      	mov	r4, r3
 804aac4:	bb44      	cbnz	r4, 804ab18 <_malloc_r+0x88>
 804aac6:	4629      	mov	r1, r5
 804aac8:	4630      	mov	r0, r6
 804aaca:	f7ff ffbf 	bl	804aa4c <sbrk_aligned>
 804aace:	1c43      	adds	r3, r0, #1
 804aad0:	4604      	mov	r4, r0
 804aad2:	d158      	bne.n	804ab86 <_malloc_r+0xf6>
 804aad4:	f8d8 4000 	ldr.w	r4, [r8]
 804aad8:	4627      	mov	r7, r4
 804aada:	2f00      	cmp	r7, #0
 804aadc:	d143      	bne.n	804ab66 <_malloc_r+0xd6>
 804aade:	2c00      	cmp	r4, #0
 804aae0:	d04b      	beq.n	804ab7a <_malloc_r+0xea>
 804aae2:	6823      	ldr	r3, [r4, #0]
 804aae4:	4639      	mov	r1, r7
 804aae6:	4630      	mov	r0, r6
 804aae8:	eb04 0903 	add.w	r9, r4, r3
 804aaec:	f000 fdfc 	bl	804b6e8 <_sbrk_r>
 804aaf0:	4581      	cmp	r9, r0
 804aaf2:	d142      	bne.n	804ab7a <_malloc_r+0xea>
 804aaf4:	6821      	ldr	r1, [r4, #0]
 804aaf6:	1a6d      	subs	r5, r5, r1
 804aaf8:	4629      	mov	r1, r5
 804aafa:	4630      	mov	r0, r6
 804aafc:	f7ff ffa6 	bl	804aa4c <sbrk_aligned>
 804ab00:	3001      	adds	r0, #1
 804ab02:	d03a      	beq.n	804ab7a <_malloc_r+0xea>
 804ab04:	6823      	ldr	r3, [r4, #0]
 804ab06:	442b      	add	r3, r5
 804ab08:	6023      	str	r3, [r4, #0]
 804ab0a:	f8d8 3000 	ldr.w	r3, [r8]
 804ab0e:	685a      	ldr	r2, [r3, #4]
 804ab10:	bb62      	cbnz	r2, 804ab6c <_malloc_r+0xdc>
 804ab12:	f8c8 7000 	str.w	r7, [r8]
 804ab16:	e00f      	b.n	804ab38 <_malloc_r+0xa8>
 804ab18:	6822      	ldr	r2, [r4, #0]
 804ab1a:	1b52      	subs	r2, r2, r5
 804ab1c:	d420      	bmi.n	804ab60 <_malloc_r+0xd0>
 804ab1e:	2a0b      	cmp	r2, #11
 804ab20:	d917      	bls.n	804ab52 <_malloc_r+0xc2>
 804ab22:	1961      	adds	r1, r4, r5
 804ab24:	42a3      	cmp	r3, r4
 804ab26:	6025      	str	r5, [r4, #0]
 804ab28:	bf18      	it	ne
 804ab2a:	6059      	strne	r1, [r3, #4]
 804ab2c:	6863      	ldr	r3, [r4, #4]
 804ab2e:	bf08      	it	eq
 804ab30:	f8c8 1000 	streq.w	r1, [r8]
 804ab34:	5162      	str	r2, [r4, r5]
 804ab36:	604b      	str	r3, [r1, #4]
 804ab38:	4630      	mov	r0, r6
 804ab3a:	f000 f82f 	bl	804ab9c <__malloc_unlock>
 804ab3e:	f104 000b 	add.w	r0, r4, #11
 804ab42:	1d23      	adds	r3, r4, #4
 804ab44:	f020 0007 	bic.w	r0, r0, #7
 804ab48:	1ac2      	subs	r2, r0, r3
 804ab4a:	bf1c      	itt	ne
 804ab4c:	1a1b      	subne	r3, r3, r0
 804ab4e:	50a3      	strne	r3, [r4, r2]
 804ab50:	e7af      	b.n	804aab2 <_malloc_r+0x22>
 804ab52:	6862      	ldr	r2, [r4, #4]
 804ab54:	42a3      	cmp	r3, r4
 804ab56:	bf0c      	ite	eq
 804ab58:	f8c8 2000 	streq.w	r2, [r8]
 804ab5c:	605a      	strne	r2, [r3, #4]
 804ab5e:	e7eb      	b.n	804ab38 <_malloc_r+0xa8>
 804ab60:	4623      	mov	r3, r4
 804ab62:	6864      	ldr	r4, [r4, #4]
 804ab64:	e7ae      	b.n	804aac4 <_malloc_r+0x34>
 804ab66:	463c      	mov	r4, r7
 804ab68:	687f      	ldr	r7, [r7, #4]
 804ab6a:	e7b6      	b.n	804aada <_malloc_r+0x4a>
 804ab6c:	461a      	mov	r2, r3
 804ab6e:	685b      	ldr	r3, [r3, #4]
 804ab70:	42a3      	cmp	r3, r4
 804ab72:	d1fb      	bne.n	804ab6c <_malloc_r+0xdc>
 804ab74:	2300      	movs	r3, #0
 804ab76:	6053      	str	r3, [r2, #4]
 804ab78:	e7de      	b.n	804ab38 <_malloc_r+0xa8>
 804ab7a:	230c      	movs	r3, #12
 804ab7c:	6033      	str	r3, [r6, #0]
 804ab7e:	4630      	mov	r0, r6
 804ab80:	f000 f80c 	bl	804ab9c <__malloc_unlock>
 804ab84:	e794      	b.n	804aab0 <_malloc_r+0x20>
 804ab86:	6005      	str	r5, [r0, #0]
 804ab88:	e7d6      	b.n	804ab38 <_malloc_r+0xa8>
 804ab8a:	bf00      	nop
 804ab8c:	200132b8 	.word	0x200132b8

0804ab90 <__malloc_lock>:
 804ab90:	4801      	ldr	r0, [pc, #4]	@ (804ab98 <__malloc_lock+0x8>)
 804ab92:	f7ff b8aa 	b.w	8049cea <__retarget_lock_acquire_recursive>
 804ab96:	bf00      	nop
 804ab98:	200132b0 	.word	0x200132b0

0804ab9c <__malloc_unlock>:
 804ab9c:	4801      	ldr	r0, [pc, #4]	@ (804aba4 <__malloc_unlock+0x8>)
 804ab9e:	f7ff b8a5 	b.w	8049cec <__retarget_lock_release_recursive>
 804aba2:	bf00      	nop
 804aba4:	200132b0 	.word	0x200132b0

0804aba8 <_Balloc>:
 804aba8:	b570      	push	{r4, r5, r6, lr}
 804abaa:	69c6      	ldr	r6, [r0, #28]
 804abac:	4604      	mov	r4, r0
 804abae:	460d      	mov	r5, r1
 804abb0:	b976      	cbnz	r6, 804abd0 <_Balloc+0x28>
 804abb2:	2010      	movs	r0, #16
 804abb4:	f7ff ff42 	bl	804aa3c <malloc>
 804abb8:	4602      	mov	r2, r0
 804abba:	61e0      	str	r0, [r4, #28]
 804abbc:	b920      	cbnz	r0, 804abc8 <_Balloc+0x20>
 804abbe:	4b18      	ldr	r3, [pc, #96]	@ (804ac20 <_Balloc+0x78>)
 804abc0:	4818      	ldr	r0, [pc, #96]	@ (804ac24 <_Balloc+0x7c>)
 804abc2:	216b      	movs	r1, #107	@ 0x6b
 804abc4:	f000 fda0 	bl	804b708 <__assert_func>
 804abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804abcc:	6006      	str	r6, [r0, #0]
 804abce:	60c6      	str	r6, [r0, #12]
 804abd0:	69e6      	ldr	r6, [r4, #28]
 804abd2:	68f3      	ldr	r3, [r6, #12]
 804abd4:	b183      	cbz	r3, 804abf8 <_Balloc+0x50>
 804abd6:	69e3      	ldr	r3, [r4, #28]
 804abd8:	68db      	ldr	r3, [r3, #12]
 804abda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 804abde:	b9b8      	cbnz	r0, 804ac10 <_Balloc+0x68>
 804abe0:	2101      	movs	r1, #1
 804abe2:	fa01 f605 	lsl.w	r6, r1, r5
 804abe6:	1d72      	adds	r2, r6, #5
 804abe8:	0092      	lsls	r2, r2, #2
 804abea:	4620      	mov	r0, r4
 804abec:	f000 fdaa 	bl	804b744 <_calloc_r>
 804abf0:	b160      	cbz	r0, 804ac0c <_Balloc+0x64>
 804abf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804abf6:	e00e      	b.n	804ac16 <_Balloc+0x6e>
 804abf8:	2221      	movs	r2, #33	@ 0x21
 804abfa:	2104      	movs	r1, #4
 804abfc:	4620      	mov	r0, r4
 804abfe:	f000 fda1 	bl	804b744 <_calloc_r>
 804ac02:	69e3      	ldr	r3, [r4, #28]
 804ac04:	60f0      	str	r0, [r6, #12]
 804ac06:	68db      	ldr	r3, [r3, #12]
 804ac08:	2b00      	cmp	r3, #0
 804ac0a:	d1e4      	bne.n	804abd6 <_Balloc+0x2e>
 804ac0c:	2000      	movs	r0, #0
 804ac0e:	bd70      	pop	{r4, r5, r6, pc}
 804ac10:	6802      	ldr	r2, [r0, #0]
 804ac12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804ac16:	2300      	movs	r3, #0
 804ac18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 804ac1c:	e7f7      	b.n	804ac0e <_Balloc+0x66>
 804ac1e:	bf00      	nop
 804ac20:	0804cef1 	.word	0x0804cef1
 804ac24:	0804cf71 	.word	0x0804cf71

0804ac28 <_Bfree>:
 804ac28:	b570      	push	{r4, r5, r6, lr}
 804ac2a:	69c6      	ldr	r6, [r0, #28]
 804ac2c:	4605      	mov	r5, r0
 804ac2e:	460c      	mov	r4, r1
 804ac30:	b976      	cbnz	r6, 804ac50 <_Bfree+0x28>
 804ac32:	2010      	movs	r0, #16
 804ac34:	f7ff ff02 	bl	804aa3c <malloc>
 804ac38:	4602      	mov	r2, r0
 804ac3a:	61e8      	str	r0, [r5, #28]
 804ac3c:	b920      	cbnz	r0, 804ac48 <_Bfree+0x20>
 804ac3e:	4b09      	ldr	r3, [pc, #36]	@ (804ac64 <_Bfree+0x3c>)
 804ac40:	4809      	ldr	r0, [pc, #36]	@ (804ac68 <_Bfree+0x40>)
 804ac42:	218f      	movs	r1, #143	@ 0x8f
 804ac44:	f000 fd60 	bl	804b708 <__assert_func>
 804ac48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804ac4c:	6006      	str	r6, [r0, #0]
 804ac4e:	60c6      	str	r6, [r0, #12]
 804ac50:	b13c      	cbz	r4, 804ac62 <_Bfree+0x3a>
 804ac52:	69eb      	ldr	r3, [r5, #28]
 804ac54:	6862      	ldr	r2, [r4, #4]
 804ac56:	68db      	ldr	r3, [r3, #12]
 804ac58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804ac5c:	6021      	str	r1, [r4, #0]
 804ac5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804ac62:	bd70      	pop	{r4, r5, r6, pc}
 804ac64:	0804cef1 	.word	0x0804cef1
 804ac68:	0804cf71 	.word	0x0804cf71

0804ac6c <__multadd>:
 804ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ac70:	690d      	ldr	r5, [r1, #16]
 804ac72:	4607      	mov	r7, r0
 804ac74:	460c      	mov	r4, r1
 804ac76:	461e      	mov	r6, r3
 804ac78:	f101 0c14 	add.w	ip, r1, #20
 804ac7c:	2000      	movs	r0, #0
 804ac7e:	f8dc 3000 	ldr.w	r3, [ip]
 804ac82:	b299      	uxth	r1, r3
 804ac84:	fb02 6101 	mla	r1, r2, r1, r6
 804ac88:	0c1e      	lsrs	r6, r3, #16
 804ac8a:	0c0b      	lsrs	r3, r1, #16
 804ac8c:	fb02 3306 	mla	r3, r2, r6, r3
 804ac90:	b289      	uxth	r1, r1
 804ac92:	3001      	adds	r0, #1
 804ac94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 804ac98:	4285      	cmp	r5, r0
 804ac9a:	f84c 1b04 	str.w	r1, [ip], #4
 804ac9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 804aca2:	dcec      	bgt.n	804ac7e <__multadd+0x12>
 804aca4:	b30e      	cbz	r6, 804acea <__multadd+0x7e>
 804aca6:	68a3      	ldr	r3, [r4, #8]
 804aca8:	42ab      	cmp	r3, r5
 804acaa:	dc19      	bgt.n	804ace0 <__multadd+0x74>
 804acac:	6861      	ldr	r1, [r4, #4]
 804acae:	4638      	mov	r0, r7
 804acb0:	3101      	adds	r1, #1
 804acb2:	f7ff ff79 	bl	804aba8 <_Balloc>
 804acb6:	4680      	mov	r8, r0
 804acb8:	b928      	cbnz	r0, 804acc6 <__multadd+0x5a>
 804acba:	4602      	mov	r2, r0
 804acbc:	4b0c      	ldr	r3, [pc, #48]	@ (804acf0 <__multadd+0x84>)
 804acbe:	480d      	ldr	r0, [pc, #52]	@ (804acf4 <__multadd+0x88>)
 804acc0:	21ba      	movs	r1, #186	@ 0xba
 804acc2:	f000 fd21 	bl	804b708 <__assert_func>
 804acc6:	6922      	ldr	r2, [r4, #16]
 804acc8:	3202      	adds	r2, #2
 804acca:	f104 010c 	add.w	r1, r4, #12
 804acce:	0092      	lsls	r2, r2, #2
 804acd0:	300c      	adds	r0, #12
 804acd2:	f7ff f80c 	bl	8049cee <memcpy>
 804acd6:	4621      	mov	r1, r4
 804acd8:	4638      	mov	r0, r7
 804acda:	f7ff ffa5 	bl	804ac28 <_Bfree>
 804acde:	4644      	mov	r4, r8
 804ace0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 804ace4:	3501      	adds	r5, #1
 804ace6:	615e      	str	r6, [r3, #20]
 804ace8:	6125      	str	r5, [r4, #16]
 804acea:	4620      	mov	r0, r4
 804acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804acf0:	0804cf60 	.word	0x0804cf60
 804acf4:	0804cf71 	.word	0x0804cf71

0804acf8 <__hi0bits>:
 804acf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 804acfc:	4603      	mov	r3, r0
 804acfe:	bf36      	itet	cc
 804ad00:	0403      	lslcc	r3, r0, #16
 804ad02:	2000      	movcs	r0, #0
 804ad04:	2010      	movcc	r0, #16
 804ad06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 804ad0a:	bf3c      	itt	cc
 804ad0c:	021b      	lslcc	r3, r3, #8
 804ad0e:	3008      	addcc	r0, #8
 804ad10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 804ad14:	bf3c      	itt	cc
 804ad16:	011b      	lslcc	r3, r3, #4
 804ad18:	3004      	addcc	r0, #4
 804ad1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804ad1e:	bf3c      	itt	cc
 804ad20:	009b      	lslcc	r3, r3, #2
 804ad22:	3002      	addcc	r0, #2
 804ad24:	2b00      	cmp	r3, #0
 804ad26:	db05      	blt.n	804ad34 <__hi0bits+0x3c>
 804ad28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 804ad2c:	f100 0001 	add.w	r0, r0, #1
 804ad30:	bf08      	it	eq
 804ad32:	2020      	moveq	r0, #32
 804ad34:	4770      	bx	lr

0804ad36 <__lo0bits>:
 804ad36:	6803      	ldr	r3, [r0, #0]
 804ad38:	4602      	mov	r2, r0
 804ad3a:	f013 0007 	ands.w	r0, r3, #7
 804ad3e:	d00b      	beq.n	804ad58 <__lo0bits+0x22>
 804ad40:	07d9      	lsls	r1, r3, #31
 804ad42:	d421      	bmi.n	804ad88 <__lo0bits+0x52>
 804ad44:	0798      	lsls	r0, r3, #30
 804ad46:	bf49      	itett	mi
 804ad48:	085b      	lsrmi	r3, r3, #1
 804ad4a:	089b      	lsrpl	r3, r3, #2
 804ad4c:	2001      	movmi	r0, #1
 804ad4e:	6013      	strmi	r3, [r2, #0]
 804ad50:	bf5c      	itt	pl
 804ad52:	6013      	strpl	r3, [r2, #0]
 804ad54:	2002      	movpl	r0, #2
 804ad56:	4770      	bx	lr
 804ad58:	b299      	uxth	r1, r3
 804ad5a:	b909      	cbnz	r1, 804ad60 <__lo0bits+0x2a>
 804ad5c:	0c1b      	lsrs	r3, r3, #16
 804ad5e:	2010      	movs	r0, #16
 804ad60:	b2d9      	uxtb	r1, r3
 804ad62:	b909      	cbnz	r1, 804ad68 <__lo0bits+0x32>
 804ad64:	3008      	adds	r0, #8
 804ad66:	0a1b      	lsrs	r3, r3, #8
 804ad68:	0719      	lsls	r1, r3, #28
 804ad6a:	bf04      	itt	eq
 804ad6c:	091b      	lsreq	r3, r3, #4
 804ad6e:	3004      	addeq	r0, #4
 804ad70:	0799      	lsls	r1, r3, #30
 804ad72:	bf04      	itt	eq
 804ad74:	089b      	lsreq	r3, r3, #2
 804ad76:	3002      	addeq	r0, #2
 804ad78:	07d9      	lsls	r1, r3, #31
 804ad7a:	d403      	bmi.n	804ad84 <__lo0bits+0x4e>
 804ad7c:	085b      	lsrs	r3, r3, #1
 804ad7e:	f100 0001 	add.w	r0, r0, #1
 804ad82:	d003      	beq.n	804ad8c <__lo0bits+0x56>
 804ad84:	6013      	str	r3, [r2, #0]
 804ad86:	4770      	bx	lr
 804ad88:	2000      	movs	r0, #0
 804ad8a:	4770      	bx	lr
 804ad8c:	2020      	movs	r0, #32
 804ad8e:	4770      	bx	lr

0804ad90 <__i2b>:
 804ad90:	b510      	push	{r4, lr}
 804ad92:	460c      	mov	r4, r1
 804ad94:	2101      	movs	r1, #1
 804ad96:	f7ff ff07 	bl	804aba8 <_Balloc>
 804ad9a:	4602      	mov	r2, r0
 804ad9c:	b928      	cbnz	r0, 804adaa <__i2b+0x1a>
 804ad9e:	4b05      	ldr	r3, [pc, #20]	@ (804adb4 <__i2b+0x24>)
 804ada0:	4805      	ldr	r0, [pc, #20]	@ (804adb8 <__i2b+0x28>)
 804ada2:	f240 1145 	movw	r1, #325	@ 0x145
 804ada6:	f000 fcaf 	bl	804b708 <__assert_func>
 804adaa:	2301      	movs	r3, #1
 804adac:	6144      	str	r4, [r0, #20]
 804adae:	6103      	str	r3, [r0, #16]
 804adb0:	bd10      	pop	{r4, pc}
 804adb2:	bf00      	nop
 804adb4:	0804cf60 	.word	0x0804cf60
 804adb8:	0804cf71 	.word	0x0804cf71

0804adbc <__multiply>:
 804adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804adc0:	4614      	mov	r4, r2
 804adc2:	690a      	ldr	r2, [r1, #16]
 804adc4:	6923      	ldr	r3, [r4, #16]
 804adc6:	429a      	cmp	r2, r3
 804adc8:	bfa8      	it	ge
 804adca:	4623      	movge	r3, r4
 804adcc:	460f      	mov	r7, r1
 804adce:	bfa4      	itt	ge
 804add0:	460c      	movge	r4, r1
 804add2:	461f      	movge	r7, r3
 804add4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 804add8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 804addc:	68a3      	ldr	r3, [r4, #8]
 804adde:	6861      	ldr	r1, [r4, #4]
 804ade0:	eb0a 0609 	add.w	r6, sl, r9
 804ade4:	42b3      	cmp	r3, r6
 804ade6:	b085      	sub	sp, #20
 804ade8:	bfb8      	it	lt
 804adea:	3101      	addlt	r1, #1
 804adec:	f7ff fedc 	bl	804aba8 <_Balloc>
 804adf0:	b930      	cbnz	r0, 804ae00 <__multiply+0x44>
 804adf2:	4602      	mov	r2, r0
 804adf4:	4b44      	ldr	r3, [pc, #272]	@ (804af08 <__multiply+0x14c>)
 804adf6:	4845      	ldr	r0, [pc, #276]	@ (804af0c <__multiply+0x150>)
 804adf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 804adfc:	f000 fc84 	bl	804b708 <__assert_func>
 804ae00:	f100 0514 	add.w	r5, r0, #20
 804ae04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 804ae08:	462b      	mov	r3, r5
 804ae0a:	2200      	movs	r2, #0
 804ae0c:	4543      	cmp	r3, r8
 804ae0e:	d321      	bcc.n	804ae54 <__multiply+0x98>
 804ae10:	f107 0114 	add.w	r1, r7, #20
 804ae14:	f104 0214 	add.w	r2, r4, #20
 804ae18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 804ae1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 804ae20:	9302      	str	r3, [sp, #8]
 804ae22:	1b13      	subs	r3, r2, r4
 804ae24:	3b15      	subs	r3, #21
 804ae26:	f023 0303 	bic.w	r3, r3, #3
 804ae2a:	3304      	adds	r3, #4
 804ae2c:	f104 0715 	add.w	r7, r4, #21
 804ae30:	42ba      	cmp	r2, r7
 804ae32:	bf38      	it	cc
 804ae34:	2304      	movcc	r3, #4
 804ae36:	9301      	str	r3, [sp, #4]
 804ae38:	9b02      	ldr	r3, [sp, #8]
 804ae3a:	9103      	str	r1, [sp, #12]
 804ae3c:	428b      	cmp	r3, r1
 804ae3e:	d80c      	bhi.n	804ae5a <__multiply+0x9e>
 804ae40:	2e00      	cmp	r6, #0
 804ae42:	dd03      	ble.n	804ae4c <__multiply+0x90>
 804ae44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 804ae48:	2b00      	cmp	r3, #0
 804ae4a:	d05b      	beq.n	804af04 <__multiply+0x148>
 804ae4c:	6106      	str	r6, [r0, #16]
 804ae4e:	b005      	add	sp, #20
 804ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804ae54:	f843 2b04 	str.w	r2, [r3], #4
 804ae58:	e7d8      	b.n	804ae0c <__multiply+0x50>
 804ae5a:	f8b1 a000 	ldrh.w	sl, [r1]
 804ae5e:	f1ba 0f00 	cmp.w	sl, #0
 804ae62:	d024      	beq.n	804aeae <__multiply+0xf2>
 804ae64:	f104 0e14 	add.w	lr, r4, #20
 804ae68:	46a9      	mov	r9, r5
 804ae6a:	f04f 0c00 	mov.w	ip, #0
 804ae6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 804ae72:	f8d9 3000 	ldr.w	r3, [r9]
 804ae76:	fa1f fb87 	uxth.w	fp, r7
 804ae7a:	b29b      	uxth	r3, r3
 804ae7c:	fb0a 330b 	mla	r3, sl, fp, r3
 804ae80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 804ae84:	f8d9 7000 	ldr.w	r7, [r9]
 804ae88:	4463      	add	r3, ip
 804ae8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 804ae8e:	fb0a c70b 	mla	r7, sl, fp, ip
 804ae92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 804ae96:	b29b      	uxth	r3, r3
 804ae98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 804ae9c:	4572      	cmp	r2, lr
 804ae9e:	f849 3b04 	str.w	r3, [r9], #4
 804aea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 804aea6:	d8e2      	bhi.n	804ae6e <__multiply+0xb2>
 804aea8:	9b01      	ldr	r3, [sp, #4]
 804aeaa:	f845 c003 	str.w	ip, [r5, r3]
 804aeae:	9b03      	ldr	r3, [sp, #12]
 804aeb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 804aeb4:	3104      	adds	r1, #4
 804aeb6:	f1b9 0f00 	cmp.w	r9, #0
 804aeba:	d021      	beq.n	804af00 <__multiply+0x144>
 804aebc:	682b      	ldr	r3, [r5, #0]
 804aebe:	f104 0c14 	add.w	ip, r4, #20
 804aec2:	46ae      	mov	lr, r5
 804aec4:	f04f 0a00 	mov.w	sl, #0
 804aec8:	f8bc b000 	ldrh.w	fp, [ip]
 804aecc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 804aed0:	fb09 770b 	mla	r7, r9, fp, r7
 804aed4:	4457      	add	r7, sl
 804aed6:	b29b      	uxth	r3, r3
 804aed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 804aedc:	f84e 3b04 	str.w	r3, [lr], #4
 804aee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 804aee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 804aee8:	f8be 3000 	ldrh.w	r3, [lr]
 804aeec:	fb09 330a 	mla	r3, r9, sl, r3
 804aef0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 804aef4:	4562      	cmp	r2, ip
 804aef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 804aefa:	d8e5      	bhi.n	804aec8 <__multiply+0x10c>
 804aefc:	9f01      	ldr	r7, [sp, #4]
 804aefe:	51eb      	str	r3, [r5, r7]
 804af00:	3504      	adds	r5, #4
 804af02:	e799      	b.n	804ae38 <__multiply+0x7c>
 804af04:	3e01      	subs	r6, #1
 804af06:	e79b      	b.n	804ae40 <__multiply+0x84>
 804af08:	0804cf60 	.word	0x0804cf60
 804af0c:	0804cf71 	.word	0x0804cf71

0804af10 <__pow5mult>:
 804af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804af14:	4615      	mov	r5, r2
 804af16:	f012 0203 	ands.w	r2, r2, #3
 804af1a:	4607      	mov	r7, r0
 804af1c:	460e      	mov	r6, r1
 804af1e:	d007      	beq.n	804af30 <__pow5mult+0x20>
 804af20:	4c25      	ldr	r4, [pc, #148]	@ (804afb8 <__pow5mult+0xa8>)
 804af22:	3a01      	subs	r2, #1
 804af24:	2300      	movs	r3, #0
 804af26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804af2a:	f7ff fe9f 	bl	804ac6c <__multadd>
 804af2e:	4606      	mov	r6, r0
 804af30:	10ad      	asrs	r5, r5, #2
 804af32:	d03d      	beq.n	804afb0 <__pow5mult+0xa0>
 804af34:	69fc      	ldr	r4, [r7, #28]
 804af36:	b97c      	cbnz	r4, 804af58 <__pow5mult+0x48>
 804af38:	2010      	movs	r0, #16
 804af3a:	f7ff fd7f 	bl	804aa3c <malloc>
 804af3e:	4602      	mov	r2, r0
 804af40:	61f8      	str	r0, [r7, #28]
 804af42:	b928      	cbnz	r0, 804af50 <__pow5mult+0x40>
 804af44:	4b1d      	ldr	r3, [pc, #116]	@ (804afbc <__pow5mult+0xac>)
 804af46:	481e      	ldr	r0, [pc, #120]	@ (804afc0 <__pow5mult+0xb0>)
 804af48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 804af4c:	f000 fbdc 	bl	804b708 <__assert_func>
 804af50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 804af54:	6004      	str	r4, [r0, #0]
 804af56:	60c4      	str	r4, [r0, #12]
 804af58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 804af5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 804af60:	b94c      	cbnz	r4, 804af76 <__pow5mult+0x66>
 804af62:	f240 2171 	movw	r1, #625	@ 0x271
 804af66:	4638      	mov	r0, r7
 804af68:	f7ff ff12 	bl	804ad90 <__i2b>
 804af6c:	2300      	movs	r3, #0
 804af6e:	f8c8 0008 	str.w	r0, [r8, #8]
 804af72:	4604      	mov	r4, r0
 804af74:	6003      	str	r3, [r0, #0]
 804af76:	f04f 0900 	mov.w	r9, #0
 804af7a:	07eb      	lsls	r3, r5, #31
 804af7c:	d50a      	bpl.n	804af94 <__pow5mult+0x84>
 804af7e:	4631      	mov	r1, r6
 804af80:	4622      	mov	r2, r4
 804af82:	4638      	mov	r0, r7
 804af84:	f7ff ff1a 	bl	804adbc <__multiply>
 804af88:	4631      	mov	r1, r6
 804af8a:	4680      	mov	r8, r0
 804af8c:	4638      	mov	r0, r7
 804af8e:	f7ff fe4b 	bl	804ac28 <_Bfree>
 804af92:	4646      	mov	r6, r8
 804af94:	106d      	asrs	r5, r5, #1
 804af96:	d00b      	beq.n	804afb0 <__pow5mult+0xa0>
 804af98:	6820      	ldr	r0, [r4, #0]
 804af9a:	b938      	cbnz	r0, 804afac <__pow5mult+0x9c>
 804af9c:	4622      	mov	r2, r4
 804af9e:	4621      	mov	r1, r4
 804afa0:	4638      	mov	r0, r7
 804afa2:	f7ff ff0b 	bl	804adbc <__multiply>
 804afa6:	6020      	str	r0, [r4, #0]
 804afa8:	f8c0 9000 	str.w	r9, [r0]
 804afac:	4604      	mov	r4, r0
 804afae:	e7e4      	b.n	804af7a <__pow5mult+0x6a>
 804afb0:	4630      	mov	r0, r6
 804afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804afb6:	bf00      	nop
 804afb8:	0804cfcc 	.word	0x0804cfcc
 804afbc:	0804cef1 	.word	0x0804cef1
 804afc0:	0804cf71 	.word	0x0804cf71

0804afc4 <__lshift>:
 804afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804afc8:	460c      	mov	r4, r1
 804afca:	6849      	ldr	r1, [r1, #4]
 804afcc:	6923      	ldr	r3, [r4, #16]
 804afce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 804afd2:	68a3      	ldr	r3, [r4, #8]
 804afd4:	4607      	mov	r7, r0
 804afd6:	4691      	mov	r9, r2
 804afd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 804afdc:	f108 0601 	add.w	r6, r8, #1
 804afe0:	42b3      	cmp	r3, r6
 804afe2:	db0b      	blt.n	804affc <__lshift+0x38>
 804afe4:	4638      	mov	r0, r7
 804afe6:	f7ff fddf 	bl	804aba8 <_Balloc>
 804afea:	4605      	mov	r5, r0
 804afec:	b948      	cbnz	r0, 804b002 <__lshift+0x3e>
 804afee:	4602      	mov	r2, r0
 804aff0:	4b28      	ldr	r3, [pc, #160]	@ (804b094 <__lshift+0xd0>)
 804aff2:	4829      	ldr	r0, [pc, #164]	@ (804b098 <__lshift+0xd4>)
 804aff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 804aff8:	f000 fb86 	bl	804b708 <__assert_func>
 804affc:	3101      	adds	r1, #1
 804affe:	005b      	lsls	r3, r3, #1
 804b000:	e7ee      	b.n	804afe0 <__lshift+0x1c>
 804b002:	2300      	movs	r3, #0
 804b004:	f100 0114 	add.w	r1, r0, #20
 804b008:	f100 0210 	add.w	r2, r0, #16
 804b00c:	4618      	mov	r0, r3
 804b00e:	4553      	cmp	r3, sl
 804b010:	db33      	blt.n	804b07a <__lshift+0xb6>
 804b012:	6920      	ldr	r0, [r4, #16]
 804b014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 804b018:	f104 0314 	add.w	r3, r4, #20
 804b01c:	f019 091f 	ands.w	r9, r9, #31
 804b020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 804b024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 804b028:	d02b      	beq.n	804b082 <__lshift+0xbe>
 804b02a:	f1c9 0e20 	rsb	lr, r9, #32
 804b02e:	468a      	mov	sl, r1
 804b030:	2200      	movs	r2, #0
 804b032:	6818      	ldr	r0, [r3, #0]
 804b034:	fa00 f009 	lsl.w	r0, r0, r9
 804b038:	4310      	orrs	r0, r2
 804b03a:	f84a 0b04 	str.w	r0, [sl], #4
 804b03e:	f853 2b04 	ldr.w	r2, [r3], #4
 804b042:	459c      	cmp	ip, r3
 804b044:	fa22 f20e 	lsr.w	r2, r2, lr
 804b048:	d8f3      	bhi.n	804b032 <__lshift+0x6e>
 804b04a:	ebac 0304 	sub.w	r3, ip, r4
 804b04e:	3b15      	subs	r3, #21
 804b050:	f023 0303 	bic.w	r3, r3, #3
 804b054:	3304      	adds	r3, #4
 804b056:	f104 0015 	add.w	r0, r4, #21
 804b05a:	4584      	cmp	ip, r0
 804b05c:	bf38      	it	cc
 804b05e:	2304      	movcc	r3, #4
 804b060:	50ca      	str	r2, [r1, r3]
 804b062:	b10a      	cbz	r2, 804b068 <__lshift+0xa4>
 804b064:	f108 0602 	add.w	r6, r8, #2
 804b068:	3e01      	subs	r6, #1
 804b06a:	4638      	mov	r0, r7
 804b06c:	612e      	str	r6, [r5, #16]
 804b06e:	4621      	mov	r1, r4
 804b070:	f7ff fdda 	bl	804ac28 <_Bfree>
 804b074:	4628      	mov	r0, r5
 804b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b07a:	f842 0f04 	str.w	r0, [r2, #4]!
 804b07e:	3301      	adds	r3, #1
 804b080:	e7c5      	b.n	804b00e <__lshift+0x4a>
 804b082:	3904      	subs	r1, #4
 804b084:	f853 2b04 	ldr.w	r2, [r3], #4
 804b088:	f841 2f04 	str.w	r2, [r1, #4]!
 804b08c:	459c      	cmp	ip, r3
 804b08e:	d8f9      	bhi.n	804b084 <__lshift+0xc0>
 804b090:	e7ea      	b.n	804b068 <__lshift+0xa4>
 804b092:	bf00      	nop
 804b094:	0804cf60 	.word	0x0804cf60
 804b098:	0804cf71 	.word	0x0804cf71

0804b09c <__mcmp>:
 804b09c:	690a      	ldr	r2, [r1, #16]
 804b09e:	4603      	mov	r3, r0
 804b0a0:	6900      	ldr	r0, [r0, #16]
 804b0a2:	1a80      	subs	r0, r0, r2
 804b0a4:	b530      	push	{r4, r5, lr}
 804b0a6:	d10e      	bne.n	804b0c6 <__mcmp+0x2a>
 804b0a8:	3314      	adds	r3, #20
 804b0aa:	3114      	adds	r1, #20
 804b0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 804b0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 804b0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 804b0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 804b0bc:	4295      	cmp	r5, r2
 804b0be:	d003      	beq.n	804b0c8 <__mcmp+0x2c>
 804b0c0:	d205      	bcs.n	804b0ce <__mcmp+0x32>
 804b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 804b0c6:	bd30      	pop	{r4, r5, pc}
 804b0c8:	42a3      	cmp	r3, r4
 804b0ca:	d3f3      	bcc.n	804b0b4 <__mcmp+0x18>
 804b0cc:	e7fb      	b.n	804b0c6 <__mcmp+0x2a>
 804b0ce:	2001      	movs	r0, #1
 804b0d0:	e7f9      	b.n	804b0c6 <__mcmp+0x2a>
	...

0804b0d4 <__mdiff>:
 804b0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b0d8:	4689      	mov	r9, r1
 804b0da:	4606      	mov	r6, r0
 804b0dc:	4611      	mov	r1, r2
 804b0de:	4648      	mov	r0, r9
 804b0e0:	4614      	mov	r4, r2
 804b0e2:	f7ff ffdb 	bl	804b09c <__mcmp>
 804b0e6:	1e05      	subs	r5, r0, #0
 804b0e8:	d112      	bne.n	804b110 <__mdiff+0x3c>
 804b0ea:	4629      	mov	r1, r5
 804b0ec:	4630      	mov	r0, r6
 804b0ee:	f7ff fd5b 	bl	804aba8 <_Balloc>
 804b0f2:	4602      	mov	r2, r0
 804b0f4:	b928      	cbnz	r0, 804b102 <__mdiff+0x2e>
 804b0f6:	4b3f      	ldr	r3, [pc, #252]	@ (804b1f4 <__mdiff+0x120>)
 804b0f8:	f240 2137 	movw	r1, #567	@ 0x237
 804b0fc:	483e      	ldr	r0, [pc, #248]	@ (804b1f8 <__mdiff+0x124>)
 804b0fe:	f000 fb03 	bl	804b708 <__assert_func>
 804b102:	2301      	movs	r3, #1
 804b104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 804b108:	4610      	mov	r0, r2
 804b10a:	b003      	add	sp, #12
 804b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b110:	bfbc      	itt	lt
 804b112:	464b      	movlt	r3, r9
 804b114:	46a1      	movlt	r9, r4
 804b116:	4630      	mov	r0, r6
 804b118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 804b11c:	bfba      	itte	lt
 804b11e:	461c      	movlt	r4, r3
 804b120:	2501      	movlt	r5, #1
 804b122:	2500      	movge	r5, #0
 804b124:	f7ff fd40 	bl	804aba8 <_Balloc>
 804b128:	4602      	mov	r2, r0
 804b12a:	b918      	cbnz	r0, 804b134 <__mdiff+0x60>
 804b12c:	4b31      	ldr	r3, [pc, #196]	@ (804b1f4 <__mdiff+0x120>)
 804b12e:	f240 2145 	movw	r1, #581	@ 0x245
 804b132:	e7e3      	b.n	804b0fc <__mdiff+0x28>
 804b134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 804b138:	6926      	ldr	r6, [r4, #16]
 804b13a:	60c5      	str	r5, [r0, #12]
 804b13c:	f109 0310 	add.w	r3, r9, #16
 804b140:	f109 0514 	add.w	r5, r9, #20
 804b144:	f104 0e14 	add.w	lr, r4, #20
 804b148:	f100 0b14 	add.w	fp, r0, #20
 804b14c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 804b150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 804b154:	9301      	str	r3, [sp, #4]
 804b156:	46d9      	mov	r9, fp
 804b158:	f04f 0c00 	mov.w	ip, #0
 804b15c:	9b01      	ldr	r3, [sp, #4]
 804b15e:	f85e 0b04 	ldr.w	r0, [lr], #4
 804b162:	f853 af04 	ldr.w	sl, [r3, #4]!
 804b166:	9301      	str	r3, [sp, #4]
 804b168:	fa1f f38a 	uxth.w	r3, sl
 804b16c:	4619      	mov	r1, r3
 804b16e:	b283      	uxth	r3, r0
 804b170:	1acb      	subs	r3, r1, r3
 804b172:	0c00      	lsrs	r0, r0, #16
 804b174:	4463      	add	r3, ip
 804b176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 804b17a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 804b17e:	b29b      	uxth	r3, r3
 804b180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804b184:	4576      	cmp	r6, lr
 804b186:	f849 3b04 	str.w	r3, [r9], #4
 804b18a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 804b18e:	d8e5      	bhi.n	804b15c <__mdiff+0x88>
 804b190:	1b33      	subs	r3, r6, r4
 804b192:	3b15      	subs	r3, #21
 804b194:	f023 0303 	bic.w	r3, r3, #3
 804b198:	3415      	adds	r4, #21
 804b19a:	3304      	adds	r3, #4
 804b19c:	42a6      	cmp	r6, r4
 804b19e:	bf38      	it	cc
 804b1a0:	2304      	movcc	r3, #4
 804b1a2:	441d      	add	r5, r3
 804b1a4:	445b      	add	r3, fp
 804b1a6:	461e      	mov	r6, r3
 804b1a8:	462c      	mov	r4, r5
 804b1aa:	4544      	cmp	r4, r8
 804b1ac:	d30e      	bcc.n	804b1cc <__mdiff+0xf8>
 804b1ae:	f108 0103 	add.w	r1, r8, #3
 804b1b2:	1b49      	subs	r1, r1, r5
 804b1b4:	f021 0103 	bic.w	r1, r1, #3
 804b1b8:	3d03      	subs	r5, #3
 804b1ba:	45a8      	cmp	r8, r5
 804b1bc:	bf38      	it	cc
 804b1be:	2100      	movcc	r1, #0
 804b1c0:	440b      	add	r3, r1
 804b1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 804b1c6:	b191      	cbz	r1, 804b1ee <__mdiff+0x11a>
 804b1c8:	6117      	str	r7, [r2, #16]
 804b1ca:	e79d      	b.n	804b108 <__mdiff+0x34>
 804b1cc:	f854 1b04 	ldr.w	r1, [r4], #4
 804b1d0:	46e6      	mov	lr, ip
 804b1d2:	0c08      	lsrs	r0, r1, #16
 804b1d4:	fa1c fc81 	uxtah	ip, ip, r1
 804b1d8:	4471      	add	r1, lr
 804b1da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 804b1de:	b289      	uxth	r1, r1
 804b1e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 804b1e4:	f846 1b04 	str.w	r1, [r6], #4
 804b1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 804b1ec:	e7dd      	b.n	804b1aa <__mdiff+0xd6>
 804b1ee:	3f01      	subs	r7, #1
 804b1f0:	e7e7      	b.n	804b1c2 <__mdiff+0xee>
 804b1f2:	bf00      	nop
 804b1f4:	0804cf60 	.word	0x0804cf60
 804b1f8:	0804cf71 	.word	0x0804cf71

0804b1fc <__d2b>:
 804b1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804b200:	460f      	mov	r7, r1
 804b202:	2101      	movs	r1, #1
 804b204:	ec59 8b10 	vmov	r8, r9, d0
 804b208:	4616      	mov	r6, r2
 804b20a:	f7ff fccd 	bl	804aba8 <_Balloc>
 804b20e:	4604      	mov	r4, r0
 804b210:	b930      	cbnz	r0, 804b220 <__d2b+0x24>
 804b212:	4602      	mov	r2, r0
 804b214:	4b23      	ldr	r3, [pc, #140]	@ (804b2a4 <__d2b+0xa8>)
 804b216:	4824      	ldr	r0, [pc, #144]	@ (804b2a8 <__d2b+0xac>)
 804b218:	f240 310f 	movw	r1, #783	@ 0x30f
 804b21c:	f000 fa74 	bl	804b708 <__assert_func>
 804b220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 804b224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 804b228:	b10d      	cbz	r5, 804b22e <__d2b+0x32>
 804b22a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 804b22e:	9301      	str	r3, [sp, #4]
 804b230:	f1b8 0300 	subs.w	r3, r8, #0
 804b234:	d023      	beq.n	804b27e <__d2b+0x82>
 804b236:	4668      	mov	r0, sp
 804b238:	9300      	str	r3, [sp, #0]
 804b23a:	f7ff fd7c 	bl	804ad36 <__lo0bits>
 804b23e:	e9dd 1200 	ldrd	r1, r2, [sp]
 804b242:	b1d0      	cbz	r0, 804b27a <__d2b+0x7e>
 804b244:	f1c0 0320 	rsb	r3, r0, #32
 804b248:	fa02 f303 	lsl.w	r3, r2, r3
 804b24c:	430b      	orrs	r3, r1
 804b24e:	40c2      	lsrs	r2, r0
 804b250:	6163      	str	r3, [r4, #20]
 804b252:	9201      	str	r2, [sp, #4]
 804b254:	9b01      	ldr	r3, [sp, #4]
 804b256:	61a3      	str	r3, [r4, #24]
 804b258:	2b00      	cmp	r3, #0
 804b25a:	bf0c      	ite	eq
 804b25c:	2201      	moveq	r2, #1
 804b25e:	2202      	movne	r2, #2
 804b260:	6122      	str	r2, [r4, #16]
 804b262:	b1a5      	cbz	r5, 804b28e <__d2b+0x92>
 804b264:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 804b268:	4405      	add	r5, r0
 804b26a:	603d      	str	r5, [r7, #0]
 804b26c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 804b270:	6030      	str	r0, [r6, #0]
 804b272:	4620      	mov	r0, r4
 804b274:	b003      	add	sp, #12
 804b276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804b27a:	6161      	str	r1, [r4, #20]
 804b27c:	e7ea      	b.n	804b254 <__d2b+0x58>
 804b27e:	a801      	add	r0, sp, #4
 804b280:	f7ff fd59 	bl	804ad36 <__lo0bits>
 804b284:	9b01      	ldr	r3, [sp, #4]
 804b286:	6163      	str	r3, [r4, #20]
 804b288:	3020      	adds	r0, #32
 804b28a:	2201      	movs	r2, #1
 804b28c:	e7e8      	b.n	804b260 <__d2b+0x64>
 804b28e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 804b292:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 804b296:	6038      	str	r0, [r7, #0]
 804b298:	6918      	ldr	r0, [r3, #16]
 804b29a:	f7ff fd2d 	bl	804acf8 <__hi0bits>
 804b29e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 804b2a2:	e7e5      	b.n	804b270 <__d2b+0x74>
 804b2a4:	0804cf60 	.word	0x0804cf60
 804b2a8:	0804cf71 	.word	0x0804cf71

0804b2ac <__ssputs_r>:
 804b2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b2b0:	688e      	ldr	r6, [r1, #8]
 804b2b2:	461f      	mov	r7, r3
 804b2b4:	42be      	cmp	r6, r7
 804b2b6:	680b      	ldr	r3, [r1, #0]
 804b2b8:	4682      	mov	sl, r0
 804b2ba:	460c      	mov	r4, r1
 804b2bc:	4690      	mov	r8, r2
 804b2be:	d82d      	bhi.n	804b31c <__ssputs_r+0x70>
 804b2c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804b2c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 804b2c8:	d026      	beq.n	804b318 <__ssputs_r+0x6c>
 804b2ca:	6965      	ldr	r5, [r4, #20]
 804b2cc:	6909      	ldr	r1, [r1, #16]
 804b2ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804b2d2:	eba3 0901 	sub.w	r9, r3, r1
 804b2d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804b2da:	1c7b      	adds	r3, r7, #1
 804b2dc:	444b      	add	r3, r9
 804b2de:	106d      	asrs	r5, r5, #1
 804b2e0:	429d      	cmp	r5, r3
 804b2e2:	bf38      	it	cc
 804b2e4:	461d      	movcc	r5, r3
 804b2e6:	0553      	lsls	r3, r2, #21
 804b2e8:	d527      	bpl.n	804b33a <__ssputs_r+0x8e>
 804b2ea:	4629      	mov	r1, r5
 804b2ec:	f7ff fbd0 	bl	804aa90 <_malloc_r>
 804b2f0:	4606      	mov	r6, r0
 804b2f2:	b360      	cbz	r0, 804b34e <__ssputs_r+0xa2>
 804b2f4:	6921      	ldr	r1, [r4, #16]
 804b2f6:	464a      	mov	r2, r9
 804b2f8:	f7fe fcf9 	bl	8049cee <memcpy>
 804b2fc:	89a3      	ldrh	r3, [r4, #12]
 804b2fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 804b302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804b306:	81a3      	strh	r3, [r4, #12]
 804b308:	6126      	str	r6, [r4, #16]
 804b30a:	6165      	str	r5, [r4, #20]
 804b30c:	444e      	add	r6, r9
 804b30e:	eba5 0509 	sub.w	r5, r5, r9
 804b312:	6026      	str	r6, [r4, #0]
 804b314:	60a5      	str	r5, [r4, #8]
 804b316:	463e      	mov	r6, r7
 804b318:	42be      	cmp	r6, r7
 804b31a:	d900      	bls.n	804b31e <__ssputs_r+0x72>
 804b31c:	463e      	mov	r6, r7
 804b31e:	6820      	ldr	r0, [r4, #0]
 804b320:	4632      	mov	r2, r6
 804b322:	4641      	mov	r1, r8
 804b324:	f000 f9c6 	bl	804b6b4 <memmove>
 804b328:	68a3      	ldr	r3, [r4, #8]
 804b32a:	1b9b      	subs	r3, r3, r6
 804b32c:	60a3      	str	r3, [r4, #8]
 804b32e:	6823      	ldr	r3, [r4, #0]
 804b330:	4433      	add	r3, r6
 804b332:	6023      	str	r3, [r4, #0]
 804b334:	2000      	movs	r0, #0
 804b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b33a:	462a      	mov	r2, r5
 804b33c:	f000 fa28 	bl	804b790 <_realloc_r>
 804b340:	4606      	mov	r6, r0
 804b342:	2800      	cmp	r0, #0
 804b344:	d1e0      	bne.n	804b308 <__ssputs_r+0x5c>
 804b346:	6921      	ldr	r1, [r4, #16]
 804b348:	4650      	mov	r0, sl
 804b34a:	f7ff fb2d 	bl	804a9a8 <_free_r>
 804b34e:	230c      	movs	r3, #12
 804b350:	f8ca 3000 	str.w	r3, [sl]
 804b354:	89a3      	ldrh	r3, [r4, #12]
 804b356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b35a:	81a3      	strh	r3, [r4, #12]
 804b35c:	f04f 30ff 	mov.w	r0, #4294967295
 804b360:	e7e9      	b.n	804b336 <__ssputs_r+0x8a>
	...

0804b364 <_svfiprintf_r>:
 804b364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b368:	4698      	mov	r8, r3
 804b36a:	898b      	ldrh	r3, [r1, #12]
 804b36c:	061b      	lsls	r3, r3, #24
 804b36e:	b09d      	sub	sp, #116	@ 0x74
 804b370:	4607      	mov	r7, r0
 804b372:	460d      	mov	r5, r1
 804b374:	4614      	mov	r4, r2
 804b376:	d510      	bpl.n	804b39a <_svfiprintf_r+0x36>
 804b378:	690b      	ldr	r3, [r1, #16]
 804b37a:	b973      	cbnz	r3, 804b39a <_svfiprintf_r+0x36>
 804b37c:	2140      	movs	r1, #64	@ 0x40
 804b37e:	f7ff fb87 	bl	804aa90 <_malloc_r>
 804b382:	6028      	str	r0, [r5, #0]
 804b384:	6128      	str	r0, [r5, #16]
 804b386:	b930      	cbnz	r0, 804b396 <_svfiprintf_r+0x32>
 804b388:	230c      	movs	r3, #12
 804b38a:	603b      	str	r3, [r7, #0]
 804b38c:	f04f 30ff 	mov.w	r0, #4294967295
 804b390:	b01d      	add	sp, #116	@ 0x74
 804b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b396:	2340      	movs	r3, #64	@ 0x40
 804b398:	616b      	str	r3, [r5, #20]
 804b39a:	2300      	movs	r3, #0
 804b39c:	9309      	str	r3, [sp, #36]	@ 0x24
 804b39e:	2320      	movs	r3, #32
 804b3a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804b3a4:	f8cd 800c 	str.w	r8, [sp, #12]
 804b3a8:	2330      	movs	r3, #48	@ 0x30
 804b3aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 804b548 <_svfiprintf_r+0x1e4>
 804b3ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804b3b2:	f04f 0901 	mov.w	r9, #1
 804b3b6:	4623      	mov	r3, r4
 804b3b8:	469a      	mov	sl, r3
 804b3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b3be:	b10a      	cbz	r2, 804b3c4 <_svfiprintf_r+0x60>
 804b3c0:	2a25      	cmp	r2, #37	@ 0x25
 804b3c2:	d1f9      	bne.n	804b3b8 <_svfiprintf_r+0x54>
 804b3c4:	ebba 0b04 	subs.w	fp, sl, r4
 804b3c8:	d00b      	beq.n	804b3e2 <_svfiprintf_r+0x7e>
 804b3ca:	465b      	mov	r3, fp
 804b3cc:	4622      	mov	r2, r4
 804b3ce:	4629      	mov	r1, r5
 804b3d0:	4638      	mov	r0, r7
 804b3d2:	f7ff ff6b 	bl	804b2ac <__ssputs_r>
 804b3d6:	3001      	adds	r0, #1
 804b3d8:	f000 80a7 	beq.w	804b52a <_svfiprintf_r+0x1c6>
 804b3dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804b3de:	445a      	add	r2, fp
 804b3e0:	9209      	str	r2, [sp, #36]	@ 0x24
 804b3e2:	f89a 3000 	ldrb.w	r3, [sl]
 804b3e6:	2b00      	cmp	r3, #0
 804b3e8:	f000 809f 	beq.w	804b52a <_svfiprintf_r+0x1c6>
 804b3ec:	2300      	movs	r3, #0
 804b3ee:	f04f 32ff 	mov.w	r2, #4294967295
 804b3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b3f6:	f10a 0a01 	add.w	sl, sl, #1
 804b3fa:	9304      	str	r3, [sp, #16]
 804b3fc:	9307      	str	r3, [sp, #28]
 804b3fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b402:	931a      	str	r3, [sp, #104]	@ 0x68
 804b404:	4654      	mov	r4, sl
 804b406:	2205      	movs	r2, #5
 804b408:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b40c:	484e      	ldr	r0, [pc, #312]	@ (804b548 <_svfiprintf_r+0x1e4>)
 804b40e:	f7f4 feef 	bl	80401f0 <memchr>
 804b412:	9a04      	ldr	r2, [sp, #16]
 804b414:	b9d8      	cbnz	r0, 804b44e <_svfiprintf_r+0xea>
 804b416:	06d0      	lsls	r0, r2, #27
 804b418:	bf44      	itt	mi
 804b41a:	2320      	movmi	r3, #32
 804b41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b420:	0711      	lsls	r1, r2, #28
 804b422:	bf44      	itt	mi
 804b424:	232b      	movmi	r3, #43	@ 0x2b
 804b426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b42a:	f89a 3000 	ldrb.w	r3, [sl]
 804b42e:	2b2a      	cmp	r3, #42	@ 0x2a
 804b430:	d015      	beq.n	804b45e <_svfiprintf_r+0xfa>
 804b432:	9a07      	ldr	r2, [sp, #28]
 804b434:	4654      	mov	r4, sl
 804b436:	2000      	movs	r0, #0
 804b438:	f04f 0c0a 	mov.w	ip, #10
 804b43c:	4621      	mov	r1, r4
 804b43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b442:	3b30      	subs	r3, #48	@ 0x30
 804b444:	2b09      	cmp	r3, #9
 804b446:	d94b      	bls.n	804b4e0 <_svfiprintf_r+0x17c>
 804b448:	b1b0      	cbz	r0, 804b478 <_svfiprintf_r+0x114>
 804b44a:	9207      	str	r2, [sp, #28]
 804b44c:	e014      	b.n	804b478 <_svfiprintf_r+0x114>
 804b44e:	eba0 0308 	sub.w	r3, r0, r8
 804b452:	fa09 f303 	lsl.w	r3, r9, r3
 804b456:	4313      	orrs	r3, r2
 804b458:	9304      	str	r3, [sp, #16]
 804b45a:	46a2      	mov	sl, r4
 804b45c:	e7d2      	b.n	804b404 <_svfiprintf_r+0xa0>
 804b45e:	9b03      	ldr	r3, [sp, #12]
 804b460:	1d19      	adds	r1, r3, #4
 804b462:	681b      	ldr	r3, [r3, #0]
 804b464:	9103      	str	r1, [sp, #12]
 804b466:	2b00      	cmp	r3, #0
 804b468:	bfbb      	ittet	lt
 804b46a:	425b      	neglt	r3, r3
 804b46c:	f042 0202 	orrlt.w	r2, r2, #2
 804b470:	9307      	strge	r3, [sp, #28]
 804b472:	9307      	strlt	r3, [sp, #28]
 804b474:	bfb8      	it	lt
 804b476:	9204      	strlt	r2, [sp, #16]
 804b478:	7823      	ldrb	r3, [r4, #0]
 804b47a:	2b2e      	cmp	r3, #46	@ 0x2e
 804b47c:	d10a      	bne.n	804b494 <_svfiprintf_r+0x130>
 804b47e:	7863      	ldrb	r3, [r4, #1]
 804b480:	2b2a      	cmp	r3, #42	@ 0x2a
 804b482:	d132      	bne.n	804b4ea <_svfiprintf_r+0x186>
 804b484:	9b03      	ldr	r3, [sp, #12]
 804b486:	1d1a      	adds	r2, r3, #4
 804b488:	681b      	ldr	r3, [r3, #0]
 804b48a:	9203      	str	r2, [sp, #12]
 804b48c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804b490:	3402      	adds	r4, #2
 804b492:	9305      	str	r3, [sp, #20]
 804b494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 804b558 <_svfiprintf_r+0x1f4>
 804b498:	7821      	ldrb	r1, [r4, #0]
 804b49a:	2203      	movs	r2, #3
 804b49c:	4650      	mov	r0, sl
 804b49e:	f7f4 fea7 	bl	80401f0 <memchr>
 804b4a2:	b138      	cbz	r0, 804b4b4 <_svfiprintf_r+0x150>
 804b4a4:	9b04      	ldr	r3, [sp, #16]
 804b4a6:	eba0 000a 	sub.w	r0, r0, sl
 804b4aa:	2240      	movs	r2, #64	@ 0x40
 804b4ac:	4082      	lsls	r2, r0
 804b4ae:	4313      	orrs	r3, r2
 804b4b0:	3401      	adds	r4, #1
 804b4b2:	9304      	str	r3, [sp, #16]
 804b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b4b8:	4824      	ldr	r0, [pc, #144]	@ (804b54c <_svfiprintf_r+0x1e8>)
 804b4ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804b4be:	2206      	movs	r2, #6
 804b4c0:	f7f4 fe96 	bl	80401f0 <memchr>
 804b4c4:	2800      	cmp	r0, #0
 804b4c6:	d036      	beq.n	804b536 <_svfiprintf_r+0x1d2>
 804b4c8:	4b21      	ldr	r3, [pc, #132]	@ (804b550 <_svfiprintf_r+0x1ec>)
 804b4ca:	bb1b      	cbnz	r3, 804b514 <_svfiprintf_r+0x1b0>
 804b4cc:	9b03      	ldr	r3, [sp, #12]
 804b4ce:	3307      	adds	r3, #7
 804b4d0:	f023 0307 	bic.w	r3, r3, #7
 804b4d4:	3308      	adds	r3, #8
 804b4d6:	9303      	str	r3, [sp, #12]
 804b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804b4da:	4433      	add	r3, r6
 804b4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 804b4de:	e76a      	b.n	804b3b6 <_svfiprintf_r+0x52>
 804b4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 804b4e4:	460c      	mov	r4, r1
 804b4e6:	2001      	movs	r0, #1
 804b4e8:	e7a8      	b.n	804b43c <_svfiprintf_r+0xd8>
 804b4ea:	2300      	movs	r3, #0
 804b4ec:	3401      	adds	r4, #1
 804b4ee:	9305      	str	r3, [sp, #20]
 804b4f0:	4619      	mov	r1, r3
 804b4f2:	f04f 0c0a 	mov.w	ip, #10
 804b4f6:	4620      	mov	r0, r4
 804b4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 804b4fc:	3a30      	subs	r2, #48	@ 0x30
 804b4fe:	2a09      	cmp	r2, #9
 804b500:	d903      	bls.n	804b50a <_svfiprintf_r+0x1a6>
 804b502:	2b00      	cmp	r3, #0
 804b504:	d0c6      	beq.n	804b494 <_svfiprintf_r+0x130>
 804b506:	9105      	str	r1, [sp, #20]
 804b508:	e7c4      	b.n	804b494 <_svfiprintf_r+0x130>
 804b50a:	fb0c 2101 	mla	r1, ip, r1, r2
 804b50e:	4604      	mov	r4, r0
 804b510:	2301      	movs	r3, #1
 804b512:	e7f0      	b.n	804b4f6 <_svfiprintf_r+0x192>
 804b514:	ab03      	add	r3, sp, #12
 804b516:	9300      	str	r3, [sp, #0]
 804b518:	462a      	mov	r2, r5
 804b51a:	4b0e      	ldr	r3, [pc, #56]	@ (804b554 <_svfiprintf_r+0x1f0>)
 804b51c:	a904      	add	r1, sp, #16
 804b51e:	4638      	mov	r0, r7
 804b520:	f7fd fe88 	bl	8049234 <_printf_float>
 804b524:	1c42      	adds	r2, r0, #1
 804b526:	4606      	mov	r6, r0
 804b528:	d1d6      	bne.n	804b4d8 <_svfiprintf_r+0x174>
 804b52a:	89ab      	ldrh	r3, [r5, #12]
 804b52c:	065b      	lsls	r3, r3, #25
 804b52e:	f53f af2d 	bmi.w	804b38c <_svfiprintf_r+0x28>
 804b532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804b534:	e72c      	b.n	804b390 <_svfiprintf_r+0x2c>
 804b536:	ab03      	add	r3, sp, #12
 804b538:	9300      	str	r3, [sp, #0]
 804b53a:	462a      	mov	r2, r5
 804b53c:	4b05      	ldr	r3, [pc, #20]	@ (804b554 <_svfiprintf_r+0x1f0>)
 804b53e:	a904      	add	r1, sp, #16
 804b540:	4638      	mov	r0, r7
 804b542:	f7fe f90f 	bl	8049764 <_printf_i>
 804b546:	e7ed      	b.n	804b524 <_svfiprintf_r+0x1c0>
 804b548:	0804d0c8 	.word	0x0804d0c8
 804b54c:	0804d0d2 	.word	0x0804d0d2
 804b550:	08049235 	.word	0x08049235
 804b554:	0804b2ad 	.word	0x0804b2ad
 804b558:	0804d0ce 	.word	0x0804d0ce

0804b55c <__sflush_r>:
 804b55c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b564:	0716      	lsls	r6, r2, #28
 804b566:	4605      	mov	r5, r0
 804b568:	460c      	mov	r4, r1
 804b56a:	d454      	bmi.n	804b616 <__sflush_r+0xba>
 804b56c:	684b      	ldr	r3, [r1, #4]
 804b56e:	2b00      	cmp	r3, #0
 804b570:	dc02      	bgt.n	804b578 <__sflush_r+0x1c>
 804b572:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 804b574:	2b00      	cmp	r3, #0
 804b576:	dd48      	ble.n	804b60a <__sflush_r+0xae>
 804b578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b57a:	2e00      	cmp	r6, #0
 804b57c:	d045      	beq.n	804b60a <__sflush_r+0xae>
 804b57e:	2300      	movs	r3, #0
 804b580:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 804b584:	682f      	ldr	r7, [r5, #0]
 804b586:	6a21      	ldr	r1, [r4, #32]
 804b588:	602b      	str	r3, [r5, #0]
 804b58a:	d030      	beq.n	804b5ee <__sflush_r+0x92>
 804b58c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 804b58e:	89a3      	ldrh	r3, [r4, #12]
 804b590:	0759      	lsls	r1, r3, #29
 804b592:	d505      	bpl.n	804b5a0 <__sflush_r+0x44>
 804b594:	6863      	ldr	r3, [r4, #4]
 804b596:	1ad2      	subs	r2, r2, r3
 804b598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 804b59a:	b10b      	cbz	r3, 804b5a0 <__sflush_r+0x44>
 804b59c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 804b59e:	1ad2      	subs	r2, r2, r3
 804b5a0:	2300      	movs	r3, #0
 804b5a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b5a4:	6a21      	ldr	r1, [r4, #32]
 804b5a6:	4628      	mov	r0, r5
 804b5a8:	47b0      	blx	r6
 804b5aa:	1c43      	adds	r3, r0, #1
 804b5ac:	89a3      	ldrh	r3, [r4, #12]
 804b5ae:	d106      	bne.n	804b5be <__sflush_r+0x62>
 804b5b0:	6829      	ldr	r1, [r5, #0]
 804b5b2:	291d      	cmp	r1, #29
 804b5b4:	d82b      	bhi.n	804b60e <__sflush_r+0xb2>
 804b5b6:	4a2a      	ldr	r2, [pc, #168]	@ (804b660 <__sflush_r+0x104>)
 804b5b8:	410a      	asrs	r2, r1
 804b5ba:	07d6      	lsls	r6, r2, #31
 804b5bc:	d427      	bmi.n	804b60e <__sflush_r+0xb2>
 804b5be:	2200      	movs	r2, #0
 804b5c0:	6062      	str	r2, [r4, #4]
 804b5c2:	04d9      	lsls	r1, r3, #19
 804b5c4:	6922      	ldr	r2, [r4, #16]
 804b5c6:	6022      	str	r2, [r4, #0]
 804b5c8:	d504      	bpl.n	804b5d4 <__sflush_r+0x78>
 804b5ca:	1c42      	adds	r2, r0, #1
 804b5cc:	d101      	bne.n	804b5d2 <__sflush_r+0x76>
 804b5ce:	682b      	ldr	r3, [r5, #0]
 804b5d0:	b903      	cbnz	r3, 804b5d4 <__sflush_r+0x78>
 804b5d2:	6560      	str	r0, [r4, #84]	@ 0x54
 804b5d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804b5d6:	602f      	str	r7, [r5, #0]
 804b5d8:	b1b9      	cbz	r1, 804b60a <__sflush_r+0xae>
 804b5da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804b5de:	4299      	cmp	r1, r3
 804b5e0:	d002      	beq.n	804b5e8 <__sflush_r+0x8c>
 804b5e2:	4628      	mov	r0, r5
 804b5e4:	f7ff f9e0 	bl	804a9a8 <_free_r>
 804b5e8:	2300      	movs	r3, #0
 804b5ea:	6363      	str	r3, [r4, #52]	@ 0x34
 804b5ec:	e00d      	b.n	804b60a <__sflush_r+0xae>
 804b5ee:	2301      	movs	r3, #1
 804b5f0:	4628      	mov	r0, r5
 804b5f2:	47b0      	blx	r6
 804b5f4:	4602      	mov	r2, r0
 804b5f6:	1c50      	adds	r0, r2, #1
 804b5f8:	d1c9      	bne.n	804b58e <__sflush_r+0x32>
 804b5fa:	682b      	ldr	r3, [r5, #0]
 804b5fc:	2b00      	cmp	r3, #0
 804b5fe:	d0c6      	beq.n	804b58e <__sflush_r+0x32>
 804b600:	2b1d      	cmp	r3, #29
 804b602:	d001      	beq.n	804b608 <__sflush_r+0xac>
 804b604:	2b16      	cmp	r3, #22
 804b606:	d11e      	bne.n	804b646 <__sflush_r+0xea>
 804b608:	602f      	str	r7, [r5, #0]
 804b60a:	2000      	movs	r0, #0
 804b60c:	e022      	b.n	804b654 <__sflush_r+0xf8>
 804b60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b612:	b21b      	sxth	r3, r3
 804b614:	e01b      	b.n	804b64e <__sflush_r+0xf2>
 804b616:	690f      	ldr	r7, [r1, #16]
 804b618:	2f00      	cmp	r7, #0
 804b61a:	d0f6      	beq.n	804b60a <__sflush_r+0xae>
 804b61c:	0793      	lsls	r3, r2, #30
 804b61e:	680e      	ldr	r6, [r1, #0]
 804b620:	bf08      	it	eq
 804b622:	694b      	ldreq	r3, [r1, #20]
 804b624:	600f      	str	r7, [r1, #0]
 804b626:	bf18      	it	ne
 804b628:	2300      	movne	r3, #0
 804b62a:	eba6 0807 	sub.w	r8, r6, r7
 804b62e:	608b      	str	r3, [r1, #8]
 804b630:	f1b8 0f00 	cmp.w	r8, #0
 804b634:	dde9      	ble.n	804b60a <__sflush_r+0xae>
 804b636:	6a21      	ldr	r1, [r4, #32]
 804b638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 804b63a:	4643      	mov	r3, r8
 804b63c:	463a      	mov	r2, r7
 804b63e:	4628      	mov	r0, r5
 804b640:	47b0      	blx	r6
 804b642:	2800      	cmp	r0, #0
 804b644:	dc08      	bgt.n	804b658 <__sflush_r+0xfc>
 804b646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b64e:	81a3      	strh	r3, [r4, #12]
 804b650:	f04f 30ff 	mov.w	r0, #4294967295
 804b654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b658:	4407      	add	r7, r0
 804b65a:	eba8 0800 	sub.w	r8, r8, r0
 804b65e:	e7e7      	b.n	804b630 <__sflush_r+0xd4>
 804b660:	dfbffffe 	.word	0xdfbffffe

0804b664 <_fflush_r>:
 804b664:	b538      	push	{r3, r4, r5, lr}
 804b666:	690b      	ldr	r3, [r1, #16]
 804b668:	4605      	mov	r5, r0
 804b66a:	460c      	mov	r4, r1
 804b66c:	b913      	cbnz	r3, 804b674 <_fflush_r+0x10>
 804b66e:	2500      	movs	r5, #0
 804b670:	4628      	mov	r0, r5
 804b672:	bd38      	pop	{r3, r4, r5, pc}
 804b674:	b118      	cbz	r0, 804b67e <_fflush_r+0x1a>
 804b676:	6a03      	ldr	r3, [r0, #32]
 804b678:	b90b      	cbnz	r3, 804b67e <_fflush_r+0x1a>
 804b67a:	f7fe fa1f 	bl	8049abc <__sinit>
 804b67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b682:	2b00      	cmp	r3, #0
 804b684:	d0f3      	beq.n	804b66e <_fflush_r+0xa>
 804b686:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 804b688:	07d0      	lsls	r0, r2, #31
 804b68a:	d404      	bmi.n	804b696 <_fflush_r+0x32>
 804b68c:	0599      	lsls	r1, r3, #22
 804b68e:	d402      	bmi.n	804b696 <_fflush_r+0x32>
 804b690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b692:	f7fe fb2a 	bl	8049cea <__retarget_lock_acquire_recursive>
 804b696:	4628      	mov	r0, r5
 804b698:	4621      	mov	r1, r4
 804b69a:	f7ff ff5f 	bl	804b55c <__sflush_r>
 804b69e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 804b6a0:	07da      	lsls	r2, r3, #31
 804b6a2:	4605      	mov	r5, r0
 804b6a4:	d4e4      	bmi.n	804b670 <_fflush_r+0xc>
 804b6a6:	89a3      	ldrh	r3, [r4, #12]
 804b6a8:	059b      	lsls	r3, r3, #22
 804b6aa:	d4e1      	bmi.n	804b670 <_fflush_r+0xc>
 804b6ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b6ae:	f7fe fb1d 	bl	8049cec <__retarget_lock_release_recursive>
 804b6b2:	e7dd      	b.n	804b670 <_fflush_r+0xc>

0804b6b4 <memmove>:
 804b6b4:	4288      	cmp	r0, r1
 804b6b6:	b510      	push	{r4, lr}
 804b6b8:	eb01 0402 	add.w	r4, r1, r2
 804b6bc:	d902      	bls.n	804b6c4 <memmove+0x10>
 804b6be:	4284      	cmp	r4, r0
 804b6c0:	4623      	mov	r3, r4
 804b6c2:	d807      	bhi.n	804b6d4 <memmove+0x20>
 804b6c4:	1e43      	subs	r3, r0, #1
 804b6c6:	42a1      	cmp	r1, r4
 804b6c8:	d008      	beq.n	804b6dc <memmove+0x28>
 804b6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 804b6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 804b6d2:	e7f8      	b.n	804b6c6 <memmove+0x12>
 804b6d4:	4402      	add	r2, r0
 804b6d6:	4601      	mov	r1, r0
 804b6d8:	428a      	cmp	r2, r1
 804b6da:	d100      	bne.n	804b6de <memmove+0x2a>
 804b6dc:	bd10      	pop	{r4, pc}
 804b6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804b6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804b6e6:	e7f7      	b.n	804b6d8 <memmove+0x24>

0804b6e8 <_sbrk_r>:
 804b6e8:	b538      	push	{r3, r4, r5, lr}
 804b6ea:	4d06      	ldr	r5, [pc, #24]	@ (804b704 <_sbrk_r+0x1c>)
 804b6ec:	2300      	movs	r3, #0
 804b6ee:	4604      	mov	r4, r0
 804b6f0:	4608      	mov	r0, r1
 804b6f2:	602b      	str	r3, [r5, #0]
 804b6f4:	f001 faa6 	bl	804cc44 <_sbrk>
 804b6f8:	1c43      	adds	r3, r0, #1
 804b6fa:	d102      	bne.n	804b702 <_sbrk_r+0x1a>
 804b6fc:	682b      	ldr	r3, [r5, #0]
 804b6fe:	b103      	cbz	r3, 804b702 <_sbrk_r+0x1a>
 804b700:	6023      	str	r3, [r4, #0]
 804b702:	bd38      	pop	{r3, r4, r5, pc}
 804b704:	200132ac 	.word	0x200132ac

0804b708 <__assert_func>:
 804b708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804b70a:	4614      	mov	r4, r2
 804b70c:	461a      	mov	r2, r3
 804b70e:	4b09      	ldr	r3, [pc, #36]	@ (804b734 <__assert_func+0x2c>)
 804b710:	681b      	ldr	r3, [r3, #0]
 804b712:	4605      	mov	r5, r0
 804b714:	68d8      	ldr	r0, [r3, #12]
 804b716:	b954      	cbnz	r4, 804b72e <__assert_func+0x26>
 804b718:	4b07      	ldr	r3, [pc, #28]	@ (804b738 <__assert_func+0x30>)
 804b71a:	461c      	mov	r4, r3
 804b71c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804b720:	9100      	str	r1, [sp, #0]
 804b722:	462b      	mov	r3, r5
 804b724:	4905      	ldr	r1, [pc, #20]	@ (804b73c <__assert_func+0x34>)
 804b726:	f000 f86f 	bl	804b808 <fiprintf>
 804b72a:	f000 f87f 	bl	804b82c <abort>
 804b72e:	4b04      	ldr	r3, [pc, #16]	@ (804b740 <__assert_func+0x38>)
 804b730:	e7f4      	b.n	804b71c <__assert_func+0x14>
 804b732:	bf00      	nop
 804b734:	20000024 	.word	0x20000024
 804b738:	0804d11e 	.word	0x0804d11e
 804b73c:	0804d0f0 	.word	0x0804d0f0
 804b740:	0804d0e3 	.word	0x0804d0e3

0804b744 <_calloc_r>:
 804b744:	b570      	push	{r4, r5, r6, lr}
 804b746:	fba1 5402 	umull	r5, r4, r1, r2
 804b74a:	b93c      	cbnz	r4, 804b75c <_calloc_r+0x18>
 804b74c:	4629      	mov	r1, r5
 804b74e:	f7ff f99f 	bl	804aa90 <_malloc_r>
 804b752:	4606      	mov	r6, r0
 804b754:	b928      	cbnz	r0, 804b762 <_calloc_r+0x1e>
 804b756:	2600      	movs	r6, #0
 804b758:	4630      	mov	r0, r6
 804b75a:	bd70      	pop	{r4, r5, r6, pc}
 804b75c:	220c      	movs	r2, #12
 804b75e:	6002      	str	r2, [r0, #0]
 804b760:	e7f9      	b.n	804b756 <_calloc_r+0x12>
 804b762:	462a      	mov	r2, r5
 804b764:	4621      	mov	r1, r4
 804b766:	f7fe fa42 	bl	8049bee <memset>
 804b76a:	e7f5      	b.n	804b758 <_calloc_r+0x14>

0804b76c <__ascii_mbtowc>:
 804b76c:	b082      	sub	sp, #8
 804b76e:	b901      	cbnz	r1, 804b772 <__ascii_mbtowc+0x6>
 804b770:	a901      	add	r1, sp, #4
 804b772:	b142      	cbz	r2, 804b786 <__ascii_mbtowc+0x1a>
 804b774:	b14b      	cbz	r3, 804b78a <__ascii_mbtowc+0x1e>
 804b776:	7813      	ldrb	r3, [r2, #0]
 804b778:	600b      	str	r3, [r1, #0]
 804b77a:	7812      	ldrb	r2, [r2, #0]
 804b77c:	1e10      	subs	r0, r2, #0
 804b77e:	bf18      	it	ne
 804b780:	2001      	movne	r0, #1
 804b782:	b002      	add	sp, #8
 804b784:	4770      	bx	lr
 804b786:	4610      	mov	r0, r2
 804b788:	e7fb      	b.n	804b782 <__ascii_mbtowc+0x16>
 804b78a:	f06f 0001 	mvn.w	r0, #1
 804b78e:	e7f8      	b.n	804b782 <__ascii_mbtowc+0x16>

0804b790 <_realloc_r>:
 804b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b794:	4680      	mov	r8, r0
 804b796:	4615      	mov	r5, r2
 804b798:	460c      	mov	r4, r1
 804b79a:	b921      	cbnz	r1, 804b7a6 <_realloc_r+0x16>
 804b79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804b7a0:	4611      	mov	r1, r2
 804b7a2:	f7ff b975 	b.w	804aa90 <_malloc_r>
 804b7a6:	b92a      	cbnz	r2, 804b7b4 <_realloc_r+0x24>
 804b7a8:	f7ff f8fe 	bl	804a9a8 <_free_r>
 804b7ac:	2400      	movs	r4, #0
 804b7ae:	4620      	mov	r0, r4
 804b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b7b4:	f000 f841 	bl	804b83a <_malloc_usable_size_r>
 804b7b8:	4285      	cmp	r5, r0
 804b7ba:	4606      	mov	r6, r0
 804b7bc:	d802      	bhi.n	804b7c4 <_realloc_r+0x34>
 804b7be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 804b7c2:	d8f4      	bhi.n	804b7ae <_realloc_r+0x1e>
 804b7c4:	4629      	mov	r1, r5
 804b7c6:	4640      	mov	r0, r8
 804b7c8:	f7ff f962 	bl	804aa90 <_malloc_r>
 804b7cc:	4607      	mov	r7, r0
 804b7ce:	2800      	cmp	r0, #0
 804b7d0:	d0ec      	beq.n	804b7ac <_realloc_r+0x1c>
 804b7d2:	42b5      	cmp	r5, r6
 804b7d4:	462a      	mov	r2, r5
 804b7d6:	4621      	mov	r1, r4
 804b7d8:	bf28      	it	cs
 804b7da:	4632      	movcs	r2, r6
 804b7dc:	f7fe fa87 	bl	8049cee <memcpy>
 804b7e0:	4621      	mov	r1, r4
 804b7e2:	4640      	mov	r0, r8
 804b7e4:	f7ff f8e0 	bl	804a9a8 <_free_r>
 804b7e8:	463c      	mov	r4, r7
 804b7ea:	e7e0      	b.n	804b7ae <_realloc_r+0x1e>

0804b7ec <__ascii_wctomb>:
 804b7ec:	4603      	mov	r3, r0
 804b7ee:	4608      	mov	r0, r1
 804b7f0:	b141      	cbz	r1, 804b804 <__ascii_wctomb+0x18>
 804b7f2:	2aff      	cmp	r2, #255	@ 0xff
 804b7f4:	d904      	bls.n	804b800 <__ascii_wctomb+0x14>
 804b7f6:	228a      	movs	r2, #138	@ 0x8a
 804b7f8:	601a      	str	r2, [r3, #0]
 804b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 804b7fe:	4770      	bx	lr
 804b800:	700a      	strb	r2, [r1, #0]
 804b802:	2001      	movs	r0, #1
 804b804:	4770      	bx	lr
	...

0804b808 <fiprintf>:
 804b808:	b40e      	push	{r1, r2, r3}
 804b80a:	b503      	push	{r0, r1, lr}
 804b80c:	4601      	mov	r1, r0
 804b80e:	ab03      	add	r3, sp, #12
 804b810:	4805      	ldr	r0, [pc, #20]	@ (804b828 <fiprintf+0x20>)
 804b812:	f853 2b04 	ldr.w	r2, [r3], #4
 804b816:	6800      	ldr	r0, [r0, #0]
 804b818:	9301      	str	r3, [sp, #4]
 804b81a:	f000 f83f 	bl	804b89c <_vfiprintf_r>
 804b81e:	b002      	add	sp, #8
 804b820:	f85d eb04 	ldr.w	lr, [sp], #4
 804b824:	b003      	add	sp, #12
 804b826:	4770      	bx	lr
 804b828:	20000024 	.word	0x20000024

0804b82c <abort>:
 804b82c:	b508      	push	{r3, lr}
 804b82e:	2006      	movs	r0, #6
 804b830:	f000 fa08 	bl	804bc44 <raise>
 804b834:	2001      	movs	r0, #1
 804b836:	f7f6 fbc1 	bl	8041fbc <_exit>

0804b83a <_malloc_usable_size_r>:
 804b83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804b83e:	1f18      	subs	r0, r3, #4
 804b840:	2b00      	cmp	r3, #0
 804b842:	bfbc      	itt	lt
 804b844:	580b      	ldrlt	r3, [r1, r0]
 804b846:	18c0      	addlt	r0, r0, r3
 804b848:	4770      	bx	lr

0804b84a <__sfputc_r>:
 804b84a:	6893      	ldr	r3, [r2, #8]
 804b84c:	3b01      	subs	r3, #1
 804b84e:	2b00      	cmp	r3, #0
 804b850:	b410      	push	{r4}
 804b852:	6093      	str	r3, [r2, #8]
 804b854:	da08      	bge.n	804b868 <__sfputc_r+0x1e>
 804b856:	6994      	ldr	r4, [r2, #24]
 804b858:	42a3      	cmp	r3, r4
 804b85a:	db01      	blt.n	804b860 <__sfputc_r+0x16>
 804b85c:	290a      	cmp	r1, #10
 804b85e:	d103      	bne.n	804b868 <__sfputc_r+0x1e>
 804b860:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b864:	f000 b932 	b.w	804bacc <__swbuf_r>
 804b868:	6813      	ldr	r3, [r2, #0]
 804b86a:	1c58      	adds	r0, r3, #1
 804b86c:	6010      	str	r0, [r2, #0]
 804b86e:	7019      	strb	r1, [r3, #0]
 804b870:	4608      	mov	r0, r1
 804b872:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b876:	4770      	bx	lr

0804b878 <__sfputs_r>:
 804b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b87a:	4606      	mov	r6, r0
 804b87c:	460f      	mov	r7, r1
 804b87e:	4614      	mov	r4, r2
 804b880:	18d5      	adds	r5, r2, r3
 804b882:	42ac      	cmp	r4, r5
 804b884:	d101      	bne.n	804b88a <__sfputs_r+0x12>
 804b886:	2000      	movs	r0, #0
 804b888:	e007      	b.n	804b89a <__sfputs_r+0x22>
 804b88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b88e:	463a      	mov	r2, r7
 804b890:	4630      	mov	r0, r6
 804b892:	f7ff ffda 	bl	804b84a <__sfputc_r>
 804b896:	1c43      	adds	r3, r0, #1
 804b898:	d1f3      	bne.n	804b882 <__sfputs_r+0xa>
 804b89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0804b89c <_vfiprintf_r>:
 804b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b8a0:	460d      	mov	r5, r1
 804b8a2:	b09d      	sub	sp, #116	@ 0x74
 804b8a4:	4614      	mov	r4, r2
 804b8a6:	4698      	mov	r8, r3
 804b8a8:	4606      	mov	r6, r0
 804b8aa:	b118      	cbz	r0, 804b8b4 <_vfiprintf_r+0x18>
 804b8ac:	6a03      	ldr	r3, [r0, #32]
 804b8ae:	b90b      	cbnz	r3, 804b8b4 <_vfiprintf_r+0x18>
 804b8b0:	f7fe f904 	bl	8049abc <__sinit>
 804b8b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b8b6:	07d9      	lsls	r1, r3, #31
 804b8b8:	d405      	bmi.n	804b8c6 <_vfiprintf_r+0x2a>
 804b8ba:	89ab      	ldrh	r3, [r5, #12]
 804b8bc:	059a      	lsls	r2, r3, #22
 804b8be:	d402      	bmi.n	804b8c6 <_vfiprintf_r+0x2a>
 804b8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b8c2:	f7fe fa12 	bl	8049cea <__retarget_lock_acquire_recursive>
 804b8c6:	89ab      	ldrh	r3, [r5, #12]
 804b8c8:	071b      	lsls	r3, r3, #28
 804b8ca:	d501      	bpl.n	804b8d0 <_vfiprintf_r+0x34>
 804b8cc:	692b      	ldr	r3, [r5, #16]
 804b8ce:	b99b      	cbnz	r3, 804b8f8 <_vfiprintf_r+0x5c>
 804b8d0:	4629      	mov	r1, r5
 804b8d2:	4630      	mov	r0, r6
 804b8d4:	f000 f938 	bl	804bb48 <__swsetup_r>
 804b8d8:	b170      	cbz	r0, 804b8f8 <_vfiprintf_r+0x5c>
 804b8da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b8dc:	07dc      	lsls	r4, r3, #31
 804b8de:	d504      	bpl.n	804b8ea <_vfiprintf_r+0x4e>
 804b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 804b8e4:	b01d      	add	sp, #116	@ 0x74
 804b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b8ea:	89ab      	ldrh	r3, [r5, #12]
 804b8ec:	0598      	lsls	r0, r3, #22
 804b8ee:	d4f7      	bmi.n	804b8e0 <_vfiprintf_r+0x44>
 804b8f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b8f2:	f7fe f9fb 	bl	8049cec <__retarget_lock_release_recursive>
 804b8f6:	e7f3      	b.n	804b8e0 <_vfiprintf_r+0x44>
 804b8f8:	2300      	movs	r3, #0
 804b8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 804b8fc:	2320      	movs	r3, #32
 804b8fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804b902:	f8cd 800c 	str.w	r8, [sp, #12]
 804b906:	2330      	movs	r3, #48	@ 0x30
 804b908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 804bab8 <_vfiprintf_r+0x21c>
 804b90c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804b910:	f04f 0901 	mov.w	r9, #1
 804b914:	4623      	mov	r3, r4
 804b916:	469a      	mov	sl, r3
 804b918:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b91c:	b10a      	cbz	r2, 804b922 <_vfiprintf_r+0x86>
 804b91e:	2a25      	cmp	r2, #37	@ 0x25
 804b920:	d1f9      	bne.n	804b916 <_vfiprintf_r+0x7a>
 804b922:	ebba 0b04 	subs.w	fp, sl, r4
 804b926:	d00b      	beq.n	804b940 <_vfiprintf_r+0xa4>
 804b928:	465b      	mov	r3, fp
 804b92a:	4622      	mov	r2, r4
 804b92c:	4629      	mov	r1, r5
 804b92e:	4630      	mov	r0, r6
 804b930:	f7ff ffa2 	bl	804b878 <__sfputs_r>
 804b934:	3001      	adds	r0, #1
 804b936:	f000 80a7 	beq.w	804ba88 <_vfiprintf_r+0x1ec>
 804b93a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804b93c:	445a      	add	r2, fp
 804b93e:	9209      	str	r2, [sp, #36]	@ 0x24
 804b940:	f89a 3000 	ldrb.w	r3, [sl]
 804b944:	2b00      	cmp	r3, #0
 804b946:	f000 809f 	beq.w	804ba88 <_vfiprintf_r+0x1ec>
 804b94a:	2300      	movs	r3, #0
 804b94c:	f04f 32ff 	mov.w	r2, #4294967295
 804b950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b954:	f10a 0a01 	add.w	sl, sl, #1
 804b958:	9304      	str	r3, [sp, #16]
 804b95a:	9307      	str	r3, [sp, #28]
 804b95c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b960:	931a      	str	r3, [sp, #104]	@ 0x68
 804b962:	4654      	mov	r4, sl
 804b964:	2205      	movs	r2, #5
 804b966:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b96a:	4853      	ldr	r0, [pc, #332]	@ (804bab8 <_vfiprintf_r+0x21c>)
 804b96c:	f7f4 fc40 	bl	80401f0 <memchr>
 804b970:	9a04      	ldr	r2, [sp, #16]
 804b972:	b9d8      	cbnz	r0, 804b9ac <_vfiprintf_r+0x110>
 804b974:	06d1      	lsls	r1, r2, #27
 804b976:	bf44      	itt	mi
 804b978:	2320      	movmi	r3, #32
 804b97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b97e:	0713      	lsls	r3, r2, #28
 804b980:	bf44      	itt	mi
 804b982:	232b      	movmi	r3, #43	@ 0x2b
 804b984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b988:	f89a 3000 	ldrb.w	r3, [sl]
 804b98c:	2b2a      	cmp	r3, #42	@ 0x2a
 804b98e:	d015      	beq.n	804b9bc <_vfiprintf_r+0x120>
 804b990:	9a07      	ldr	r2, [sp, #28]
 804b992:	4654      	mov	r4, sl
 804b994:	2000      	movs	r0, #0
 804b996:	f04f 0c0a 	mov.w	ip, #10
 804b99a:	4621      	mov	r1, r4
 804b99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b9a0:	3b30      	subs	r3, #48	@ 0x30
 804b9a2:	2b09      	cmp	r3, #9
 804b9a4:	d94b      	bls.n	804ba3e <_vfiprintf_r+0x1a2>
 804b9a6:	b1b0      	cbz	r0, 804b9d6 <_vfiprintf_r+0x13a>
 804b9a8:	9207      	str	r2, [sp, #28]
 804b9aa:	e014      	b.n	804b9d6 <_vfiprintf_r+0x13a>
 804b9ac:	eba0 0308 	sub.w	r3, r0, r8
 804b9b0:	fa09 f303 	lsl.w	r3, r9, r3
 804b9b4:	4313      	orrs	r3, r2
 804b9b6:	9304      	str	r3, [sp, #16]
 804b9b8:	46a2      	mov	sl, r4
 804b9ba:	e7d2      	b.n	804b962 <_vfiprintf_r+0xc6>
 804b9bc:	9b03      	ldr	r3, [sp, #12]
 804b9be:	1d19      	adds	r1, r3, #4
 804b9c0:	681b      	ldr	r3, [r3, #0]
 804b9c2:	9103      	str	r1, [sp, #12]
 804b9c4:	2b00      	cmp	r3, #0
 804b9c6:	bfbb      	ittet	lt
 804b9c8:	425b      	neglt	r3, r3
 804b9ca:	f042 0202 	orrlt.w	r2, r2, #2
 804b9ce:	9307      	strge	r3, [sp, #28]
 804b9d0:	9307      	strlt	r3, [sp, #28]
 804b9d2:	bfb8      	it	lt
 804b9d4:	9204      	strlt	r2, [sp, #16]
 804b9d6:	7823      	ldrb	r3, [r4, #0]
 804b9d8:	2b2e      	cmp	r3, #46	@ 0x2e
 804b9da:	d10a      	bne.n	804b9f2 <_vfiprintf_r+0x156>
 804b9dc:	7863      	ldrb	r3, [r4, #1]
 804b9de:	2b2a      	cmp	r3, #42	@ 0x2a
 804b9e0:	d132      	bne.n	804ba48 <_vfiprintf_r+0x1ac>
 804b9e2:	9b03      	ldr	r3, [sp, #12]
 804b9e4:	1d1a      	adds	r2, r3, #4
 804b9e6:	681b      	ldr	r3, [r3, #0]
 804b9e8:	9203      	str	r2, [sp, #12]
 804b9ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804b9ee:	3402      	adds	r4, #2
 804b9f0:	9305      	str	r3, [sp, #20]
 804b9f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 804bac8 <_vfiprintf_r+0x22c>
 804b9f6:	7821      	ldrb	r1, [r4, #0]
 804b9f8:	2203      	movs	r2, #3
 804b9fa:	4650      	mov	r0, sl
 804b9fc:	f7f4 fbf8 	bl	80401f0 <memchr>
 804ba00:	b138      	cbz	r0, 804ba12 <_vfiprintf_r+0x176>
 804ba02:	9b04      	ldr	r3, [sp, #16]
 804ba04:	eba0 000a 	sub.w	r0, r0, sl
 804ba08:	2240      	movs	r2, #64	@ 0x40
 804ba0a:	4082      	lsls	r2, r0
 804ba0c:	4313      	orrs	r3, r2
 804ba0e:	3401      	adds	r4, #1
 804ba10:	9304      	str	r3, [sp, #16]
 804ba12:	f814 1b01 	ldrb.w	r1, [r4], #1
 804ba16:	4829      	ldr	r0, [pc, #164]	@ (804babc <_vfiprintf_r+0x220>)
 804ba18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804ba1c:	2206      	movs	r2, #6
 804ba1e:	f7f4 fbe7 	bl	80401f0 <memchr>
 804ba22:	2800      	cmp	r0, #0
 804ba24:	d03f      	beq.n	804baa6 <_vfiprintf_r+0x20a>
 804ba26:	4b26      	ldr	r3, [pc, #152]	@ (804bac0 <_vfiprintf_r+0x224>)
 804ba28:	bb1b      	cbnz	r3, 804ba72 <_vfiprintf_r+0x1d6>
 804ba2a:	9b03      	ldr	r3, [sp, #12]
 804ba2c:	3307      	adds	r3, #7
 804ba2e:	f023 0307 	bic.w	r3, r3, #7
 804ba32:	3308      	adds	r3, #8
 804ba34:	9303      	str	r3, [sp, #12]
 804ba36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804ba38:	443b      	add	r3, r7
 804ba3a:	9309      	str	r3, [sp, #36]	@ 0x24
 804ba3c:	e76a      	b.n	804b914 <_vfiprintf_r+0x78>
 804ba3e:	fb0c 3202 	mla	r2, ip, r2, r3
 804ba42:	460c      	mov	r4, r1
 804ba44:	2001      	movs	r0, #1
 804ba46:	e7a8      	b.n	804b99a <_vfiprintf_r+0xfe>
 804ba48:	2300      	movs	r3, #0
 804ba4a:	3401      	adds	r4, #1
 804ba4c:	9305      	str	r3, [sp, #20]
 804ba4e:	4619      	mov	r1, r3
 804ba50:	f04f 0c0a 	mov.w	ip, #10
 804ba54:	4620      	mov	r0, r4
 804ba56:	f810 2b01 	ldrb.w	r2, [r0], #1
 804ba5a:	3a30      	subs	r2, #48	@ 0x30
 804ba5c:	2a09      	cmp	r2, #9
 804ba5e:	d903      	bls.n	804ba68 <_vfiprintf_r+0x1cc>
 804ba60:	2b00      	cmp	r3, #0
 804ba62:	d0c6      	beq.n	804b9f2 <_vfiprintf_r+0x156>
 804ba64:	9105      	str	r1, [sp, #20]
 804ba66:	e7c4      	b.n	804b9f2 <_vfiprintf_r+0x156>
 804ba68:	fb0c 2101 	mla	r1, ip, r1, r2
 804ba6c:	4604      	mov	r4, r0
 804ba6e:	2301      	movs	r3, #1
 804ba70:	e7f0      	b.n	804ba54 <_vfiprintf_r+0x1b8>
 804ba72:	ab03      	add	r3, sp, #12
 804ba74:	9300      	str	r3, [sp, #0]
 804ba76:	462a      	mov	r2, r5
 804ba78:	4b12      	ldr	r3, [pc, #72]	@ (804bac4 <_vfiprintf_r+0x228>)
 804ba7a:	a904      	add	r1, sp, #16
 804ba7c:	4630      	mov	r0, r6
 804ba7e:	f7fd fbd9 	bl	8049234 <_printf_float>
 804ba82:	4607      	mov	r7, r0
 804ba84:	1c78      	adds	r0, r7, #1
 804ba86:	d1d6      	bne.n	804ba36 <_vfiprintf_r+0x19a>
 804ba88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804ba8a:	07d9      	lsls	r1, r3, #31
 804ba8c:	d405      	bmi.n	804ba9a <_vfiprintf_r+0x1fe>
 804ba8e:	89ab      	ldrh	r3, [r5, #12]
 804ba90:	059a      	lsls	r2, r3, #22
 804ba92:	d402      	bmi.n	804ba9a <_vfiprintf_r+0x1fe>
 804ba94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804ba96:	f7fe f929 	bl	8049cec <__retarget_lock_release_recursive>
 804ba9a:	89ab      	ldrh	r3, [r5, #12]
 804ba9c:	065b      	lsls	r3, r3, #25
 804ba9e:	f53f af1f 	bmi.w	804b8e0 <_vfiprintf_r+0x44>
 804baa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804baa4:	e71e      	b.n	804b8e4 <_vfiprintf_r+0x48>
 804baa6:	ab03      	add	r3, sp, #12
 804baa8:	9300      	str	r3, [sp, #0]
 804baaa:	462a      	mov	r2, r5
 804baac:	4b05      	ldr	r3, [pc, #20]	@ (804bac4 <_vfiprintf_r+0x228>)
 804baae:	a904      	add	r1, sp, #16
 804bab0:	4630      	mov	r0, r6
 804bab2:	f7fd fe57 	bl	8049764 <_printf_i>
 804bab6:	e7e4      	b.n	804ba82 <_vfiprintf_r+0x1e6>
 804bab8:	0804d0c8 	.word	0x0804d0c8
 804babc:	0804d0d2 	.word	0x0804d0d2
 804bac0:	08049235 	.word	0x08049235
 804bac4:	0804b879 	.word	0x0804b879
 804bac8:	0804d0ce 	.word	0x0804d0ce

0804bacc <__swbuf_r>:
 804bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bace:	460e      	mov	r6, r1
 804bad0:	4614      	mov	r4, r2
 804bad2:	4605      	mov	r5, r0
 804bad4:	b118      	cbz	r0, 804bade <__swbuf_r+0x12>
 804bad6:	6a03      	ldr	r3, [r0, #32]
 804bad8:	b90b      	cbnz	r3, 804bade <__swbuf_r+0x12>
 804bada:	f7fd ffef 	bl	8049abc <__sinit>
 804bade:	69a3      	ldr	r3, [r4, #24]
 804bae0:	60a3      	str	r3, [r4, #8]
 804bae2:	89a3      	ldrh	r3, [r4, #12]
 804bae4:	071a      	lsls	r2, r3, #28
 804bae6:	d501      	bpl.n	804baec <__swbuf_r+0x20>
 804bae8:	6923      	ldr	r3, [r4, #16]
 804baea:	b943      	cbnz	r3, 804bafe <__swbuf_r+0x32>
 804baec:	4621      	mov	r1, r4
 804baee:	4628      	mov	r0, r5
 804baf0:	f000 f82a 	bl	804bb48 <__swsetup_r>
 804baf4:	b118      	cbz	r0, 804bafe <__swbuf_r+0x32>
 804baf6:	f04f 37ff 	mov.w	r7, #4294967295
 804bafa:	4638      	mov	r0, r7
 804bafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bafe:	6823      	ldr	r3, [r4, #0]
 804bb00:	6922      	ldr	r2, [r4, #16]
 804bb02:	1a98      	subs	r0, r3, r2
 804bb04:	6963      	ldr	r3, [r4, #20]
 804bb06:	b2f6      	uxtb	r6, r6
 804bb08:	4283      	cmp	r3, r0
 804bb0a:	4637      	mov	r7, r6
 804bb0c:	dc05      	bgt.n	804bb1a <__swbuf_r+0x4e>
 804bb0e:	4621      	mov	r1, r4
 804bb10:	4628      	mov	r0, r5
 804bb12:	f7ff fda7 	bl	804b664 <_fflush_r>
 804bb16:	2800      	cmp	r0, #0
 804bb18:	d1ed      	bne.n	804baf6 <__swbuf_r+0x2a>
 804bb1a:	68a3      	ldr	r3, [r4, #8]
 804bb1c:	3b01      	subs	r3, #1
 804bb1e:	60a3      	str	r3, [r4, #8]
 804bb20:	6823      	ldr	r3, [r4, #0]
 804bb22:	1c5a      	adds	r2, r3, #1
 804bb24:	6022      	str	r2, [r4, #0]
 804bb26:	701e      	strb	r6, [r3, #0]
 804bb28:	6962      	ldr	r2, [r4, #20]
 804bb2a:	1c43      	adds	r3, r0, #1
 804bb2c:	429a      	cmp	r2, r3
 804bb2e:	d004      	beq.n	804bb3a <__swbuf_r+0x6e>
 804bb30:	89a3      	ldrh	r3, [r4, #12]
 804bb32:	07db      	lsls	r3, r3, #31
 804bb34:	d5e1      	bpl.n	804bafa <__swbuf_r+0x2e>
 804bb36:	2e0a      	cmp	r6, #10
 804bb38:	d1df      	bne.n	804bafa <__swbuf_r+0x2e>
 804bb3a:	4621      	mov	r1, r4
 804bb3c:	4628      	mov	r0, r5
 804bb3e:	f7ff fd91 	bl	804b664 <_fflush_r>
 804bb42:	2800      	cmp	r0, #0
 804bb44:	d0d9      	beq.n	804bafa <__swbuf_r+0x2e>
 804bb46:	e7d6      	b.n	804baf6 <__swbuf_r+0x2a>

0804bb48 <__swsetup_r>:
 804bb48:	b538      	push	{r3, r4, r5, lr}
 804bb4a:	4b29      	ldr	r3, [pc, #164]	@ (804bbf0 <__swsetup_r+0xa8>)
 804bb4c:	4605      	mov	r5, r0
 804bb4e:	6818      	ldr	r0, [r3, #0]
 804bb50:	460c      	mov	r4, r1
 804bb52:	b118      	cbz	r0, 804bb5c <__swsetup_r+0x14>
 804bb54:	6a03      	ldr	r3, [r0, #32]
 804bb56:	b90b      	cbnz	r3, 804bb5c <__swsetup_r+0x14>
 804bb58:	f7fd ffb0 	bl	8049abc <__sinit>
 804bb5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bb60:	0719      	lsls	r1, r3, #28
 804bb62:	d422      	bmi.n	804bbaa <__swsetup_r+0x62>
 804bb64:	06da      	lsls	r2, r3, #27
 804bb66:	d407      	bmi.n	804bb78 <__swsetup_r+0x30>
 804bb68:	2209      	movs	r2, #9
 804bb6a:	602a      	str	r2, [r5, #0]
 804bb6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804bb70:	81a3      	strh	r3, [r4, #12]
 804bb72:	f04f 30ff 	mov.w	r0, #4294967295
 804bb76:	e033      	b.n	804bbe0 <__swsetup_r+0x98>
 804bb78:	0758      	lsls	r0, r3, #29
 804bb7a:	d512      	bpl.n	804bba2 <__swsetup_r+0x5a>
 804bb7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804bb7e:	b141      	cbz	r1, 804bb92 <__swsetup_r+0x4a>
 804bb80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804bb84:	4299      	cmp	r1, r3
 804bb86:	d002      	beq.n	804bb8e <__swsetup_r+0x46>
 804bb88:	4628      	mov	r0, r5
 804bb8a:	f7fe ff0d 	bl	804a9a8 <_free_r>
 804bb8e:	2300      	movs	r3, #0
 804bb90:	6363      	str	r3, [r4, #52]	@ 0x34
 804bb92:	89a3      	ldrh	r3, [r4, #12]
 804bb94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 804bb98:	81a3      	strh	r3, [r4, #12]
 804bb9a:	2300      	movs	r3, #0
 804bb9c:	6063      	str	r3, [r4, #4]
 804bb9e:	6923      	ldr	r3, [r4, #16]
 804bba0:	6023      	str	r3, [r4, #0]
 804bba2:	89a3      	ldrh	r3, [r4, #12]
 804bba4:	f043 0308 	orr.w	r3, r3, #8
 804bba8:	81a3      	strh	r3, [r4, #12]
 804bbaa:	6923      	ldr	r3, [r4, #16]
 804bbac:	b94b      	cbnz	r3, 804bbc2 <__swsetup_r+0x7a>
 804bbae:	89a3      	ldrh	r3, [r4, #12]
 804bbb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 804bbb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804bbb8:	d003      	beq.n	804bbc2 <__swsetup_r+0x7a>
 804bbba:	4621      	mov	r1, r4
 804bbbc:	4628      	mov	r0, r5
 804bbbe:	f000 f883 	bl	804bcc8 <__smakebuf_r>
 804bbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bbc6:	f013 0201 	ands.w	r2, r3, #1
 804bbca:	d00a      	beq.n	804bbe2 <__swsetup_r+0x9a>
 804bbcc:	2200      	movs	r2, #0
 804bbce:	60a2      	str	r2, [r4, #8]
 804bbd0:	6962      	ldr	r2, [r4, #20]
 804bbd2:	4252      	negs	r2, r2
 804bbd4:	61a2      	str	r2, [r4, #24]
 804bbd6:	6922      	ldr	r2, [r4, #16]
 804bbd8:	b942      	cbnz	r2, 804bbec <__swsetup_r+0xa4>
 804bbda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 804bbde:	d1c5      	bne.n	804bb6c <__swsetup_r+0x24>
 804bbe0:	bd38      	pop	{r3, r4, r5, pc}
 804bbe2:	0799      	lsls	r1, r3, #30
 804bbe4:	bf58      	it	pl
 804bbe6:	6962      	ldrpl	r2, [r4, #20]
 804bbe8:	60a2      	str	r2, [r4, #8]
 804bbea:	e7f4      	b.n	804bbd6 <__swsetup_r+0x8e>
 804bbec:	2000      	movs	r0, #0
 804bbee:	e7f7      	b.n	804bbe0 <__swsetup_r+0x98>
 804bbf0:	20000024 	.word	0x20000024

0804bbf4 <_raise_r>:
 804bbf4:	291f      	cmp	r1, #31
 804bbf6:	b538      	push	{r3, r4, r5, lr}
 804bbf8:	4605      	mov	r5, r0
 804bbfa:	460c      	mov	r4, r1
 804bbfc:	d904      	bls.n	804bc08 <_raise_r+0x14>
 804bbfe:	2316      	movs	r3, #22
 804bc00:	6003      	str	r3, [r0, #0]
 804bc02:	f04f 30ff 	mov.w	r0, #4294967295
 804bc06:	bd38      	pop	{r3, r4, r5, pc}
 804bc08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 804bc0a:	b112      	cbz	r2, 804bc12 <_raise_r+0x1e>
 804bc0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 804bc10:	b94b      	cbnz	r3, 804bc26 <_raise_r+0x32>
 804bc12:	4628      	mov	r0, r5
 804bc14:	f000 f830 	bl	804bc78 <_getpid_r>
 804bc18:	4622      	mov	r2, r4
 804bc1a:	4601      	mov	r1, r0
 804bc1c:	4628      	mov	r0, r5
 804bc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804bc22:	f000 b817 	b.w	804bc54 <_kill_r>
 804bc26:	2b01      	cmp	r3, #1
 804bc28:	d00a      	beq.n	804bc40 <_raise_r+0x4c>
 804bc2a:	1c59      	adds	r1, r3, #1
 804bc2c:	d103      	bne.n	804bc36 <_raise_r+0x42>
 804bc2e:	2316      	movs	r3, #22
 804bc30:	6003      	str	r3, [r0, #0]
 804bc32:	2001      	movs	r0, #1
 804bc34:	e7e7      	b.n	804bc06 <_raise_r+0x12>
 804bc36:	2100      	movs	r1, #0
 804bc38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 804bc3c:	4620      	mov	r0, r4
 804bc3e:	4798      	blx	r3
 804bc40:	2000      	movs	r0, #0
 804bc42:	e7e0      	b.n	804bc06 <_raise_r+0x12>

0804bc44 <raise>:
 804bc44:	4b02      	ldr	r3, [pc, #8]	@ (804bc50 <raise+0xc>)
 804bc46:	4601      	mov	r1, r0
 804bc48:	6818      	ldr	r0, [r3, #0]
 804bc4a:	f7ff bfd3 	b.w	804bbf4 <_raise_r>
 804bc4e:	bf00      	nop
 804bc50:	20000024 	.word	0x20000024

0804bc54 <_kill_r>:
 804bc54:	b538      	push	{r3, r4, r5, lr}
 804bc56:	4d07      	ldr	r5, [pc, #28]	@ (804bc74 <_kill_r+0x20>)
 804bc58:	2300      	movs	r3, #0
 804bc5a:	4604      	mov	r4, r0
 804bc5c:	4608      	mov	r0, r1
 804bc5e:	4611      	mov	r1, r2
 804bc60:	602b      	str	r3, [r5, #0]
 804bc62:	f7f6 f99b 	bl	8041f9c <_kill>
 804bc66:	1c43      	adds	r3, r0, #1
 804bc68:	d102      	bne.n	804bc70 <_kill_r+0x1c>
 804bc6a:	682b      	ldr	r3, [r5, #0]
 804bc6c:	b103      	cbz	r3, 804bc70 <_kill_r+0x1c>
 804bc6e:	6023      	str	r3, [r4, #0]
 804bc70:	bd38      	pop	{r3, r4, r5, pc}
 804bc72:	bf00      	nop
 804bc74:	200132ac 	.word	0x200132ac

0804bc78 <_getpid_r>:
 804bc78:	f7f6 b988 	b.w	8041f8c <_getpid>

0804bc7c <__swhatbuf_r>:
 804bc7c:	b570      	push	{r4, r5, r6, lr}
 804bc7e:	460c      	mov	r4, r1
 804bc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804bc84:	2900      	cmp	r1, #0
 804bc86:	b096      	sub	sp, #88	@ 0x58
 804bc88:	4615      	mov	r5, r2
 804bc8a:	461e      	mov	r6, r3
 804bc8c:	da0d      	bge.n	804bcaa <__swhatbuf_r+0x2e>
 804bc8e:	89a3      	ldrh	r3, [r4, #12]
 804bc90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 804bc94:	f04f 0100 	mov.w	r1, #0
 804bc98:	bf14      	ite	ne
 804bc9a:	2340      	movne	r3, #64	@ 0x40
 804bc9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 804bca0:	2000      	movs	r0, #0
 804bca2:	6031      	str	r1, [r6, #0]
 804bca4:	602b      	str	r3, [r5, #0]
 804bca6:	b016      	add	sp, #88	@ 0x58
 804bca8:	bd70      	pop	{r4, r5, r6, pc}
 804bcaa:	466a      	mov	r2, sp
 804bcac:	f000 f848 	bl	804bd40 <_fstat_r>
 804bcb0:	2800      	cmp	r0, #0
 804bcb2:	dbec      	blt.n	804bc8e <__swhatbuf_r+0x12>
 804bcb4:	9901      	ldr	r1, [sp, #4]
 804bcb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 804bcba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 804bcbe:	4259      	negs	r1, r3
 804bcc0:	4159      	adcs	r1, r3
 804bcc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804bcc6:	e7eb      	b.n	804bca0 <__swhatbuf_r+0x24>

0804bcc8 <__smakebuf_r>:
 804bcc8:	898b      	ldrh	r3, [r1, #12]
 804bcca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804bccc:	079d      	lsls	r5, r3, #30
 804bcce:	4606      	mov	r6, r0
 804bcd0:	460c      	mov	r4, r1
 804bcd2:	d507      	bpl.n	804bce4 <__smakebuf_r+0x1c>
 804bcd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 804bcd8:	6023      	str	r3, [r4, #0]
 804bcda:	6123      	str	r3, [r4, #16]
 804bcdc:	2301      	movs	r3, #1
 804bcde:	6163      	str	r3, [r4, #20]
 804bce0:	b003      	add	sp, #12
 804bce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804bce4:	ab01      	add	r3, sp, #4
 804bce6:	466a      	mov	r2, sp
 804bce8:	f7ff ffc8 	bl	804bc7c <__swhatbuf_r>
 804bcec:	9f00      	ldr	r7, [sp, #0]
 804bcee:	4605      	mov	r5, r0
 804bcf0:	4639      	mov	r1, r7
 804bcf2:	4630      	mov	r0, r6
 804bcf4:	f7fe fecc 	bl	804aa90 <_malloc_r>
 804bcf8:	b948      	cbnz	r0, 804bd0e <__smakebuf_r+0x46>
 804bcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bcfe:	059a      	lsls	r2, r3, #22
 804bd00:	d4ee      	bmi.n	804bce0 <__smakebuf_r+0x18>
 804bd02:	f023 0303 	bic.w	r3, r3, #3
 804bd06:	f043 0302 	orr.w	r3, r3, #2
 804bd0a:	81a3      	strh	r3, [r4, #12]
 804bd0c:	e7e2      	b.n	804bcd4 <__smakebuf_r+0xc>
 804bd0e:	89a3      	ldrh	r3, [r4, #12]
 804bd10:	6020      	str	r0, [r4, #0]
 804bd12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804bd16:	81a3      	strh	r3, [r4, #12]
 804bd18:	9b01      	ldr	r3, [sp, #4]
 804bd1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 804bd1e:	b15b      	cbz	r3, 804bd38 <__smakebuf_r+0x70>
 804bd20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804bd24:	4630      	mov	r0, r6
 804bd26:	f000 f81d 	bl	804bd64 <_isatty_r>
 804bd2a:	b128      	cbz	r0, 804bd38 <__smakebuf_r+0x70>
 804bd2c:	89a3      	ldrh	r3, [r4, #12]
 804bd2e:	f023 0303 	bic.w	r3, r3, #3
 804bd32:	f043 0301 	orr.w	r3, r3, #1
 804bd36:	81a3      	strh	r3, [r4, #12]
 804bd38:	89a3      	ldrh	r3, [r4, #12]
 804bd3a:	431d      	orrs	r5, r3
 804bd3c:	81a5      	strh	r5, [r4, #12]
 804bd3e:	e7cf      	b.n	804bce0 <__smakebuf_r+0x18>

0804bd40 <_fstat_r>:
 804bd40:	b538      	push	{r3, r4, r5, lr}
 804bd42:	4d07      	ldr	r5, [pc, #28]	@ (804bd60 <_fstat_r+0x20>)
 804bd44:	2300      	movs	r3, #0
 804bd46:	4604      	mov	r4, r0
 804bd48:	4608      	mov	r0, r1
 804bd4a:	4611      	mov	r1, r2
 804bd4c:	602b      	str	r3, [r5, #0]
 804bd4e:	f7f6 f985 	bl	804205c <_fstat>
 804bd52:	1c43      	adds	r3, r0, #1
 804bd54:	d102      	bne.n	804bd5c <_fstat_r+0x1c>
 804bd56:	682b      	ldr	r3, [r5, #0]
 804bd58:	b103      	cbz	r3, 804bd5c <_fstat_r+0x1c>
 804bd5a:	6023      	str	r3, [r4, #0]
 804bd5c:	bd38      	pop	{r3, r4, r5, pc}
 804bd5e:	bf00      	nop
 804bd60:	200132ac 	.word	0x200132ac

0804bd64 <_isatty_r>:
 804bd64:	b538      	push	{r3, r4, r5, lr}
 804bd66:	4d06      	ldr	r5, [pc, #24]	@ (804bd80 <_isatty_r+0x1c>)
 804bd68:	2300      	movs	r3, #0
 804bd6a:	4604      	mov	r4, r0
 804bd6c:	4608      	mov	r0, r1
 804bd6e:	602b      	str	r3, [r5, #0]
 804bd70:	f7f6 f984 	bl	804207c <_isatty>
 804bd74:	1c43      	adds	r3, r0, #1
 804bd76:	d102      	bne.n	804bd7e <_isatty_r+0x1a>
 804bd78:	682b      	ldr	r3, [r5, #0]
 804bd7a:	b103      	cbz	r3, 804bd7e <_isatty_r+0x1a>
 804bd7c:	6023      	str	r3, [r4, #0]
 804bd7e:	bd38      	pop	{r3, r4, r5, pc}
 804bd80:	200132ac 	.word	0x200132ac

0804bd84 <pow>:
 804bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bd86:	ed2d 8b02 	vpush	{d8}
 804bd8a:	eeb0 8a40 	vmov.f32	s16, s0
 804bd8e:	eef0 8a60 	vmov.f32	s17, s1
 804bd92:	ec55 4b11 	vmov	r4, r5, d1
 804bd96:	f000 f873 	bl	804be80 <__ieee754_pow>
 804bd9a:	4622      	mov	r2, r4
 804bd9c:	462b      	mov	r3, r5
 804bd9e:	4620      	mov	r0, r4
 804bda0:	4629      	mov	r1, r5
 804bda2:	ec57 6b10 	vmov	r6, r7, d0
 804bda6:	f7f4 fed1 	bl	8040b4c <__aeabi_dcmpun>
 804bdaa:	2800      	cmp	r0, #0
 804bdac:	d13b      	bne.n	804be26 <pow+0xa2>
 804bdae:	ec51 0b18 	vmov	r0, r1, d8
 804bdb2:	2200      	movs	r2, #0
 804bdb4:	2300      	movs	r3, #0
 804bdb6:	f7f4 fe97 	bl	8040ae8 <__aeabi_dcmpeq>
 804bdba:	b1b8      	cbz	r0, 804bdec <pow+0x68>
 804bdbc:	2200      	movs	r2, #0
 804bdbe:	2300      	movs	r3, #0
 804bdc0:	4620      	mov	r0, r4
 804bdc2:	4629      	mov	r1, r5
 804bdc4:	f7f4 fe90 	bl	8040ae8 <__aeabi_dcmpeq>
 804bdc8:	2800      	cmp	r0, #0
 804bdca:	d146      	bne.n	804be5a <pow+0xd6>
 804bdcc:	ec45 4b10 	vmov	d0, r4, r5
 804bdd0:	f000 f848 	bl	804be64 <finite>
 804bdd4:	b338      	cbz	r0, 804be26 <pow+0xa2>
 804bdd6:	2200      	movs	r2, #0
 804bdd8:	2300      	movs	r3, #0
 804bdda:	4620      	mov	r0, r4
 804bddc:	4629      	mov	r1, r5
 804bdde:	f7f4 fe8d 	bl	8040afc <__aeabi_dcmplt>
 804bde2:	b300      	cbz	r0, 804be26 <pow+0xa2>
 804bde4:	f7fd ff56 	bl	8049c94 <__errno>
 804bde8:	2322      	movs	r3, #34	@ 0x22
 804bdea:	e01b      	b.n	804be24 <pow+0xa0>
 804bdec:	ec47 6b10 	vmov	d0, r6, r7
 804bdf0:	f000 f838 	bl	804be64 <finite>
 804bdf4:	b9e0      	cbnz	r0, 804be30 <pow+0xac>
 804bdf6:	eeb0 0a48 	vmov.f32	s0, s16
 804bdfa:	eef0 0a68 	vmov.f32	s1, s17
 804bdfe:	f000 f831 	bl	804be64 <finite>
 804be02:	b1a8      	cbz	r0, 804be30 <pow+0xac>
 804be04:	ec45 4b10 	vmov	d0, r4, r5
 804be08:	f000 f82c 	bl	804be64 <finite>
 804be0c:	b180      	cbz	r0, 804be30 <pow+0xac>
 804be0e:	4632      	mov	r2, r6
 804be10:	463b      	mov	r3, r7
 804be12:	4630      	mov	r0, r6
 804be14:	4639      	mov	r1, r7
 804be16:	f7f4 fe99 	bl	8040b4c <__aeabi_dcmpun>
 804be1a:	2800      	cmp	r0, #0
 804be1c:	d0e2      	beq.n	804bde4 <pow+0x60>
 804be1e:	f7fd ff39 	bl	8049c94 <__errno>
 804be22:	2321      	movs	r3, #33	@ 0x21
 804be24:	6003      	str	r3, [r0, #0]
 804be26:	ecbd 8b02 	vpop	{d8}
 804be2a:	ec47 6b10 	vmov	d0, r6, r7
 804be2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804be30:	2200      	movs	r2, #0
 804be32:	2300      	movs	r3, #0
 804be34:	4630      	mov	r0, r6
 804be36:	4639      	mov	r1, r7
 804be38:	f7f4 fe56 	bl	8040ae8 <__aeabi_dcmpeq>
 804be3c:	2800      	cmp	r0, #0
 804be3e:	d0f2      	beq.n	804be26 <pow+0xa2>
 804be40:	eeb0 0a48 	vmov.f32	s0, s16
 804be44:	eef0 0a68 	vmov.f32	s1, s17
 804be48:	f000 f80c 	bl	804be64 <finite>
 804be4c:	2800      	cmp	r0, #0
 804be4e:	d0ea      	beq.n	804be26 <pow+0xa2>
 804be50:	ec45 4b10 	vmov	d0, r4, r5
 804be54:	f000 f806 	bl	804be64 <finite>
 804be58:	e7c3      	b.n	804bde2 <pow+0x5e>
 804be5a:	4f01      	ldr	r7, [pc, #4]	@ (804be60 <pow+0xdc>)
 804be5c:	2600      	movs	r6, #0
 804be5e:	e7e2      	b.n	804be26 <pow+0xa2>
 804be60:	3ff00000 	.word	0x3ff00000

0804be64 <finite>:
 804be64:	b082      	sub	sp, #8
 804be66:	ed8d 0b00 	vstr	d0, [sp]
 804be6a:	9801      	ldr	r0, [sp, #4]
 804be6c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 804be70:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 804be74:	0fc0      	lsrs	r0, r0, #31
 804be76:	b002      	add	sp, #8
 804be78:	4770      	bx	lr
 804be7a:	0000      	movs	r0, r0
 804be7c:	0000      	movs	r0, r0
	...

0804be80 <__ieee754_pow>:
 804be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804be84:	b091      	sub	sp, #68	@ 0x44
 804be86:	ed8d 1b00 	vstr	d1, [sp]
 804be8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 804be8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 804be92:	ea5a 0001 	orrs.w	r0, sl, r1
 804be96:	ec57 6b10 	vmov	r6, r7, d0
 804be9a:	d113      	bne.n	804bec4 <__ieee754_pow+0x44>
 804be9c:	19b3      	adds	r3, r6, r6
 804be9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 804bea2:	4152      	adcs	r2, r2
 804bea4:	4298      	cmp	r0, r3
 804bea6:	4b98      	ldr	r3, [pc, #608]	@ (804c108 <__ieee754_pow+0x288>)
 804bea8:	4193      	sbcs	r3, r2
 804beaa:	f080 84ea 	bcs.w	804c882 <__ieee754_pow+0xa02>
 804beae:	e9dd 2300 	ldrd	r2, r3, [sp]
 804beb2:	4630      	mov	r0, r6
 804beb4:	4639      	mov	r1, r7
 804beb6:	f7f4 f9f9 	bl	80402ac <__adddf3>
 804beba:	ec41 0b10 	vmov	d0, r0, r1
 804bebe:	b011      	add	sp, #68	@ 0x44
 804bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804bec4:	4a91      	ldr	r2, [pc, #580]	@ (804c10c <__ieee754_pow+0x28c>)
 804bec6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 804beca:	4590      	cmp	r8, r2
 804becc:	463d      	mov	r5, r7
 804bece:	4633      	mov	r3, r6
 804bed0:	d806      	bhi.n	804bee0 <__ieee754_pow+0x60>
 804bed2:	d101      	bne.n	804bed8 <__ieee754_pow+0x58>
 804bed4:	2e00      	cmp	r6, #0
 804bed6:	d1ea      	bne.n	804beae <__ieee754_pow+0x2e>
 804bed8:	4592      	cmp	sl, r2
 804beda:	d801      	bhi.n	804bee0 <__ieee754_pow+0x60>
 804bedc:	d10e      	bne.n	804befc <__ieee754_pow+0x7c>
 804bede:	b169      	cbz	r1, 804befc <__ieee754_pow+0x7c>
 804bee0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 804bee4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 804bee8:	431d      	orrs	r5, r3
 804beea:	d1e0      	bne.n	804beae <__ieee754_pow+0x2e>
 804beec:	e9dd 3200 	ldrd	r3, r2, [sp]
 804bef0:	18db      	adds	r3, r3, r3
 804bef2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 804bef6:	4152      	adcs	r2, r2
 804bef8:	429d      	cmp	r5, r3
 804befa:	e7d4      	b.n	804bea6 <__ieee754_pow+0x26>
 804befc:	2d00      	cmp	r5, #0
 804befe:	46c3      	mov	fp, r8
 804bf00:	da3a      	bge.n	804bf78 <__ieee754_pow+0xf8>
 804bf02:	4a83      	ldr	r2, [pc, #524]	@ (804c110 <__ieee754_pow+0x290>)
 804bf04:	4592      	cmp	sl, r2
 804bf06:	d84d      	bhi.n	804bfa4 <__ieee754_pow+0x124>
 804bf08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 804bf0c:	4592      	cmp	sl, r2
 804bf0e:	f240 84c7 	bls.w	804c8a0 <__ieee754_pow+0xa20>
 804bf12:	ea4f 522a 	mov.w	r2, sl, asr #20
 804bf16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 804bf1a:	2a14      	cmp	r2, #20
 804bf1c:	dd0f      	ble.n	804bf3e <__ieee754_pow+0xbe>
 804bf1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 804bf22:	fa21 f402 	lsr.w	r4, r1, r2
 804bf26:	fa04 f202 	lsl.w	r2, r4, r2
 804bf2a:	428a      	cmp	r2, r1
 804bf2c:	f040 84b8 	bne.w	804c8a0 <__ieee754_pow+0xa20>
 804bf30:	f004 0401 	and.w	r4, r4, #1
 804bf34:	f1c4 0402 	rsb	r4, r4, #2
 804bf38:	2900      	cmp	r1, #0
 804bf3a:	d158      	bne.n	804bfee <__ieee754_pow+0x16e>
 804bf3c:	e00e      	b.n	804bf5c <__ieee754_pow+0xdc>
 804bf3e:	2900      	cmp	r1, #0
 804bf40:	d154      	bne.n	804bfec <__ieee754_pow+0x16c>
 804bf42:	f1c2 0214 	rsb	r2, r2, #20
 804bf46:	fa4a f402 	asr.w	r4, sl, r2
 804bf4a:	fa04 f202 	lsl.w	r2, r4, r2
 804bf4e:	4552      	cmp	r2, sl
 804bf50:	f040 84a3 	bne.w	804c89a <__ieee754_pow+0xa1a>
 804bf54:	f004 0401 	and.w	r4, r4, #1
 804bf58:	f1c4 0402 	rsb	r4, r4, #2
 804bf5c:	4a6d      	ldr	r2, [pc, #436]	@ (804c114 <__ieee754_pow+0x294>)
 804bf5e:	4592      	cmp	sl, r2
 804bf60:	d12e      	bne.n	804bfc0 <__ieee754_pow+0x140>
 804bf62:	f1b9 0f00 	cmp.w	r9, #0
 804bf66:	f280 8494 	bge.w	804c892 <__ieee754_pow+0xa12>
 804bf6a:	496a      	ldr	r1, [pc, #424]	@ (804c114 <__ieee754_pow+0x294>)
 804bf6c:	4632      	mov	r2, r6
 804bf6e:	463b      	mov	r3, r7
 804bf70:	2000      	movs	r0, #0
 804bf72:	f7f4 fc7b 	bl	804086c <__aeabi_ddiv>
 804bf76:	e7a0      	b.n	804beba <__ieee754_pow+0x3a>
 804bf78:	2400      	movs	r4, #0
 804bf7a:	bbc1      	cbnz	r1, 804bfee <__ieee754_pow+0x16e>
 804bf7c:	4a63      	ldr	r2, [pc, #396]	@ (804c10c <__ieee754_pow+0x28c>)
 804bf7e:	4592      	cmp	sl, r2
 804bf80:	d1ec      	bne.n	804bf5c <__ieee754_pow+0xdc>
 804bf82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 804bf86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 804bf8a:	431a      	orrs	r2, r3
 804bf8c:	f000 8479 	beq.w	804c882 <__ieee754_pow+0xa02>
 804bf90:	4b61      	ldr	r3, [pc, #388]	@ (804c118 <__ieee754_pow+0x298>)
 804bf92:	4598      	cmp	r8, r3
 804bf94:	d908      	bls.n	804bfa8 <__ieee754_pow+0x128>
 804bf96:	f1b9 0f00 	cmp.w	r9, #0
 804bf9a:	f2c0 8476 	blt.w	804c88a <__ieee754_pow+0xa0a>
 804bf9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 804bfa2:	e78a      	b.n	804beba <__ieee754_pow+0x3a>
 804bfa4:	2402      	movs	r4, #2
 804bfa6:	e7e8      	b.n	804bf7a <__ieee754_pow+0xfa>
 804bfa8:	f1b9 0f00 	cmp.w	r9, #0
 804bfac:	f04f 0000 	mov.w	r0, #0
 804bfb0:	f04f 0100 	mov.w	r1, #0
 804bfb4:	da81      	bge.n	804beba <__ieee754_pow+0x3a>
 804bfb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 804bfba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 804bfbe:	e77c      	b.n	804beba <__ieee754_pow+0x3a>
 804bfc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 804bfc4:	d106      	bne.n	804bfd4 <__ieee754_pow+0x154>
 804bfc6:	4632      	mov	r2, r6
 804bfc8:	463b      	mov	r3, r7
 804bfca:	4630      	mov	r0, r6
 804bfcc:	4639      	mov	r1, r7
 804bfce:	f7f4 fb23 	bl	8040618 <__aeabi_dmul>
 804bfd2:	e772      	b.n	804beba <__ieee754_pow+0x3a>
 804bfd4:	4a51      	ldr	r2, [pc, #324]	@ (804c11c <__ieee754_pow+0x29c>)
 804bfd6:	4591      	cmp	r9, r2
 804bfd8:	d109      	bne.n	804bfee <__ieee754_pow+0x16e>
 804bfda:	2d00      	cmp	r5, #0
 804bfdc:	db07      	blt.n	804bfee <__ieee754_pow+0x16e>
 804bfde:	ec47 6b10 	vmov	d0, r6, r7
 804bfe2:	b011      	add	sp, #68	@ 0x44
 804bfe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804bfe8:	f000 bd52 	b.w	804ca90 <__ieee754_sqrt>
 804bfec:	2400      	movs	r4, #0
 804bfee:	ec47 6b10 	vmov	d0, r6, r7
 804bff2:	9302      	str	r3, [sp, #8]
 804bff4:	f000 fc88 	bl	804c908 <fabs>
 804bff8:	9b02      	ldr	r3, [sp, #8]
 804bffa:	ec51 0b10 	vmov	r0, r1, d0
 804bffe:	bb53      	cbnz	r3, 804c056 <__ieee754_pow+0x1d6>
 804c000:	4b44      	ldr	r3, [pc, #272]	@ (804c114 <__ieee754_pow+0x294>)
 804c002:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 804c006:	429a      	cmp	r2, r3
 804c008:	d002      	beq.n	804c010 <__ieee754_pow+0x190>
 804c00a:	f1b8 0f00 	cmp.w	r8, #0
 804c00e:	d122      	bne.n	804c056 <__ieee754_pow+0x1d6>
 804c010:	f1b9 0f00 	cmp.w	r9, #0
 804c014:	da05      	bge.n	804c022 <__ieee754_pow+0x1a2>
 804c016:	4602      	mov	r2, r0
 804c018:	460b      	mov	r3, r1
 804c01a:	2000      	movs	r0, #0
 804c01c:	493d      	ldr	r1, [pc, #244]	@ (804c114 <__ieee754_pow+0x294>)
 804c01e:	f7f4 fc25 	bl	804086c <__aeabi_ddiv>
 804c022:	2d00      	cmp	r5, #0
 804c024:	f6bf af49 	bge.w	804beba <__ieee754_pow+0x3a>
 804c028:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 804c02c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 804c030:	ea58 0804 	orrs.w	r8, r8, r4
 804c034:	d108      	bne.n	804c048 <__ieee754_pow+0x1c8>
 804c036:	4602      	mov	r2, r0
 804c038:	460b      	mov	r3, r1
 804c03a:	4610      	mov	r0, r2
 804c03c:	4619      	mov	r1, r3
 804c03e:	f7f4 f933 	bl	80402a8 <__aeabi_dsub>
 804c042:	4602      	mov	r2, r0
 804c044:	460b      	mov	r3, r1
 804c046:	e794      	b.n	804bf72 <__ieee754_pow+0xf2>
 804c048:	2c01      	cmp	r4, #1
 804c04a:	f47f af36 	bne.w	804beba <__ieee754_pow+0x3a>
 804c04e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 804c052:	4619      	mov	r1, r3
 804c054:	e731      	b.n	804beba <__ieee754_pow+0x3a>
 804c056:	0feb      	lsrs	r3, r5, #31
 804c058:	3b01      	subs	r3, #1
 804c05a:	ea53 0204 	orrs.w	r2, r3, r4
 804c05e:	d102      	bne.n	804c066 <__ieee754_pow+0x1e6>
 804c060:	4632      	mov	r2, r6
 804c062:	463b      	mov	r3, r7
 804c064:	e7e9      	b.n	804c03a <__ieee754_pow+0x1ba>
 804c066:	3c01      	subs	r4, #1
 804c068:	431c      	orrs	r4, r3
 804c06a:	d016      	beq.n	804c09a <__ieee754_pow+0x21a>
 804c06c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 804c0f8 <__ieee754_pow+0x278>
 804c070:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 804c074:	ed8d 7b02 	vstr	d7, [sp, #8]
 804c078:	f240 8112 	bls.w	804c2a0 <__ieee754_pow+0x420>
 804c07c:	4b28      	ldr	r3, [pc, #160]	@ (804c120 <__ieee754_pow+0x2a0>)
 804c07e:	459a      	cmp	sl, r3
 804c080:	4b25      	ldr	r3, [pc, #148]	@ (804c118 <__ieee754_pow+0x298>)
 804c082:	d916      	bls.n	804c0b2 <__ieee754_pow+0x232>
 804c084:	4598      	cmp	r8, r3
 804c086:	d80b      	bhi.n	804c0a0 <__ieee754_pow+0x220>
 804c088:	f1b9 0f00 	cmp.w	r9, #0
 804c08c:	da0b      	bge.n	804c0a6 <__ieee754_pow+0x226>
 804c08e:	2000      	movs	r0, #0
 804c090:	b011      	add	sp, #68	@ 0x44
 804c092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c096:	f000 bcf3 	b.w	804ca80 <__math_oflow>
 804c09a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 804c100 <__ieee754_pow+0x280>
 804c09e:	e7e7      	b.n	804c070 <__ieee754_pow+0x1f0>
 804c0a0:	f1b9 0f00 	cmp.w	r9, #0
 804c0a4:	dcf3      	bgt.n	804c08e <__ieee754_pow+0x20e>
 804c0a6:	2000      	movs	r0, #0
 804c0a8:	b011      	add	sp, #68	@ 0x44
 804c0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c0ae:	f000 bcdf 	b.w	804ca70 <__math_uflow>
 804c0b2:	4598      	cmp	r8, r3
 804c0b4:	d20c      	bcs.n	804c0d0 <__ieee754_pow+0x250>
 804c0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804c0ba:	2200      	movs	r2, #0
 804c0bc:	2300      	movs	r3, #0
 804c0be:	f7f4 fd1d 	bl	8040afc <__aeabi_dcmplt>
 804c0c2:	3800      	subs	r0, #0
 804c0c4:	bf18      	it	ne
 804c0c6:	2001      	movne	r0, #1
 804c0c8:	f1b9 0f00 	cmp.w	r9, #0
 804c0cc:	daec      	bge.n	804c0a8 <__ieee754_pow+0x228>
 804c0ce:	e7df      	b.n	804c090 <__ieee754_pow+0x210>
 804c0d0:	4b10      	ldr	r3, [pc, #64]	@ (804c114 <__ieee754_pow+0x294>)
 804c0d2:	4598      	cmp	r8, r3
 804c0d4:	f04f 0200 	mov.w	r2, #0
 804c0d8:	d924      	bls.n	804c124 <__ieee754_pow+0x2a4>
 804c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804c0de:	2300      	movs	r3, #0
 804c0e0:	f7f4 fd0c 	bl	8040afc <__aeabi_dcmplt>
 804c0e4:	3800      	subs	r0, #0
 804c0e6:	bf18      	it	ne
 804c0e8:	2001      	movne	r0, #1
 804c0ea:	f1b9 0f00 	cmp.w	r9, #0
 804c0ee:	dccf      	bgt.n	804c090 <__ieee754_pow+0x210>
 804c0f0:	e7da      	b.n	804c0a8 <__ieee754_pow+0x228>
 804c0f2:	bf00      	nop
 804c0f4:	f3af 8000 	nop.w
 804c0f8:	00000000 	.word	0x00000000
 804c0fc:	3ff00000 	.word	0x3ff00000
 804c100:	00000000 	.word	0x00000000
 804c104:	bff00000 	.word	0xbff00000
 804c108:	fff00000 	.word	0xfff00000
 804c10c:	7ff00000 	.word	0x7ff00000
 804c110:	433fffff 	.word	0x433fffff
 804c114:	3ff00000 	.word	0x3ff00000
 804c118:	3fefffff 	.word	0x3fefffff
 804c11c:	3fe00000 	.word	0x3fe00000
 804c120:	43f00000 	.word	0x43f00000
 804c124:	4b5a      	ldr	r3, [pc, #360]	@ (804c290 <__ieee754_pow+0x410>)
 804c126:	f7f4 f8bf 	bl	80402a8 <__aeabi_dsub>
 804c12a:	a351      	add	r3, pc, #324	@ (adr r3, 804c270 <__ieee754_pow+0x3f0>)
 804c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c130:	4604      	mov	r4, r0
 804c132:	460d      	mov	r5, r1
 804c134:	f7f4 fa70 	bl	8040618 <__aeabi_dmul>
 804c138:	a34f      	add	r3, pc, #316	@ (adr r3, 804c278 <__ieee754_pow+0x3f8>)
 804c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c13e:	4606      	mov	r6, r0
 804c140:	460f      	mov	r7, r1
 804c142:	4620      	mov	r0, r4
 804c144:	4629      	mov	r1, r5
 804c146:	f7f4 fa67 	bl	8040618 <__aeabi_dmul>
 804c14a:	4b52      	ldr	r3, [pc, #328]	@ (804c294 <__ieee754_pow+0x414>)
 804c14c:	4682      	mov	sl, r0
 804c14e:	468b      	mov	fp, r1
 804c150:	2200      	movs	r2, #0
 804c152:	4620      	mov	r0, r4
 804c154:	4629      	mov	r1, r5
 804c156:	f7f4 fa5f 	bl	8040618 <__aeabi_dmul>
 804c15a:	4602      	mov	r2, r0
 804c15c:	460b      	mov	r3, r1
 804c15e:	a148      	add	r1, pc, #288	@ (adr r1, 804c280 <__ieee754_pow+0x400>)
 804c160:	e9d1 0100 	ldrd	r0, r1, [r1]
 804c164:	f7f4 f8a0 	bl	80402a8 <__aeabi_dsub>
 804c168:	4622      	mov	r2, r4
 804c16a:	462b      	mov	r3, r5
 804c16c:	f7f4 fa54 	bl	8040618 <__aeabi_dmul>
 804c170:	4602      	mov	r2, r0
 804c172:	460b      	mov	r3, r1
 804c174:	2000      	movs	r0, #0
 804c176:	4948      	ldr	r1, [pc, #288]	@ (804c298 <__ieee754_pow+0x418>)
 804c178:	f7f4 f896 	bl	80402a8 <__aeabi_dsub>
 804c17c:	4622      	mov	r2, r4
 804c17e:	4680      	mov	r8, r0
 804c180:	4689      	mov	r9, r1
 804c182:	462b      	mov	r3, r5
 804c184:	4620      	mov	r0, r4
 804c186:	4629      	mov	r1, r5
 804c188:	f7f4 fa46 	bl	8040618 <__aeabi_dmul>
 804c18c:	4602      	mov	r2, r0
 804c18e:	460b      	mov	r3, r1
 804c190:	4640      	mov	r0, r8
 804c192:	4649      	mov	r1, r9
 804c194:	f7f4 fa40 	bl	8040618 <__aeabi_dmul>
 804c198:	a33b      	add	r3, pc, #236	@ (adr r3, 804c288 <__ieee754_pow+0x408>)
 804c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c19e:	f7f4 fa3b 	bl	8040618 <__aeabi_dmul>
 804c1a2:	4602      	mov	r2, r0
 804c1a4:	460b      	mov	r3, r1
 804c1a6:	4650      	mov	r0, sl
 804c1a8:	4659      	mov	r1, fp
 804c1aa:	f7f4 f87d 	bl	80402a8 <__aeabi_dsub>
 804c1ae:	4602      	mov	r2, r0
 804c1b0:	460b      	mov	r3, r1
 804c1b2:	4680      	mov	r8, r0
 804c1b4:	4689      	mov	r9, r1
 804c1b6:	4630      	mov	r0, r6
 804c1b8:	4639      	mov	r1, r7
 804c1ba:	f7f4 f877 	bl	80402ac <__adddf3>
 804c1be:	2400      	movs	r4, #0
 804c1c0:	4632      	mov	r2, r6
 804c1c2:	463b      	mov	r3, r7
 804c1c4:	4620      	mov	r0, r4
 804c1c6:	460d      	mov	r5, r1
 804c1c8:	f7f4 f86e 	bl	80402a8 <__aeabi_dsub>
 804c1cc:	4602      	mov	r2, r0
 804c1ce:	460b      	mov	r3, r1
 804c1d0:	4640      	mov	r0, r8
 804c1d2:	4649      	mov	r1, r9
 804c1d4:	f7f4 f868 	bl	80402a8 <__aeabi_dsub>
 804c1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 804c1dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 804c1e0:	2300      	movs	r3, #0
 804c1e2:	9304      	str	r3, [sp, #16]
 804c1e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 804c1e8:	4606      	mov	r6, r0
 804c1ea:	460f      	mov	r7, r1
 804c1ec:	4652      	mov	r2, sl
 804c1ee:	465b      	mov	r3, fp
 804c1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 804c1f4:	f7f4 f858 	bl	80402a8 <__aeabi_dsub>
 804c1f8:	4622      	mov	r2, r4
 804c1fa:	462b      	mov	r3, r5
 804c1fc:	f7f4 fa0c 	bl	8040618 <__aeabi_dmul>
 804c200:	e9dd 2300 	ldrd	r2, r3, [sp]
 804c204:	4680      	mov	r8, r0
 804c206:	4689      	mov	r9, r1
 804c208:	4630      	mov	r0, r6
 804c20a:	4639      	mov	r1, r7
 804c20c:	f7f4 fa04 	bl	8040618 <__aeabi_dmul>
 804c210:	4602      	mov	r2, r0
 804c212:	460b      	mov	r3, r1
 804c214:	4640      	mov	r0, r8
 804c216:	4649      	mov	r1, r9
 804c218:	f7f4 f848 	bl	80402ac <__adddf3>
 804c21c:	4652      	mov	r2, sl
 804c21e:	465b      	mov	r3, fp
 804c220:	4606      	mov	r6, r0
 804c222:	460f      	mov	r7, r1
 804c224:	4620      	mov	r0, r4
 804c226:	4629      	mov	r1, r5
 804c228:	f7f4 f9f6 	bl	8040618 <__aeabi_dmul>
 804c22c:	460b      	mov	r3, r1
 804c22e:	4602      	mov	r2, r0
 804c230:	4680      	mov	r8, r0
 804c232:	4689      	mov	r9, r1
 804c234:	4630      	mov	r0, r6
 804c236:	4639      	mov	r1, r7
 804c238:	f7f4 f838 	bl	80402ac <__adddf3>
 804c23c:	4b17      	ldr	r3, [pc, #92]	@ (804c29c <__ieee754_pow+0x41c>)
 804c23e:	4299      	cmp	r1, r3
 804c240:	4604      	mov	r4, r0
 804c242:	460d      	mov	r5, r1
 804c244:	468a      	mov	sl, r1
 804c246:	468b      	mov	fp, r1
 804c248:	f340 82ef 	ble.w	804c82a <__ieee754_pow+0x9aa>
 804c24c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 804c250:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 804c254:	4303      	orrs	r3, r0
 804c256:	f000 81e8 	beq.w	804c62a <__ieee754_pow+0x7aa>
 804c25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804c25e:	2200      	movs	r2, #0
 804c260:	2300      	movs	r3, #0
 804c262:	f7f4 fc4b 	bl	8040afc <__aeabi_dcmplt>
 804c266:	3800      	subs	r0, #0
 804c268:	bf18      	it	ne
 804c26a:	2001      	movne	r0, #1
 804c26c:	e710      	b.n	804c090 <__ieee754_pow+0x210>
 804c26e:	bf00      	nop
 804c270:	60000000 	.word	0x60000000
 804c274:	3ff71547 	.word	0x3ff71547
 804c278:	f85ddf44 	.word	0xf85ddf44
 804c27c:	3e54ae0b 	.word	0x3e54ae0b
 804c280:	55555555 	.word	0x55555555
 804c284:	3fd55555 	.word	0x3fd55555
 804c288:	652b82fe 	.word	0x652b82fe
 804c28c:	3ff71547 	.word	0x3ff71547
 804c290:	3ff00000 	.word	0x3ff00000
 804c294:	3fd00000 	.word	0x3fd00000
 804c298:	3fe00000 	.word	0x3fe00000
 804c29c:	408fffff 	.word	0x408fffff
 804c2a0:	4bd5      	ldr	r3, [pc, #852]	@ (804c5f8 <__ieee754_pow+0x778>)
 804c2a2:	402b      	ands	r3, r5
 804c2a4:	2200      	movs	r2, #0
 804c2a6:	b92b      	cbnz	r3, 804c2b4 <__ieee754_pow+0x434>
 804c2a8:	4bd4      	ldr	r3, [pc, #848]	@ (804c5fc <__ieee754_pow+0x77c>)
 804c2aa:	f7f4 f9b5 	bl	8040618 <__aeabi_dmul>
 804c2ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 804c2b2:	468b      	mov	fp, r1
 804c2b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 804c2b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 804c2bc:	4413      	add	r3, r2
 804c2be:	930a      	str	r3, [sp, #40]	@ 0x28
 804c2c0:	4bcf      	ldr	r3, [pc, #828]	@ (804c600 <__ieee754_pow+0x780>)
 804c2c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 804c2c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 804c2ca:	459b      	cmp	fp, r3
 804c2cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 804c2d0:	dd08      	ble.n	804c2e4 <__ieee754_pow+0x464>
 804c2d2:	4bcc      	ldr	r3, [pc, #816]	@ (804c604 <__ieee754_pow+0x784>)
 804c2d4:	459b      	cmp	fp, r3
 804c2d6:	f340 81a5 	ble.w	804c624 <__ieee754_pow+0x7a4>
 804c2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 804c2dc:	3301      	adds	r3, #1
 804c2de:	930a      	str	r3, [sp, #40]	@ 0x28
 804c2e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 804c2e4:	f04f 0a00 	mov.w	sl, #0
 804c2e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 804c2ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 804c2ee:	4bc6      	ldr	r3, [pc, #792]	@ (804c608 <__ieee754_pow+0x788>)
 804c2f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 804c2f4:	ed93 7b00 	vldr	d7, [r3]
 804c2f8:	4629      	mov	r1, r5
 804c2fa:	ec53 2b17 	vmov	r2, r3, d7
 804c2fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 804c302:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804c306:	f7f3 ffcf 	bl	80402a8 <__aeabi_dsub>
 804c30a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 804c30e:	4606      	mov	r6, r0
 804c310:	460f      	mov	r7, r1
 804c312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804c316:	f7f3 ffc9 	bl	80402ac <__adddf3>
 804c31a:	4602      	mov	r2, r0
 804c31c:	460b      	mov	r3, r1
 804c31e:	2000      	movs	r0, #0
 804c320:	49ba      	ldr	r1, [pc, #744]	@ (804c60c <__ieee754_pow+0x78c>)
 804c322:	f7f4 faa3 	bl	804086c <__aeabi_ddiv>
 804c326:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 804c32a:	4602      	mov	r2, r0
 804c32c:	460b      	mov	r3, r1
 804c32e:	4630      	mov	r0, r6
 804c330:	4639      	mov	r1, r7
 804c332:	f7f4 f971 	bl	8040618 <__aeabi_dmul>
 804c336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804c33a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 804c33e:	106d      	asrs	r5, r5, #1
 804c340:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 804c344:	f04f 0b00 	mov.w	fp, #0
 804c348:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 804c34c:	4661      	mov	r1, ip
 804c34e:	2200      	movs	r2, #0
 804c350:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 804c354:	4658      	mov	r0, fp
 804c356:	46e1      	mov	r9, ip
 804c358:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 804c35c:	4614      	mov	r4, r2
 804c35e:	461d      	mov	r5, r3
 804c360:	f7f4 f95a 	bl	8040618 <__aeabi_dmul>
 804c364:	4602      	mov	r2, r0
 804c366:	460b      	mov	r3, r1
 804c368:	4630      	mov	r0, r6
 804c36a:	4639      	mov	r1, r7
 804c36c:	f7f3 ff9c 	bl	80402a8 <__aeabi_dsub>
 804c370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804c374:	4606      	mov	r6, r0
 804c376:	460f      	mov	r7, r1
 804c378:	4620      	mov	r0, r4
 804c37a:	4629      	mov	r1, r5
 804c37c:	f7f3 ff94 	bl	80402a8 <__aeabi_dsub>
 804c380:	4602      	mov	r2, r0
 804c382:	460b      	mov	r3, r1
 804c384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804c388:	f7f3 ff8e 	bl	80402a8 <__aeabi_dsub>
 804c38c:	465a      	mov	r2, fp
 804c38e:	464b      	mov	r3, r9
 804c390:	f7f4 f942 	bl	8040618 <__aeabi_dmul>
 804c394:	4602      	mov	r2, r0
 804c396:	460b      	mov	r3, r1
 804c398:	4630      	mov	r0, r6
 804c39a:	4639      	mov	r1, r7
 804c39c:	f7f3 ff84 	bl	80402a8 <__aeabi_dsub>
 804c3a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 804c3a4:	f7f4 f938 	bl	8040618 <__aeabi_dmul>
 804c3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804c3ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804c3b0:	4610      	mov	r0, r2
 804c3b2:	4619      	mov	r1, r3
 804c3b4:	f7f4 f930 	bl	8040618 <__aeabi_dmul>
 804c3b8:	a37d      	add	r3, pc, #500	@ (adr r3, 804c5b0 <__ieee754_pow+0x730>)
 804c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c3be:	4604      	mov	r4, r0
 804c3c0:	460d      	mov	r5, r1
 804c3c2:	f7f4 f929 	bl	8040618 <__aeabi_dmul>
 804c3c6:	a37c      	add	r3, pc, #496	@ (adr r3, 804c5b8 <__ieee754_pow+0x738>)
 804c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c3cc:	f7f3 ff6e 	bl	80402ac <__adddf3>
 804c3d0:	4622      	mov	r2, r4
 804c3d2:	462b      	mov	r3, r5
 804c3d4:	f7f4 f920 	bl	8040618 <__aeabi_dmul>
 804c3d8:	a379      	add	r3, pc, #484	@ (adr r3, 804c5c0 <__ieee754_pow+0x740>)
 804c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c3de:	f7f3 ff65 	bl	80402ac <__adddf3>
 804c3e2:	4622      	mov	r2, r4
 804c3e4:	462b      	mov	r3, r5
 804c3e6:	f7f4 f917 	bl	8040618 <__aeabi_dmul>
 804c3ea:	a377      	add	r3, pc, #476	@ (adr r3, 804c5c8 <__ieee754_pow+0x748>)
 804c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c3f0:	f7f3 ff5c 	bl	80402ac <__adddf3>
 804c3f4:	4622      	mov	r2, r4
 804c3f6:	462b      	mov	r3, r5
 804c3f8:	f7f4 f90e 	bl	8040618 <__aeabi_dmul>
 804c3fc:	a374      	add	r3, pc, #464	@ (adr r3, 804c5d0 <__ieee754_pow+0x750>)
 804c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c402:	f7f3 ff53 	bl	80402ac <__adddf3>
 804c406:	4622      	mov	r2, r4
 804c408:	462b      	mov	r3, r5
 804c40a:	f7f4 f905 	bl	8040618 <__aeabi_dmul>
 804c40e:	a372      	add	r3, pc, #456	@ (adr r3, 804c5d8 <__ieee754_pow+0x758>)
 804c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c414:	f7f3 ff4a 	bl	80402ac <__adddf3>
 804c418:	4622      	mov	r2, r4
 804c41a:	4606      	mov	r6, r0
 804c41c:	460f      	mov	r7, r1
 804c41e:	462b      	mov	r3, r5
 804c420:	4620      	mov	r0, r4
 804c422:	4629      	mov	r1, r5
 804c424:	f7f4 f8f8 	bl	8040618 <__aeabi_dmul>
 804c428:	4602      	mov	r2, r0
 804c42a:	460b      	mov	r3, r1
 804c42c:	4630      	mov	r0, r6
 804c42e:	4639      	mov	r1, r7
 804c430:	f7f4 f8f2 	bl	8040618 <__aeabi_dmul>
 804c434:	465a      	mov	r2, fp
 804c436:	4604      	mov	r4, r0
 804c438:	460d      	mov	r5, r1
 804c43a:	464b      	mov	r3, r9
 804c43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804c440:	f7f3 ff34 	bl	80402ac <__adddf3>
 804c444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804c448:	f7f4 f8e6 	bl	8040618 <__aeabi_dmul>
 804c44c:	4622      	mov	r2, r4
 804c44e:	462b      	mov	r3, r5
 804c450:	f7f3 ff2c 	bl	80402ac <__adddf3>
 804c454:	465a      	mov	r2, fp
 804c456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804c45a:	464b      	mov	r3, r9
 804c45c:	4658      	mov	r0, fp
 804c45e:	4649      	mov	r1, r9
 804c460:	f7f4 f8da 	bl	8040618 <__aeabi_dmul>
 804c464:	4b6a      	ldr	r3, [pc, #424]	@ (804c610 <__ieee754_pow+0x790>)
 804c466:	2200      	movs	r2, #0
 804c468:	4606      	mov	r6, r0
 804c46a:	460f      	mov	r7, r1
 804c46c:	f7f3 ff1e 	bl	80402ac <__adddf3>
 804c470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 804c474:	f7f3 ff1a 	bl	80402ac <__adddf3>
 804c478:	46d8      	mov	r8, fp
 804c47a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 804c47e:	460d      	mov	r5, r1
 804c480:	465a      	mov	r2, fp
 804c482:	460b      	mov	r3, r1
 804c484:	4640      	mov	r0, r8
 804c486:	4649      	mov	r1, r9
 804c488:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 804c48c:	f7f4 f8c4 	bl	8040618 <__aeabi_dmul>
 804c490:	465c      	mov	r4, fp
 804c492:	4680      	mov	r8, r0
 804c494:	4689      	mov	r9, r1
 804c496:	4b5e      	ldr	r3, [pc, #376]	@ (804c610 <__ieee754_pow+0x790>)
 804c498:	2200      	movs	r2, #0
 804c49a:	4620      	mov	r0, r4
 804c49c:	4629      	mov	r1, r5
 804c49e:	f7f3 ff03 	bl	80402a8 <__aeabi_dsub>
 804c4a2:	4632      	mov	r2, r6
 804c4a4:	463b      	mov	r3, r7
 804c4a6:	f7f3 feff 	bl	80402a8 <__aeabi_dsub>
 804c4aa:	4602      	mov	r2, r0
 804c4ac:	460b      	mov	r3, r1
 804c4ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804c4b2:	f7f3 fef9 	bl	80402a8 <__aeabi_dsub>
 804c4b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804c4ba:	f7f4 f8ad 	bl	8040618 <__aeabi_dmul>
 804c4be:	4622      	mov	r2, r4
 804c4c0:	4606      	mov	r6, r0
 804c4c2:	460f      	mov	r7, r1
 804c4c4:	462b      	mov	r3, r5
 804c4c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804c4ca:	f7f4 f8a5 	bl	8040618 <__aeabi_dmul>
 804c4ce:	4602      	mov	r2, r0
 804c4d0:	460b      	mov	r3, r1
 804c4d2:	4630      	mov	r0, r6
 804c4d4:	4639      	mov	r1, r7
 804c4d6:	f7f3 fee9 	bl	80402ac <__adddf3>
 804c4da:	4606      	mov	r6, r0
 804c4dc:	460f      	mov	r7, r1
 804c4de:	4602      	mov	r2, r0
 804c4e0:	460b      	mov	r3, r1
 804c4e2:	4640      	mov	r0, r8
 804c4e4:	4649      	mov	r1, r9
 804c4e6:	f7f3 fee1 	bl	80402ac <__adddf3>
 804c4ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 804c4ee:	a33c      	add	r3, pc, #240	@ (adr r3, 804c5e0 <__ieee754_pow+0x760>)
 804c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c4f4:	4658      	mov	r0, fp
 804c4f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 804c4fa:	460d      	mov	r5, r1
 804c4fc:	f7f4 f88c 	bl	8040618 <__aeabi_dmul>
 804c500:	465c      	mov	r4, fp
 804c502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804c506:	4642      	mov	r2, r8
 804c508:	464b      	mov	r3, r9
 804c50a:	4620      	mov	r0, r4
 804c50c:	4629      	mov	r1, r5
 804c50e:	f7f3 fecb 	bl	80402a8 <__aeabi_dsub>
 804c512:	4602      	mov	r2, r0
 804c514:	460b      	mov	r3, r1
 804c516:	4630      	mov	r0, r6
 804c518:	4639      	mov	r1, r7
 804c51a:	f7f3 fec5 	bl	80402a8 <__aeabi_dsub>
 804c51e:	a332      	add	r3, pc, #200	@ (adr r3, 804c5e8 <__ieee754_pow+0x768>)
 804c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c524:	f7f4 f878 	bl	8040618 <__aeabi_dmul>
 804c528:	a331      	add	r3, pc, #196	@ (adr r3, 804c5f0 <__ieee754_pow+0x770>)
 804c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c52e:	4606      	mov	r6, r0
 804c530:	460f      	mov	r7, r1
 804c532:	4620      	mov	r0, r4
 804c534:	4629      	mov	r1, r5
 804c536:	f7f4 f86f 	bl	8040618 <__aeabi_dmul>
 804c53a:	4602      	mov	r2, r0
 804c53c:	460b      	mov	r3, r1
 804c53e:	4630      	mov	r0, r6
 804c540:	4639      	mov	r1, r7
 804c542:	f7f3 feb3 	bl	80402ac <__adddf3>
 804c546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 804c548:	4b32      	ldr	r3, [pc, #200]	@ (804c614 <__ieee754_pow+0x794>)
 804c54a:	4413      	add	r3, r2
 804c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c550:	f7f3 feac 	bl	80402ac <__adddf3>
 804c554:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804c558:	980a      	ldr	r0, [sp, #40]	@ 0x28
 804c55a:	f7f3 fff3 	bl	8040544 <__aeabi_i2d>
 804c55e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 804c560:	4b2d      	ldr	r3, [pc, #180]	@ (804c618 <__ieee754_pow+0x798>)
 804c562:	4413      	add	r3, r2
 804c564:	e9d3 8900 	ldrd	r8, r9, [r3]
 804c568:	4606      	mov	r6, r0
 804c56a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804c56e:	460f      	mov	r7, r1
 804c570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804c574:	f7f3 fe9a 	bl	80402ac <__adddf3>
 804c578:	4642      	mov	r2, r8
 804c57a:	464b      	mov	r3, r9
 804c57c:	f7f3 fe96 	bl	80402ac <__adddf3>
 804c580:	4632      	mov	r2, r6
 804c582:	463b      	mov	r3, r7
 804c584:	f7f3 fe92 	bl	80402ac <__adddf3>
 804c588:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 804c58c:	4632      	mov	r2, r6
 804c58e:	463b      	mov	r3, r7
 804c590:	4658      	mov	r0, fp
 804c592:	460d      	mov	r5, r1
 804c594:	f7f3 fe88 	bl	80402a8 <__aeabi_dsub>
 804c598:	4642      	mov	r2, r8
 804c59a:	464b      	mov	r3, r9
 804c59c:	f7f3 fe84 	bl	80402a8 <__aeabi_dsub>
 804c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804c5a4:	f7f3 fe80 	bl	80402a8 <__aeabi_dsub>
 804c5a8:	465c      	mov	r4, fp
 804c5aa:	4602      	mov	r2, r0
 804c5ac:	e036      	b.n	804c61c <__ieee754_pow+0x79c>
 804c5ae:	bf00      	nop
 804c5b0:	4a454eef 	.word	0x4a454eef
 804c5b4:	3fca7e28 	.word	0x3fca7e28
 804c5b8:	93c9db65 	.word	0x93c9db65
 804c5bc:	3fcd864a 	.word	0x3fcd864a
 804c5c0:	a91d4101 	.word	0xa91d4101
 804c5c4:	3fd17460 	.word	0x3fd17460
 804c5c8:	518f264d 	.word	0x518f264d
 804c5cc:	3fd55555 	.word	0x3fd55555
 804c5d0:	db6fabff 	.word	0xdb6fabff
 804c5d4:	3fdb6db6 	.word	0x3fdb6db6
 804c5d8:	33333303 	.word	0x33333303
 804c5dc:	3fe33333 	.word	0x3fe33333
 804c5e0:	e0000000 	.word	0xe0000000
 804c5e4:	3feec709 	.word	0x3feec709
 804c5e8:	dc3a03fd 	.word	0xdc3a03fd
 804c5ec:	3feec709 	.word	0x3feec709
 804c5f0:	145b01f5 	.word	0x145b01f5
 804c5f4:	be3e2fe0 	.word	0xbe3e2fe0
 804c5f8:	7ff00000 	.word	0x7ff00000
 804c5fc:	43400000 	.word	0x43400000
 804c600:	0003988e 	.word	0x0003988e
 804c604:	000bb679 	.word	0x000bb679
 804c608:	0804d240 	.word	0x0804d240
 804c60c:	3ff00000 	.word	0x3ff00000
 804c610:	40080000 	.word	0x40080000
 804c614:	0804d220 	.word	0x0804d220
 804c618:	0804d230 	.word	0x0804d230
 804c61c:	460b      	mov	r3, r1
 804c61e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804c622:	e5d7      	b.n	804c1d4 <__ieee754_pow+0x354>
 804c624:	f04f 0a01 	mov.w	sl, #1
 804c628:	e65e      	b.n	804c2e8 <__ieee754_pow+0x468>
 804c62a:	a3b4      	add	r3, pc, #720	@ (adr r3, 804c8fc <__ieee754_pow+0xa7c>)
 804c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c630:	4630      	mov	r0, r6
 804c632:	4639      	mov	r1, r7
 804c634:	f7f3 fe3a 	bl	80402ac <__adddf3>
 804c638:	4642      	mov	r2, r8
 804c63a:	e9cd 0100 	strd	r0, r1, [sp]
 804c63e:	464b      	mov	r3, r9
 804c640:	4620      	mov	r0, r4
 804c642:	4629      	mov	r1, r5
 804c644:	f7f3 fe30 	bl	80402a8 <__aeabi_dsub>
 804c648:	4602      	mov	r2, r0
 804c64a:	460b      	mov	r3, r1
 804c64c:	e9dd 0100 	ldrd	r0, r1, [sp]
 804c650:	f7f4 fa72 	bl	8040b38 <__aeabi_dcmpgt>
 804c654:	2800      	cmp	r0, #0
 804c656:	f47f ae00 	bne.w	804c25a <__ieee754_pow+0x3da>
 804c65a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 804c65e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 804c662:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 804c666:	fa43 fa0a 	asr.w	sl, r3, sl
 804c66a:	44da      	add	sl, fp
 804c66c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 804c670:	489d      	ldr	r0, [pc, #628]	@ (804c8e8 <__ieee754_pow+0xa68>)
 804c672:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 804c676:	4108      	asrs	r0, r1
 804c678:	ea00 030a 	and.w	r3, r0, sl
 804c67c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 804c680:	f1c1 0114 	rsb	r1, r1, #20
 804c684:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 804c688:	fa4a fa01 	asr.w	sl, sl, r1
 804c68c:	f1bb 0f00 	cmp.w	fp, #0
 804c690:	4640      	mov	r0, r8
 804c692:	4649      	mov	r1, r9
 804c694:	f04f 0200 	mov.w	r2, #0
 804c698:	bfb8      	it	lt
 804c69a:	f1ca 0a00 	rsblt	sl, sl, #0
 804c69e:	f7f3 fe03 	bl	80402a8 <__aeabi_dsub>
 804c6a2:	4680      	mov	r8, r0
 804c6a4:	4689      	mov	r9, r1
 804c6a6:	4632      	mov	r2, r6
 804c6a8:	463b      	mov	r3, r7
 804c6aa:	4640      	mov	r0, r8
 804c6ac:	4649      	mov	r1, r9
 804c6ae:	f7f3 fdfd 	bl	80402ac <__adddf3>
 804c6b2:	2400      	movs	r4, #0
 804c6b4:	a37c      	add	r3, pc, #496	@ (adr r3, 804c8a8 <__ieee754_pow+0xa28>)
 804c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c6ba:	4620      	mov	r0, r4
 804c6bc:	460d      	mov	r5, r1
 804c6be:	f7f3 ffab 	bl	8040618 <__aeabi_dmul>
 804c6c2:	4642      	mov	r2, r8
 804c6c4:	e9cd 0100 	strd	r0, r1, [sp]
 804c6c8:	464b      	mov	r3, r9
 804c6ca:	4620      	mov	r0, r4
 804c6cc:	4629      	mov	r1, r5
 804c6ce:	f7f3 fdeb 	bl	80402a8 <__aeabi_dsub>
 804c6d2:	4602      	mov	r2, r0
 804c6d4:	460b      	mov	r3, r1
 804c6d6:	4630      	mov	r0, r6
 804c6d8:	4639      	mov	r1, r7
 804c6da:	f7f3 fde5 	bl	80402a8 <__aeabi_dsub>
 804c6de:	a374      	add	r3, pc, #464	@ (adr r3, 804c8b0 <__ieee754_pow+0xa30>)
 804c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c6e4:	f7f3 ff98 	bl	8040618 <__aeabi_dmul>
 804c6e8:	a373      	add	r3, pc, #460	@ (adr r3, 804c8b8 <__ieee754_pow+0xa38>)
 804c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c6ee:	4680      	mov	r8, r0
 804c6f0:	4689      	mov	r9, r1
 804c6f2:	4620      	mov	r0, r4
 804c6f4:	4629      	mov	r1, r5
 804c6f6:	f7f3 ff8f 	bl	8040618 <__aeabi_dmul>
 804c6fa:	4602      	mov	r2, r0
 804c6fc:	460b      	mov	r3, r1
 804c6fe:	4640      	mov	r0, r8
 804c700:	4649      	mov	r1, r9
 804c702:	f7f3 fdd3 	bl	80402ac <__adddf3>
 804c706:	4604      	mov	r4, r0
 804c708:	460d      	mov	r5, r1
 804c70a:	4602      	mov	r2, r0
 804c70c:	460b      	mov	r3, r1
 804c70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 804c712:	f7f3 fdcb 	bl	80402ac <__adddf3>
 804c716:	e9dd 2300 	ldrd	r2, r3, [sp]
 804c71a:	4680      	mov	r8, r0
 804c71c:	4689      	mov	r9, r1
 804c71e:	f7f3 fdc3 	bl	80402a8 <__aeabi_dsub>
 804c722:	4602      	mov	r2, r0
 804c724:	460b      	mov	r3, r1
 804c726:	4620      	mov	r0, r4
 804c728:	4629      	mov	r1, r5
 804c72a:	f7f3 fdbd 	bl	80402a8 <__aeabi_dsub>
 804c72e:	4642      	mov	r2, r8
 804c730:	4606      	mov	r6, r0
 804c732:	460f      	mov	r7, r1
 804c734:	464b      	mov	r3, r9
 804c736:	4640      	mov	r0, r8
 804c738:	4649      	mov	r1, r9
 804c73a:	f7f3 ff6d 	bl	8040618 <__aeabi_dmul>
 804c73e:	a360      	add	r3, pc, #384	@ (adr r3, 804c8c0 <__ieee754_pow+0xa40>)
 804c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c744:	4604      	mov	r4, r0
 804c746:	460d      	mov	r5, r1
 804c748:	f7f3 ff66 	bl	8040618 <__aeabi_dmul>
 804c74c:	a35e      	add	r3, pc, #376	@ (adr r3, 804c8c8 <__ieee754_pow+0xa48>)
 804c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c752:	f7f3 fda9 	bl	80402a8 <__aeabi_dsub>
 804c756:	4622      	mov	r2, r4
 804c758:	462b      	mov	r3, r5
 804c75a:	f7f3 ff5d 	bl	8040618 <__aeabi_dmul>
 804c75e:	a35c      	add	r3, pc, #368	@ (adr r3, 804c8d0 <__ieee754_pow+0xa50>)
 804c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c764:	f7f3 fda2 	bl	80402ac <__adddf3>
 804c768:	4622      	mov	r2, r4
 804c76a:	462b      	mov	r3, r5
 804c76c:	f7f3 ff54 	bl	8040618 <__aeabi_dmul>
 804c770:	a359      	add	r3, pc, #356	@ (adr r3, 804c8d8 <__ieee754_pow+0xa58>)
 804c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c776:	f7f3 fd97 	bl	80402a8 <__aeabi_dsub>
 804c77a:	4622      	mov	r2, r4
 804c77c:	462b      	mov	r3, r5
 804c77e:	f7f3 ff4b 	bl	8040618 <__aeabi_dmul>
 804c782:	a357      	add	r3, pc, #348	@ (adr r3, 804c8e0 <__ieee754_pow+0xa60>)
 804c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c788:	f7f3 fd90 	bl	80402ac <__adddf3>
 804c78c:	4622      	mov	r2, r4
 804c78e:	462b      	mov	r3, r5
 804c790:	f7f3 ff42 	bl	8040618 <__aeabi_dmul>
 804c794:	4602      	mov	r2, r0
 804c796:	460b      	mov	r3, r1
 804c798:	4640      	mov	r0, r8
 804c79a:	4649      	mov	r1, r9
 804c79c:	f7f3 fd84 	bl	80402a8 <__aeabi_dsub>
 804c7a0:	4604      	mov	r4, r0
 804c7a2:	460d      	mov	r5, r1
 804c7a4:	4602      	mov	r2, r0
 804c7a6:	460b      	mov	r3, r1
 804c7a8:	4640      	mov	r0, r8
 804c7aa:	4649      	mov	r1, r9
 804c7ac:	f7f3 ff34 	bl	8040618 <__aeabi_dmul>
 804c7b0:	2200      	movs	r2, #0
 804c7b2:	e9cd 0100 	strd	r0, r1, [sp]
 804c7b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 804c7ba:	4620      	mov	r0, r4
 804c7bc:	4629      	mov	r1, r5
 804c7be:	f7f3 fd73 	bl	80402a8 <__aeabi_dsub>
 804c7c2:	4602      	mov	r2, r0
 804c7c4:	460b      	mov	r3, r1
 804c7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 804c7ca:	f7f4 f84f 	bl	804086c <__aeabi_ddiv>
 804c7ce:	4632      	mov	r2, r6
 804c7d0:	4604      	mov	r4, r0
 804c7d2:	460d      	mov	r5, r1
 804c7d4:	463b      	mov	r3, r7
 804c7d6:	4640      	mov	r0, r8
 804c7d8:	4649      	mov	r1, r9
 804c7da:	f7f3 ff1d 	bl	8040618 <__aeabi_dmul>
 804c7de:	4632      	mov	r2, r6
 804c7e0:	463b      	mov	r3, r7
 804c7e2:	f7f3 fd63 	bl	80402ac <__adddf3>
 804c7e6:	4602      	mov	r2, r0
 804c7e8:	460b      	mov	r3, r1
 804c7ea:	4620      	mov	r0, r4
 804c7ec:	4629      	mov	r1, r5
 804c7ee:	f7f3 fd5b 	bl	80402a8 <__aeabi_dsub>
 804c7f2:	4642      	mov	r2, r8
 804c7f4:	464b      	mov	r3, r9
 804c7f6:	f7f3 fd57 	bl	80402a8 <__aeabi_dsub>
 804c7fa:	460b      	mov	r3, r1
 804c7fc:	4602      	mov	r2, r0
 804c7fe:	493b      	ldr	r1, [pc, #236]	@ (804c8ec <__ieee754_pow+0xa6c>)
 804c800:	2000      	movs	r0, #0
 804c802:	f7f3 fd51 	bl	80402a8 <__aeabi_dsub>
 804c806:	ec41 0b10 	vmov	d0, r0, r1
 804c80a:	ee10 3a90 	vmov	r3, s1
 804c80e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 804c812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804c816:	da30      	bge.n	804c87a <__ieee754_pow+0x9fa>
 804c818:	4650      	mov	r0, sl
 804c81a:	f000 f87d 	bl	804c918 <scalbn>
 804c81e:	ec51 0b10 	vmov	r0, r1, d0
 804c822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804c826:	f7ff bbd2 	b.w	804bfce <__ieee754_pow+0x14e>
 804c82a:	4c31      	ldr	r4, [pc, #196]	@ (804c8f0 <__ieee754_pow+0xa70>)
 804c82c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 804c830:	42a3      	cmp	r3, r4
 804c832:	d91a      	bls.n	804c86a <__ieee754_pow+0x9ea>
 804c834:	4b2f      	ldr	r3, [pc, #188]	@ (804c8f4 <__ieee754_pow+0xa74>)
 804c836:	440b      	add	r3, r1
 804c838:	4303      	orrs	r3, r0
 804c83a:	d009      	beq.n	804c850 <__ieee754_pow+0x9d0>
 804c83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804c840:	2200      	movs	r2, #0
 804c842:	2300      	movs	r3, #0
 804c844:	f7f4 f95a 	bl	8040afc <__aeabi_dcmplt>
 804c848:	3800      	subs	r0, #0
 804c84a:	bf18      	it	ne
 804c84c:	2001      	movne	r0, #1
 804c84e:	e42b      	b.n	804c0a8 <__ieee754_pow+0x228>
 804c850:	4642      	mov	r2, r8
 804c852:	464b      	mov	r3, r9
 804c854:	f7f3 fd28 	bl	80402a8 <__aeabi_dsub>
 804c858:	4632      	mov	r2, r6
 804c85a:	463b      	mov	r3, r7
 804c85c:	f7f4 f962 	bl	8040b24 <__aeabi_dcmpge>
 804c860:	2800      	cmp	r0, #0
 804c862:	d1eb      	bne.n	804c83c <__ieee754_pow+0x9bc>
 804c864:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 804c904 <__ieee754_pow+0xa84>
 804c868:	e6f7      	b.n	804c65a <__ieee754_pow+0x7da>
 804c86a:	469a      	mov	sl, r3
 804c86c:	4b22      	ldr	r3, [pc, #136]	@ (804c8f8 <__ieee754_pow+0xa78>)
 804c86e:	459a      	cmp	sl, r3
 804c870:	f63f aef3 	bhi.w	804c65a <__ieee754_pow+0x7da>
 804c874:	f8dd a010 	ldr.w	sl, [sp, #16]
 804c878:	e715      	b.n	804c6a6 <__ieee754_pow+0x826>
 804c87a:	ec51 0b10 	vmov	r0, r1, d0
 804c87e:	4619      	mov	r1, r3
 804c880:	e7cf      	b.n	804c822 <__ieee754_pow+0x9a2>
 804c882:	491a      	ldr	r1, [pc, #104]	@ (804c8ec <__ieee754_pow+0xa6c>)
 804c884:	2000      	movs	r0, #0
 804c886:	f7ff bb18 	b.w	804beba <__ieee754_pow+0x3a>
 804c88a:	2000      	movs	r0, #0
 804c88c:	2100      	movs	r1, #0
 804c88e:	f7ff bb14 	b.w	804beba <__ieee754_pow+0x3a>
 804c892:	4630      	mov	r0, r6
 804c894:	4639      	mov	r1, r7
 804c896:	f7ff bb10 	b.w	804beba <__ieee754_pow+0x3a>
 804c89a:	460c      	mov	r4, r1
 804c89c:	f7ff bb5e 	b.w	804bf5c <__ieee754_pow+0xdc>
 804c8a0:	2400      	movs	r4, #0
 804c8a2:	f7ff bb49 	b.w	804bf38 <__ieee754_pow+0xb8>
 804c8a6:	bf00      	nop
 804c8a8:	00000000 	.word	0x00000000
 804c8ac:	3fe62e43 	.word	0x3fe62e43
 804c8b0:	fefa39ef 	.word	0xfefa39ef
 804c8b4:	3fe62e42 	.word	0x3fe62e42
 804c8b8:	0ca86c39 	.word	0x0ca86c39
 804c8bc:	be205c61 	.word	0xbe205c61
 804c8c0:	72bea4d0 	.word	0x72bea4d0
 804c8c4:	3e663769 	.word	0x3e663769
 804c8c8:	c5d26bf1 	.word	0xc5d26bf1
 804c8cc:	3ebbbd41 	.word	0x3ebbbd41
 804c8d0:	af25de2c 	.word	0xaf25de2c
 804c8d4:	3f11566a 	.word	0x3f11566a
 804c8d8:	16bebd93 	.word	0x16bebd93
 804c8dc:	3f66c16c 	.word	0x3f66c16c
 804c8e0:	5555553e 	.word	0x5555553e
 804c8e4:	3fc55555 	.word	0x3fc55555
 804c8e8:	fff00000 	.word	0xfff00000
 804c8ec:	3ff00000 	.word	0x3ff00000
 804c8f0:	4090cbff 	.word	0x4090cbff
 804c8f4:	3f6f3400 	.word	0x3f6f3400
 804c8f8:	3fe00000 	.word	0x3fe00000
 804c8fc:	652b82fe 	.word	0x652b82fe
 804c900:	3c971547 	.word	0x3c971547
 804c904:	4090cc00 	.word	0x4090cc00

0804c908 <fabs>:
 804c908:	ec51 0b10 	vmov	r0, r1, d0
 804c90c:	4602      	mov	r2, r0
 804c90e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 804c912:	ec43 2b10 	vmov	d0, r2, r3
 804c916:	4770      	bx	lr

0804c918 <scalbn>:
 804c918:	b570      	push	{r4, r5, r6, lr}
 804c91a:	ec55 4b10 	vmov	r4, r5, d0
 804c91e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 804c922:	4606      	mov	r6, r0
 804c924:	462b      	mov	r3, r5
 804c926:	b991      	cbnz	r1, 804c94e <scalbn+0x36>
 804c928:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 804c92c:	4323      	orrs	r3, r4
 804c92e:	d03d      	beq.n	804c9ac <scalbn+0x94>
 804c930:	4b35      	ldr	r3, [pc, #212]	@ (804ca08 <scalbn+0xf0>)
 804c932:	4620      	mov	r0, r4
 804c934:	4629      	mov	r1, r5
 804c936:	2200      	movs	r2, #0
 804c938:	f7f3 fe6e 	bl	8040618 <__aeabi_dmul>
 804c93c:	4b33      	ldr	r3, [pc, #204]	@ (804ca0c <scalbn+0xf4>)
 804c93e:	429e      	cmp	r6, r3
 804c940:	4604      	mov	r4, r0
 804c942:	460d      	mov	r5, r1
 804c944:	da0f      	bge.n	804c966 <scalbn+0x4e>
 804c946:	a328      	add	r3, pc, #160	@ (adr r3, 804c9e8 <scalbn+0xd0>)
 804c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c94c:	e01e      	b.n	804c98c <scalbn+0x74>
 804c94e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 804c952:	4291      	cmp	r1, r2
 804c954:	d10b      	bne.n	804c96e <scalbn+0x56>
 804c956:	4622      	mov	r2, r4
 804c958:	4620      	mov	r0, r4
 804c95a:	4629      	mov	r1, r5
 804c95c:	f7f3 fca6 	bl	80402ac <__adddf3>
 804c960:	4604      	mov	r4, r0
 804c962:	460d      	mov	r5, r1
 804c964:	e022      	b.n	804c9ac <scalbn+0x94>
 804c966:	460b      	mov	r3, r1
 804c968:	f3c1 510a 	ubfx	r1, r1, #20, #11
 804c96c:	3936      	subs	r1, #54	@ 0x36
 804c96e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 804c972:	4296      	cmp	r6, r2
 804c974:	dd0d      	ble.n	804c992 <scalbn+0x7a>
 804c976:	2d00      	cmp	r5, #0
 804c978:	a11d      	add	r1, pc, #116	@ (adr r1, 804c9f0 <scalbn+0xd8>)
 804c97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 804c97e:	da02      	bge.n	804c986 <scalbn+0x6e>
 804c980:	a11d      	add	r1, pc, #116	@ (adr r1, 804c9f8 <scalbn+0xe0>)
 804c982:	e9d1 0100 	ldrd	r0, r1, [r1]
 804c986:	a31a      	add	r3, pc, #104	@ (adr r3, 804c9f0 <scalbn+0xd8>)
 804c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c98c:	f7f3 fe44 	bl	8040618 <__aeabi_dmul>
 804c990:	e7e6      	b.n	804c960 <scalbn+0x48>
 804c992:	1872      	adds	r2, r6, r1
 804c994:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 804c998:	428a      	cmp	r2, r1
 804c99a:	dcec      	bgt.n	804c976 <scalbn+0x5e>
 804c99c:	2a00      	cmp	r2, #0
 804c99e:	dd08      	ble.n	804c9b2 <scalbn+0x9a>
 804c9a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 804c9a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 804c9a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804c9ac:	ec45 4b10 	vmov	d0, r4, r5
 804c9b0:	bd70      	pop	{r4, r5, r6, pc}
 804c9b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 804c9b6:	da08      	bge.n	804c9ca <scalbn+0xb2>
 804c9b8:	2d00      	cmp	r5, #0
 804c9ba:	a10b      	add	r1, pc, #44	@ (adr r1, 804c9e8 <scalbn+0xd0>)
 804c9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 804c9c0:	dac1      	bge.n	804c946 <scalbn+0x2e>
 804c9c2:	a10f      	add	r1, pc, #60	@ (adr r1, 804ca00 <scalbn+0xe8>)
 804c9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 804c9c8:	e7bd      	b.n	804c946 <scalbn+0x2e>
 804c9ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 804c9ce:	3236      	adds	r2, #54	@ 0x36
 804c9d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 804c9d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804c9d8:	4620      	mov	r0, r4
 804c9da:	4b0d      	ldr	r3, [pc, #52]	@ (804ca10 <scalbn+0xf8>)
 804c9dc:	4629      	mov	r1, r5
 804c9de:	2200      	movs	r2, #0
 804c9e0:	e7d4      	b.n	804c98c <scalbn+0x74>
 804c9e2:	bf00      	nop
 804c9e4:	f3af 8000 	nop.w
 804c9e8:	c2f8f359 	.word	0xc2f8f359
 804c9ec:	01a56e1f 	.word	0x01a56e1f
 804c9f0:	8800759c 	.word	0x8800759c
 804c9f4:	7e37e43c 	.word	0x7e37e43c
 804c9f8:	8800759c 	.word	0x8800759c
 804c9fc:	fe37e43c 	.word	0xfe37e43c
 804ca00:	c2f8f359 	.word	0xc2f8f359
 804ca04:	81a56e1f 	.word	0x81a56e1f
 804ca08:	43500000 	.word	0x43500000
 804ca0c:	ffff3cb0 	.word	0xffff3cb0
 804ca10:	3c900000 	.word	0x3c900000

0804ca14 <with_errno>:
 804ca14:	b510      	push	{r4, lr}
 804ca16:	ed2d 8b02 	vpush	{d8}
 804ca1a:	eeb0 8a40 	vmov.f32	s16, s0
 804ca1e:	eef0 8a60 	vmov.f32	s17, s1
 804ca22:	4604      	mov	r4, r0
 804ca24:	f7fd f936 	bl	8049c94 <__errno>
 804ca28:	eeb0 0a48 	vmov.f32	s0, s16
 804ca2c:	eef0 0a68 	vmov.f32	s1, s17
 804ca30:	ecbd 8b02 	vpop	{d8}
 804ca34:	6004      	str	r4, [r0, #0]
 804ca36:	bd10      	pop	{r4, pc}

0804ca38 <xflow>:
 804ca38:	4603      	mov	r3, r0
 804ca3a:	b507      	push	{r0, r1, r2, lr}
 804ca3c:	ec51 0b10 	vmov	r0, r1, d0
 804ca40:	b183      	cbz	r3, 804ca64 <xflow+0x2c>
 804ca42:	4602      	mov	r2, r0
 804ca44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 804ca48:	e9cd 2300 	strd	r2, r3, [sp]
 804ca4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 804ca50:	f7f3 fde2 	bl	8040618 <__aeabi_dmul>
 804ca54:	ec41 0b10 	vmov	d0, r0, r1
 804ca58:	2022      	movs	r0, #34	@ 0x22
 804ca5a:	b003      	add	sp, #12
 804ca5c:	f85d eb04 	ldr.w	lr, [sp], #4
 804ca60:	f7ff bfd8 	b.w	804ca14 <with_errno>
 804ca64:	4602      	mov	r2, r0
 804ca66:	460b      	mov	r3, r1
 804ca68:	e7ee      	b.n	804ca48 <xflow+0x10>
 804ca6a:	0000      	movs	r0, r0
 804ca6c:	0000      	movs	r0, r0
	...

0804ca70 <__math_uflow>:
 804ca70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 804ca78 <__math_uflow+0x8>
 804ca74:	f7ff bfe0 	b.w	804ca38 <xflow>
 804ca78:	00000000 	.word	0x00000000
 804ca7c:	10000000 	.word	0x10000000

0804ca80 <__math_oflow>:
 804ca80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 804ca88 <__math_oflow+0x8>
 804ca84:	f7ff bfd8 	b.w	804ca38 <xflow>
 804ca88:	00000000 	.word	0x00000000
 804ca8c:	70000000 	.word	0x70000000

0804ca90 <__ieee754_sqrt>:
 804ca90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ca94:	4a68      	ldr	r2, [pc, #416]	@ (804cc38 <__ieee754_sqrt+0x1a8>)
 804ca96:	ec55 4b10 	vmov	r4, r5, d0
 804ca9a:	43aa      	bics	r2, r5
 804ca9c:	462b      	mov	r3, r5
 804ca9e:	4621      	mov	r1, r4
 804caa0:	d110      	bne.n	804cac4 <__ieee754_sqrt+0x34>
 804caa2:	4622      	mov	r2, r4
 804caa4:	4620      	mov	r0, r4
 804caa6:	4629      	mov	r1, r5
 804caa8:	f7f3 fdb6 	bl	8040618 <__aeabi_dmul>
 804caac:	4602      	mov	r2, r0
 804caae:	460b      	mov	r3, r1
 804cab0:	4620      	mov	r0, r4
 804cab2:	4629      	mov	r1, r5
 804cab4:	f7f3 fbfa 	bl	80402ac <__adddf3>
 804cab8:	4604      	mov	r4, r0
 804caba:	460d      	mov	r5, r1
 804cabc:	ec45 4b10 	vmov	d0, r4, r5
 804cac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804cac4:	2d00      	cmp	r5, #0
 804cac6:	dc0e      	bgt.n	804cae6 <__ieee754_sqrt+0x56>
 804cac8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 804cacc:	4322      	orrs	r2, r4
 804cace:	d0f5      	beq.n	804cabc <__ieee754_sqrt+0x2c>
 804cad0:	b19d      	cbz	r5, 804cafa <__ieee754_sqrt+0x6a>
 804cad2:	4622      	mov	r2, r4
 804cad4:	4620      	mov	r0, r4
 804cad6:	4629      	mov	r1, r5
 804cad8:	f7f3 fbe6 	bl	80402a8 <__aeabi_dsub>
 804cadc:	4602      	mov	r2, r0
 804cade:	460b      	mov	r3, r1
 804cae0:	f7f3 fec4 	bl	804086c <__aeabi_ddiv>
 804cae4:	e7e8      	b.n	804cab8 <__ieee754_sqrt+0x28>
 804cae6:	152a      	asrs	r2, r5, #20
 804cae8:	d115      	bne.n	804cb16 <__ieee754_sqrt+0x86>
 804caea:	2000      	movs	r0, #0
 804caec:	e009      	b.n	804cb02 <__ieee754_sqrt+0x72>
 804caee:	0acb      	lsrs	r3, r1, #11
 804caf0:	3a15      	subs	r2, #21
 804caf2:	0549      	lsls	r1, r1, #21
 804caf4:	2b00      	cmp	r3, #0
 804caf6:	d0fa      	beq.n	804caee <__ieee754_sqrt+0x5e>
 804caf8:	e7f7      	b.n	804caea <__ieee754_sqrt+0x5a>
 804cafa:	462a      	mov	r2, r5
 804cafc:	e7fa      	b.n	804caf4 <__ieee754_sqrt+0x64>
 804cafe:	005b      	lsls	r3, r3, #1
 804cb00:	3001      	adds	r0, #1
 804cb02:	02dc      	lsls	r4, r3, #11
 804cb04:	d5fb      	bpl.n	804cafe <__ieee754_sqrt+0x6e>
 804cb06:	1e44      	subs	r4, r0, #1
 804cb08:	1b12      	subs	r2, r2, r4
 804cb0a:	f1c0 0420 	rsb	r4, r0, #32
 804cb0e:	fa21 f404 	lsr.w	r4, r1, r4
 804cb12:	4323      	orrs	r3, r4
 804cb14:	4081      	lsls	r1, r0
 804cb16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 804cb1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 804cb1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 804cb22:	07d2      	lsls	r2, r2, #31
 804cb24:	bf5c      	itt	pl
 804cb26:	005b      	lslpl	r3, r3, #1
 804cb28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 804cb2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804cb30:	bf58      	it	pl
 804cb32:	0049      	lslpl	r1, r1, #1
 804cb34:	2600      	movs	r6, #0
 804cb36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 804cb3a:	106d      	asrs	r5, r5, #1
 804cb3c:	0049      	lsls	r1, r1, #1
 804cb3e:	2016      	movs	r0, #22
 804cb40:	4632      	mov	r2, r6
 804cb42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 804cb46:	1917      	adds	r7, r2, r4
 804cb48:	429f      	cmp	r7, r3
 804cb4a:	bfde      	ittt	le
 804cb4c:	193a      	addle	r2, r7, r4
 804cb4e:	1bdb      	suble	r3, r3, r7
 804cb50:	1936      	addle	r6, r6, r4
 804cb52:	0fcf      	lsrs	r7, r1, #31
 804cb54:	3801      	subs	r0, #1
 804cb56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 804cb5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 804cb5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 804cb62:	d1f0      	bne.n	804cb46 <__ieee754_sqrt+0xb6>
 804cb64:	4604      	mov	r4, r0
 804cb66:	2720      	movs	r7, #32
 804cb68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 804cb6c:	429a      	cmp	r2, r3
 804cb6e:	eb00 0e0c 	add.w	lr, r0, ip
 804cb72:	db02      	blt.n	804cb7a <__ieee754_sqrt+0xea>
 804cb74:	d113      	bne.n	804cb9e <__ieee754_sqrt+0x10e>
 804cb76:	458e      	cmp	lr, r1
 804cb78:	d811      	bhi.n	804cb9e <__ieee754_sqrt+0x10e>
 804cb7a:	f1be 0f00 	cmp.w	lr, #0
 804cb7e:	eb0e 000c 	add.w	r0, lr, ip
 804cb82:	da42      	bge.n	804cc0a <__ieee754_sqrt+0x17a>
 804cb84:	2800      	cmp	r0, #0
 804cb86:	db40      	blt.n	804cc0a <__ieee754_sqrt+0x17a>
 804cb88:	f102 0801 	add.w	r8, r2, #1
 804cb8c:	1a9b      	subs	r3, r3, r2
 804cb8e:	458e      	cmp	lr, r1
 804cb90:	bf88      	it	hi
 804cb92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 804cb96:	eba1 010e 	sub.w	r1, r1, lr
 804cb9a:	4464      	add	r4, ip
 804cb9c:	4642      	mov	r2, r8
 804cb9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 804cba2:	3f01      	subs	r7, #1
 804cba4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 804cba8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 804cbac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 804cbb0:	d1dc      	bne.n	804cb6c <__ieee754_sqrt+0xdc>
 804cbb2:	4319      	orrs	r1, r3
 804cbb4:	d01b      	beq.n	804cbee <__ieee754_sqrt+0x15e>
 804cbb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 804cc3c <__ieee754_sqrt+0x1ac>
 804cbba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 804cc40 <__ieee754_sqrt+0x1b0>
 804cbbe:	e9da 0100 	ldrd	r0, r1, [sl]
 804cbc2:	e9db 2300 	ldrd	r2, r3, [fp]
 804cbc6:	f7f3 fb6f 	bl	80402a8 <__aeabi_dsub>
 804cbca:	e9da 8900 	ldrd	r8, r9, [sl]
 804cbce:	4602      	mov	r2, r0
 804cbd0:	460b      	mov	r3, r1
 804cbd2:	4640      	mov	r0, r8
 804cbd4:	4649      	mov	r1, r9
 804cbd6:	f7f3 ff9b 	bl	8040b10 <__aeabi_dcmple>
 804cbda:	b140      	cbz	r0, 804cbee <__ieee754_sqrt+0x15e>
 804cbdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 804cbe0:	e9da 0100 	ldrd	r0, r1, [sl]
 804cbe4:	e9db 2300 	ldrd	r2, r3, [fp]
 804cbe8:	d111      	bne.n	804cc0e <__ieee754_sqrt+0x17e>
 804cbea:	3601      	adds	r6, #1
 804cbec:	463c      	mov	r4, r7
 804cbee:	1072      	asrs	r2, r6, #1
 804cbf0:	0863      	lsrs	r3, r4, #1
 804cbf2:	07f1      	lsls	r1, r6, #31
 804cbf4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 804cbf8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 804cbfc:	bf48      	it	mi
 804cbfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 804cc02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 804cc06:	4618      	mov	r0, r3
 804cc08:	e756      	b.n	804cab8 <__ieee754_sqrt+0x28>
 804cc0a:	4690      	mov	r8, r2
 804cc0c:	e7be      	b.n	804cb8c <__ieee754_sqrt+0xfc>
 804cc0e:	f7f3 fb4d 	bl	80402ac <__adddf3>
 804cc12:	e9da 8900 	ldrd	r8, r9, [sl]
 804cc16:	4602      	mov	r2, r0
 804cc18:	460b      	mov	r3, r1
 804cc1a:	4640      	mov	r0, r8
 804cc1c:	4649      	mov	r1, r9
 804cc1e:	f7f3 ff6d 	bl	8040afc <__aeabi_dcmplt>
 804cc22:	b120      	cbz	r0, 804cc2e <__ieee754_sqrt+0x19e>
 804cc24:	1ca0      	adds	r0, r4, #2
 804cc26:	bf08      	it	eq
 804cc28:	3601      	addeq	r6, #1
 804cc2a:	3402      	adds	r4, #2
 804cc2c:	e7df      	b.n	804cbee <__ieee754_sqrt+0x15e>
 804cc2e:	1c63      	adds	r3, r4, #1
 804cc30:	f023 0401 	bic.w	r4, r3, #1
 804cc34:	e7db      	b.n	804cbee <__ieee754_sqrt+0x15e>
 804cc36:	bf00      	nop
 804cc38:	7ff00000 	.word	0x7ff00000
 804cc3c:	200001e8 	.word	0x200001e8
 804cc40:	200001e0 	.word	0x200001e0

0804cc44 <_sbrk>:
 804cc44:	4a04      	ldr	r2, [pc, #16]	@ (804cc58 <_sbrk+0x14>)
 804cc46:	6811      	ldr	r1, [r2, #0]
 804cc48:	4603      	mov	r3, r0
 804cc4a:	b909      	cbnz	r1, 804cc50 <_sbrk+0xc>
 804cc4c:	4903      	ldr	r1, [pc, #12]	@ (804cc5c <_sbrk+0x18>)
 804cc4e:	6011      	str	r1, [r2, #0]
 804cc50:	6810      	ldr	r0, [r2, #0]
 804cc52:	4403      	add	r3, r0
 804cc54:	6013      	str	r3, [r2, #0]
 804cc56:	4770      	bx	lr
 804cc58:	200132bc 	.word	0x200132bc
 804cc5c:	200132c0 	.word	0x200132c0

0804cc60 <_init>:
 804cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cc62:	bf00      	nop
 804cc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804cc66:	bc08      	pop	{r3}
 804cc68:	469e      	mov	lr, r3
 804cc6a:	4770      	bx	lr

0804cc6c <_fini>:
 804cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cc6e:	bf00      	nop
 804cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804cc72:	bc08      	pop	{r3}
 804cc74:	469e      	mov	lr, r3
 804cc76:	4770      	bx	lr
